
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000a9e  00000b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080013e  0080013e  00000b70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f04  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000976  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000084a  00000000  00000000  0000256e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000516  00000000  00000000  0000346f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003985  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e3       	ldi	r26, 0x3E	; 62
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 33       	cpi	r26, 0x3F	; 63
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 29 01 	call	0x252	; 0x252 <main>
  9e:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_cmd>:

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
	LCD_cmd(0x80); // Posiciona no início
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	9c 2f       	mov	r25, r28
  b0:	92 95       	swap	r25
  b2:	9f 70       	andi	r25, 0x0F	; 15
  b4:	89 2b       	or	r24, r25
  b6:	88 b9       	out	0x08, r24	; 8
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	8f 7d       	andi	r24, 0xDF	; 223
  bc:	88 b9       	out	0x08, r24	; 8
  be:	88 b1       	in	r24, 0x08	; 8
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	88 b9       	out	0x08, r24	; 8
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	8f 7e       	andi	r24, 0xEF	; 239
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	84 e6       	ldi	r24, 0x64	; 100
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 3c 02 	call	0x478	; 0x478 <delay1us>
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	cf 70       	andi	r28, 0x0F	; 15
  d8:	c8 2b       	or	r28, r24
  da:	c8 b9       	out	0x08, r28	; 8
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	88 b9       	out	0x08, r24	; 8
  e2:	88 b1       	in	r24, 0x08	; 8
  e4:	8f 7e       	andi	r24, 0xEF	; 239
  e6:	88 b9       	out	0x08, r24	; 8
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 24 02 	call	0x448	; 0x448 <delay1ms>
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LCD_iniciar>:
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	87 b9       	out	0x07, r24	; 7
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 24 02 	call	0x448	; 0x448 <delay1ms>
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_cmd>
 106:	88 e2       	ldi	r24, 0x28	; 40
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_cmd>
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_cmd>
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_cmd>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_cmd>
 11e:	08 95       	ret

00000120 <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
	while(*texto) {
 126:	23 c0       	rjmp	.+70     	; 0x16e <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
 128:	98 b1       	in	r25, 0x08	; 8
 12a:	90 7f       	andi	r25, 0xF0	; 240
 12c:	82 95       	swap	r24
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	89 2b       	or	r24, r25
 132:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
 134:	88 b1       	in	r24, 0x08	; 8
 136:	80 62       	ori	r24, 0x20	; 32
 138:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 13a:	88 b1       	in	r24, 0x08	; 8
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 140:	88 b1       	in	r24, 0x08	; 8
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
 146:	88 ec       	ldi	r24, 0xC8	; 200
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 3c 02 	call	0x478	; 0x478 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
 14e:	98 b1       	in	r25, 0x08	; 8
 150:	89 91       	ld	r24, Y+
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	8f 70       	andi	r24, 0x0F	; 15
 156:	89 2b       	or	r24, r25
 158:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 160:	88 b1       	in	r24, 0x08	; 8
 162:	8f 7e       	andi	r24, 0xEF	; 239
 164:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 24 02 	call	0x448	; 0x448 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
 16e:	88 81       	ld	r24, Y
 170:	81 11       	cpse	r24, r1
 172:	da cf       	rjmp	.-76     	; 0x128 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
 180:	81 11       	cpse	r24, r1
 182:	08 c0       	rjmp	.+16     	; 0x194 <LCD_Escrever_Linha+0x1a>
 184:	60 31       	cpi	r22, 0x10	; 16
 186:	30 f4       	brcc	.+12     	; 0x194 <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
 188:	86 2f       	mov	r24, r22
 18a:	8f 70       	andi	r24, 0x0F	; 15
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_cmd>
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	39 f4       	brne	.+14     	; 0x1a6 <LCD_Escrever_Linha+0x2c>
 198:	60 31       	cpi	r22, 0x10	; 16
 19a:	28 f4       	brcc	.+10     	; 0x1a6 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
 19c:	86 2f       	mov	r24, r22
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	80 6c       	ori	r24, 0xC0	; 192
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
 1a6:	ce 01       	movw	r24, r28
 1a8:	0e 94 90 00 	call	0x120	; 0x120 <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_cmd>
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <__vector_11>:
// Variáveis globais
volatile uint8_t timer_flag = 0;
char display_buffer[17] = "Tecla:           "; // Buffer para o LCD

// ISR para o Timer1 (1Hz)
ISR(TIMER1_COMPA_vect) {
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	8f 93       	push	r24
	timer_flag = 1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
}
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <configurar_timers>:

// Função para configurar os timers
void configurar_timers() {
	timer1hz();  // Configura Timer1 para 1Hz (para uso futuro)
 1d6:	0e 94 0f 02 	call	0x41e	; 0x41e <timer1hz>
	sei();       // Habilita interrupções globais
 1da:	78 94       	sei
 1dc:	08 95       	ret

000001de <atualizar_display>:
}

// Função para atualizar o display
void atualizar_display(char tecla) {
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	61 97       	sbiw	r28, 0x11	; 17
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
 1f6:	18 2f       	mov	r17, r24
	display_buffer[7] = tecla; // Posição onde aparece a tecla
 1f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
	
	// Mostra a tecla na primeira linha
	LCD_Escrever_Linha(0, 0, display_buffer);
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	51 e0       	ldi	r21, 0x01	; 1
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_Escrever_Linha>
	
	// Mostra o código ASCII na segunda linha
	char ascii_buffer[17];
	snprintf(ascii_buffer, sizeof(ascii_buffer), "ASCII: %3d   ", tecla);
 208:	1f 92       	push	r1
 20a:	1f 93       	push	r17
 20c:	81 e1       	ldi	r24, 0x11	; 17
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	9f 93       	push	r25
 212:	8f 93       	push	r24
 214:	1f 92       	push	r1
 216:	81 e1       	ldi	r24, 0x11	; 17
 218:	8f 93       	push	r24
 21a:	8e 01       	movw	r16, r28
 21c:	0f 5f       	subi	r16, 0xFF	; 255
 21e:	1f 4f       	sbci	r17, 0xFF	; 255
 220:	1f 93       	push	r17
 222:	0f 93       	push	r16
 224:	0e 94 55 02 	call	0x4aa	; 0x4aa <snprintf>
	LCD_Escrever_Linha(1, 0, ascii_buffer);
 228:	a8 01       	movw	r20, r16
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_Escrever_Linha>
}
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	61 96       	adiw	r28, 0x11	; 17
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	08 95       	ret

00000252 <main>:

int main(void) {
	// Inicializações
	LCD_iniciar();
 252:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_iniciar>
	prepara_teclado();
 256:	0e 94 5f 01 	call	0x2be	; 0x2be <prepara_teclado>
	configurar_timers();
 25a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <configurar_timers>
	
	// Mensagem inicial
	LCD_Escrever_Linha(0, 0, "Teclado Ativo! ");
 25e:	4f e1       	ldi	r20, 0x1F	; 31
 260:	51 e0       	ldi	r21, 0x01	; 1
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "Pressione algo");
 26a:	4f e2       	ldi	r20, 0x2F	; 47
 26c:	51 e0       	ldi	r21, 0x01	; 1
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_Escrever_Linha>
	delay1ms(2000); // Mostra a mensagem por 2 segundos
 276:	80 ed       	ldi	r24, 0xD0	; 208
 278:	97 e0       	ldi	r25, 0x07	; 7
 27a:	0e 94 24 02 	call	0x448	; 0x448 <delay1ms>
	
	char tecla_atual = 0;
	char tecla_anterior = 0;
 27e:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1) {
		// Verifica se uma tecla foi pressionada
		tecla_atual = varredura();
 280:	0e 94 a3 01 	call	0x346	; 0x346 <varredura>
 284:	c8 2f       	mov	r28, r24
		
		// Se uma tecla válida foi pressionada e é diferente da anterior
		if(tecla_atual != 0 && tecla_atual != tecla_anterior) {
 286:	88 23       	and	r24, r24
 288:	29 f0       	breq	.+10     	; 0x294 <main+0x42>
 28a:	d8 17       	cp	r29, r24
 28c:	19 f0       	breq	.+6      	; 0x294 <main+0x42>
			tecla_anterior = tecla_atual;
			atualizar_display(tecla_atual);
 28e:	0e 94 ef 00 	call	0x1de	; 0x1de <atualizar_display>
		// Verifica se uma tecla foi pressionada
		tecla_atual = varredura();
		
		// Se uma tecla válida foi pressionada e é diferente da anterior
		if(tecla_atual != 0 && tecla_atual != tecla_anterior) {
			tecla_anterior = tecla_atual;
 292:	dc 2f       	mov	r29, r28
			atualizar_display(tecla_atual);
		}
		
		// Verifica se passou 1 segundo (usando a flag da ISR)
		if(timer_flag) {
 294:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 298:	88 23       	and	r24, r24
 29a:	61 f0       	breq	.+24     	; 0x2b4 <main+0x62>
			timer_flag = 0;
 29c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
			// Pisca o cursor (opcional)
			LCD_cmd(0x0F); // Liga cursor
 2a0:	8f e0       	ldi	r24, 0x0F	; 15
 2a2:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_cmd>
			delay1ms(100);
 2a6:	84 e6       	ldi	r24, 0x64	; 100
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 24 02 	call	0x448	; 0x448 <delay1ms>
			LCD_cmd(0x0C); // Desliga cursor
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_cmd>
		}
		
		// Pequeno delay para debounce usando a função da biblioteca
		delay1ms(50);
 2b4:	82 e3       	ldi	r24, 0x32	; 50
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 24 02 	call	0x448	; 0x448 <delay1ms>
	}
 2bc:	e1 cf       	rjmp	.-62     	; 0x280 <main+0x2e>

000002be <prepara_teclado>:
#define COL3 PD3    // Coluna 3 no PD3

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
 2be:	84 b1       	in	r24, 0x04	; 4
 2c0:	83 60       	ori	r24, 0x03	; 3
 2c2:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
 2c4:	8a b1       	in	r24, 0x0a	; 10
 2c6:	80 6c       	ori	r24, 0xC0	; 192
 2c8:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3)); // PD5, PD4 e PD3 como entradas
 2ca:	8a b1       	in	r24, 0x0a	; 10
 2cc:	87 7c       	andi	r24, 0xC7	; 199
 2ce:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3);   // Habilitar resistores de Pull-up
 2d0:	8b b1       	in	r24, 0x0b	; 11
 2d2:	88 63       	ori	r24, 0x38	; 56
 2d4:	8b b9       	out	0x0b, r24	; 11
 2d6:	08 95       	ret

000002d8 <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	00 d0       	rcall	.+0      	; 0x2de <atraso_debounce+0x6>
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
 2e2:	1a 82       	std	Y+2, r1	; 0x02
 2e4:	19 82       	std	Y+1, r1	; 0x01
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <atraso_debounce+0x1a>
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	9a 81       	ldd	r25, Y+2	; 0x02
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	9a 83       	std	Y+2, r25	; 0x02
 2f0:	89 83       	std	Y+1, r24	; 0x01
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	9a 81       	ldd	r25, Y+2	; 0x02
 2f6:	88 3e       	cpi	r24, 0xE8	; 232
 2f8:	93 40       	sbci	r25, 0x03	; 3
 2fa:	b0 f3       	brcs	.-20     	; 0x2e8 <atraso_debounce+0x10>
}
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
 30e:	c0 e0       	ldi	r28, 0x00	; 0
 310:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 312:	12 c0       	rjmp	.+36     	; 0x338 <debounce+0x32>
        atraso_debounce();
 314:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
 318:	29 b1       	in	r18, 0x09	; 9
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	01 2e       	mov	r0, r17
 320:	02 c0       	rjmp	.+4      	; 0x326 <debounce+0x20>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	0a 94       	dec	r0
 328:	e2 f7       	brpl	.-8      	; 0x322 <debounce+0x1c>
 32a:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
 32c:	d8 13       	cpse	r29, r24
 32e:	02 c0       	rjmp	.+4      	; 0x334 <debounce+0x2e>
            counter++;
 330:	cf 5f       	subi	r28, 0xFF	; 255
 332:	01 c0       	rjmp	.+2      	; 0x336 <debounce+0x30>
        } else {
            counter = 0;
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 338:	c7 30       	cpi	r28, 0x07	; 7
 33a:	61 f7       	brne	.-40     	; 0x314 <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
 33c:	8d 2f       	mov	r24, r29
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	08 95       	ret

00000346 <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
 346:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
 348:	85 b1       	in	r24, 0x05	; 5
 34a:	83 60       	ori	r24, 0x03	; 3
 34c:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
 34e:	8b b1       	in	r24, 0x0b	; 11
 350:	80 6c       	ori	r24, 0xC0	; 192
 352:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
 354:	85 b1       	in	r24, 0x05	; 5
 356:	8d 7f       	andi	r24, 0xFD	; 253
 358:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 360:	88 23       	and	r24, r24
 362:	11 f0       	breq	.+4      	; 0x368 <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	01 c0       	rjmp	.+2      	; 0x36a <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 368:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
 36a:	84 e0       	ldi	r24, 0x04	; 4
 36c:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 370:	81 11       	cpse	r24, r1
 372:	01 c0       	rjmp	.+2      	; 0x376 <varredura+0x30>
 374:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 37c:	81 11       	cpse	r24, r1
 37e:	01 c0       	rjmp	.+2      	; 0x382 <varredura+0x3c>
 380:	c3 e3       	ldi	r28, 0x33	; 51
    PORTB |= (1 << LIN1); // Desativa LIN1
 382:	85 b1       	in	r24, 0x05	; 5
 384:	82 60       	ori	r24, 0x02	; 2
 386:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
 388:	85 b1       	in	r24, 0x05	; 5
 38a:	8e 7f       	andi	r24, 0xFE	; 254
 38c:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 394:	81 11       	cpse	r24, r1
 396:	01 c0       	rjmp	.+2      	; 0x39a <varredura+0x54>
 398:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 3a0:	81 11       	cpse	r24, r1
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <varredura+0x60>
 3a4:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 3ac:	81 11       	cpse	r24, r1
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <varredura+0x6c>
 3b0:	c6 e3       	ldi	r28, 0x36	; 54
    PORTB |= (1 << LIN2); // Desativa LIN2
 3b2:	85 b1       	in	r24, 0x05	; 5
 3b4:	81 60       	ori	r24, 0x01	; 1
 3b6:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
 3b8:	8b b1       	in	r24, 0x0b	; 11
 3ba:	8f 77       	andi	r24, 0x7F	; 127
 3bc:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
 3be:	85 e0       	ldi	r24, 0x05	; 5
 3c0:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 3c4:	81 11       	cpse	r24, r1
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <varredura+0x84>
 3c8:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
 3ca:	84 e0       	ldi	r24, 0x04	; 4
 3cc:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 3d0:	81 11       	cpse	r24, r1
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <varredura+0x90>
 3d4:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 3dc:	81 11       	cpse	r24, r1
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <varredura+0x9c>
 3e0:	c9 e3       	ldi	r28, 0x39	; 57
    PORTD |= (1 << LIN3); // Desativa LIN3
 3e2:	8b b1       	in	r24, 0x0b	; 11
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
 3e8:	8b b1       	in	r24, 0x0b	; 11
 3ea:	8f 7b       	andi	r24, 0xBF	; 191
 3ec:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 3f4:	81 11       	cpse	r24, r1
 3f6:	01 c0       	rjmp	.+2      	; 0x3fa <varredura+0xb4>
 3f8:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
 3fa:	84 e0       	ldi	r24, 0x04	; 4
 3fc:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 400:	81 11       	cpse	r24, r1
 402:	01 c0       	rjmp	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	0e 94 83 01 	call	0x306	; 0x306 <debounce>
 40c:	81 11       	cpse	r24, r1
 40e:	01 c0       	rjmp	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	c3 e2       	ldi	r28, 0x23	; 35
    PORTD |= (1 << LIN4); // Desativa LIN4
 412:	8b b1       	in	r24, 0x0b	; 11
 414:	80 64       	ori	r24, 0x40	; 64
 416:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
 418:	8c 2f       	mov	r24, r28
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <timer1hz>:
void timer2hz(){ /// timer de 0,5 segundos (2hz) com timer2, conta até no máx 255(8 bits) para gerar 2hz é necessário colocar contador na interrupção
	TCCR2A = 0b00000000;
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
 41e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 422:	8d e0       	ldi	r24, 0x0D	; 13
 424:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 428:	ef e6       	ldi	r30, 0x6F	; 111
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	80 83       	st	Z, r24
 432:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 436:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 43a:	84 e7       	ldi	r24, 0x74	; 116
 43c:	90 e4       	ldi	r25, 0x40	; 64
 43e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 442:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 446:	08 95       	ret

00000448 <delay1ms>:
}
void delay1ms(int m){ // delay de t milisegundos
 448:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
 44a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 450:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
 454:	81 ef       	ldi	r24, 0xF1	; 241
 456:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	08 c0       	rjmp	.+16     	; 0x46e <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 45e:	a9 9b       	sbis	0x15, 1	; 21
 460:	fe cf       	rjmp	.-4      	; 0x45e <delay1ms+0x16>
		TCNT0 = 241;
 462:	91 ef       	ldi	r25, 0xF1	; 241
 464:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
 466:	92 e0       	ldi	r25, 0x02	; 2
 468:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
 46a:	2f 5f       	subi	r18, 0xFF	; 255
 46c:	3f 4f       	sbci	r19, 0xFF	; 255
 46e:	24 17       	cp	r18, r20
 470:	35 07       	cpc	r19, r21
 472:	ac f3       	brlt	.-22     	; 0x45e <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 474:	15 bc       	out	0x25, r1	; 37
 476:	08 95       	ret

00000478 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
 478:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
 47a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 480:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
 484:	85 ef       	ldi	r24, 0xF5	; 245
 486:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	09 c0       	rjmp	.+18     	; 0x4a0 <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 48e:	a9 9b       	sbis	0x15, 1	; 21
 490:	fe cf       	rjmp	.-4      	; 0x48e <delay1us+0x16>
		TCNT0 = 245;
 492:	95 ef       	ldi	r25, 0xF5	; 245
 494:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
 496:	95 b3       	in	r25, 0x15	; 21
 498:	92 60       	ori	r25, 0x02	; 2
 49a:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
 49c:	2f 5f       	subi	r18, 0xFF	; 255
 49e:	3f 4f       	sbci	r19, 0xFF	; 255
 4a0:	24 17       	cp	r18, r20
 4a2:	35 07       	cpc	r19, r21
 4a4:	a4 f3       	brlt	.-24     	; 0x48e <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 4a6:	15 bc       	out	0x25, r1	; 37
 4a8:	08 95       	ret

000004aa <snprintf>:
 4aa:	ae e0       	ldi	r26, 0x0E	; 14
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	eb e5       	ldi	r30, 0x5B	; 91
 4b0:	f2 e0       	ldi	r31, 0x02	; 2
 4b2:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__prologue_saves__+0x1c>
 4b6:	0d 89       	ldd	r16, Y+21	; 0x15
 4b8:	1e 89       	ldd	r17, Y+22	; 0x16
 4ba:	8f 89       	ldd	r24, Y+23	; 0x17
 4bc:	98 8d       	ldd	r25, Y+24	; 0x18
 4be:	26 e0       	ldi	r18, 0x06	; 6
 4c0:	2c 83       	std	Y+4, r18	; 0x04
 4c2:	1a 83       	std	Y+2, r17	; 0x02
 4c4:	09 83       	std	Y+1, r16	; 0x01
 4c6:	97 ff       	sbrs	r25, 7
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <snprintf+0x24>
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e8       	ldi	r25, 0x80	; 128
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	9e 83       	std	Y+6, r25	; 0x06
 4d2:	8d 83       	std	Y+5, r24	; 0x05
 4d4:	ae 01       	movw	r20, r28
 4d6:	45 5e       	subi	r20, 0xE5	; 229
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	69 8d       	ldd	r22, Y+25	; 0x19
 4dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
 4de:	ce 01       	movw	r24, r28
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	0e 94 85 02 	call	0x50a	; 0x50a <vfprintf>
 4e6:	4d 81       	ldd	r20, Y+5	; 0x05
 4e8:	5e 81       	ldd	r21, Y+6	; 0x06
 4ea:	57 fd       	sbrc	r21, 7
 4ec:	0a c0       	rjmp	.+20     	; 0x502 <snprintf+0x58>
 4ee:	2f 81       	ldd	r18, Y+7	; 0x07
 4f0:	38 85       	ldd	r19, Y+8	; 0x08
 4f2:	42 17       	cp	r20, r18
 4f4:	53 07       	cpc	r21, r19
 4f6:	0c f4       	brge	.+2      	; 0x4fa <snprintf+0x50>
 4f8:	9a 01       	movw	r18, r20
 4fa:	f8 01       	movw	r30, r16
 4fc:	e2 0f       	add	r30, r18
 4fe:	f3 1f       	adc	r31, r19
 500:	10 82       	st	Z, r1
 502:	2e 96       	adiw	r28, 0x0e	; 14
 504:	e4 e0       	ldi	r30, 0x04	; 4
 506:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__epilogue_restores__+0x1c>

0000050a <vfprintf>:
 50a:	ab e0       	ldi	r26, 0x0B	; 11
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	eb e8       	ldi	r30, 0x8B	; 139
 510:	f2 e0       	ldi	r31, 0x02	; 2
 512:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__prologue_saves__>
 516:	6c 01       	movw	r12, r24
 518:	7b 01       	movw	r14, r22
 51a:	8a 01       	movw	r16, r20
 51c:	fc 01       	movw	r30, r24
 51e:	17 82       	std	Z+7, r1	; 0x07
 520:	16 82       	std	Z+6, r1	; 0x06
 522:	83 81       	ldd	r24, Z+3	; 0x03
 524:	81 ff       	sbrs	r24, 1
 526:	cc c1       	rjmp	.+920    	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 528:	ce 01       	movw	r24, r28
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	3c 01       	movw	r6, r24
 52e:	f6 01       	movw	r30, r12
 530:	93 81       	ldd	r25, Z+3	; 0x03
 532:	f7 01       	movw	r30, r14
 534:	93 fd       	sbrc	r25, 3
 536:	85 91       	lpm	r24, Z+
 538:	93 ff       	sbrs	r25, 3
 53a:	81 91       	ld	r24, Z+
 53c:	7f 01       	movw	r14, r30
 53e:	88 23       	and	r24, r24
 540:	09 f4       	brne	.+2      	; 0x544 <vfprintf+0x3a>
 542:	ba c1       	rjmp	.+884    	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 544:	85 32       	cpi	r24, 0x25	; 37
 546:	39 f4       	brne	.+14     	; 0x556 <vfprintf+0x4c>
 548:	93 fd       	sbrc	r25, 3
 54a:	85 91       	lpm	r24, Z+
 54c:	93 ff       	sbrs	r25, 3
 54e:	81 91       	ld	r24, Z+
 550:	7f 01       	movw	r14, r30
 552:	85 32       	cpi	r24, 0x25	; 37
 554:	29 f4       	brne	.+10     	; 0x560 <vfprintf+0x56>
 556:	b6 01       	movw	r22, r12
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fputc>
 55e:	e7 cf       	rjmp	.-50     	; 0x52e <vfprintf+0x24>
 560:	91 2c       	mov	r9, r1
 562:	21 2c       	mov	r2, r1
 564:	31 2c       	mov	r3, r1
 566:	ff e1       	ldi	r31, 0x1F	; 31
 568:	f3 15       	cp	r31, r3
 56a:	d8 f0       	brcs	.+54     	; 0x5a2 <vfprintf+0x98>
 56c:	8b 32       	cpi	r24, 0x2B	; 43
 56e:	79 f0       	breq	.+30     	; 0x58e <vfprintf+0x84>
 570:	38 f4       	brcc	.+14     	; 0x580 <vfprintf+0x76>
 572:	80 32       	cpi	r24, 0x20	; 32
 574:	79 f0       	breq	.+30     	; 0x594 <vfprintf+0x8a>
 576:	83 32       	cpi	r24, 0x23	; 35
 578:	a1 f4       	brne	.+40     	; 0x5a2 <vfprintf+0x98>
 57a:	23 2d       	mov	r18, r3
 57c:	20 61       	ori	r18, 0x10	; 16
 57e:	1d c0       	rjmp	.+58     	; 0x5ba <vfprintf+0xb0>
 580:	8d 32       	cpi	r24, 0x2D	; 45
 582:	61 f0       	breq	.+24     	; 0x59c <vfprintf+0x92>
 584:	80 33       	cpi	r24, 0x30	; 48
 586:	69 f4       	brne	.+26     	; 0x5a2 <vfprintf+0x98>
 588:	23 2d       	mov	r18, r3
 58a:	21 60       	ori	r18, 0x01	; 1
 58c:	16 c0       	rjmp	.+44     	; 0x5ba <vfprintf+0xb0>
 58e:	83 2d       	mov	r24, r3
 590:	82 60       	ori	r24, 0x02	; 2
 592:	38 2e       	mov	r3, r24
 594:	e3 2d       	mov	r30, r3
 596:	e4 60       	ori	r30, 0x04	; 4
 598:	3e 2e       	mov	r3, r30
 59a:	2a c0       	rjmp	.+84     	; 0x5f0 <vfprintf+0xe6>
 59c:	f3 2d       	mov	r31, r3
 59e:	f8 60       	ori	r31, 0x08	; 8
 5a0:	1d c0       	rjmp	.+58     	; 0x5dc <vfprintf+0xd2>
 5a2:	37 fc       	sbrc	r3, 7
 5a4:	2d c0       	rjmp	.+90     	; 0x600 <vfprintf+0xf6>
 5a6:	20 ed       	ldi	r18, 0xD0	; 208
 5a8:	28 0f       	add	r18, r24
 5aa:	2a 30       	cpi	r18, 0x0A	; 10
 5ac:	40 f0       	brcs	.+16     	; 0x5be <vfprintf+0xb4>
 5ae:	8e 32       	cpi	r24, 0x2E	; 46
 5b0:	b9 f4       	brne	.+46     	; 0x5e0 <vfprintf+0xd6>
 5b2:	36 fc       	sbrc	r3, 6
 5b4:	81 c1       	rjmp	.+770    	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 5b6:	23 2d       	mov	r18, r3
 5b8:	20 64       	ori	r18, 0x40	; 64
 5ba:	32 2e       	mov	r3, r18
 5bc:	19 c0       	rjmp	.+50     	; 0x5f0 <vfprintf+0xe6>
 5be:	36 fe       	sbrs	r3, 6
 5c0:	06 c0       	rjmp	.+12     	; 0x5ce <vfprintf+0xc4>
 5c2:	8a e0       	ldi	r24, 0x0A	; 10
 5c4:	98 9e       	mul	r9, r24
 5c6:	20 0d       	add	r18, r0
 5c8:	11 24       	eor	r1, r1
 5ca:	92 2e       	mov	r9, r18
 5cc:	11 c0       	rjmp	.+34     	; 0x5f0 <vfprintf+0xe6>
 5ce:	ea e0       	ldi	r30, 0x0A	; 10
 5d0:	2e 9e       	mul	r2, r30
 5d2:	20 0d       	add	r18, r0
 5d4:	11 24       	eor	r1, r1
 5d6:	22 2e       	mov	r2, r18
 5d8:	f3 2d       	mov	r31, r3
 5da:	f0 62       	ori	r31, 0x20	; 32
 5dc:	3f 2e       	mov	r3, r31
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <vfprintf+0xe6>
 5e0:	8c 36       	cpi	r24, 0x6C	; 108
 5e2:	21 f4       	brne	.+8      	; 0x5ec <vfprintf+0xe2>
 5e4:	83 2d       	mov	r24, r3
 5e6:	80 68       	ori	r24, 0x80	; 128
 5e8:	38 2e       	mov	r3, r24
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <vfprintf+0xe6>
 5ec:	88 36       	cpi	r24, 0x68	; 104
 5ee:	41 f4       	brne	.+16     	; 0x600 <vfprintf+0xf6>
 5f0:	f7 01       	movw	r30, r14
 5f2:	93 fd       	sbrc	r25, 3
 5f4:	85 91       	lpm	r24, Z+
 5f6:	93 ff       	sbrs	r25, 3
 5f8:	81 91       	ld	r24, Z+
 5fa:	7f 01       	movw	r14, r30
 5fc:	81 11       	cpse	r24, r1
 5fe:	b3 cf       	rjmp	.-154    	; 0x566 <vfprintf+0x5c>
 600:	98 2f       	mov	r25, r24
 602:	9f 7d       	andi	r25, 0xDF	; 223
 604:	95 54       	subi	r25, 0x45	; 69
 606:	93 30       	cpi	r25, 0x03	; 3
 608:	28 f4       	brcc	.+10     	; 0x614 <vfprintf+0x10a>
 60a:	0c 5f       	subi	r16, 0xFC	; 252
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	9f e3       	ldi	r25, 0x3F	; 63
 610:	99 83       	std	Y+1, r25	; 0x01
 612:	0d c0       	rjmp	.+26     	; 0x62e <vfprintf+0x124>
 614:	83 36       	cpi	r24, 0x63	; 99
 616:	31 f0       	breq	.+12     	; 0x624 <vfprintf+0x11a>
 618:	83 37       	cpi	r24, 0x73	; 115
 61a:	71 f0       	breq	.+28     	; 0x638 <vfprintf+0x12e>
 61c:	83 35       	cpi	r24, 0x53	; 83
 61e:	09 f0       	breq	.+2      	; 0x622 <vfprintf+0x118>
 620:	59 c0       	rjmp	.+178    	; 0x6d4 <vfprintf+0x1ca>
 622:	21 c0       	rjmp	.+66     	; 0x666 <vfprintf+0x15c>
 624:	f8 01       	movw	r30, r16
 626:	80 81       	ld	r24, Z
 628:	89 83       	std	Y+1, r24	; 0x01
 62a:	0e 5f       	subi	r16, 0xFE	; 254
 62c:	1f 4f       	sbci	r17, 0xFF	; 255
 62e:	88 24       	eor	r8, r8
 630:	83 94       	inc	r8
 632:	91 2c       	mov	r9, r1
 634:	53 01       	movw	r10, r6
 636:	13 c0       	rjmp	.+38     	; 0x65e <vfprintf+0x154>
 638:	28 01       	movw	r4, r16
 63a:	f2 e0       	ldi	r31, 0x02	; 2
 63c:	4f 0e       	add	r4, r31
 63e:	51 1c       	adc	r5, r1
 640:	f8 01       	movw	r30, r16
 642:	a0 80       	ld	r10, Z
 644:	b1 80       	ldd	r11, Z+1	; 0x01
 646:	36 fe       	sbrs	r3, 6
 648:	03 c0       	rjmp	.+6      	; 0x650 <vfprintf+0x146>
 64a:	69 2d       	mov	r22, r9
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <vfprintf+0x14a>
 650:	6f ef       	ldi	r22, 0xFF	; 255
 652:	7f ef       	ldi	r23, 0xFF	; 255
 654:	c5 01       	movw	r24, r10
 656:	0e 94 71 04 	call	0x8e2	; 0x8e2 <strnlen>
 65a:	4c 01       	movw	r8, r24
 65c:	82 01       	movw	r16, r4
 65e:	f3 2d       	mov	r31, r3
 660:	ff 77       	andi	r31, 0x7F	; 127
 662:	3f 2e       	mov	r3, r31
 664:	16 c0       	rjmp	.+44     	; 0x692 <vfprintf+0x188>
 666:	28 01       	movw	r4, r16
 668:	22 e0       	ldi	r18, 0x02	; 2
 66a:	42 0e       	add	r4, r18
 66c:	51 1c       	adc	r5, r1
 66e:	f8 01       	movw	r30, r16
 670:	a0 80       	ld	r10, Z
 672:	b1 80       	ldd	r11, Z+1	; 0x01
 674:	36 fe       	sbrs	r3, 6
 676:	03 c0       	rjmp	.+6      	; 0x67e <vfprintf+0x174>
 678:	69 2d       	mov	r22, r9
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <vfprintf+0x178>
 67e:	6f ef       	ldi	r22, 0xFF	; 255
 680:	7f ef       	ldi	r23, 0xFF	; 255
 682:	c5 01       	movw	r24, r10
 684:	0e 94 66 04 	call	0x8cc	; 0x8cc <strnlen_P>
 688:	4c 01       	movw	r8, r24
 68a:	f3 2d       	mov	r31, r3
 68c:	f0 68       	ori	r31, 0x80	; 128
 68e:	3f 2e       	mov	r3, r31
 690:	82 01       	movw	r16, r4
 692:	33 fc       	sbrc	r3, 3
 694:	1b c0       	rjmp	.+54     	; 0x6cc <vfprintf+0x1c2>
 696:	82 2d       	mov	r24, r2
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	88 16       	cp	r8, r24
 69c:	99 06       	cpc	r9, r25
 69e:	b0 f4       	brcc	.+44     	; 0x6cc <vfprintf+0x1c2>
 6a0:	b6 01       	movw	r22, r12
 6a2:	80 e2       	ldi	r24, 0x20	; 32
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fputc>
 6aa:	2a 94       	dec	r2
 6ac:	f4 cf       	rjmp	.-24     	; 0x696 <vfprintf+0x18c>
 6ae:	f5 01       	movw	r30, r10
 6b0:	37 fc       	sbrc	r3, 7
 6b2:	85 91       	lpm	r24, Z+
 6b4:	37 fe       	sbrs	r3, 7
 6b6:	81 91       	ld	r24, Z+
 6b8:	5f 01       	movw	r10, r30
 6ba:	b6 01       	movw	r22, r12
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fputc>
 6c2:	21 10       	cpse	r2, r1
 6c4:	2a 94       	dec	r2
 6c6:	21 e0       	ldi	r18, 0x01	; 1
 6c8:	82 1a       	sub	r8, r18
 6ca:	91 08       	sbc	r9, r1
 6cc:	81 14       	cp	r8, r1
 6ce:	91 04       	cpc	r9, r1
 6d0:	71 f7       	brne	.-36     	; 0x6ae <vfprintf+0x1a4>
 6d2:	e8 c0       	rjmp	.+464    	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 6d4:	84 36       	cpi	r24, 0x64	; 100
 6d6:	11 f0       	breq	.+4      	; 0x6dc <vfprintf+0x1d2>
 6d8:	89 36       	cpi	r24, 0x69	; 105
 6da:	41 f5       	brne	.+80     	; 0x72c <vfprintf+0x222>
 6dc:	f8 01       	movw	r30, r16
 6de:	37 fe       	sbrs	r3, 7
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <vfprintf+0x1e6>
 6e2:	60 81       	ld	r22, Z
 6e4:	71 81       	ldd	r23, Z+1	; 0x01
 6e6:	82 81       	ldd	r24, Z+2	; 0x02
 6e8:	93 81       	ldd	r25, Z+3	; 0x03
 6ea:	0c 5f       	subi	r16, 0xFC	; 252
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	08 c0       	rjmp	.+16     	; 0x700 <vfprintf+0x1f6>
 6f0:	60 81       	ld	r22, Z
 6f2:	71 81       	ldd	r23, Z+1	; 0x01
 6f4:	07 2e       	mov	r0, r23
 6f6:	00 0c       	add	r0, r0
 6f8:	88 0b       	sbc	r24, r24
 6fa:	99 0b       	sbc	r25, r25
 6fc:	0e 5f       	subi	r16, 0xFE	; 254
 6fe:	1f 4f       	sbci	r17, 0xFF	; 255
 700:	f3 2d       	mov	r31, r3
 702:	ff 76       	andi	r31, 0x6F	; 111
 704:	3f 2e       	mov	r3, r31
 706:	97 ff       	sbrs	r25, 7
 708:	09 c0       	rjmp	.+18     	; 0x71c <vfprintf+0x212>
 70a:	90 95       	com	r25
 70c:	80 95       	com	r24
 70e:	70 95       	com	r23
 710:	61 95       	neg	r22
 712:	7f 4f       	sbci	r23, 0xFF	; 255
 714:	8f 4f       	sbci	r24, 0xFF	; 255
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	f0 68       	ori	r31, 0x80	; 128
 71a:	3f 2e       	mov	r3, r31
 71c:	2a e0       	ldi	r18, 0x0A	; 10
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	a3 01       	movw	r20, r6
 722:	0e 94 b8 04 	call	0x970	; 0x970 <__ultoa_invert>
 726:	88 2e       	mov	r8, r24
 728:	86 18       	sub	r8, r6
 72a:	45 c0       	rjmp	.+138    	; 0x7b6 <vfprintf+0x2ac>
 72c:	85 37       	cpi	r24, 0x75	; 117
 72e:	31 f4       	brne	.+12     	; 0x73c <vfprintf+0x232>
 730:	23 2d       	mov	r18, r3
 732:	2f 7e       	andi	r18, 0xEF	; 239
 734:	b2 2e       	mov	r11, r18
 736:	2a e0       	ldi	r18, 0x0A	; 10
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	25 c0       	rjmp	.+74     	; 0x786 <vfprintf+0x27c>
 73c:	93 2d       	mov	r25, r3
 73e:	99 7f       	andi	r25, 0xF9	; 249
 740:	b9 2e       	mov	r11, r25
 742:	8f 36       	cpi	r24, 0x6F	; 111
 744:	c1 f0       	breq	.+48     	; 0x776 <vfprintf+0x26c>
 746:	18 f4       	brcc	.+6      	; 0x74e <vfprintf+0x244>
 748:	88 35       	cpi	r24, 0x58	; 88
 74a:	79 f0       	breq	.+30     	; 0x76a <vfprintf+0x260>
 74c:	b5 c0       	rjmp	.+362    	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 74e:	80 37       	cpi	r24, 0x70	; 112
 750:	19 f0       	breq	.+6      	; 0x758 <vfprintf+0x24e>
 752:	88 37       	cpi	r24, 0x78	; 120
 754:	21 f0       	breq	.+8      	; 0x75e <vfprintf+0x254>
 756:	b0 c0       	rjmp	.+352    	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 758:	e9 2f       	mov	r30, r25
 75a:	e0 61       	ori	r30, 0x10	; 16
 75c:	be 2e       	mov	r11, r30
 75e:	b4 fe       	sbrs	r11, 4
 760:	0d c0       	rjmp	.+26     	; 0x77c <vfprintf+0x272>
 762:	fb 2d       	mov	r31, r11
 764:	f4 60       	ori	r31, 0x04	; 4
 766:	bf 2e       	mov	r11, r31
 768:	09 c0       	rjmp	.+18     	; 0x77c <vfprintf+0x272>
 76a:	34 fe       	sbrs	r3, 4
 76c:	0a c0       	rjmp	.+20     	; 0x782 <vfprintf+0x278>
 76e:	29 2f       	mov	r18, r25
 770:	26 60       	ori	r18, 0x06	; 6
 772:	b2 2e       	mov	r11, r18
 774:	06 c0       	rjmp	.+12     	; 0x782 <vfprintf+0x278>
 776:	28 e0       	ldi	r18, 0x08	; 8
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	05 c0       	rjmp	.+10     	; 0x786 <vfprintf+0x27c>
 77c:	20 e1       	ldi	r18, 0x10	; 16
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <vfprintf+0x27c>
 782:	20 e1       	ldi	r18, 0x10	; 16
 784:	32 e0       	ldi	r19, 0x02	; 2
 786:	f8 01       	movw	r30, r16
 788:	b7 fe       	sbrs	r11, 7
 78a:	07 c0       	rjmp	.+14     	; 0x79a <vfprintf+0x290>
 78c:	60 81       	ld	r22, Z
 78e:	71 81       	ldd	r23, Z+1	; 0x01
 790:	82 81       	ldd	r24, Z+2	; 0x02
 792:	93 81       	ldd	r25, Z+3	; 0x03
 794:	0c 5f       	subi	r16, 0xFC	; 252
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0x29c>
 79a:	60 81       	ld	r22, Z
 79c:	71 81       	ldd	r23, Z+1	; 0x01
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 5f       	subi	r16, 0xFE	; 254
 7a4:	1f 4f       	sbci	r17, 0xFF	; 255
 7a6:	a3 01       	movw	r20, r6
 7a8:	0e 94 b8 04 	call	0x970	; 0x970 <__ultoa_invert>
 7ac:	88 2e       	mov	r8, r24
 7ae:	86 18       	sub	r8, r6
 7b0:	fb 2d       	mov	r31, r11
 7b2:	ff 77       	andi	r31, 0x7F	; 127
 7b4:	3f 2e       	mov	r3, r31
 7b6:	36 fe       	sbrs	r3, 6
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <vfprintf+0x2ca>
 7ba:	23 2d       	mov	r18, r3
 7bc:	2e 7f       	andi	r18, 0xFE	; 254
 7be:	a2 2e       	mov	r10, r18
 7c0:	89 14       	cp	r8, r9
 7c2:	58 f4       	brcc	.+22     	; 0x7da <vfprintf+0x2d0>
 7c4:	34 fe       	sbrs	r3, 4
 7c6:	0b c0       	rjmp	.+22     	; 0x7de <vfprintf+0x2d4>
 7c8:	32 fc       	sbrc	r3, 2
 7ca:	09 c0       	rjmp	.+18     	; 0x7de <vfprintf+0x2d4>
 7cc:	83 2d       	mov	r24, r3
 7ce:	8e 7e       	andi	r24, 0xEE	; 238
 7d0:	a8 2e       	mov	r10, r24
 7d2:	05 c0       	rjmp	.+10     	; 0x7de <vfprintf+0x2d4>
 7d4:	b8 2c       	mov	r11, r8
 7d6:	a3 2c       	mov	r10, r3
 7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <vfprintf+0x2d6>
 7da:	b8 2c       	mov	r11, r8
 7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <vfprintf+0x2d6>
 7de:	b9 2c       	mov	r11, r9
 7e0:	a4 fe       	sbrs	r10, 4
 7e2:	0f c0       	rjmp	.+30     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e4:	fe 01       	movw	r30, r28
 7e6:	e8 0d       	add	r30, r8
 7e8:	f1 1d       	adc	r31, r1
 7ea:	80 81       	ld	r24, Z
 7ec:	80 33       	cpi	r24, 0x30	; 48
 7ee:	21 f4       	brne	.+8      	; 0x7f8 <vfprintf+0x2ee>
 7f0:	9a 2d       	mov	r25, r10
 7f2:	99 7e       	andi	r25, 0xE9	; 233
 7f4:	a9 2e       	mov	r10, r25
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7f8:	a2 fe       	sbrs	r10, 2
 7fa:	06 c0       	rjmp	.+12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fc:	b3 94       	inc	r11
 7fe:	b3 94       	inc	r11
 800:	04 c0       	rjmp	.+8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 802:	8a 2d       	mov	r24, r10
 804:	86 78       	andi	r24, 0x86	; 134
 806:	09 f0       	breq	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 808:	b3 94       	inc	r11
 80a:	a3 fc       	sbrc	r10, 3
 80c:	11 c0       	rjmp	.+34     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 80e:	a0 fe       	sbrs	r10, 0
 810:	06 c0       	rjmp	.+12     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 812:	b2 14       	cp	r11, r2
 814:	88 f4       	brcc	.+34     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 816:	28 0c       	add	r2, r8
 818:	92 2c       	mov	r9, r2
 81a:	9b 18       	sub	r9, r11
 81c:	0e c0       	rjmp	.+28     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 81e:	b2 14       	cp	r11, r2
 820:	60 f4       	brcc	.+24     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 822:	b6 01       	movw	r22, r12
 824:	80 e2       	ldi	r24, 0x20	; 32
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fputc>
 82c:	b3 94       	inc	r11
 82e:	f7 cf       	rjmp	.-18     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 830:	b2 14       	cp	r11, r2
 832:	18 f4       	brcc	.+6      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 834:	2b 18       	sub	r2, r11
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	98 2c       	mov	r9, r8
 83a:	21 2c       	mov	r2, r1
 83c:	a4 fe       	sbrs	r10, 4
 83e:	10 c0       	rjmp	.+32     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 840:	b6 01       	movw	r22, r12
 842:	80 e3       	ldi	r24, 0x30	; 48
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fputc>
 84a:	a2 fe       	sbrs	r10, 2
 84c:	17 c0       	rjmp	.+46     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 84e:	a1 fc       	sbrc	r10, 1
 850:	03 c0       	rjmp	.+6      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 852:	88 e7       	ldi	r24, 0x78	; 120
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 858:	88 e5       	ldi	r24, 0x58	; 88
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	b6 01       	movw	r22, r12
 85e:	0c c0       	rjmp	.+24     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 860:	8a 2d       	mov	r24, r10
 862:	86 78       	andi	r24, 0x86	; 134
 864:	59 f0       	breq	.+22     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 866:	a1 fe       	sbrs	r10, 1
 868:	02 c0       	rjmp	.+4      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 86a:	8b e2       	ldi	r24, 0x2B	; 43
 86c:	01 c0       	rjmp	.+2      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 86e:	80 e2       	ldi	r24, 0x20	; 32
 870:	a7 fc       	sbrc	r10, 7
 872:	8d e2       	ldi	r24, 0x2D	; 45
 874:	b6 01       	movw	r22, r12
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fputc>
 87c:	89 14       	cp	r8, r9
 87e:	38 f4       	brcc	.+14     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 880:	b6 01       	movw	r22, r12
 882:	80 e3       	ldi	r24, 0x30	; 48
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fputc>
 88a:	9a 94       	dec	r9
 88c:	f7 cf       	rjmp	.-18     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 88e:	8a 94       	dec	r8
 890:	f3 01       	movw	r30, r6
 892:	e8 0d       	add	r30, r8
 894:	f1 1d       	adc	r31, r1
 896:	80 81       	ld	r24, Z
 898:	b6 01       	movw	r22, r12
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fputc>
 8a0:	81 10       	cpse	r8, r1
 8a2:	f5 cf       	rjmp	.-22     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 8a4:	22 20       	and	r2, r2
 8a6:	09 f4       	brne	.+2      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 8a8:	42 ce       	rjmp	.-892    	; 0x52e <vfprintf+0x24>
 8aa:	b6 01       	movw	r22, r12
 8ac:	80 e2       	ldi	r24, 0x20	; 32
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fputc>
 8b4:	2a 94       	dec	r2
 8b6:	f6 cf       	rjmp	.-20     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 8b8:	f6 01       	movw	r30, r12
 8ba:	86 81       	ldd	r24, Z+6	; 0x06
 8bc:	97 81       	ldd	r25, Z+7	; 0x07
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8c0:	8f ef       	ldi	r24, 0xFF	; 255
 8c2:	9f ef       	ldi	r25, 0xFF	; 255
 8c4:	2b 96       	adiw	r28, 0x0b	; 11
 8c6:	e2 e1       	ldi	r30, 0x12	; 18
 8c8:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__epilogue_restores__>

000008cc <strnlen_P>:
 8cc:	fc 01       	movw	r30, r24
 8ce:	05 90       	lpm	r0, Z+
 8d0:	61 50       	subi	r22, 0x01	; 1
 8d2:	70 40       	sbci	r23, 0x00	; 0
 8d4:	01 10       	cpse	r0, r1
 8d6:	d8 f7       	brcc	.-10     	; 0x8ce <strnlen_P+0x2>
 8d8:	80 95       	com	r24
 8da:	90 95       	com	r25
 8dc:	8e 0f       	add	r24, r30
 8de:	9f 1f       	adc	r25, r31
 8e0:	08 95       	ret

000008e2 <strnlen>:
 8e2:	fc 01       	movw	r30, r24
 8e4:	61 50       	subi	r22, 0x01	; 1
 8e6:	70 40       	sbci	r23, 0x00	; 0
 8e8:	01 90       	ld	r0, Z+
 8ea:	01 10       	cpse	r0, r1
 8ec:	d8 f7       	brcc	.-10     	; 0x8e4 <strnlen+0x2>
 8ee:	80 95       	com	r24
 8f0:	90 95       	com	r25
 8f2:	8e 0f       	add	r24, r30
 8f4:	9f 1f       	adc	r25, r31
 8f6:	08 95       	ret

000008f8 <fputc>:
 8f8:	0f 93       	push	r16
 8fa:	1f 93       	push	r17
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	fb 01       	movw	r30, r22
 902:	23 81       	ldd	r18, Z+3	; 0x03
 904:	21 fd       	sbrc	r18, 1
 906:	03 c0       	rjmp	.+6      	; 0x90e <__stack+0xf>
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	9f ef       	ldi	r25, 0xFF	; 255
 90c:	2c c0       	rjmp	.+88     	; 0x966 <__stack+0x67>
 90e:	22 ff       	sbrs	r18, 2
 910:	16 c0       	rjmp	.+44     	; 0x93e <__stack+0x3f>
 912:	46 81       	ldd	r20, Z+6	; 0x06
 914:	57 81       	ldd	r21, Z+7	; 0x07
 916:	24 81       	ldd	r18, Z+4	; 0x04
 918:	35 81       	ldd	r19, Z+5	; 0x05
 91a:	42 17       	cp	r20, r18
 91c:	53 07       	cpc	r21, r19
 91e:	44 f4       	brge	.+16     	; 0x930 <__stack+0x31>
 920:	a0 81       	ld	r26, Z
 922:	b1 81       	ldd	r27, Z+1	; 0x01
 924:	9d 01       	movw	r18, r26
 926:	2f 5f       	subi	r18, 0xFF	; 255
 928:	3f 4f       	sbci	r19, 0xFF	; 255
 92a:	31 83       	std	Z+1, r19	; 0x01
 92c:	20 83       	st	Z, r18
 92e:	8c 93       	st	X, r24
 930:	26 81       	ldd	r18, Z+6	; 0x06
 932:	37 81       	ldd	r19, Z+7	; 0x07
 934:	2f 5f       	subi	r18, 0xFF	; 255
 936:	3f 4f       	sbci	r19, 0xFF	; 255
 938:	37 83       	std	Z+7, r19	; 0x07
 93a:	26 83       	std	Z+6, r18	; 0x06
 93c:	14 c0       	rjmp	.+40     	; 0x966 <__stack+0x67>
 93e:	8b 01       	movw	r16, r22
 940:	ec 01       	movw	r28, r24
 942:	fb 01       	movw	r30, r22
 944:	00 84       	ldd	r0, Z+8	; 0x08
 946:	f1 85       	ldd	r31, Z+9	; 0x09
 948:	e0 2d       	mov	r30, r0
 94a:	09 95       	icall
 94c:	89 2b       	or	r24, r25
 94e:	e1 f6       	brne	.-72     	; 0x908 <__stack+0x9>
 950:	d8 01       	movw	r26, r16
 952:	16 96       	adiw	r26, 0x06	; 6
 954:	8d 91       	ld	r24, X+
 956:	9c 91       	ld	r25, X
 958:	17 97       	sbiw	r26, 0x07	; 7
 95a:	01 96       	adiw	r24, 0x01	; 1
 95c:	17 96       	adiw	r26, 0x07	; 7
 95e:	9c 93       	st	X, r25
 960:	8e 93       	st	-X, r24
 962:	16 97       	sbiw	r26, 0x06	; 6
 964:	ce 01       	movw	r24, r28
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	1f 91       	pop	r17
 96c:	0f 91       	pop	r16
 96e:	08 95       	ret

00000970 <__ultoa_invert>:
 970:	fa 01       	movw	r30, r20
 972:	aa 27       	eor	r26, r26
 974:	28 30       	cpi	r18, 0x08	; 8
 976:	51 f1       	breq	.+84     	; 0x9cc <__ultoa_invert+0x5c>
 978:	20 31       	cpi	r18, 0x10	; 16
 97a:	81 f1       	breq	.+96     	; 0x9dc <__ultoa_invert+0x6c>
 97c:	e8 94       	clt
 97e:	6f 93       	push	r22
 980:	6e 7f       	andi	r22, 0xFE	; 254
 982:	6e 5f       	subi	r22, 0xFE	; 254
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	af 4f       	sbci	r26, 0xFF	; 255
 98c:	b1 e0       	ldi	r27, 0x01	; 1
 98e:	3e d0       	rcall	.+124    	; 0xa0c <__ultoa_invert+0x9c>
 990:	b4 e0       	ldi	r27, 0x04	; 4
 992:	3c d0       	rcall	.+120    	; 0xa0c <__ultoa_invert+0x9c>
 994:	67 0f       	add	r22, r23
 996:	78 1f       	adc	r23, r24
 998:	89 1f       	adc	r24, r25
 99a:	9a 1f       	adc	r25, r26
 99c:	a1 1d       	adc	r26, r1
 99e:	68 0f       	add	r22, r24
 9a0:	79 1f       	adc	r23, r25
 9a2:	8a 1f       	adc	r24, r26
 9a4:	91 1d       	adc	r25, r1
 9a6:	a1 1d       	adc	r26, r1
 9a8:	6a 0f       	add	r22, r26
 9aa:	71 1d       	adc	r23, r1
 9ac:	81 1d       	adc	r24, r1
 9ae:	91 1d       	adc	r25, r1
 9b0:	a1 1d       	adc	r26, r1
 9b2:	20 d0       	rcall	.+64     	; 0x9f4 <__ultoa_invert+0x84>
 9b4:	09 f4       	brne	.+2      	; 0x9b8 <__ultoa_invert+0x48>
 9b6:	68 94       	set
 9b8:	3f 91       	pop	r19
 9ba:	2a e0       	ldi	r18, 0x0A	; 10
 9bc:	26 9f       	mul	r18, r22
 9be:	11 24       	eor	r1, r1
 9c0:	30 19       	sub	r19, r0
 9c2:	30 5d       	subi	r19, 0xD0	; 208
 9c4:	31 93       	st	Z+, r19
 9c6:	de f6       	brtc	.-74     	; 0x97e <__ultoa_invert+0xe>
 9c8:	cf 01       	movw	r24, r30
 9ca:	08 95       	ret
 9cc:	46 2f       	mov	r20, r22
 9ce:	47 70       	andi	r20, 0x07	; 7
 9d0:	40 5d       	subi	r20, 0xD0	; 208
 9d2:	41 93       	st	Z+, r20
 9d4:	b3 e0       	ldi	r27, 0x03	; 3
 9d6:	0f d0       	rcall	.+30     	; 0x9f6 <__ultoa_invert+0x86>
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__ultoa_invert+0x5c>
 9da:	f6 cf       	rjmp	.-20     	; 0x9c8 <__ultoa_invert+0x58>
 9dc:	46 2f       	mov	r20, r22
 9de:	4f 70       	andi	r20, 0x0F	; 15
 9e0:	40 5d       	subi	r20, 0xD0	; 208
 9e2:	4a 33       	cpi	r20, 0x3A	; 58
 9e4:	18 f0       	brcs	.+6      	; 0x9ec <__ultoa_invert+0x7c>
 9e6:	49 5d       	subi	r20, 0xD9	; 217
 9e8:	31 fd       	sbrc	r19, 1
 9ea:	40 52       	subi	r20, 0x20	; 32
 9ec:	41 93       	st	Z+, r20
 9ee:	02 d0       	rcall	.+4      	; 0x9f4 <__ultoa_invert+0x84>
 9f0:	a9 f7       	brne	.-22     	; 0x9dc <__ultoa_invert+0x6c>
 9f2:	ea cf       	rjmp	.-44     	; 0x9c8 <__ultoa_invert+0x58>
 9f4:	b4 e0       	ldi	r27, 0x04	; 4
 9f6:	a6 95       	lsr	r26
 9f8:	97 95       	ror	r25
 9fa:	87 95       	ror	r24
 9fc:	77 95       	ror	r23
 9fe:	67 95       	ror	r22
 a00:	ba 95       	dec	r27
 a02:	c9 f7       	brne	.-14     	; 0x9f6 <__ultoa_invert+0x86>
 a04:	00 97       	sbiw	r24, 0x00	; 0
 a06:	61 05       	cpc	r22, r1
 a08:	71 05       	cpc	r23, r1
 a0a:	08 95       	ret
 a0c:	9b 01       	movw	r18, r22
 a0e:	ac 01       	movw	r20, r24
 a10:	0a 2e       	mov	r0, r26
 a12:	06 94       	lsr	r0
 a14:	57 95       	ror	r21
 a16:	47 95       	ror	r20
 a18:	37 95       	ror	r19
 a1a:	27 95       	ror	r18
 a1c:	ba 95       	dec	r27
 a1e:	c9 f7       	brne	.-14     	; 0xa12 <__ultoa_invert+0xa2>
 a20:	62 0f       	add	r22, r18
 a22:	73 1f       	adc	r23, r19
 a24:	84 1f       	adc	r24, r20
 a26:	95 1f       	adc	r25, r21
 a28:	a0 1d       	adc	r26, r0
 a2a:	08 95       	ret

00000a2c <__prologue_saves__>:
 a2c:	2f 92       	push	r2
 a2e:	3f 92       	push	r3
 a30:	4f 92       	push	r4
 a32:	5f 92       	push	r5
 a34:	6f 92       	push	r6
 a36:	7f 92       	push	r7
 a38:	8f 92       	push	r8
 a3a:	9f 92       	push	r9
 a3c:	af 92       	push	r10
 a3e:	bf 92       	push	r11
 a40:	cf 92       	push	r12
 a42:	df 92       	push	r13
 a44:	ef 92       	push	r14
 a46:	ff 92       	push	r15
 a48:	0f 93       	push	r16
 a4a:	1f 93       	push	r17
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
 a50:	cd b7       	in	r28, 0x3d	; 61
 a52:	de b7       	in	r29, 0x3e	; 62
 a54:	ca 1b       	sub	r28, r26
 a56:	db 0b       	sbc	r29, r27
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	f8 94       	cli
 a5c:	de bf       	out	0x3e, r29	; 62
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	cd bf       	out	0x3d, r28	; 61
 a62:	09 94       	ijmp

00000a64 <__epilogue_restores__>:
 a64:	2a 88       	ldd	r2, Y+18	; 0x12
 a66:	39 88       	ldd	r3, Y+17	; 0x11
 a68:	48 88       	ldd	r4, Y+16	; 0x10
 a6a:	5f 84       	ldd	r5, Y+15	; 0x0f
 a6c:	6e 84       	ldd	r6, Y+14	; 0x0e
 a6e:	7d 84       	ldd	r7, Y+13	; 0x0d
 a70:	8c 84       	ldd	r8, Y+12	; 0x0c
 a72:	9b 84       	ldd	r9, Y+11	; 0x0b
 a74:	aa 84       	ldd	r10, Y+10	; 0x0a
 a76:	b9 84       	ldd	r11, Y+9	; 0x09
 a78:	c8 84       	ldd	r12, Y+8	; 0x08
 a7a:	df 80       	ldd	r13, Y+7	; 0x07
 a7c:	ee 80       	ldd	r14, Y+6	; 0x06
 a7e:	fd 80       	ldd	r15, Y+5	; 0x05
 a80:	0c 81       	ldd	r16, Y+4	; 0x04
 a82:	1b 81       	ldd	r17, Y+3	; 0x03
 a84:	aa 81       	ldd	r26, Y+2	; 0x02
 a86:	b9 81       	ldd	r27, Y+1	; 0x01
 a88:	ce 0f       	add	r28, r30
 a8a:	d1 1d       	adc	r29, r1
 a8c:	0f b6       	in	r0, 0x3f	; 63
 a8e:	f8 94       	cli
 a90:	de bf       	out	0x3e, r29	; 62
 a92:	0f be       	out	0x3f, r0	; 63
 a94:	cd bf       	out	0x3d, r28	; 61
 a96:	ed 01       	movw	r28, r26
 a98:	08 95       	ret

00000a9a <_exit>:
 a9a:	f8 94       	cli

00000a9c <__stop_program>:
 a9c:	ff cf       	rjmp	.-2      	; 0xa9c <__stop_program>
