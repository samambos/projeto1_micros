
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00800100  00001220  000012b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  008002e2  008002e2  00001496  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029ad  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e77  00000000  00000000  0000408d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001438  00000000  00000000  00004f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  0000633c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c4  00000000  00000000  000068a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001659  00000000  00000000  00007168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000087c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__vector_18>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      68:	eb 02       	muls	r30, r27
      6a:	fd 02       	muls	r31, r29
      6c:	06 03       	mulsu	r16, r22
      6e:	0f 03       	fmul	r16, r23
      70:	40 03       	mulsu	r20, r16
      72:	be 03       	fmulsu	r19, r22
      74:	c2 03       	fmuls	r20, r18
      76:	c6 03       	fmuls	r20, r22
      78:	da 03       	fmulsu	r21, r18

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	12 e0       	ldi	r17, 0x02	; 2
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e0 e2       	ldi	r30, 0x20	; 32
      8e:	f2 e1       	ldi	r31, 0x12	; 18
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	a2 3e       	cpi	r26, 0xE2	; 226
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	23 e0       	ldi	r18, 0x03	; 3
      9e:	a2 ee       	ldi	r26, 0xE2	; 226
      a0:	b2 e0       	ldi	r27, 0x02	; 2
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a0 37       	cpi	r26, 0x70	; 112
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 b3 02 	call	0x566	; 0x566 <main>
      b0:	0c 94 0e 09 	jmp	0x121c	; 0x121c <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <mensagem_Inicial>:
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){

		LCD_texto_correndo(0, " Banco UFRGS ", 300, 0);
      b8:	20 e0       	ldi	r18, 0x00	; 0
      ba:	4c e2       	ldi	r20, 0x2C	; 44
      bc:	68 e0       	ldi	r22, 0x08	; 8
      be:	71 e0       	ldi	r23, 0x01	; 1
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_texto_correndo>
		LCD_Escrever_Linha(1, 0, "Digite cartao: ");
      c6:	46 e1       	ldi	r20, 0x16	; 22
      c8:	51 e0       	ldi	r21, 0x01	; 1
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
      d2:	08 95       	ret

000000d4 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      d4:	cf 93       	push	r28
      d6:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      d8:	88 b1       	in	r24, 0x08	; 8
      da:	80 7f       	andi	r24, 0xF0	; 240
      dc:	9c 2f       	mov	r25, r28
      de:	92 95       	swap	r25
      e0:	9f 70       	andi	r25, 0x0F	; 15
      e2:	89 2b       	or	r24, r25
      e4:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
      e6:	88 b1       	in	r24, 0x08	; 8
      e8:	8f 7d       	andi	r24, 0xDF	; 223
      ea:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
      ec:	88 b1       	in	r24, 0x08	; 8
      ee:	80 61       	ori	r24, 0x10	; 16
      f0:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
      f2:	88 b1       	in	r24, 0x08	; 8
      f4:	8f 7e       	andi	r24, 0xEF	; 239
      f6:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
      f8:	84 e6       	ldi	r24, 0x64	; 100
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 bf 08 	call	0x117e	; 0x117e <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
     100:	88 b1       	in	r24, 0x08	; 8
     102:	80 7f       	andi	r24, 0xF0	; 240
     104:	cf 70       	andi	r28, 0x0F	; 15
     106:	c8 2b       	or	r28, r24
     108:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     10a:	88 b1       	in	r24, 0x08	; 8
     10c:	80 61       	ori	r24, 0x10	; 16
     10e:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     110:	88 b1       	in	r24, 0x08	; 8
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
}
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     126:	8a e0       	ldi	r24, 0x0A	; 10
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     134:	88 e2       	ldi	r24, 0x28	; 40
     136:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     13a:	8c e0       	ldi	r24, 0x0C	; 12
     13c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     140:	86 e0       	ldi	r24, 0x06	; 6
     142:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     14c:	08 95       	ret

0000014e <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     154:	80 e8       	ldi	r24, 0x80	; 128
     156:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     15a:	08 95       	ret

0000015c <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	ec 01       	movw	r28, r24
	while(*texto) {
     162:	23 c0       	rjmp	.+70     	; 0x1aa <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     164:	98 b1       	in	r25, 0x08	; 8
     166:	90 7f       	andi	r25, 0xF0	; 240
     168:	82 95       	swap	r24
     16a:	8f 70       	andi	r24, 0x0F	; 15
     16c:	89 2b       	or	r24, r25
     16e:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     170:	88 b1       	in	r24, 0x08	; 8
     172:	80 62       	ori	r24, 0x20	; 32
     174:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     176:	88 b1       	in	r24, 0x08	; 8
     178:	80 61       	ori	r24, 0x10	; 16
     17a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     17c:	88 b1       	in	r24, 0x08	; 8
     17e:	8f 7e       	andi	r24, 0xEF	; 239
     180:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     182:	88 ec       	ldi	r24, 0xC8	; 200
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 bf 08 	call	0x117e	; 0x117e <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     18a:	98 b1       	in	r25, 0x08	; 8
     18c:	89 91       	ld	r24, Y+
     18e:	90 7f       	andi	r25, 0xF0	; 240
     190:	8f 70       	andi	r24, 0x0F	; 15
     192:	89 2b       	or	r24, r25
     194:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     196:	88 b1       	in	r24, 0x08	; 8
     198:	80 61       	ori	r24, 0x10	; 16
     19a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	8f 7e       	andi	r24, 0xEF	; 239
     1a0:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1aa:	88 81       	ld	r24, Y
     1ac:	81 11       	cpse	r24, r1
     1ae:	da cf       	rjmp	.-76     	; 0x164 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1bc:	81 11       	cpse	r24, r1
     1be:	08 c0       	rjmp	.+16     	; 0x1d0 <LCD_Escrever_Linha+0x1a>
     1c0:	60 31       	cpi	r22, 0x10	; 16
     1c2:	30 f4       	brcc	.+12     	; 0x1d0 <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1c4:	86 2f       	mov	r24, r22
     1c6:	8f 70       	andi	r24, 0x0F	; 15
     1c8:	80 68       	ori	r24, 0x80	; 128
     1ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	39 f4       	brne	.+14     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
     1d4:	60 31       	cpi	r22, 0x10	; 16
     1d6:	28 f4       	brcc	.+10     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1d8:	86 2f       	mov	r24, r22
     1da:	8f 70       	andi	r24, 0x0F	; 15
     1dc:	80 6c       	ori	r24, 0xC0	; 192
     1de:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     1e2:	ce 01       	movw	r24, r28
     1e4:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     1e8:	80 e8       	ldi	r24, 0x80	; 128
     1ea:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <LCD_texto_correndo>:

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
     1f4:	6f 92       	push	r6
     1f6:	7f 92       	push	r7
     1f8:	8f 92       	push	r8
     1fa:	9f 92       	push	r9
     1fc:	af 92       	push	r10
     1fe:	bf 92       	push	r11
     200:	cf 92       	push	r12
     202:	df 92       	push	r13
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	61 97       	sbiw	r28, 0x11	; 17
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	78 2e       	mov	r7, r24
     222:	4a 01       	movw	r8, r20
     224:	62 2e       	mov	r6, r18
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     226:	cd b6       	in	r12, 0x3d	; 61
     228:	de b6       	in	r13, 0x3e	; 62
	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
}

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
     22a:	ad b6       	in	r10, 0x3d	; 61
     22c:	be b6       	in	r11, 0x3e	; 62
    uint8_t tamanho = strlen(texto);
     22e:	fb 01       	movw	r30, r22
     230:	01 90       	ld	r0, Z+
     232:	00 20       	and	r0, r0
     234:	e9 f7       	brne	.-6      	; 0x230 <LCD_texto_correndo+0x3c>
     236:	31 97       	sbiw	r30, 0x01	; 1
     238:	e6 1b       	sub	r30, r22
     23a:	f7 0b       	sbc	r31, r23
     23c:	0e 2f       	mov	r16, r30
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
     23e:	e1 31       	cpi	r30, 0x11	; 17
     240:	28 f4       	brcc	.+10     	; 0x24c <LCD_texto_correndo+0x58>
        LCD_Escrever_Linha(linha, 0, texto);
     242:	ab 01       	movw	r20, r22
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
        return;
     24a:	42 c0       	rjmp	.+132    	; 0x2d0 <LCD_texto_correndo+0xdc>
    }
    
    // Adiciona espaços no final para melhor visualização
    char texto_extendido[tamanho + 17];
     24c:	ff 27       	eor	r31, r31
     24e:	71 96       	adiw	r30, 0x11	; 17
     250:	8d b7       	in	r24, 0x3d	; 61
     252:	9e b7       	in	r25, 0x3e	; 62
     254:	8e 1b       	sub	r24, r30
     256:	9f 0b       	sbc	r25, r31
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	9e bf       	out	0x3e, r25	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	8d bf       	out	0x3d, r24	; 61
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	7c 01       	movw	r14, r24
    strcpy(texto_extendido, texto);
     266:	0e 94 de 08 	call	0x11bc	; 0x11bc <strcpy>
    strcat(texto_extendido, "                "); // 16 espaços
     26a:	d7 01       	movw	r26, r14
     26c:	0d 90       	ld	r0, X+
     26e:	00 20       	and	r0, r0
     270:	e9 f7       	brne	.-6      	; 0x26c <LCD_texto_correndo+0x78>
     272:	11 97       	sbiw	r26, 0x01	; 1
     274:	81 e1       	ldi	r24, 0x11	; 17
     276:	e6 e2       	ldi	r30, 0x26	; 38
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	01 90       	ld	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	8a 95       	dec	r24
     280:	e1 f7       	brne	.-8      	; 0x27a <LCD_texto_correndo+0x86>
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	1b c0       	rjmp	.+54     	; 0x2bc <LCD_texto_correndo+0xc8>
            // Copia 16 caracteres começando na posição i
            strncpy(buffer, &texto_extendido[i], 16);
     286:	40 e1       	ldi	r20, 0x10	; 16
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	b7 01       	movw	r22, r14
     28c:	61 0f       	add	r22, r17
     28e:	71 1d       	adc	r23, r1
     290:	ce 01       	movw	r24, r28
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	0e 94 e5 08 	call	0x11ca	; 0x11ca <strncpy>
            buffer[16] = '\0';
     298:	19 8a       	std	Y+17, r1	; 0x11
            
            LCD_Escrever_Linha(linha, 0, buffer);
     29a:	ae 01       	movw	r20, r28
     29c:	4f 5f       	subi	r20, 0xFF	; 255
     29e:	5f 4f       	sbci	r21, 0xFF	; 255
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	87 2d       	mov	r24, r7
     2a4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
            delay1ms(velocidade_ms);
     2a8:	c4 01       	movw	r24, r8
     2aa:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
     2ae:	0e 94 23 08 	call	0x1046	; 0x1046 <varredura>
     2b2:	89 2b       	or	r24, r25
     2b4:	11 f0       	breq	.+4      	; 0x2ba <LCD_texto_correndo+0xc6>
     2b6:	66 20       	and	r6, r6
     2b8:	59 f0       	breq	.+22     	; 0x2d0 <LCD_texto_correndo+0xdc>
    char texto_extendido[tamanho + 17];
    strcpy(texto_extendido, texto);
    strcat(texto_extendido, "                "); // 16 espaços
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
     2ba:	1f 5f       	subi	r17, 0xFF	; 255
     2bc:	01 17       	cp	r16, r17
     2be:	18 f7       	brcc	.-58     	; 0x286 <LCD_texto_correndo+0x92>
            delay1ms(velocidade_ms);
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     2c0:	61 10       	cpse	r6, r1
     2c2:	df cf       	rjmp	.-66     	; 0x282 <LCD_texto_correndo+0x8e>
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	be be       	out	0x3e, r11	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	ad be       	out	0x3d, r10	; 61
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <LCD_texto_correndo+0xe6>
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
        LCD_Escrever_Linha(linha, 0, texto);
        return;
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	be be       	out	0x3e, r11	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	ad be       	out	0x3d, r10	; 61
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de be       	out	0x3e, r13	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd be       	out	0x3d, r12	; 61
     2e4:	61 96       	adiw	r28, 0x11	; 17
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	df 90       	pop	r13
     2fe:	cf 90       	pop	r12
     300:	bf 90       	pop	r11
     302:	af 90       	pop	r10
     304:	9f 90       	pop	r9
     306:	8f 90       	pop	r8
     308:	7f 90       	pop	r7
     30a:	6f 90       	pop	r6
     30c:	08 95       	ret

0000030e <ler_codigo_aluno>:
	ESTADO_PAGAMENTO,
	ESTADO_SALDO
} Estado;

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	00 d0       	rcall	.+0      	; 0x31c <ler_codigo_aluno+0xe>
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
     322:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
     326:	47 e3       	ldi	r20, 0x37	; 55
     328:	51 e0       	ldi	r21, 0x01	; 1
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     332:	46 e4       	ldi	r20, 0x46	; 70
     334:	51 e0       	ldi	r21, 0x01	; 1
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	ESTADO_SALDO
} Estado;

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
	int pos = 0;
     33e:	00 e0       	ldi	r16, 0x00	; 0
     340:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     342:	1d c0       	rjmp	.+58     	; 0x37e <ler_codigo_aluno+0x70>
		if (isBlocked()) return;
     344:	0e 94 60 07 	call	0xec0	; 0xec0 <isBlocked>
     348:	89 2b       	or	r24, r25
     34a:	f1 f4       	brne	.+60     	; 0x388 <ler_codigo_aluno+0x7a>
		tecla = varredura();
     34c:	0e 94 23 08 	call	0x1046	; 0x1046 <varredura>
		if (tecla >= '0' && tecla <= '9') {
     350:	90 ed       	ldi	r25, 0xD0	; 208
     352:	98 0f       	add	r25, r24
     354:	9a 30       	cpi	r25, 0x0A	; 10
     356:	98 f4       	brcc	.+38     	; 0x37e <ler_codigo_aluno+0x70>
			codigo[pos] = tecla;
     358:	f7 01       	movw	r30, r14
     35a:	e0 0f       	add	r30, r16
     35c:	f1 1f       	adc	r31, r17
     35e:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
     360:	89 83       	std	Y+1, r24	; 0x01
     362:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
     364:	ae 01       	movw	r20, r28
     366:	4f 5f       	subi	r20, 0xFF	; 255
     368:	5f 4f       	sbci	r21, 0xFF	; 255
     36a:	60 2f       	mov	r22, r16
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     372:	0f 5f       	subi	r16, 0xFF	; 255
     374:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     376:	88 ec       	ldi	r24, 0xC8	; 200
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     37e:	06 30       	cpi	r16, 0x06	; 6
     380:	11 05       	cpc	r17, r1
     382:	04 f3       	brlt	.-64     	; 0x344 <ler_codigo_aluno+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	codigo[6] = '\0';
     384:	f7 01       	movw	r30, r14
     386:	16 82       	std	Z+6, r1	; 0x06
}
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	08 95       	ret

0000039a <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
     39a:	ef 92       	push	r14
     39c:	ff 92       	push	r15
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <ler_senha+0xe>
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
     3ae:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite senha:");
     3b2:	4d e4       	ldi	r20, 0x4D	; 77
     3b4:	51 e0       	ldi	r21, 0x01	; 1
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     3be:	46 e4       	ldi	r20, 0x46	; 70
     3c0:	51 e0       	ldi	r21, 0x01	; 1
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
	int pos = 0;
     3ca:	00 e0       	ldi	r16, 0x00	; 0
     3cc:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     3ce:	1e c0       	rjmp	.+60     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		if (isBlocked()) return;
     3d0:	0e 94 60 07 	call	0xec0	; 0xec0 <isBlocked>
     3d4:	89 2b       	or	r24, r25
     3d6:	f9 f4       	brne	.+62     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		tecla = varredura();
     3d8:	0e 94 23 08 	call	0x1046	; 0x1046 <varredura>
		if (tecla >= '0' && tecla <= '9') {
     3dc:	90 ed       	ldi	r25, 0xD0	; 208
     3de:	98 0f       	add	r25, r24
     3e0:	9a 30       	cpi	r25, 0x0A	; 10
     3e2:	a0 f4       	brcc	.+40     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			senha[pos] = tecla;
     3e4:	f7 01       	movw	r30, r14
     3e6:	e0 0f       	add	r30, r16
     3e8:	f1 1f       	adc	r31, r17
     3ea:	80 83       	st	Z, r24
			char temp[2] = { '*', '\0' };
     3ec:	8a e2       	ldi	r24, 0x2A	; 42
     3ee:	89 83       	std	Y+1, r24	; 0x01
     3f0:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
     3f2:	ae 01       	movw	r20, r28
     3f4:	4f 5f       	subi	r20, 0xFF	; 255
     3f6:	5f 4f       	sbci	r21, 0xFF	; 255
     3f8:	60 2f       	mov	r22, r16
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     400:	0f 5f       	subi	r16, 0xFF	; 255
     402:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     404:	88 ec       	ldi	r24, 0xC8	; 200
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     40c:	06 30       	cpi	r16, 0x06	; 6
     40e:	11 05       	cpc	r17, r1
     410:	fc f2       	brlt	.-66     	; 0x3d0 <ler_senha+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	senha[6] = '\0';
     412:	f7 01       	movw	r30, r14
     414:	16 82       	std	Z+6, r1	; 0x06
}
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	08 95       	ret

00000428 <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	ae 97       	sbiw	r28, 0x2e	; 46
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     440:	dc 01       	movw	r26, r24
     442:	0d 90       	ld	r0, X+
     444:	00 20       	and	r0, r0
     446:	e9 f7       	brne	.-6      	; 0x442 <validar_codigo_aluno+0x1a>
     448:	11 97       	sbiw	r26, 0x01	; 1
     44a:	a8 1b       	sub	r26, r24
     44c:	b9 0b       	sbc	r27, r25
     44e:	16 97       	sbiw	r26, 0x06	; 6
     450:	09 f0       	breq	.+2      	; 0x454 <validar_codigo_aluno+0x2c>
     452:	56 c0       	rjmp	.+172    	; 0x500 <validar_codigo_aluno+0xd8>
     454:	db 01       	movw	r26, r22
     456:	0d 90       	ld	r0, X+
     458:	00 20       	and	r0, r0
     45a:	e9 f7       	brne	.-6      	; 0x456 <validar_codigo_aluno+0x2e>
     45c:	11 97       	sbiw	r26, 0x01	; 1
     45e:	a6 1b       	sub	r26, r22
     460:	b7 0b       	sbc	r27, r23
     462:	16 97       	sbiw	r26, 0x06	; 6
     464:	09 f0       	breq	.+2      	; 0x468 <validar_codigo_aluno+0x40>
     466:	4f c0       	rjmp	.+158    	; 0x506 <validar_codigo_aluno+0xde>
     468:	fc 01       	movw	r30, r24

	char mensagem[14];
	mensagem[0] = 'C';
     46a:	83 e4       	ldi	r24, 0x43	; 67
     46c:	89 83       	std	Y+1, r24	; 0x01
	mensagem[1] = 'E';
     46e:	85 e4       	ldi	r24, 0x45	; 69
     470:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(&mensagem[2], codigo, 6);
     472:	86 e0       	ldi	r24, 0x06	; 6
     474:	de 01       	movw	r26, r28
     476:	13 96       	adiw	r26, 0x03	; 3
     478:	01 90       	ld	r0, Z+
     47a:	0d 92       	st	X+, r0
     47c:	8a 95       	dec	r24
     47e:	e1 f7       	brne	.-8      	; 0x478 <validar_codigo_aluno+0x50>
	memcpy(&mensagem[8], senha, 6);
     480:	86 e0       	ldi	r24, 0x06	; 6
     482:	fb 01       	movw	r30, r22
     484:	de 01       	movw	r26, r28
     486:	19 96       	adiw	r26, 0x09	; 9
     488:	01 90       	ld	r0, Z+
     48a:	0d 92       	st	X+, r0
     48c:	8a 95       	dec	r24
     48e:	e1 f7       	brne	.-8      	; 0x488 <validar_codigo_aluno+0x60>

	SerialEnviaChars(14, mensagem);
     490:	be 01       	movw	r22, r28
     492:	6f 5f       	subi	r22, 0xFF	; 255
     494:	7f 4f       	sbci	r23, 0xFF	; 255
     496:	8e e0       	ldi	r24, 0x0E	; 14
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <SerialEnviaChars>

	char resposta[32]; // 18 chars + \0
	memset(resposta, 0, sizeof(resposta));  // Limpa o buffer para evitar lixo
     49e:	8e 01       	movw	r16, r28
     4a0:	01 5f       	subi	r16, 0xF1	; 241
     4a2:	1f 4f       	sbci	r17, 0xFF	; 255
     4a4:	80 e2       	ldi	r24, 0x20	; 32
     4a6:	f8 01       	movw	r30, r16
     4a8:	11 92       	st	Z+, r1
     4aa:	8a 95       	dec	r24
     4ac:	e9 f7       	brne	.-6      	; 0x4a8 <validar_codigo_aluno+0x80>

	SerialRecebeChars(31, resposta);
     4ae:	b8 01       	movw	r22, r16
     4b0:	8f e1       	ldi	r24, 0x1F	; 31
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 9b 07 	call	0xf36	; 0xf36 <SerialRecebeChars>
	resposta[20] = '\0';
     4b8:	1b a2       	std	Y+35, r1	; 0x23

	// Opcional: aqui você pode tentar descartar caracteres extras no buffer serial,
	// caso SerialRecebeChars não faça isso. Depende da implementação da função.

	LCD_limpar();
     4ba:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Resp Servidor:");
     4be:	4b e5       	ldi	r20, 0x5B	; 91
     4c0:	51 e0       	ldi	r21, 0x01	; 1
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, resposta);
     4ca:	a8 01       	movw	r20, r16
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	delay1ms(2000);
     4d4:	80 ed       	ldi	r24, 0xD0	; 208
     4d6:	97 e0       	ldi	r25, 0x07	; 7
     4d8:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
	LCD_limpar();
     4dc:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
     4e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     4e2:	83 35       	cpi	r24, 0x53	; 83
     4e4:	99 f4       	brne	.+38     	; 0x50c <validar_codigo_aluno+0xe4>
     4e6:	88 89       	ldd	r24, Y+16	; 0x10
     4e8:	85 34       	cpi	r24, 0x45	; 69
     4ea:	99 f4       	brne	.+38     	; 0x512 <validar_codigo_aluno+0xea>
		if (strstr(resposta, "Nao") != NULL) {
     4ec:	6a e6       	ldi	r22, 0x6A	; 106
     4ee:	71 e0       	ldi	r23, 0x01	; 1
     4f0:	c8 01       	movw	r24, r16
     4f2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <strstr>
     4f6:	89 2b       	or	r24, r25
     4f8:	79 f0       	breq	.+30     	; 0x518 <validar_codigo_aluno+0xf0>
			return 0;
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e c0       	rjmp	.+28     	; 0x51c <validar_codigo_aluno+0xf4>
	}
	senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0b c0       	rjmp	.+22     	; 0x51c <validar_codigo_aluno+0xf4>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	08 c0       	rjmp	.+16     	; 0x51c <validar_codigo_aluno+0xf4>
			return 0;
			} else {
			return 1;
		}
	}
	return 0;
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	05 c0       	rjmp	.+10     	; 0x51c <validar_codigo_aluno+0xf4>
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	02 c0       	rjmp	.+4      	; 0x51c <validar_codigo_aluno+0xf4>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
		if (strstr(resposta, "Nao") != NULL) {
			return 0;
			} else {
			return 1;
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
     51c:	ae 96       	adiw	r28, 0x2e	; 46
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	08 95       	ret

00000532 <aguardar_desbloqueio>:

void aguardar_desbloqueio() {
	LCD_limpar();
     532:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
     536:	4e e6       	ldi	r20, 0x6E	; 110
     538:	51 e0       	ldi	r21, 0x01	; 1
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
     542:	4b e7       	ldi	r20, 0x7B	; 123
     544:	51 e0       	ldi	r21, 0x01	; 1
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	while (isBlocked()) {
     54e:	04 c0       	rjmp	.+8      	; 0x558 <aguardar_desbloqueio+0x26>
		delay1ms(200);
     550:	88 ec       	ldi	r24, 0xC8	; 200
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>

void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
	while (isBlocked()) {
     558:	0e 94 60 07 	call	0xec0	; 0xec0 <isBlocked>
     55c:	89 2b       	or	r24, r25
     55e:	c1 f7       	brne	.-16     	; 0x550 <aguardar_desbloqueio+0x1e>
		delay1ms(200);
	}
	LCD_limpar();
     560:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     564:	08 95       	ret

00000566 <main>:
}

int main(void) {
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	66 97       	sbiw	r28, 0x16	; 22
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     57a:	0e 94 df 07 	call	0xfbe	; 0xfbe <prepara_teclado>
	LCD_iniciar();
     57e:	0e 94 91 00 	call	0x122	; 0x122 <LCD_iniciar>
	initUART();
     582:	0e 94 00 06 	call	0xc00	; 0xc00 <initUART>

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
     586:	88 e0       	ldi	r24, 0x08	; 8
     588:	e0 e0       	ldi	r30, 0x00	; 0
     58a:	f1 e0       	ldi	r31, 0x01	; 1
     58c:	de 01       	movw	r26, r28
     58e:	1f 96       	adiw	r26, 0x0f	; 15
     590:	01 90       	ld	r0, Z+
     592:	0d 92       	st	X+, r0
     594:	8a 95       	dec	r24
     596:	e1 f7       	brne	.-8      	; 0x590 <main+0x2a>
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     598:	00 e0       	ldi	r16, 0x00	; 0
		"2-Deposito",
		"3-Pagamento",
		"4-Saldo"
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
     59a:	e1 2c       	mov	r14, r1
     59c:	f1 2c       	mov	r15, r1
     59e:	09 c0       	rjmp	.+18     	; 0x5b2 <main+0x4c>
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     5a0:	01 e0       	ldi	r16, 0x01	; 1
     5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <main+0x4c>
			break;

			case ESTADO_CODIGO:
			ler_codigo_aluno(codigo_aluno);
			if (!isBlocked()) estado = ESTADO_SENHA;
     5a4:	02 e0       	ldi	r16, 0x02	; 2
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <main+0x4c>
			break;

			case ESTADO_SENHA:
			ler_senha(senha_aluno);
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     5a8:	03 e0       	ldi	r16, 0x03	; 3
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <main+0x4c>
				if (isBlocked()) break;
			}

			delay1ms(300);
			if (tecla == 'B' && indice_menu < total_opcoes - 2) {
				indice_menu++;
     5ac:	76 01       	movw	r14, r12
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <main+0x4c>
				LCD_Escrever_Linha(0, 0, "Voltando...");
				delay1ms(1000);
				estado = ESTADO_TELA_INICIAL;
				} else if (tecla == opcoes[indice_menu][0]) {
				switch (tecla) {
					case '1': estado = ESTADO_SAQUE; break;
     5b0:	05 e0       	ldi	r16, 0x05	; 5
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		if (isBlocked()) {
     5b2:	0e 94 60 07 	call	0xec0	; 0xec0 <isBlocked>
     5b6:	89 2b       	or	r24, r25
     5b8:	21 f0       	breq	.+8      	; 0x5c2 <main+0x5c>
			aguardar_desbloqueio();
     5ba:	0e 94 99 02 	call	0x532	; 0x532 <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     5be:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     5c0:	f8 cf       	rjmp	.-16     	; 0x5b2 <main+0x4c>
		}

		switch (estado) {
     5c2:	80 2f       	mov	r24, r16
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	89 30       	cpi	r24, 0x09	; 9
     5c8:	91 05       	cpc	r25, r1
     5ca:	98 f7       	brcc	.-26     	; 0x5b2 <main+0x4c>
     5cc:	fc 01       	movw	r30, r24
     5ce:	ec 5c       	subi	r30, 0xCC	; 204
     5d0:	ff 4f       	sbci	r31, 0xFF	; 255
     5d2:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			LCD_limpar();
     5d6:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			mensagem_Inicial();
     5da:	0e 94 5c 00 	call	0xb8	; 0xb8 <mensagem_Inicial>
			while (varredura() == 0) {
     5de:	04 c0       	rjmp	.+8      	; 0x5e8 <main+0x82>
				if (isBlocked()) break;
     5e0:	0e 94 60 07 	call	0xec0	; 0xec0 <isBlocked>
     5e4:	89 2b       	or	r24, r25
     5e6:	21 f4       	brne	.+8      	; 0x5f0 <main+0x8a>

		switch (estado) {
			case ESTADO_TELA_INICIAL:
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     5e8:	0e 94 23 08 	call	0x1046	; 0x1046 <varredura>
     5ec:	88 23       	and	r24, r24
     5ee:	c1 f3       	breq	.-16     	; 0x5e0 <main+0x7a>
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     5f0:	0e 94 60 07 	call	0xec0	; 0xec0 <isBlocked>
     5f4:	89 2b       	or	r24, r25
     5f6:	a1 f2       	breq	.-88     	; 0x5a0 <main+0x3a>
     5f8:	dc cf       	rjmp	.-72     	; 0x5b2 <main+0x4c>
			break;

			case ESTADO_CODIGO:
			ler_codigo_aluno(codigo_aluno);
     5fa:	ce 01       	movw	r24, r28
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	0e 94 87 01 	call	0x30e	; 0x30e <ler_codigo_aluno>
			if (!isBlocked()) estado = ESTADO_SENHA;
     602:	0e 94 60 07 	call	0xec0	; 0xec0 <isBlocked>
     606:	89 2b       	or	r24, r25
     608:	69 f2       	breq	.-102    	; 0x5a4 <main+0x3e>
     60a:	d3 cf       	rjmp	.-90     	; 0x5b2 <main+0x4c>
			break;

			case ESTADO_SENHA:
			ler_senha(senha_aluno);
     60c:	ce 01       	movw	r24, r28
     60e:	08 96       	adiw	r24, 0x08	; 8
     610:	0e 94 cd 01 	call	0x39a	; 0x39a <ler_senha>
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     614:	0e 94 60 07 	call	0xec0	; 0xec0 <isBlocked>
     618:	89 2b       	or	r24, r25
     61a:	31 f2       	breq	.-116    	; 0x5a8 <main+0x42>
     61c:	ca cf       	rjmp	.-108    	; 0x5b2 <main+0x4c>
			break;

			case ESTADO_VALIDACAO:
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
     61e:	be 01       	movw	r22, r28
     620:	68 5f       	subi	r22, 0xF8	; 248
     622:	7f 4f       	sbci	r23, 0xFF	; 255
     624:	ce 01       	movw	r24, r28
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	0e 94 14 02 	call	0x428	; 0x428 <validar_codigo_aluno>
     62c:	89 2b       	or	r24, r25
     62e:	a1 f0       	breq	.+40     	; 0x658 <main+0xf2>
				LCD_limpar();
     630:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Codigo valido!");
     634:	48 e8       	ldi	r20, 0x88	; 136
     636:	51 e0       	ldi	r21, 0x01	; 1
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Processando...");
     640:	47 e9       	ldi	r20, 0x97	; 151
     642:	51 e0       	ldi	r21, 0x01	; 1
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     64c:	80 ed       	ldi	r24, 0xD0	; 208
     64e:	97 e0       	ldi	r25, 0x07	; 7
     650:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
				estado = ESTADO_MENU;
     654:	04 e0       	ldi	r16, 0x04	; 4
     656:	ad cf       	rjmp	.-166    	; 0x5b2 <main+0x4c>
				} else {
				LCD_limpar();
     658:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Conta invalida!");
     65c:	46 ea       	ldi	r20, 0xA6	; 166
     65e:	51 e0       	ldi	r21, 0x01	; 1
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente novamente");
     668:	46 eb       	ldi	r20, 0xB6	; 182
     66a:	51 e0       	ldi	r21, 0x01	; 1
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     674:	80 ed       	ldi	r24, 0xD0	; 208
     676:	97 e0       	ldi	r25, 0x07	; 7
     678:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     67c:	00 e0       	ldi	r16, 0x00	; 0
     67e:	99 cf       	rjmp	.-206    	; 0x5b2 <main+0x4c>
			}
			break;

			case ESTADO_MENU:
			LCD_limpar();
     680:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     684:	f7 01       	movw	r30, r14
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	8c 0f       	add	r24, r28
     690:	9d 1f       	adc	r25, r29
     692:	e8 0f       	add	r30, r24
     694:	f9 1f       	adc	r31, r25
     696:	46 85       	ldd	r20, Z+14	; 0x0e
     698:	57 85       	ldd	r21, Z+15	; 0x0f
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes)
     6a2:	67 01       	movw	r12, r14
     6a4:	9f ef       	ldi	r25, 0xFF	; 255
     6a6:	c9 1a       	sub	r12, r25
     6a8:	d9 0a       	sbc	r13, r25
     6aa:	84 e0       	ldi	r24, 0x04	; 4
     6ac:	c8 16       	cp	r12, r24
     6ae:	d1 04       	cpc	r13, r1
     6b0:	84 f4       	brge	.+32     	; 0x6d2 <main+0x16c>
			LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     6b2:	f6 01       	movw	r30, r12
     6b4:	ee 0f       	add	r30, r30
     6b6:	ff 1f       	adc	r31, r31
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	8c 0f       	add	r24, r28
     6be:	9d 1f       	adc	r25, r29
     6c0:	e8 0f       	add	r30, r24
     6c2:	f9 1f       	adc	r31, r25
     6c4:	46 85       	ldd	r20, Z+14	; 0x0e
     6c6:	57 85       	ldd	r21, Z+15	; 0x0f
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     6d0:	0b c0       	rjmp	.+22     	; 0x6e8 <main+0x182>
			else
			LCD_Escrever_Linha(1, 0, " ");
     6d2:	45 e3       	ldi	r20, 0x35	; 53
     6d4:	51 e0       	ldi	r21, 0x01	; 1
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <main+0x182>

			while ((tecla = varredura()) == 0) {
				if (isBlocked()) break;
     6e0:	0e 94 60 07 	call	0xec0	; 0xec0 <isBlocked>
     6e4:	89 2b       	or	r24, r25
     6e6:	29 f4       	brne	.+10     	; 0x6f2 <main+0x18c>
			if (indice_menu + 1 < total_opcoes)
			LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
			else
			LCD_Escrever_Linha(1, 0, " ");

			while ((tecla = varredura()) == 0) {
     6e8:	0e 94 23 08 	call	0x1046	; 0x1046 <varredura>
     6ec:	18 2f       	mov	r17, r24
     6ee:	88 23       	and	r24, r24
     6f0:	b9 f3       	breq	.-18     	; 0x6e0 <main+0x17a>
				if (isBlocked()) break;
			}

			delay1ms(300);
     6f2:	8c e2       	ldi	r24, 0x2C	; 44
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
			if (tecla == 'B' && indice_menu < total_opcoes - 2) {
     6fa:	12 34       	cpi	r17, 0x42	; 66
     6fc:	29 f4       	brne	.+10     	; 0x708 <main+0x1a2>
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	e9 16       	cp	r14, r25
     702:	f1 04       	cpc	r15, r1
     704:	0c f4       	brge	.+2      	; 0x708 <main+0x1a2>
     706:	52 cf       	rjmp	.-348    	; 0x5ac <main+0x46>
				indice_menu++;
				} else if (tecla == 'A' && indice_menu > 0) {
     708:	11 34       	cpi	r17, 0x41	; 65
     70a:	39 f4       	brne	.+14     	; 0x71a <main+0x1b4>
     70c:	1e 14       	cp	r1, r14
     70e:	1f 04       	cpc	r1, r15
     710:	24 f4       	brge	.+8      	; 0x71a <main+0x1b4>
				indice_menu--;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	e8 1a       	sub	r14, r24
     716:	f1 08       	sbc	r15, r1
     718:	4c cf       	rjmp	.-360    	; 0x5b2 <main+0x4c>
				} else if (tecla == '*') {
     71a:	1a 32       	cpi	r17, 0x2A	; 42
     71c:	71 f4       	brne	.+28     	; 0x73a <main+0x1d4>
				LCD_limpar();
     71e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Voltando...");
     722:	46 ec       	ldi	r20, 0xC6	; 198
     724:	51 e0       	ldi	r21, 0x01	; 1
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(1000);
     72e:	88 ee       	ldi	r24, 0xE8	; 232
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     736:	00 e0       	ldi	r16, 0x00	; 0
     738:	3c cf       	rjmp	.-392    	; 0x5b2 <main+0x4c>
				} else if (tecla == opcoes[indice_menu][0]) {
     73a:	f7 01       	movw	r30, r14
     73c:	ee 0f       	add	r30, r30
     73e:	ff 1f       	adc	r31, r31
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	8c 0f       	add	r24, r28
     746:	9d 1f       	adc	r25, r29
     748:	e8 0f       	add	r30, r24
     74a:	f9 1f       	adc	r31, r25
     74c:	06 84       	ldd	r0, Z+14	; 0x0e
     74e:	f7 85       	ldd	r31, Z+15	; 0x0f
     750:	e0 2d       	mov	r30, r0
     752:	80 81       	ld	r24, Z
     754:	18 13       	cpse	r17, r24
     756:	2d cf       	rjmp	.-422    	; 0x5b2 <main+0x4c>
				switch (tecla) {
     758:	12 33       	cpi	r17, 0x32	; 50
     75a:	51 f0       	breq	.+20     	; 0x770 <main+0x20a>
     75c:	20 f4       	brcc	.+8      	; 0x766 <main+0x200>
     75e:	11 33       	cpi	r17, 0x31	; 49
     760:	09 f4       	brne	.+2      	; 0x764 <main+0x1fe>
     762:	26 cf       	rjmp	.-436    	; 0x5b0 <main+0x4a>
     764:	26 cf       	rjmp	.-436    	; 0x5b2 <main+0x4c>
     766:	13 33       	cpi	r17, 0x33	; 51
     768:	29 f0       	breq	.+10     	; 0x774 <main+0x20e>
     76a:	14 33       	cpi	r17, 0x34	; 52
     76c:	29 f0       	breq	.+10     	; 0x778 <main+0x212>
     76e:	21 cf       	rjmp	.-446    	; 0x5b2 <main+0x4c>
					case '1': estado = ESTADO_SAQUE; break;
					case '2': estado = ESTADO_DEPOSITO; break;
     770:	06 e0       	ldi	r16, 0x06	; 6
     772:	1f cf       	rjmp	.-450    	; 0x5b2 <main+0x4c>
					case '3': estado = ESTADO_PAGAMENTO; break;
     774:	07 e0       	ldi	r16, 0x07	; 7
     776:	1d cf       	rjmp	.-454    	; 0x5b2 <main+0x4c>
					case '4': estado = ESTADO_SALDO; break;
     778:	08 e0       	ldi	r16, 0x08	; 8
     77a:	1b cf       	rjmp	.-458    	; 0x5b2 <main+0x4c>
				}
			}
			break;

			case ESTADO_SAQUE:
			realizar_saque();
     77c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <realizar_saque>
			estado = ESTADO_MENU;
     780:	04 e0       	ldi	r16, 0x04	; 4
			break;
     782:	17 cf       	rjmp	.-466    	; 0x5b2 <main+0x4c>

			case ESTADO_DEPOSITO:
			realizar_deposito();
     784:	0e 94 2c 05 	call	0xa58	; 0xa58 <realizar_deposito>
			estado = ESTADO_MENU;
     788:	04 e0       	ldi	r16, 0x04	; 4
			break;
     78a:	13 cf       	rjmp	.-474    	; 0x5b2 <main+0x4c>

			case ESTADO_PAGAMENTO:
			LCD_limpar();
     78c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Pagamento");
     790:	4a ef       	ldi	r20, 0xFA	; 250
     792:	51 e0       	ldi	r21, 0x01	; 1
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
     79c:	42 ed       	ldi	r20, 0xD2	; 210
     79e:	51 e0       	ldi	r21, 0x01	; 1
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     7a8:	80 ed       	ldi	r24, 0xD0	; 208
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
			estado = ESTADO_MENU;
     7b0:	04 e0       	ldi	r16, 0x04	; 4
			break;
     7b2:	ff ce       	rjmp	.-514    	; 0x5b2 <main+0x4c>

			case ESTADO_SALDO:
			consultar_saldo();
     7b4:	0e 94 b3 05 	call	0xb66	; 0xb66 <consultar_saldo>
			estado = ESTADO_MENU;
     7b8:	04 e0       	ldi	r16, 0x04	; 4
			break;
     7ba:	fb ce       	rjmp	.-522    	; 0x5b2 <main+0x4c>

000007bc <enviar_mensagem_saque>:
		}
	}
}

// Função para enviar mensagem de saque
void enviar_mensagem_saque(const char* valor) {
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	bc 01       	movw	r22, r24
	mensagem[2] = (char)tamanho_valor;

	strncpy(&mensagem[3], valor, tamanho_valor);

	SerialEnviaChars(tamanho_mensagem, mensagem);
}
     7d2:	ed b6       	in	r14, 0x3d	; 61
     7d4:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de saque
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
     7d6:	fc 01       	movw	r30, r24
     7d8:	01 90       	ld	r0, Z+
     7da:	00 20       	and	r0, r0
     7dc:	e9 f7       	brne	.-6      	; 0x7d8 <enviar_mensagem_saque+0x1c>
     7de:	31 97       	sbiw	r30, 0x01	; 1
     7e0:	af 01       	movw	r20, r30
     7e2:	48 1b       	sub	r20, r24
     7e4:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3;
     7e6:	6a 01       	movw	r12, r20
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	c8 0e       	add	r12, r24
     7ec:	d1 1c       	adc	r13, r1

	char mensagem[tamanho_mensagem];
     7ee:	ed b7       	in	r30, 0x3d	; 61
     7f0:	fe b7       	in	r31, 0x3e	; 62
     7f2:	ec 19       	sub	r30, r12
     7f4:	fd 09       	sbc	r31, r13
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	fe bf       	out	0x3e, r31	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	ed bf       	out	0x3d, r30	; 61
     800:	0d b7       	in	r16, 0x3d	; 61
     802:	1e b7       	in	r17, 0x3e	; 62
     804:	0f 5f       	subi	r16, 0xFF	; 255
     806:	1f 4f       	sbci	r17, 0xFF	; 255
	mensagem[0] = 'C';
     808:	83 e4       	ldi	r24, 0x43	; 67
     80a:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S';
     80c:	83 e5       	ldi	r24, 0x53	; 83
     80e:	f8 01       	movw	r30, r16
     810:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor;
     812:	42 83       	std	Z+2, r20	; 0x02

	strncpy(&mensagem[3], valor, tamanho_valor);
     814:	8d b7       	in	r24, 0x3d	; 61
     816:	9e b7       	in	r25, 0x3e	; 62
     818:	04 96       	adiw	r24, 0x04	; 4
     81a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <strncpy>

	SerialEnviaChars(tamanho_mensagem, mensagem);
     81e:	b8 01       	movw	r22, r16
     820:	c6 01       	movw	r24, r12
     822:	0e 94 0f 06 	call	0xc1e	; 0xc1e <SerialEnviaChars>
}
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	fe be       	out	0x3e, r15	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	ed be       	out	0x3d, r14	; 61
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	08 95       	ret

00000842 <receber_resposta_servidor>:

// Função para receber resposta do servidor
char receber_resposta_servidor(void) {
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	00 d0       	rcall	.+0      	; 0x848 <receber_resposta_servidor+0x6>
     848:	00 d0       	rcall	.+0      	; 0x84a <receber_resposta_servidor+0x8>
     84a:	1f 92       	push	r1
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
	char resposta[5];

	SerialRecebeChars(4, resposta);
     850:	be 01       	movw	r22, r28
     852:	6f 5f       	subi	r22, 0xFF	; 255
     854:	7f 4f       	sbci	r23, 0xFF	; 255
     856:	84 e0       	ldi	r24, 0x04	; 4
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 9b 07 	call	0xf36	; 0xf36 <SerialRecebeChars>
	resposta[4]='\0';
     85e:	1d 82       	std	Y+5, r1	; 0x05
	
	LCD_limpar();
     860:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, resposta);
     864:	ae 01       	movw	r20, r28
     866:	4f 5f       	subi	r20, 0xFF	; 255
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	delay1ms(2000);
     872:	80 ed       	ldi	r24, 0xD0	; 208
     874:	97 e0       	ldi	r25, 0x07	; 7
     876:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>

	if(resposta[0] == 'S' && resposta[1] == 'S') {
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	83 35       	cpi	r24, 0x53	; 83
     87e:	29 f4       	brne	.+10     	; 0x88a <receber_resposta_servidor+0x48>
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	83 35       	cpi	r24, 0x53	; 83
     884:	21 f4       	brne	.+8      	; 0x88e <receber_resposta_servidor+0x4c>
		return resposta[2]; // 'O' ou 'I'
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	03 c0       	rjmp	.+6      	; 0x890 <receber_resposta_servidor+0x4e>
	}

	return 'E'; // Erro
     88a:	85 e4       	ldi	r24, 0x45	; 69
     88c:	01 c0       	rjmp	.+2      	; 0x890 <receber_resposta_servidor+0x4e>
     88e:	85 e4       	ldi	r24, 0x45	; 69
}
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <realizar_saque>:
#include "teclado.h"
#include <util/delay.h>
#include <string.h>

// Função para realizar um saque
void realizar_saque(void) {
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	2b 97       	sbiw	r28, 0x0b	; 11
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
     8b8:	fe 01       	movw	r30, r28
     8ba:	31 96       	adiw	r30, 0x01	; 1
     8bc:	89 e0       	ldi	r24, 0x09	; 9
     8be:	df 01       	movw	r26, r30
     8c0:	1d 92       	st	X+, r1
     8c2:	8a 95       	dec	r24
     8c4:	e9 f7       	brne	.-6      	; 0x8c0 <realizar_saque+0x20>
	int pos = 0;
	char tecla;

	LCD_limpar();
     8c6:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
     8ca:	4c e0       	ldi	r20, 0x0C	; 12
     8cc:	52 e0       	ldi	r21, 0x02	; 2
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
     8d6:	4c e1       	ldi	r20, 0x1C	; 28
     8d8:	52 e0       	ldi	r21, 0x02	; 2
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
#include <string.h>

// Função para realizar um saque
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
     8e2:	00 e0       	ldi	r16, 0x00	; 0
     8e4:	10 e0       	ldi	r17, 0x00	; 0
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		tecla = varredura();
     8e6:	0e 94 23 08 	call	0x1046	; 0x1046 <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     8ea:	90 ed       	ldi	r25, 0xD0	; 208
     8ec:	98 0f       	add	r25, r24
     8ee:	9a 30       	cpi	r25, 0x0A	; 10
     8f0:	d8 f4       	brcc	.+54     	; 0x928 <__stack+0x29>
     8f2:	08 30       	cpi	r16, 0x08	; 8
     8f4:	11 05       	cpc	r17, r1
     8f6:	c4 f4       	brge	.+48     	; 0x928 <__stack+0x29>
			valor_saque[pos] = tecla;
     8f8:	e1 e0       	ldi	r30, 0x01	; 1
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	ec 0f       	add	r30, r28
     8fe:	fd 1f       	adc	r31, r29
     900:	e0 0f       	add	r30, r16
     902:	f1 1f       	adc	r31, r17
     904:	80 83       	st	Z, r24

			char str[2] = {tecla, '\0'};
     906:	8a 87       	std	Y+10, r24	; 0x0a
     908:	1b 86       	std	Y+11, r1	; 0x0b
			LCD_Escrever_Linha(1, 2 + pos, str);
     90a:	62 e0       	ldi	r22, 0x02	; 2
     90c:	60 0f       	add	r22, r16
     90e:	ae 01       	movw	r20, r28
     910:	46 5f       	subi	r20, 0xF6	; 246
     912:	5f 4f       	sbci	r21, 0xFF	; 255
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     91a:	0f 5f       	subi	r16, 0xFF	; 255
     91c:	1f 4f       	sbci	r17, 0xFF	; 255

			delay1ms(200);
     91e:	88 ec       	ldi	r24, 0xC8	; 200
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		tecla = varredura();

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     926:	df cf       	rjmp	.-66     	; 0x8e6 <realizar_saque+0x46>
			LCD_Escrever_Linha(1, 2 + pos, str);
			pos++;

			delay1ms(200);
		}
		else if(tecla == '#' && pos > 0) {
     928:	83 32       	cpi	r24, 0x23	; 35
     92a:	99 f5       	brne	.+102    	; 0x992 <__stack+0x93>
     92c:	10 16       	cp	r1, r16
     92e:	11 06       	cpc	r1, r17
     930:	84 f5       	brge	.+96     	; 0x992 <__stack+0x93>
			valor_saque[pos] = '\0';
     932:	e1 e0       	ldi	r30, 0x01	; 1
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	ec 0f       	add	r30, r28
     938:	fd 1f       	adc	r31, r29
     93a:	e0 0f       	add	r30, r16
     93c:	f1 1f       	adc	r31, r17
     93e:	10 82       	st	Z, r1

			enviar_mensagem_saque(valor_saque);
     940:	ce 01       	movw	r24, r28
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	0e 94 de 03 	call	0x7bc	; 0x7bc <enviar_mensagem_saque>
			char resposta = receber_resposta_servidor();
     948:	0e 94 21 04 	call	0x842	; 0x842 <receber_resposta_servidor>
     94c:	18 2f       	mov	r17, r24

			LCD_limpar();
     94e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			if(resposta == 'O') {
     952:	1f 34       	cpi	r17, 0x4F	; 79
     954:	69 f4       	brne	.+26     	; 0x970 <__stack+0x71>
				LCD_Escrever_Linha(0, 0, "Saque realizado!");
     956:	4f e1       	ldi	r20, 0x1F	; 31
     958:	52 e0       	ldi	r21, 0x02	; 2
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Retire o dinheiro");
     962:	40 e3       	ldi	r20, 0x30	; 48
     964:	52 e0       	ldi	r21, 0x02	; 2
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     96e:	0c c0       	rjmp	.+24     	; 0x988 <__stack+0x89>
				} else {
				LCD_Escrever_Linha(0, 0, "Saldo insuficiente");
     970:	42 e4       	ldi	r20, 0x42	; 66
     972:	52 e0       	ldi	r21, 0x02	; 2
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente outro valor");
     97c:	45 e5       	ldi	r20, 0x55	; 85
     97e:	52 e0       	ldi	r21, 0x02	; 2
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			}
			delay1ms(3000);
     988:	88 eb       	ldi	r24, 0xB8	; 184
     98a:	9b e0       	ldi	r25, 0x0B	; 11
     98c:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
			break;
     990:	15 c0       	rjmp	.+42     	; 0x9bc <__stack+0xbd>
		}
		else if(tecla == '*') {
     992:	8a 32       	cpi	r24, 0x2A	; 42
     994:	09 f0       	breq	.+2      	; 0x998 <__stack+0x99>
     996:	a7 cf       	rjmp	.-178    	; 0x8e6 <realizar_saque+0x46>
			LCD_limpar();
     998:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
     99c:	47 e6       	ldi	r20, 0x67	; 103
     99e:	52 e0       	ldi	r21, 0x02	; 2
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
     9a8:	4d ea       	ldi	r20, 0xAD	; 173
     9aa:	52 e0       	ldi	r21, 0x02	; 2
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     9b4:	80 ed       	ldi	r24, 0xD0	; 208
     9b6:	97 e0       	ldi	r25, 0x07	; 7
     9b8:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
			break;
		}
	}
}
     9bc:	2b 96       	adiw	r28, 0x0b	; 11
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	08 95       	ret

000009d2 <enviar_mensagem_deposito>:
		}
	}
}

// Função para enviar mensagem de depósito
void enviar_mensagem_deposito(const char* valor) {
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	bc 01       	movw	r22, r24
	mensagem[2] = (char)tamanho_valor;

	strncpy(&mensagem[3], valor, tamanho_valor);

	SerialEnviaChars(tamanho_mensagem, mensagem);
}
     9e8:	ed b6       	in	r14, 0x3d	; 61
     9ea:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de depósito
void enviar_mensagem_deposito(const char* valor) {
	int tamanho_valor = strlen(valor);
     9ec:	fc 01       	movw	r30, r24
     9ee:	01 90       	ld	r0, Z+
     9f0:	00 20       	and	r0, r0
     9f2:	e9 f7       	brne	.-6      	; 0x9ee <enviar_mensagem_deposito+0x1c>
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	af 01       	movw	r20, r30
     9f8:	48 1b       	sub	r20, r24
     9fa:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3;
     9fc:	6a 01       	movw	r12, r20
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	c8 0e       	add	r12, r24
     a02:	d1 1c       	adc	r13, r1

	char mensagem[tamanho_mensagem];
     a04:	ed b7       	in	r30, 0x3d	; 61
     a06:	fe b7       	in	r31, 0x3e	; 62
     a08:	ec 19       	sub	r30, r12
     a0a:	fd 09       	sbc	r31, r13
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	fe bf       	out	0x3e, r31	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	ed bf       	out	0x3d, r30	; 61
     a16:	0d b7       	in	r16, 0x3d	; 61
     a18:	1e b7       	in	r17, 0x3e	; 62
     a1a:	0f 5f       	subi	r16, 0xFF	; 255
     a1c:	1f 4f       	sbci	r17, 0xFF	; 255
	mensagem[0] = 'C';
     a1e:	83 e4       	ldi	r24, 0x43	; 67
     a20:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'D';
     a22:	84 e4       	ldi	r24, 0x44	; 68
     a24:	f8 01       	movw	r30, r16
     a26:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor;
     a28:	42 83       	std	Z+2, r20	; 0x02

	strncpy(&mensagem[3], valor, tamanho_valor);
     a2a:	8d b7       	in	r24, 0x3d	; 61
     a2c:	9e b7       	in	r25, 0x3e	; 62
     a2e:	04 96       	adiw	r24, 0x04	; 4
     a30:	0e 94 e5 08 	call	0x11ca	; 0x11ca <strncpy>

	SerialEnviaChars(tamanho_mensagem, mensagem);
     a34:	b8 01       	movw	r22, r16
     a36:	c6 01       	movw	r24, r12
     a38:	0e 94 0f 06 	call	0xc1e	; 0xc1e <SerialEnviaChars>
}
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	fe be       	out	0x3e, r15	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	ed be       	out	0x3d, r14	; 61
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	08 95       	ret

00000a58 <realizar_deposito>:

	return 'E'; // Erro
}

// Função para realizar um depósito
void realizar_deposito(void) {
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	2b 97       	sbiw	r28, 0x0b	; 11
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
	char valor_deposito[MAX_VALOR_SAQUE] = {0};
     a70:	fe 01       	movw	r30, r28
     a72:	31 96       	adiw	r30, 0x01	; 1
     a74:	89 e0       	ldi	r24, 0x09	; 9
     a76:	df 01       	movw	r26, r30
     a78:	1d 92       	st	X+, r1
     a7a:	8a 95       	dec	r24
     a7c:	e9 f7       	brne	.-6      	; 0xa78 <realizar_deposito+0x20>
	int pos = 0;
	char tecla;

	LCD_limpar();
     a7e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do deposito:");
     a82:	40 e7       	ldi	r20, 0x70	; 112
     a84:	52 e0       	ldi	r21, 0x02	; 2
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
     a8e:	4c e1       	ldi	r20, 0x1C	; 28
     a90:	52 e0       	ldi	r21, 0x02	; 2
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
}

// Função para realizar um depósito
void realizar_deposito(void) {
	char valor_deposito[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
     a9a:	00 e0       	ldi	r16, 0x00	; 0
     a9c:	10 e0       	ldi	r17, 0x00	; 0
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Valor do deposito:");
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		tecla = varredura();
     a9e:	0e 94 23 08 	call	0x1046	; 0x1046 <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     aa2:	90 ed       	ldi	r25, 0xD0	; 208
     aa4:	98 0f       	add	r25, r24
     aa6:	9a 30       	cpi	r25, 0x0A	; 10
     aa8:	d8 f4       	brcc	.+54     	; 0xae0 <realizar_deposito+0x88>
     aaa:	08 30       	cpi	r16, 0x08	; 8
     aac:	11 05       	cpc	r17, r1
     aae:	c4 f4       	brge	.+48     	; 0xae0 <realizar_deposito+0x88>
			valor_deposito[pos] = tecla;
     ab0:	e1 e0       	ldi	r30, 0x01	; 1
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	ec 0f       	add	r30, r28
     ab6:	fd 1f       	adc	r31, r29
     ab8:	e0 0f       	add	r30, r16
     aba:	f1 1f       	adc	r31, r17
     abc:	80 83       	st	Z, r24

			char str[2] = {tecla, '\0'};
     abe:	8a 87       	std	Y+10, r24	; 0x0a
     ac0:	1b 86       	std	Y+11, r1	; 0x0b
			LCD_Escrever_Linha(1, 2 + pos, str);
     ac2:	62 e0       	ldi	r22, 0x02	; 2
     ac4:	60 0f       	add	r22, r16
     ac6:	ae 01       	movw	r20, r28
     ac8:	46 5f       	subi	r20, 0xF6	; 246
     aca:	5f 4f       	sbci	r21, 0xFF	; 255
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     ad2:	0f 5f       	subi	r16, 0xFF	; 255
     ad4:	1f 4f       	sbci	r17, 0xFF	; 255

			delay1ms(200);
     ad6:	88 ec       	ldi	r24, 0xC8	; 200
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		tecla = varredura();

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     ade:	df cf       	rjmp	.-66     	; 0xa9e <realizar_deposito+0x46>
			LCD_Escrever_Linha(1, 2 + pos, str);
			pos++;

			delay1ms(200);
		}
		else if(tecla == '#' && pos > 0) {
     ae0:	83 32       	cpi	r24, 0x23	; 35
     ae2:	39 f5       	brne	.+78     	; 0xb32 <realizar_deposito+0xda>
     ae4:	10 16       	cp	r1, r16
     ae6:	11 06       	cpc	r1, r17
     ae8:	24 f5       	brge	.+72     	; 0xb32 <realizar_deposito+0xda>
			valor_deposito[pos] = '\0';
     aea:	e1 e0       	ldi	r30, 0x01	; 1
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	ec 0f       	add	r30, r28
     af0:	fd 1f       	adc	r31, r29
     af2:	e0 0f       	add	r30, r16
     af4:	f1 1f       	adc	r31, r17
     af6:	10 82       	st	Z, r1

			enviar_mensagem_deposito(valor_deposito);
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <enviar_mensagem_deposito>
			char resposta = receber_resposta_servidor();
     b00:	0e 94 21 04 	call	0x842	; 0x842 <receber_resposta_servidor>
     b04:	18 2f       	mov	r17, r24

			LCD_limpar();
     b06:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			if(resposta == 'O') {
     b0a:	1f 34       	cpi	r17, 0x4F	; 79
     b0c:	39 f4       	brne	.+14     	; 0xb1c <realizar_deposito+0xc4>
				LCD_Escrever_Linha(0, 0, "Deposito feito!");
     b0e:	43 e8       	ldi	r20, 0x83	; 131
     b10:	52 e0       	ldi	r21, 0x02	; 2
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     b1a:	06 c0       	rjmp	.+12     	; 0xb28 <realizar_deposito+0xd0>
				} else {
				LCD_Escrever_Linha(0, 0, "Erro no deposito");
     b1c:	43 e9       	ldi	r20, 0x93	; 147
     b1e:	52 e0       	ldi	r21, 0x02	; 2
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			}
			delay1ms(3000);
     b28:	88 eb       	ldi	r24, 0xB8	; 184
     b2a:	9b e0       	ldi	r25, 0x0B	; 11
     b2c:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
			break;
     b30:	0f c0       	rjmp	.+30     	; 0xb50 <realizar_deposito+0xf8>
		}
		else if(tecla == '*') {
     b32:	8a 32       	cpi	r24, 0x2A	; 42
     b34:	09 f0       	breq	.+2      	; 0xb38 <realizar_deposito+0xe0>
     b36:	b3 cf       	rjmp	.-154    	; 0xa9e <realizar_deposito+0x46>
			LCD_limpar();
     b38:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao cancelada");
     b3c:	44 ea       	ldi	r20, 0xA4	; 164
     b3e:	52 e0       	ldi	r21, 0x02	; 2
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     b48:	80 ed       	ldi	r24, 0xD0	; 208
     b4a:	97 e0       	ldi	r25, 0x07	; 7
     b4c:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
			break;
		}
	}
}
     b50:	2b 96       	adiw	r28, 0x0b	; 11
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	08 95       	ret

00000b66 <consultar_saldo>:

	SerialEnviaChars(tamanho_mensagem, mensagem);
}

// Função para consultar saldo
void consultar_saldo(void) {
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	2d 97       	sbiw	r28, 0x0d	; 13
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
	char mensagem[3] = { 'C', 'L', 0 };
     b7a:	83 e4       	ldi	r24, 0x43	; 67
     b7c:	89 83       	std	Y+1, r24	; 0x01
     b7e:	8c e4       	ldi	r24, 0x4C	; 76
     b80:	8a 83       	std	Y+2, r24	; 0x02
     b82:	1b 82       	std	Y+3, r1	; 0x03
	SerialEnviaChars(3, mensagem);
     b84:	be 01       	movw	r22, r28
     b86:	6f 5f       	subi	r22, 0xFF	; 255
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <SerialEnviaChars>

	char resposta[10];
	SerialRecebeChars(9, resposta);
     b92:	be 01       	movw	r22, r28
     b94:	6c 5f       	subi	r22, 0xFC	; 252
     b96:	7f 4f       	sbci	r23, 0xFF	; 255
     b98:	89 e0       	ldi	r24, 0x09	; 9
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 9b 07 	call	0xf36	; 0xf36 <SerialRecebeChars>
	resposta[9] = '\0';
     ba0:	1d 86       	std	Y+13, r1	; 0x0d

	LCD_limpar();
     ba2:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	if (resposta[0] == 'S' && resposta[1] == 'L') {
     ba6:	8c 81       	ldd	r24, Y+4	; 0x04
     ba8:	83 35       	cpi	r24, 0x53	; 83
     baa:	89 f4       	brne	.+34     	; 0xbce <consultar_saldo+0x68>
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	8c 34       	cpi	r24, 0x4C	; 76
     bb0:	71 f4       	brne	.+28     	; 0xbce <consultar_saldo+0x68>
		LCD_Escrever_Linha(0, 0, "Saldo atual:");
     bb2:	47 eb       	ldi	r20, 0xB7	; 183
     bb4:	52 e0       	ldi	r21, 0x02	; 2
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, &resposta[2]);
     bbe:	ae 01       	movw	r20, r28
     bc0:	4a 5f       	subi	r20, 0xFA	; 250
     bc2:	5f 4f       	sbci	r21, 0xFF	; 255
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     bcc:	0c c0       	rjmp	.+24     	; 0xbe6 <consultar_saldo+0x80>
		} else {
		LCD_Escrever_Linha(0, 0, "Erro ao obter");
     bce:	44 ec       	ldi	r20, 0xC4	; 196
     bd0:	52 e0       	ldi	r21, 0x02	; 2
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "saldo");
     bda:	42 ed       	ldi	r20, 0xD2	; 210
     bdc:	52 e0       	ldi	r21, 0x02	; 2
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	}
	delay1ms(3000);
     be6:	88 eb       	ldi	r24, 0xB8	; 184
     be8:	9b e0       	ldi	r25, 0x0B	; 11
     bea:	0e 94 a7 08 	call	0x114e	; 0x114e <delay1ms>
}
     bee:	2d 96       	adiw	r28, 0x0d	; 13
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <initUART>:
	if (uart_head >= uart_tail) {
		return uart_head - uart_tail;
		} else {
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}
     c00:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     c04:	83 e3       	ldi	r24, 0x33	; 51
     c06:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     c0a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c0e:	88 e9       	ldi	r24, 0x98	; 152
     c10:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     c14:	86 e0       	ldi	r24, 0x06	; 6
     c16:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     c1a:	78 94       	sei
     c1c:	08 95       	ret

00000c1e <SerialEnviaChars>:
     c1e:	ac 01       	movw	r20, r24
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	0c c0       	rjmp	.+24     	; 0xc3e <SerialEnviaChars+0x20>
     c26:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c2a:	95 ff       	sbrs	r25, 5
     c2c:	fc cf       	rjmp	.-8      	; 0xc26 <SerialEnviaChars+0x8>
     c2e:	fb 01       	movw	r30, r22
     c30:	e2 0f       	add	r30, r18
     c32:	f3 1f       	adc	r31, r19
     c34:	90 81       	ld	r25, Z
     c36:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c3a:	2f 5f       	subi	r18, 0xFF	; 255
     c3c:	3f 4f       	sbci	r19, 0xFF	; 255
     c3e:	24 17       	cp	r18, r20
     c40:	35 07       	cpc	r19, r21
     c42:	8c f3       	brlt	.-30     	; 0xc26 <SerialEnviaChars+0x8>
     c44:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c48:	86 ff       	sbrs	r24, 6
     c4a:	fc cf       	rjmp	.-8      	; 0xc44 <SerialEnviaChars+0x26>
     c4c:	e0 ec       	ldi	r30, 0xC0	; 192
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 64       	ori	r24, 0x40	; 64
     c54:	80 83       	st	Z, r24
     c56:	08 95       	ret

00000c58 <SerialEnviaString>:
     c58:	fc 01       	movw	r30, r24
     c5a:	01 90       	ld	r0, Z+
     c5c:	00 20       	and	r0, r0
     c5e:	e9 f7       	brne	.-6      	; 0xc5a <SerialEnviaString+0x2>
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	bc 01       	movw	r22, r24
     c64:	9f 01       	movw	r18, r30
     c66:	28 1b       	sub	r18, r24
     c68:	39 0b       	sbc	r19, r25
     c6a:	c9 01       	movw	r24, r18
     c6c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <SerialEnviaChars>
     c70:	08 95       	ret

00000c72 <__vector_18>:
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	2f 93       	push	r18
     c7e:	3f 93       	push	r19
     c80:	4f 93       	push	r20
     c82:	5f 93       	push	r21
     c84:	6f 93       	push	r22
     c86:	7f 93       	push	r23
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	af 93       	push	r26
     c8e:	bf 93       	push	r27
     c90:	ef 93       	push	r30
     c92:	ff 93       	push	r31
     c94:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c98:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <sh_bytes_count>
     c9c:	9f ef       	ldi	r25, 0xFF	; 255
     c9e:	9e 0f       	add	r25, r30
     ca0:	95 30       	cpi	r25, 0x05	; 5
     ca2:	d8 f4       	brcc	.+54     	; 0xcda <__vector_18+0x68>
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	9e 0f       	add	r25, r30
     ca8:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <sh_bytes_count>
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	eb 51       	subi	r30, 0x1B	; 27
     cb0:	fd 4f       	sbci	r31, 0xFD	; 253
     cb2:	80 83       	st	Z, r24
     cb4:	96 30       	cpi	r25, 0x06	; 6
     cb6:	09 f0       	breq	.+2      	; 0xcba <__vector_18+0x48>
     cb8:	f2 c0       	rjmp	.+484    	; 0xe9e <__vector_18+0x22c>
     cba:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <sh_command_bytes_received+0x4>
     cbe:	88 50       	subi	r24, 0x08	; 8
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	8c 30       	cpi	r24, 0x0C	; 12
     cc4:	08 f4       	brcc	.+2      	; 0xcc8 <__vector_18+0x56>
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <blocked>
     ccc:	88 ed       	ldi	r24, 0xD8	; 216
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	0e 94 2c 06 	call	0xc58	; 0xc58 <SerialEnviaString>
     cd4:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <sh_bytes_count>
     cd8:	e2 c0       	rjmp	.+452    	; 0xe9e <__vector_18+0x22c>
     cda:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <__data_end>
     cde:	99 23       	and	r25, r25
     ce0:	09 f4       	brne	.+2      	; 0xce4 <__vector_18+0x72>
     ce2:	b3 c0       	rjmp	.+358    	; 0xe4a <__vector_18+0x1d8>
     ce4:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <first_byte_of_potential_command>
     ce8:	93 35       	cpi	r25, 0x53	; 83
     cea:	09 f0       	breq	.+2      	; 0xcee <__vector_18+0x7c>
     cec:	65 c0       	rjmp	.+202    	; 0xdb8 <__vector_18+0x146>
     cee:	84 35       	cpi	r24, 0x54	; 84
     cf0:	41 f4       	brne	.+16     	; 0xd02 <__vector_18+0x90>
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <blocked>
     cf8:	8b ed       	ldi	r24, 0xDB	; 219
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 2c 06 	call	0xc58	; 0xc58 <SerialEnviaString>
     d00:	9f c0       	rjmp	.+318    	; 0xe40 <__vector_18+0x1ce>
     d02:	8c 34       	cpi	r24, 0x4C	; 76
     d04:	39 f4       	brne	.+14     	; 0xd14 <__vector_18+0xa2>
     d06:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <blocked>
     d0a:	8e ed       	ldi	r24, 0xDE	; 222
     d0c:	92 e0       	ldi	r25, 0x02	; 2
     d0e:	0e 94 2c 06 	call	0xc58	; 0xc58 <SerialEnviaString>
     d12:	96 c0       	rjmp	.+300    	; 0xe40 <__vector_18+0x1ce>
     d14:	88 34       	cpi	r24, 0x48	; 72
     d16:	51 f4       	brne	.+20     	; 0xd2c <__vector_18+0xba>
     d18:	e5 ee       	ldi	r30, 0xE5	; 229
     d1a:	f2 e0       	ldi	r31, 0x02	; 2
     d1c:	83 e5       	ldi	r24, 0x53	; 83
     d1e:	80 83       	st	Z, r24
     d20:	88 e4       	ldi	r24, 0x48	; 72
     d22:	81 83       	std	Z+1, r24	; 0x01
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <sh_bytes_count>
     d2a:	8a c0       	rjmp	.+276    	; 0xe40 <__vector_18+0x1ce>
     d2c:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <uart_head>
     d30:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <uart_head+0x1>
     d34:	2f 5f       	subi	r18, 0xFF	; 255
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	2f 77       	andi	r18, 0x7F	; 127
     d3a:	30 78       	andi	r19, 0x80	; 128
     d3c:	33 23       	and	r19, r19
     d3e:	34 f4       	brge	.+12     	; 0xd4c <__vector_18+0xda>
     d40:	21 50       	subi	r18, 0x01	; 1
     d42:	31 09       	sbc	r19, r1
     d44:	20 68       	ori	r18, 0x80	; 128
     d46:	3f 6f       	ori	r19, 0xFF	; 255
     d48:	2f 5f       	subi	r18, 0xFF	; 255
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255
     d4c:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <uart_tail>
     d50:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <uart_tail+0x1>
     d54:	24 17       	cp	r18, r20
     d56:	35 07       	cpc	r19, r21
     d58:	59 f0       	breq	.+22     	; 0xd70 <__vector_18+0xfe>
     d5a:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <uart_head>
     d5e:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <uart_head+0x1>
     d62:	e0 51       	subi	r30, 0x10	; 16
     d64:	fd 4f       	sbci	r31, 0xFD	; 253
     d66:	90 83       	st	Z, r25
     d68:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <uart_head+0x1>
     d6c:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <uart_head>
     d70:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <uart_head>
     d74:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <uart_head+0x1>
     d78:	2f 5f       	subi	r18, 0xFF	; 255
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255
     d7c:	2f 77       	andi	r18, 0x7F	; 127
     d7e:	30 78       	andi	r19, 0x80	; 128
     d80:	33 23       	and	r19, r19
     d82:	34 f4       	brge	.+12     	; 0xd90 <__vector_18+0x11e>
     d84:	21 50       	subi	r18, 0x01	; 1
     d86:	31 09       	sbc	r19, r1
     d88:	20 68       	ori	r18, 0x80	; 128
     d8a:	3f 6f       	ori	r19, 0xFF	; 255
     d8c:	2f 5f       	subi	r18, 0xFF	; 255
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <uart_tail>
     d94:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <uart_tail+0x1>
     d98:	24 17       	cp	r18, r20
     d9a:	35 07       	cpc	r19, r21
     d9c:	09 f4       	brne	.+2      	; 0xda0 <__vector_18+0x12e>
     d9e:	50 c0       	rjmp	.+160    	; 0xe40 <__vector_18+0x1ce>
     da0:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <uart_head>
     da4:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <uart_head+0x1>
     da8:	e0 51       	subi	r30, 0x10	; 16
     daa:	fd 4f       	sbci	r31, 0xFD	; 253
     dac:	80 83       	st	Z, r24
     dae:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <uart_head+0x1>
     db2:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <uart_head>
     db6:	44 c0       	rjmp	.+136    	; 0xe40 <__vector_18+0x1ce>
     db8:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <uart_head>
     dbc:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <uart_head+0x1>
     dc0:	2f 5f       	subi	r18, 0xFF	; 255
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	2f 77       	andi	r18, 0x7F	; 127
     dc6:	30 78       	andi	r19, 0x80	; 128
     dc8:	33 23       	and	r19, r19
     dca:	34 f4       	brge	.+12     	; 0xdd8 <__vector_18+0x166>
     dcc:	21 50       	subi	r18, 0x01	; 1
     dce:	31 09       	sbc	r19, r1
     dd0:	20 68       	ori	r18, 0x80	; 128
     dd2:	3f 6f       	ori	r19, 0xFF	; 255
     dd4:	2f 5f       	subi	r18, 0xFF	; 255
     dd6:	3f 4f       	sbci	r19, 0xFF	; 255
     dd8:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <uart_tail>
     ddc:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <uart_tail+0x1>
     de0:	24 17       	cp	r18, r20
     de2:	35 07       	cpc	r19, r21
     de4:	59 f0       	breq	.+22     	; 0xdfc <__vector_18+0x18a>
     de6:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <uart_head>
     dea:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <uart_head+0x1>
     dee:	e0 51       	subi	r30, 0x10	; 16
     df0:	fd 4f       	sbci	r31, 0xFD	; 253
     df2:	90 83       	st	Z, r25
     df4:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <uart_head+0x1>
     df8:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <uart_head>
     dfc:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <uart_head>
     e00:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <uart_head+0x1>
     e04:	2f 5f       	subi	r18, 0xFF	; 255
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	2f 77       	andi	r18, 0x7F	; 127
     e0a:	30 78       	andi	r19, 0x80	; 128
     e0c:	33 23       	and	r19, r19
     e0e:	34 f4       	brge	.+12     	; 0xe1c <__vector_18+0x1aa>
     e10:	21 50       	subi	r18, 0x01	; 1
     e12:	31 09       	sbc	r19, r1
     e14:	20 68       	ori	r18, 0x80	; 128
     e16:	3f 6f       	ori	r19, 0xFF	; 255
     e18:	2f 5f       	subi	r18, 0xFF	; 255
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <uart_tail>
     e20:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <uart_tail+0x1>
     e24:	24 17       	cp	r18, r20
     e26:	35 07       	cpc	r19, r21
     e28:	59 f0       	breq	.+22     	; 0xe40 <__vector_18+0x1ce>
     e2a:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <uart_head>
     e2e:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <uart_head+0x1>
     e32:	e0 51       	subi	r30, 0x10	; 16
     e34:	fd 4f       	sbci	r31, 0xFD	; 253
     e36:	80 83       	st	Z, r24
     e38:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <uart_head+0x1>
     e3c:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <uart_head>
     e40:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <__data_end>
     e44:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <first_byte_of_potential_command>
     e48:	2a c0       	rjmp	.+84     	; 0xe9e <__vector_18+0x22c>
     e4a:	83 35       	cpi	r24, 0x53	; 83
     e4c:	31 f4       	brne	.+12     	; 0xe5a <__vector_18+0x1e8>
     e4e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <first_byte_of_potential_command>
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <__data_end>
     e58:	22 c0       	rjmp	.+68     	; 0xe9e <__vector_18+0x22c>
     e5a:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <uart_head>
     e5e:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <uart_head+0x1>
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	2f 77       	andi	r18, 0x7F	; 127
     e68:	30 78       	andi	r19, 0x80	; 128
     e6a:	33 23       	and	r19, r19
     e6c:	34 f4       	brge	.+12     	; 0xe7a <__vector_18+0x208>
     e6e:	21 50       	subi	r18, 0x01	; 1
     e70:	31 09       	sbc	r19, r1
     e72:	20 68       	ori	r18, 0x80	; 128
     e74:	3f 6f       	ori	r19, 0xFF	; 255
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <uart_tail>
     e7e:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <uart_tail+0x1>
     e82:	24 17       	cp	r18, r20
     e84:	35 07       	cpc	r19, r21
     e86:	59 f0       	breq	.+22     	; 0xe9e <__vector_18+0x22c>
     e88:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <uart_head>
     e8c:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <uart_head+0x1>
     e90:	e0 51       	subi	r30, 0x10	; 16
     e92:	fd 4f       	sbci	r31, 0xFD	; 253
     e94:	80 83       	st	Z, r24
     e96:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <uart_head+0x1>
     e9a:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <uart_head>
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <isBlocked>:
     ec0:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <blocked>
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	08 95       	ret

00000ec8 <uart_buffer_empty>:
     ec8:	40 91 ee 02 	lds	r20, 0x02EE	; 0x8002ee <uart_head>
     ecc:	50 91 ef 02 	lds	r21, 0x02EF	; 0x8002ef <uart_head+0x1>
     ed0:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <uart_tail>
     ed4:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <uart_tail+0x1>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	42 17       	cp	r20, r18
     edc:	53 07       	cpc	r21, r19
     ede:	09 f0       	breq	.+2      	; 0xee2 <uart_buffer_empty+0x1a>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	08 95       	ret

00000ee6 <uart_buffer_read_char>:

int uart_buffer_read_char(char *c) {
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) return 0;
     eec:	0e 94 64 07 	call	0xec8	; 0xec8 <uart_buffer_empty>
     ef0:	89 2b       	or	r24, r25
     ef2:	e1 f4       	brne	.+56     	; 0xf2c <uart_buffer_read_char+0x46>
	*c = uart_buffer[uart_tail];
     ef4:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <uart_tail>
     ef8:	f0 91 ed 02 	lds	r31, 0x02ED	; 0x8002ed <uart_tail+0x1>
     efc:	e0 51       	subi	r30, 0x10	; 16
     efe:	fd 4f       	sbci	r31, 0xFD	; 253
     f00:	80 81       	ld	r24, Z
     f02:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
     f04:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <uart_tail>
     f08:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <uart_tail+0x1>
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	8f 77       	andi	r24, 0x7F	; 127
     f10:	90 78       	andi	r25, 0x80	; 128
     f12:	99 23       	and	r25, r25
     f14:	24 f4       	brge	.+8      	; 0xf1e <uart_buffer_read_char+0x38>
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	9f 6f       	ori	r25, 0xFF	; 255
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <uart_tail+0x1>
     f22:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <uart_tail>
	return 1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <uart_buffer_read_char+0x4a>
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}

int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) return 0;
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <SerialRecebeChars>:

void SerialRecebeChars(int sizeS, char* string) {
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	1f 92       	push	r1
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	6c 01       	movw	r12, r24
     f52:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
     f54:	e1 2c       	mov	r14, r1
     f56:	f1 2c       	mov	r15, r1
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
     f58:	00 e0       	ldi	r16, 0x00	; 0
     f5a:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100;

	while (received < sizeS && timeout_count < timeout_limit) {
     f5c:	19 c0       	rjmp	.+50     	; 0xf90 <SerialRecebeChars+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
     f5e:	ce 01       	movw	r24, r28
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	0e 94 73 07 	call	0xee6	; 0xee6 <uart_buffer_read_char>
     f66:	89 2b       	or	r24, r25
     f68:	51 f0       	breq	.+20     	; 0xf7e <SerialRecebeChars+0x48>
			string[received++] = c;
     f6a:	f5 01       	movw	r30, r10
     f6c:	e0 0f       	add	r30, r16
     f6e:	f1 1f       	adc	r31, r17
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	80 83       	st	Z, r24
     f74:	0f 5f       	subi	r16, 0xFF	; 255
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0;
     f78:	e1 2c       	mov	r14, r1
     f7a:	f1 2c       	mov	r15, r1
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <SerialRecebeChars+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f7e:	8f e3       	ldi	r24, 0x3F	; 63
     f80:	9c e9       	ldi	r25, 0x9C	; 156
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <SerialRecebeChars+0x4c>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <SerialRecebeChars+0x52>
     f88:	00 00       	nop
			} else {
			_delay_ms(10);
			timeout_count++;
     f8a:	9f ef       	ldi	r25, 0xFF	; 255
     f8c:	e9 1a       	sub	r14, r25
     f8e:	f9 0a       	sbc	r15, r25
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100;

	while (received < sizeS && timeout_count < timeout_limit) {
     f90:	0c 15       	cp	r16, r12
     f92:	1d 05       	cpc	r17, r13
     f94:	24 f4       	brge	.+8      	; 0xf9e <SerialRecebeChars+0x68>
     f96:	84 e6       	ldi	r24, 0x64	; 100
     f98:	e8 16       	cp	r14, r24
     f9a:	f1 04       	cpc	r15, r1
     f9c:	04 f3       	brlt	.-64     	; 0xf5e <SerialRecebeChars+0x28>
			} else {
			_delay_ms(10);
			timeout_count++;
		}
	}
	string[received] = '\0';
     f9e:	f5 01       	movw	r30, r10
     fa0:	e0 0f       	add	r30, r16
     fa2:	f1 1f       	adc	r31, r17
     fa4:	10 82       	st	Z, r1
}
     fa6:	0f 90       	pop	r0
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	bf 90       	pop	r11
     fba:	af 90       	pop	r10
     fbc:	08 95       	ret

00000fbe <prepara_teclado>:
#define COL4 PD2    // Coluna 4 no PD2

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
     fbe:	84 b1       	in	r24, 0x04	; 4
     fc0:	83 60       	ori	r24, 0x03	; 3
     fc2:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
     fc4:	8a b1       	in	r24, 0x0a	; 10
     fc6:	80 6c       	ori	r24, 0xC0	; 192
     fc8:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4)); // PD5, PD4, PD3 e PD2 como entradas
     fca:	8a b1       	in	r24, 0x0a	; 10
     fcc:	83 7c       	andi	r24, 0xC3	; 195
     fce:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);   // Habilitar resistores de Pull-up
     fd0:	8b b1       	in	r24, 0x0b	; 11
     fd2:	8c 63       	ori	r24, 0x3C	; 60
     fd4:	8b b9       	out	0x0b, r24	; 11
     fd6:	08 95       	ret

00000fd8 <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	00 d0       	rcall	.+0      	; 0xfde <atraso_debounce+0x6>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
     fe2:	1a 82       	std	Y+2, r1	; 0x02
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <atraso_debounce+0x1a>
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	88 3e       	cpi	r24, 0xE8	; 232
     ff8:	93 40       	sbci	r25, 0x03	; 3
     ffa:	b0 f3       	brcs	.-20     	; 0xfe8 <atraso_debounce+0x10>
}
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    100e:	c0 e0       	ldi	r28, 0x00	; 0
    1010:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
    1012:	12 c0       	rjmp	.+36     	; 0x1038 <debounce+0x32>
        atraso_debounce();
    1014:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
    1018:	29 b1       	in	r18, 0x09	; 9
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	01 2e       	mov	r0, r17
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <debounce+0x20>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <debounce+0x1c>
    102a:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
    102c:	d8 13       	cpse	r29, r24
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <debounce+0x2e>
            counter++;
    1030:	cf 5f       	subi	r28, 0xFF	; 255
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <debounce+0x30>
        } else {
            counter = 0;
    1034:	c0 e0       	ldi	r28, 0x00	; 0
    1036:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
    1038:	c7 30       	cpi	r28, 0x07	; 7
    103a:	61 f7       	brne	.-40     	; 0x1014 <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
    103c:	8d 2f       	mov	r24, r29
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	08 95       	ret

00001046 <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
    1046:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
    1048:	85 b1       	in	r24, 0x05	; 5
    104a:	83 60       	ori	r24, 0x03	; 3
    104c:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
    104e:	8b b1       	in	r24, 0x0b	; 11
    1050:	80 6c       	ori	r24, 0xC0	; 192
    1052:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    1054:	85 b1       	in	r24, 0x05	; 5
    1056:	8d 7f       	andi	r24, 0xFD	; 253
    1058:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
    105a:	85 e0       	ldi	r24, 0x05	; 5
    105c:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    1060:	88 23       	and	r24, r24
    1062:	11 f0       	breq	.+4      	; 0x1068 <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
    1064:	c0 e0       	ldi	r28, 0x00	; 0
    1066:	01 c0       	rjmp	.+2      	; 0x106a <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
    1068:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
    106a:	84 e0       	ldi	r24, 0x04	; 4
    106c:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    1070:	81 11       	cpse	r24, r1
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <varredura+0x30>
    1074:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    107c:	81 11       	cpse	r24, r1
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <varredura+0x3c>
    1080:	c3 e3       	ldi	r28, 0x33	; 51
	if (!debounce(COL4 - 0)) tecla = 'A'; 
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    1088:	81 11       	cpse	r24, r1
    108a:	01 c0       	rjmp	.+2      	; 0x108e <varredura+0x48>
    108c:	c1 e4       	ldi	r28, 0x41	; 65
    PORTB |= (1 << LIN1); // Desativa LIN1
    108e:	85 b1       	in	r24, 0x05	; 5
    1090:	82 60       	ori	r24, 0x02	; 2
    1092:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
    1094:	85 b1       	in	r24, 0x05	; 5
    1096:	8e 7f       	andi	r24, 0xFE	; 254
    1098:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
    109a:	85 e0       	ldi	r24, 0x05	; 5
    109c:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    10a0:	81 11       	cpse	r24, r1
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <varredura+0x60>
    10a4:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
    10a6:	84 e0       	ldi	r24, 0x04	; 4
    10a8:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    10ac:	81 11       	cpse	r24, r1
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <varredura+0x6c>
    10b0:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    10b8:	81 11       	cpse	r24, r1
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <varredura+0x78>
    10bc:	c6 e3       	ldi	r28, 0x36	; 54
	if (!debounce(COL4 - 0)) tecla = 'B'; 
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    10c4:	81 11       	cpse	r24, r1
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <varredura+0x84>
    10c8:	c2 e4       	ldi	r28, 0x42	; 66
    PORTB |= (1 << LIN2); // Desativa LIN2
    10ca:	85 b1       	in	r24, 0x05	; 5
    10cc:	81 60       	ori	r24, 0x01	; 1
    10ce:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
    10d0:	8b b1       	in	r24, 0x0b	; 11
    10d2:	8f 77       	andi	r24, 0x7F	; 127
    10d4:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
    10d6:	85 e0       	ldi	r24, 0x05	; 5
    10d8:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    10dc:	81 11       	cpse	r24, r1
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <varredura+0x9c>
    10e0:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
    10e2:	84 e0       	ldi	r24, 0x04	; 4
    10e4:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    10e8:	81 11       	cpse	r24, r1
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <varredura+0xa8>
    10ec:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    10f4:	81 11       	cpse	r24, r1
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <varredura+0xb4>
    10f8:	c9 e3       	ldi	r28, 0x39	; 57
	if (!debounce(COL4 - 0)) tecla = 'C'; 
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    1100:	81 11       	cpse	r24, r1
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <varredura+0xc0>
    1104:	c3 e4       	ldi	r28, 0x43	; 67
    PORTD |= (1 << LIN3); // Desativa LIN3
    1106:	8b b1       	in	r24, 0x0b	; 11
    1108:	80 68       	ori	r24, 0x80	; 128
    110a:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
    110c:	8b b1       	in	r24, 0x0b	; 11
    110e:	8f 7b       	andi	r24, 0xBF	; 191
    1110:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
    1112:	85 e0       	ldi	r24, 0x05	; 5
    1114:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    1118:	81 11       	cpse	r24, r1
    111a:	01 c0       	rjmp	.+2      	; 0x111e <varredura+0xd8>
    111c:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    1124:	81 11       	cpse	r24, r1
    1126:	01 c0       	rjmp	.+2      	; 0x112a <varredura+0xe4>
    1128:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    1130:	81 11       	cpse	r24, r1
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <varredura+0xf0>
    1134:	c3 e2       	ldi	r28, 0x23	; 35
	if (!debounce(COL4 - 0)) tecla = 'D'; 
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	0e 94 03 08 	call	0x1006	; 0x1006 <debounce>
    113c:	81 11       	cpse	r24, r1
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <varredura+0xfc>
    1140:	c4 e4       	ldi	r28, 0x44	; 68
    PORTD |= (1 << LIN4); // Desativa LIN4
    1142:	8b b1       	in	r24, 0x0b	; 11
    1144:	80 64       	ori	r24, 0x40	; 64
    1146:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
    1148:	8c 2f       	mov	r24, r28
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    114e:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    1150:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    1156:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    115a:	81 ef       	ldi	r24, 0xF1	; 241
    115c:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	08 c0       	rjmp	.+16     	; 0x1174 <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    1164:	a9 9b       	sbis	0x15, 1	; 21
    1166:	fe cf       	rjmp	.-4      	; 0x1164 <delay1ms+0x16>
		TCNT0 = 241;
    1168:	91 ef       	ldi	r25, 0xF1	; 241
    116a:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    1170:	2f 5f       	subi	r18, 0xFF	; 255
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
    1174:	24 17       	cp	r18, r20
    1176:	35 07       	cpc	r19, r21
    1178:	ac f3       	brlt	.-22     	; 0x1164 <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    117a:	15 bc       	out	0x25, r1	; 37
    117c:	08 95       	ret

0000117e <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    117e:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    1180:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    1186:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    118a:	85 ef       	ldi	r24, 0xF5	; 245
    118c:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    1194:	a9 9b       	sbis	0x15, 1	; 21
    1196:	fe cf       	rjmp	.-4      	; 0x1194 <delay1us+0x16>
		TCNT0 = 245;
    1198:	95 ef       	ldi	r25, 0xF5	; 245
    119a:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    119c:	95 b3       	in	r25, 0x15	; 21
    119e:	92 60       	ori	r25, 0x02	; 2
    11a0:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    11a2:	2f 5f       	subi	r18, 0xFF	; 255
    11a4:	3f 4f       	sbci	r19, 0xFF	; 255
    11a6:	24 17       	cp	r18, r20
    11a8:	35 07       	cpc	r19, r21
    11aa:	a4 f3       	brlt	.-24     	; 0x1194 <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    11ac:	15 bc       	out	0x25, r1	; 37
    11ae:	08 95       	ret

000011b0 <__tablejump2__>:
    11b0:	ee 0f       	add	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	05 90       	lpm	r0, Z+
    11b6:	f4 91       	lpm	r31, Z
    11b8:	e0 2d       	mov	r30, r0
    11ba:	09 94       	ijmp

000011bc <strcpy>:
    11bc:	fb 01       	movw	r30, r22
    11be:	dc 01       	movw	r26, r24
    11c0:	01 90       	ld	r0, Z+
    11c2:	0d 92       	st	X+, r0
    11c4:	00 20       	and	r0, r0
    11c6:	e1 f7       	brne	.-8      	; 0x11c0 <strcpy+0x4>
    11c8:	08 95       	ret

000011ca <strncpy>:
    11ca:	fb 01       	movw	r30, r22
    11cc:	dc 01       	movw	r26, r24
    11ce:	41 50       	subi	r20, 0x01	; 1
    11d0:	50 40       	sbci	r21, 0x00	; 0
    11d2:	48 f0       	brcs	.+18     	; 0x11e6 <strncpy+0x1c>
    11d4:	01 90       	ld	r0, Z+
    11d6:	0d 92       	st	X+, r0
    11d8:	00 20       	and	r0, r0
    11da:	c9 f7       	brne	.-14     	; 0x11ce <strncpy+0x4>
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <strncpy+0x16>
    11de:	1d 92       	st	X+, r1
    11e0:	41 50       	subi	r20, 0x01	; 1
    11e2:	50 40       	sbci	r21, 0x00	; 0
    11e4:	e0 f7       	brcc	.-8      	; 0x11de <strncpy+0x14>
    11e6:	08 95       	ret

000011e8 <strstr>:
    11e8:	fb 01       	movw	r30, r22
    11ea:	51 91       	ld	r21, Z+
    11ec:	55 23       	and	r21, r21
    11ee:	a9 f0       	breq	.+42     	; 0x121a <strstr+0x32>
    11f0:	bf 01       	movw	r22, r30
    11f2:	dc 01       	movw	r26, r24
    11f4:	4d 91       	ld	r20, X+
    11f6:	45 17       	cp	r20, r21
    11f8:	41 11       	cpse	r20, r1
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <strstr+0xc>
    11fc:	59 f4       	brne	.+22     	; 0x1214 <strstr+0x2c>
    11fe:	cd 01       	movw	r24, r26
    1200:	01 90       	ld	r0, Z+
    1202:	00 20       	and	r0, r0
    1204:	49 f0       	breq	.+18     	; 0x1218 <strstr+0x30>
    1206:	4d 91       	ld	r20, X+
    1208:	40 15       	cp	r20, r0
    120a:	41 11       	cpse	r20, r1
    120c:	c9 f3       	breq	.-14     	; 0x1200 <strstr+0x18>
    120e:	fb 01       	movw	r30, r22
    1210:	41 11       	cpse	r20, r1
    1212:	ef cf       	rjmp	.-34     	; 0x11f2 <strstr+0xa>
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	08 95       	ret

0000121c <_exit>:
    121c:	f8 94       	cli

0000121e <__stop_program>:
    121e:	ff cf       	rjmp	.-2      	; 0x121e <__stop_program>
