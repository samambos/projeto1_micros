
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fc  00800100  000022b4  00002348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009f  008003fc  008003fc  00002644  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002674  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049d3  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107b  00000000  00000000  000072ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002193  00000000  00000000  0000837a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000810  00000000  00000000  0000a510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c56  00000000  00000000  0000ad20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023cb  00000000  00000000  0000b976  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000dd41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_11>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	8a 03       	fmulsu	r16, r18
      6a:	9f 03       	fmulsu	r17, r23
      6c:	ac 03       	fmulsu	r18, r20
      6e:	b9 03       	fmulsu	r19, r17
      70:	ec 03       	fmulsu	r22, r20
      72:	96 04       	cpc	r9, r6
      74:	ba 04       	cpc	r11, r10
      76:	c5 04       	cpc	r12, r5
      78:	d0 04       	cpc	r13, r0
      7a:	db 04       	cpc	r13, r11

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	13 e0       	ldi	r17, 0x03	; 3
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 eb       	ldi	r30, 0xB4	; 180
      90:	f2 e2       	ldi	r31, 0x22	; 34
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ac 3f       	cpi	r26, 0xFC	; 252
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	24 e0       	ldi	r18, 0x04	; 4
      a0:	ac ef       	ldi	r26, 0xFC	; 252
      a2:	b3 e0       	ldi	r27, 0x03	; 3
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ab 39       	cpi	r26, 0x9B	; 155
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 33 03 	call	0x666	; 0x666 <main>
      b2:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <mensagem_Inicial>:
*/
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){
		LCD_limpar();
      ba:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
		LCD_Escrever_Linha(0,1,"DIGITE QUALQUER");
      be:	48 e0       	ldi	r20, 0x08	; 8
      c0:	51 e0       	ldi	r21, 0x01	; 1
      c2:	61 e0       	ldi	r22, 0x01	; 1
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1,5, "TECLA");
      ca:	48 e1       	ldi	r20, 0x18	; 24
      cc:	51 e0       	ldi	r21, 0x01	; 1
      ce:	65 e0       	ldi	r22, 0x05	; 5
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
      d6:	08 95       	ret

000000d8 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      d8:	cf 93       	push	r28
      da:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      dc:	88 b1       	in	r24, 0x08	; 8
      de:	80 7f       	andi	r24, 0xF0	; 240
      e0:	9c 2f       	mov	r25, r28
      e2:	92 95       	swap	r25
      e4:	9f 70       	andi	r25, 0x0F	; 15
      e6:	89 2b       	or	r24, r25
      e8:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
      ea:	88 b1       	in	r24, 0x08	; 8
      ec:	8f 7d       	andi	r24, 0xDF	; 223
      ee:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
      f0:	88 b1       	in	r24, 0x08	; 8
      f2:	80 61       	ori	r24, 0x10	; 16
      f4:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
      f6:	88 b1       	in	r24, 0x08	; 8
      f8:	8f 7e       	andi	r24, 0xEF	; 239
      fa:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
      fc:	84 e6       	ldi	r24, 0x64	; 100
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 56 10 	call	0x20ac	; 0x20ac <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
     104:	88 b1       	in	r24, 0x08	; 8
     106:	80 7f       	andi	r24, 0xF0	; 240
     108:	cf 70       	andi	r28, 0x0F	; 15
     10a:	c8 2b       	or	r28, r24
     10c:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     10e:	88 b1       	in	r24, 0x08	; 8
     110:	80 61       	ori	r24, 0x10	; 16
     112:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     114:	88 b1       	in	r24, 0x08	; 8
     116:	8f 7e       	andi	r24, 0xEF	; 239
     118:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     11a:	82 e0       	ldi	r24, 0x02	; 2
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
}
     122:	cf 91       	pop	r28
     124:	08 95       	ret

00000126 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     12a:	8a e0       	ldi	r24, 0x0A	; 10
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     138:	88 e2       	ldi	r24, 0x28	; 40
     13a:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     13e:	8c e0       	ldi	r24, 0x0C	; 12
     140:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     144:	86 e0       	ldi	r24, 0x06	; 6
     146:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
     150:	08 95       	ret

00000152 <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     158:	80 e8       	ldi	r24, 0x80	; 128
     15a:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
     15e:	08 95       	ret

00000160 <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	ec 01       	movw	r28, r24
	while(*texto) {
     166:	23 c0       	rjmp	.+70     	; 0x1ae <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     168:	98 b1       	in	r25, 0x08	; 8
     16a:	90 7f       	andi	r25, 0xF0	; 240
     16c:	82 95       	swap	r24
     16e:	8f 70       	andi	r24, 0x0F	; 15
     170:	89 2b       	or	r24, r25
     172:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     174:	88 b1       	in	r24, 0x08	; 8
     176:	80 62       	ori	r24, 0x20	; 32
     178:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     17a:	88 b1       	in	r24, 0x08	; 8
     17c:	80 61       	ori	r24, 0x10	; 16
     17e:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     180:	88 b1       	in	r24, 0x08	; 8
     182:	8f 7e       	andi	r24, 0xEF	; 239
     184:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     186:	88 ec       	ldi	r24, 0xC8	; 200
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 56 10 	call	0x20ac	; 0x20ac <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     18e:	98 b1       	in	r25, 0x08	; 8
     190:	89 91       	ld	r24, Y+
     192:	90 7f       	andi	r25, 0xF0	; 240
     194:	8f 70       	andi	r24, 0x0F	; 15
     196:	89 2b       	or	r24, r25
     198:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     19a:	88 b1       	in	r24, 0x08	; 8
     19c:	80 61       	ori	r24, 0x10	; 16
     19e:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     1a0:	88 b1       	in	r24, 0x08	; 8
     1a2:	8f 7e       	andi	r24, 0xEF	; 239
     1a4:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1ae:	88 81       	ld	r24, Y
     1b0:	81 11       	cpse	r24, r1
     1b2:	da cf       	rjmp	.-76     	; 0x168 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1c0:	81 11       	cpse	r24, r1
     1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <LCD_Escrever_Linha+0x1a>
     1c4:	60 31       	cpi	r22, 0x10	; 16
     1c6:	30 f4       	brcc	.+12     	; 0x1d4 <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1c8:	86 2f       	mov	r24, r22
     1ca:	8f 70       	andi	r24, 0x0F	; 15
     1cc:	80 68       	ori	r24, 0x80	; 128
     1ce:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
     1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	39 f4       	brne	.+14     	; 0x1e6 <LCD_Escrever_Linha+0x2c>
     1d8:	60 31       	cpi	r22, 0x10	; 16
     1da:	28 f4       	brcc	.+10     	; 0x1e6 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1dc:	86 2f       	mov	r24, r22
     1de:	8f 70       	andi	r24, 0x0F	; 15
     1e0:	80 6c       	ori	r24, 0xC0	; 192
     1e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     1e6:	ce 01       	movw	r24, r28
     1e8:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <ler_codigo_aluno>:

// Variável global para armazenar a senha validada
static char senha_validada[7] = {0};

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <ler_codigo_aluno+0xe>
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	7c 01       	movw	r14, r24
    int pos = 0;
    char tecla;

    LCD_limpar();
     20c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
     210:	4e e1       	ldi	r20, 0x1E	; 30
     212:	51 e0       	ldi	r21, 0x01	; 1
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    LCD_Escrever_Linha(1, 0, "______");
     21c:	4d e2       	ldi	r20, 0x2D	; 45
     21e:	51 e0       	ldi	r21, 0x01	; 1
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
// Variável global para armazenar a senha validada
static char senha_validada[7] = {0};

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
    int pos = 0;
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	10 e0       	ldi	r17, 0x00	; 0

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     22c:	1d c0       	rjmp	.+58     	; 0x268 <ler_codigo_aluno+0x70>
        if (isBlocked()) return;
     22e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     232:	81 11       	cpse	r24, r1
     234:	1e c0       	rjmp	.+60     	; 0x272 <ler_codigo_aluno+0x7a>
        tecla = varredura();
     236:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
        if (tecla >= '0' && tecla <= '9') {
     23a:	90 ed       	ldi	r25, 0xD0	; 208
     23c:	98 0f       	add	r25, r24
     23e:	9a 30       	cpi	r25, 0x0A	; 10
     240:	98 f4       	brcc	.+38     	; 0x268 <ler_codigo_aluno+0x70>
            codigo[pos] = tecla;
     242:	f7 01       	movw	r30, r14
     244:	e0 0f       	add	r30, r16
     246:	f1 1f       	adc	r31, r17
     248:	80 83       	st	Z, r24
            char temp[2] = { tecla, '\0' };
     24a:	89 83       	std	Y+1, r24	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Escrever_Linha(1, pos, temp);
     24e:	ae 01       	movw	r20, r28
     250:	4f 5f       	subi	r20, 0xFF	; 255
     252:	5f 4f       	sbci	r21, 0xFF	; 255
     254:	60 2f       	mov	r22, r16
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
            pos++;
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
            delay1ms(200);
     260:	88 ec       	ldi	r24, 0xC8	; 200
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     268:	06 30       	cpi	r16, 0x06	; 6
     26a:	11 05       	cpc	r17, r1
     26c:	04 f3       	brlt	.-64     	; 0x22e <ler_codigo_aluno+0x36>
            LCD_Escrever_Linha(1, pos, temp);
            pos++;
            delay1ms(200);
        }
    }
    codigo[6] = '\0';
     26e:	f7 01       	movw	r30, r14
     270:	16 82       	std	Z+6, r1	; 0x06
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	ff 90       	pop	r15
     280:	ef 90       	pop	r14
     282:	08 95       	ret

00000284 <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	00 d0       	rcall	.+0      	; 0x292 <ler_senha+0xe>
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	7c 01       	movw	r14, r24
    int pos = 0;
    char tecla;

    LCD_limpar();
     298:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    LCD_Escrever_Linha(0, 0, "Digite senha:");
     29c:	44 e3       	ldi	r20, 0x34	; 52
     29e:	51 e0       	ldi	r21, 0x01	; 1
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    LCD_Escrever_Linha(1, 0, "______");
     2a8:	4d e2       	ldi	r20, 0x2D	; 45
     2aa:	51 e0       	ldi	r21, 0x01	; 1
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
    int pos = 0;
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	10 e0       	ldi	r17, 0x00	; 0

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite senha:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     2b8:	1e c0       	rjmp	.+60     	; 0x2f6 <ler_senha+0x72>
        if (isBlocked()) return;
     2ba:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     2be:	81 11       	cpse	r24, r1
     2c0:	1f c0       	rjmp	.+62     	; 0x300 <ler_senha+0x7c>
        tecla = varredura();
     2c2:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
        if (tecla >= '0' && tecla <= '9') {
     2c6:	90 ed       	ldi	r25, 0xD0	; 208
     2c8:	98 0f       	add	r25, r24
     2ca:	9a 30       	cpi	r25, 0x0A	; 10
     2cc:	a0 f4       	brcc	.+40     	; 0x2f6 <ler_senha+0x72>
            senha[pos] = tecla;
     2ce:	f7 01       	movw	r30, r14
     2d0:	e0 0f       	add	r30, r16
     2d2:	f1 1f       	adc	r31, r17
     2d4:	80 83       	st	Z, r24
            char temp[2] = { '*', '\0' };
     2d6:	8a e2       	ldi	r24, 0x2A	; 42
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Escrever_Linha(1, pos, temp);
     2dc:	ae 01       	movw	r20, r28
     2de:	4f 5f       	subi	r20, 0xFF	; 255
     2e0:	5f 4f       	sbci	r21, 0xFF	; 255
     2e2:	60 2f       	mov	r22, r16
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
            pos++;
     2ea:	0f 5f       	subi	r16, 0xFF	; 255
     2ec:	1f 4f       	sbci	r17, 0xFF	; 255
            delay1ms(200);
     2ee:	88 ec       	ldi	r24, 0xC8	; 200
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite senha:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     2f6:	06 30       	cpi	r16, 0x06	; 6
     2f8:	11 05       	cpc	r17, r1
     2fa:	fc f2       	brlt	.-66     	; 0x2ba <ler_senha+0x36>
            LCD_Escrever_Linha(1, pos, temp);
            pos++;
            delay1ms(200);
        }
    }
    senha[6] = '\0';
     2fc:	f7 01       	movw	r30, r14
     2fe:	16 82       	std	Z+6, r1	; 0x06
}
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	08 95       	ret

00000312 <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	ae 97       	sbiw	r28, 0x2e	; 46
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
    if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     32e:	dc 01       	movw	r26, r24
     330:	0d 90       	ld	r0, X+
     332:	00 20       	and	r0, r0
     334:	e9 f7       	brne	.-6      	; 0x330 <validar_codigo_aluno+0x1e>
     336:	11 97       	sbiw	r26, 0x01	; 1
     338:	a8 1b       	sub	r26, r24
     33a:	b9 0b       	sbc	r27, r25
     33c:	16 97       	sbiw	r26, 0x06	; 6
     33e:	09 f0       	breq	.+2      	; 0x342 <validar_codigo_aluno+0x30>
     340:	6b c0       	rjmp	.+214    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     342:	db 01       	movw	r26, r22
     344:	0d 90       	ld	r0, X+
     346:	00 20       	and	r0, r0
     348:	e9 f7       	brne	.-6      	; 0x344 <validar_codigo_aluno+0x32>
     34a:	11 97       	sbiw	r26, 0x01	; 1
     34c:	a6 1b       	sub	r26, r22
     34e:	b7 0b       	sbc	r27, r23
     350:	16 97       	sbiw	r26, 0x06	; 6
     352:	09 f0       	breq	.+2      	; 0x356 <validar_codigo_aluno+0x44>
     354:	64 c0       	rjmp	.+200    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     356:	7b 01       	movw	r14, r22
     358:	8c 01       	movw	r16, r24

    // Armazena a senha antes de validar 
    strncpy(senha_validada, senha, 6);
     35a:	46 e0       	ldi	r20, 0x06	; 6
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	8c ef       	ldi	r24, 0xFC	; 252
     360:	93 e0       	ldi	r25, 0x03	; 3
     362:	0e 94 1a 11 	call	0x2234	; 0x2234 <strncpy>
    senha_validada[6] = '\0';
     366:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <__data_end+0x6>

    char mensagem[14];
    mensagem[0] = 'C';
     36a:	83 e4       	ldi	r24, 0x43	; 67
     36c:	89 83       	std	Y+1, r24	; 0x01
    mensagem[1] = 'E';
     36e:	85 e4       	ldi	r24, 0x45	; 69
     370:	8a 83       	std	Y+2, r24	; 0x02
    memcpy(&mensagem[2], codigo, 6);
     372:	86 e0       	ldi	r24, 0x06	; 6
     374:	f8 01       	movw	r30, r16
     376:	de 01       	movw	r26, r28
     378:	13 96       	adiw	r26, 0x03	; 3
     37a:	01 90       	ld	r0, Z+
     37c:	0d 92       	st	X+, r0
     37e:	8a 95       	dec	r24
     380:	e1 f7       	brne	.-8      	; 0x37a <validar_codigo_aluno+0x68>
    memcpy(&mensagem[8], senha, 6);
     382:	86 e0       	ldi	r24, 0x06	; 6
     384:	f7 01       	movw	r30, r14
     386:	de 01       	movw	r26, r28
     388:	19 96       	adiw	r26, 0x09	; 9
     38a:	01 90       	ld	r0, Z+
     38c:	0d 92       	st	X+, r0
     38e:	8a 95       	dec	r24
     390:	e1 f7       	brne	.-8      	; 0x38a <validar_codigo_aluno+0x78>

    SerialEnviaChars(14, mensagem);
     392:	be 01       	movw	r22, r28
     394:	6f 5f       	subi	r22, 0xFF	; 255
     396:	7f 4f       	sbci	r23, 0xFF	; 255
     398:	8e e0       	ldi	r24, 0x0E	; 14
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <SerialEnviaChars>

    char resposta[32];
    memset(resposta, 0, sizeof(resposta));
     3a0:	be 01       	movw	r22, r28
     3a2:	61 5f       	subi	r22, 0xF1	; 241
     3a4:	7f 4f       	sbci	r23, 0xFF	; 255
     3a6:	80 e2       	ldi	r24, 0x20	; 32
     3a8:	db 01       	movw	r26, r22
     3aa:	1d 92       	st	X+, r1
     3ac:	8a 95       	dec	r24
     3ae:	e9 f7       	brne	.-6      	; 0x3aa <validar_codigo_aluno+0x98>

    SerialRecebeChars(31, resposta);
     3b0:	8f e1       	ldi	r24, 0x1F	; 31
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <SerialRecebeChars>

    LCD_limpar();
     3b8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    LCD_Escrever_Linha(0, 3, "Aguarde...");
     3bc:	42 e4       	ldi	r20, 0x42	; 66
     3be:	51 e0       	ldi	r21, 0x01	; 1
     3c0:	63 e0       	ldi	r22, 0x03	; 3
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    delay1ms(1000);
     3c8:	88 ee       	ldi	r24, 0xE8	; 232
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    LCD_limpar();
     3d0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>

    if (resposta[0] == 'S' && resposta[1] == 'E') {
     3d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d6:	83 35       	cpi	r24, 0x53	; 83
     3d8:	a9 f4       	brne	.+42     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3da:	88 89       	ldd	r24, Y+16	; 0x10
     3dc:	85 34       	cpi	r24, 0x45	; 69
     3de:	91 f4       	brne	.+36     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
        if (strstr(resposta, "Nao autorizado") != NULL) {
     3e0:	6d e4       	ldi	r22, 0x4D	; 77
     3e2:	71 e0       	ldi	r23, 0x01	; 1
     3e4:	ce 01       	movw	r24, r28
     3e6:	0f 96       	adiw	r24, 0x0f	; 15
     3e8:	0e 94 29 11 	call	0x2252	; 0x2252 <strstr>
     3ec:	89 2b       	or	r24, r25
     3ee:	d1 f0       	breq	.+52     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
            // Se não for autorizado, limpa a senha armazenada
            memset(senha_validada, 0, sizeof(senha_validada));
     3f0:	87 e0       	ldi	r24, 0x07	; 7
     3f2:	ec ef       	ldi	r30, 0xFC	; 252
     3f4:	f3 e0       	ldi	r31, 0x03	; 3
     3f6:	df 01       	movw	r26, r30
     3f8:	1d 92       	st	X+, r1
     3fa:	8a 95       	dec	r24
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <validar_codigo_aluno+0xe6>
            return 0;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	12 c0       	rjmp	.+36     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
            return 1;
        }
    }
    
    // Se chegou aqui, houve algum erro, limpa a senha
    memset(senha_validada, 0, sizeof(senha_validada));
     404:	87 e0       	ldi	r24, 0x07	; 7
     406:	ec ef       	ldi	r30, 0xFC	; 252
     408:	f3 e0       	ldi	r31, 0x03	; 3
     40a:	df 01       	movw	r26, r30
     40c:	1d 92       	st	X+, r1
     40e:	8a 95       	dec	r24
     410:	e9 f7       	brne	.-6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
    return 0;
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	08 c0       	rjmp	.+16     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    }
    senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
    if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
        if (strstr(resposta, "Nao autorizado") != NULL) {
            // Se não for autorizado, limpa a senha armazenada
            memset(senha_validada, 0, sizeof(senha_validada));
            return 0;
        } else {
            return 1;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
    }
    
    // Se chegou aqui, houve algum erro, limpa a senha
    memset(senha_validada, 0, sizeof(senha_validada));
    return 0;
}
     428:	ae 96       	adiw	r28, 0x2e	; 46
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	08 95       	ret

00000442 <get_current_password>:

// Função para recuperar a senha validada
const char* get_current_password() {
    return senha_validada;
}
     442:	8c ef       	ldi	r24, 0xFC	; 252
     444:	93 e0       	ldi	r25, 0x03	; 3
     446:	08 95       	ret

00000448 <configurar_timer>:
void configurar_timer();
void resetar_timeout();
void aguardar_desbloqueio();

void configurar_timer() {
	DDRB |= (1 << LED_PIN); // Configura pino do LED como saída
     448:	84 b1       	in	r24, 0x04	; 4
     44a:	80 61       	ori	r24, 0x10	; 16
     44c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << LED_PIN); // Inicia com LED desligado
     44e:	85 b1       	in	r24, 0x05	; 5
     450:	8f 7e       	andi	r24, 0xEF	; 239
     452:	85 b9       	out	0x05, r24	; 5

	TCCR1A = 0; // Modo normal
     454:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // Modo CTC, prescaler 64
     458:	8b e0       	ldi	r24, 0x0B	; 11
     45a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz / 64 / 250 = 1ms)
     45e:	8a ef       	ldi	r24, 0xFA	; 250
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     466:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     46a:	08 95       	ret

0000046c <desabilitar_timer_timeout>:
	TIMSK1 |= (1 << OCIE1A); // Habilita interrupção por comparação
	resetar_timeout(); // Sempre reseta o timeout ao habilitar
}

void desabilitar_timer_timeout() {
	TIMSK1 &= ~(1 << OCIE1A); // Desabilita interrupção por comparação
     46c:	ef e6       	ldi	r30, 0x6F	; 111
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	8d 7f       	andi	r24, 0xFD	; 253
     474:	80 83       	st	Z, r24
	PORTB &= ~(1 << LED_PIN); // Garante que o LED esteja desligado
     476:	85 b1       	in	r24, 0x05	; 5
     478:	8f 7e       	andi	r24, 0xEF	; 239
     47a:	85 b9       	out	0x05, r24	; 5
	alerta_led = 0; // Desliga o alerta
     47c:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <alerta_led>
	timer_count = 0;
     480:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <timer_count>
     484:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <timer_count+0x1>
     488:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <timer_count+0x2>
     48c:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <timer_count+0x3>
     490:	08 95       	ret

00000492 <enviar_confirmacao_operacional>:
		setBlocked(1); // Bloqueia sistema por timeout
	}
}

// Envia mensagem de confirmação operacional "CO"
void enviar_confirmacao_operacional() {
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	00 d0       	rcall	.+0      	; 0x498 <enviar_confirmacao_operacional+0x6>
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
	char confirmacao[2];
	confirmacao[0] = 'C';
     49c:	83 e4       	ldi	r24, 0x43	; 67
     49e:	89 83       	std	Y+1, r24	; 0x01
	confirmacao[1] = 'O';
     4a0:	8f e4       	ldi	r24, 0x4F	; 79
     4a2:	8a 83       	std	Y+2, r24	; 0x02
	SerialEnviaChars(2, confirmacao); // Envia "CO"
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5f       	subi	r22, 0xFF	; 255
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <SerialEnviaChars>
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <__vector_11>:
	PORTB &= ~(1 << LED_PIN); // Garante que o LED esteja desligado
	alerta_led = 0; // Desliga o alerta
	timer_count = 0;
}

ISR(TIMER1_COMPA_vect) {
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	2f 93       	push	r18
     4c8:	3f 93       	push	r19
     4ca:	4f 93       	push	r20
     4cc:	5f 93       	push	r21
     4ce:	6f 93       	push	r22
     4d0:	7f 93       	push	r23
     4d2:	8f 93       	push	r24
     4d4:	9f 93       	push	r25
     4d6:	af 93       	push	r26
     4d8:	bf 93       	push	r27
     4da:	ef 93       	push	r30
     4dc:	ff 93       	push	r31
	timer_count++;
     4de:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <timer_count>
     4e2:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <timer_count+0x1>
     4e6:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <timer_count+0x2>
     4ea:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <timer_count+0x3>
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	a1 1d       	adc	r26, r1
     4f2:	b1 1d       	adc	r27, r1
     4f4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <timer_count>
     4f8:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <timer_count+0x1>
     4fc:	a0 93 07 04 	sts	0x0407, r26	; 0x800407 <timer_count+0x2>
     500:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <timer_count+0x3>

	// Verifica período de alerta
	if (timer_count >= TIMEOUT_ALERTA && timer_count < TIMEOUT_TOTAL) {
     504:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <timer_count>
     508:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <timer_count+0x1>
     50c:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <timer_count+0x2>
     510:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <timer_count+0x3>
     514:	80 35       	cpi	r24, 0x50	; 80
     516:	96 44       	sbci	r25, 0x46	; 70
     518:	a1 05       	cpc	r26, r1
     51a:	b1 05       	cpc	r27, r1
     51c:	a0 f1       	brcs	.+104    	; 0x586 <__vector_11+0xca>
     51e:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <timer_count>
     522:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <timer_count+0x1>
     526:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <timer_count+0x2>
     52a:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <timer_count+0x3>
     52e:	80 33       	cpi	r24, 0x30	; 48
     530:	95 47       	sbci	r25, 0x75	; 117
     532:	a1 05       	cpc	r26, r1
     534:	b1 05       	cpc	r27, r1
     536:	38 f5       	brcc	.+78     	; 0x586 <__vector_11+0xca>
		alerta_led = 1;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <alerta_led>

		// Pisca o LED 2 vezes por segundo
		if (timer_count % INTERVALO_PISCA == 0) {
     53e:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <timer_count>
     542:	70 91 06 04 	lds	r23, 0x0406	; 0x800406 <timer_count+0x1>
     546:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <timer_count+0x2>
     54a:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <timer_count+0x3>
     54e:	2a ef       	ldi	r18, 0xFA	; 250
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodsi4>
     55a:	67 2b       	or	r22, r23
     55c:	68 2b       	or	r22, r24
     55e:	69 2b       	or	r22, r25
     560:	91 f4       	brne	.+36     	; 0x586 <__vector_11+0xca>
			led_state = !led_state;
     562:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <led_state>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	91 11       	cpse	r25, r1
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <led_state>
			if (led_state) {
     570:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <led_state>
     574:	88 23       	and	r24, r24
     576:	21 f0       	breq	.+8      	; 0x580 <__vector_11+0xc4>
				PORTB |= (1 << LED_PIN); // Liga LED
     578:	85 b1       	in	r24, 0x05	; 5
     57a:	80 61       	ori	r24, 0x10	; 16
     57c:	85 b9       	out	0x05, r24	; 5
     57e:	03 c0       	rjmp	.+6      	; 0x586 <__vector_11+0xca>
				} else {
				PORTB &= ~(1 << LED_PIN); // Desliga LED
     580:	85 b1       	in	r24, 0x05	; 5
     582:	8f 7e       	andi	r24, 0xEF	; 239
     584:	85 b9       	out	0x05, r24	; 5
			}
		}
	}

	// Timeout completo (30 segundos)
	if (timer_count >= TIMEOUT_TOTAL) {
     586:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <timer_count>
     58a:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <timer_count+0x1>
     58e:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <timer_count+0x2>
     592:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <timer_count+0x3>
     596:	80 33       	cpi	r24, 0x30	; 48
     598:	95 47       	sbci	r25, 0x75	; 117
     59a:	a1 05       	cpc	r26, r1
     59c:	b1 05       	cpc	r27, r1
     59e:	a0 f0       	brcs	.+40     	; 0x5c8 <__vector_11+0x10c>
		enviar_confirmacao_operacional(); // Envia "CO"
     5a0:	0e 94 49 02 	call	0x492	; 0x492 <enviar_confirmacao_operacional>
		finalizar_sessao(); // Encerra a sessão
     5a4:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <finalizar_sessao>
		timer_count = 0; // Reseta contador
     5a8:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <timer_count>
     5ac:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <timer_count+0x1>
     5b0:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <timer_count+0x2>
     5b4:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <timer_count+0x3>
		alerta_led = 0; // Desliga alerta
     5b8:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <alerta_led>
		PORTB &= ~(1 << LED_PIN); // Desliga LED
     5bc:	85 b1       	in	r24, 0x05	; 5
     5be:	8f 7e       	andi	r24, 0xEF	; 239
     5c0:	85 b9       	out	0x05, r24	; 5
		setBlocked(1); // Bloqueia sistema por timeout
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <setBlocked>
	}
}
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	7f 91       	pop	r23
     5d6:	6f 91       	pop	r22
     5d8:	5f 91       	pop	r21
     5da:	4f 91       	pop	r20
     5dc:	3f 91       	pop	r19
     5de:	2f 91       	pop	r18
     5e0:	0f 90       	pop	r0
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	0f 90       	pop	r0
     5e6:	1f 90       	pop	r1
     5e8:	18 95       	reti

000005ea <resetar_timeout>:
	SerialEnviaChars(2, confirmacao); // Envia "CO"
}

// Reseta contador de timeout e estado do LED
void resetar_timeout() {
	timer_count = 0;
     5ea:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <timer_count>
     5ee:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <timer_count+0x1>
     5f2:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <timer_count+0x2>
     5f6:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <timer_count+0x3>
	alerta_led = 0;
     5fa:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <alerta_led>
	PORTB &= ~(1 << LED_PIN); // Desliga LED
     5fe:	85 b1       	in	r24, 0x05	; 5
     600:	8f 7e       	andi	r24, 0xEF	; 239
     602:	85 b9       	out	0x05, r24	; 5
     604:	08 95       	ret

00000606 <habilitar_timer_timeout>:
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // Modo CTC, prescaler 64
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz / 64 / 250 = 1ms)
}

void habilitar_timer_timeout() {
	TIMSK1 |= (1 << OCIE1A); // Habilita interrupção por comparação
     606:	ef e6       	ldi	r30, 0x6F	; 111
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	82 60       	ori	r24, 0x02	; 2
     60e:	80 83       	st	Z, r24
	resetar_timeout(); // Sempre reseta o timeout ao habilitar
     610:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
     614:	08 95       	ret

00000616 <aguardar_desbloqueio>:
	PORTB &= ~(1 << LED_PIN); // Desliga LED
}

// Aguarda o desbloqueio do terminal
void aguardar_desbloqueio() {
	LCD_limpar();
     616:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
	LCD_Escrever_Linha(0, 4, "FORA  DE"); // Exibe "FORA DE OPERAÇÃO"
     61a:	4c e5       	ldi	r20, 0x5C	; 92
     61c:	51 e0       	ldi	r21, 0x01	; 1
     61e:	64 e0       	ldi	r22, 0x04	; 4
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 4, "OPERACAO");
     626:	45 e6       	ldi	r20, 0x65	; 101
     628:	51 e0       	ldi	r21, 0x01	; 1
     62a:	64 e0       	ldi	r22, 0x04	; 4
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
	while (isBlocked()) { // Espera sistema ser desbloqueado
     632:	12 c0       	rjmp	.+36     	; 0x658 <aguardar_desbloqueio+0x42>
		if (serial_response_pending) {
     634:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <serial_response_pending>
     638:	88 23       	and	r24, r24
     63a:	51 f0       	breq	.+20     	; 0x650 <aguardar_desbloqueio+0x3a>
			SerialEnviaChars(2, serial_response_char);
     63c:	68 e1       	ldi	r22, 0x18	; 24
     63e:	74 e0       	ldi	r23, 0x04	; 4
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <SerialEnviaChars>
			serial_response_pending = 0; // Limpa a flag
     648:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <serial_response_pending>
			resetar_timeout(); // Reseta timeout após interação serial (desbloqueio)
     64c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
		}
		delay1ms(200); // Pequeno atraso
     650:	88 ec       	ldi	r24, 0xC8	; 200
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
// Aguarda o desbloqueio do terminal
void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 4, "FORA  DE"); // Exibe "FORA DE OPERAÇÃO"
	LCD_Escrever_Linha(1, 4, "OPERACAO");
	while (isBlocked()) { // Espera sistema ser desbloqueado
     658:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     65c:	81 11       	cpse	r24, r1
     65e:	ea cf       	rjmp	.-44     	; 0x634 <aguardar_desbloqueio+0x1e>
			serial_response_pending = 0; // Limpa a flag
			resetar_timeout(); // Reseta timeout após interação serial (desbloqueio)
		}
		delay1ms(200); // Pequeno atraso
	}
	LCD_limpar(); // Limpa LCD após desbloqueio
     660:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     664:	08 95       	ret

00000666 <main>:
}

int main(void) {
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	66 97       	sbiw	r28, 0x16	; 22
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     67a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <prepara_teclado>
	LCD_iniciar();
     67e:	0e 94 93 00 	call	0x126	; 0x126 <LCD_iniciar>
	initUART();
     682:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <initUART>
	configurar_timer(); // Apenas configura, não habilita a interrupção ainda
     686:	0e 94 24 02 	call	0x448	; 0x448 <configurar_timer>
	sei(); // Habilita interrupções globais
     68a:	78 94       	sei

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
     68c:	88 e0       	ldi	r24, 0x08	; 8
     68e:	e0 e0       	ldi	r30, 0x00	; 0
     690:	f1 e0       	ldi	r31, 0x01	; 1
     692:	de 01       	movw	r26, r28
     694:	1f 96       	adiw	r26, 0x0f	; 15
     696:	01 90       	ld	r0, Z+
     698:	0d 92       	st	X+, r0
     69a:	8a 95       	dec	r24
     69c:	e1 f7       	brne	.-8      	; 0x696 <main+0x30>
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	17 c0       	rjmp	.+46     	; 0x6d0 <main+0x6a>
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break; // Sai se for bloqueado
			}
			if (!isBlocked()) {
				estado = ESTADO_CODIGO;
     6a2:	01 e0       	ldi	r16, 0x01	; 1
     6a4:	15 c0       	rjmp	.+42     	; 0x6d0 <main+0x6a>
			ler_codigo_aluno(codigo_aluno); // O cliente deve digitar seu código de aluno (6 dígitos)
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_SENHA;
     6a6:	02 e0       	ldi	r16, 0x02	; 2
     6a8:	13 c0       	rjmp	.+38     	; 0x6d0 <main+0x6a>
			ler_senha(senha_aluno);
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_VALIDACAO;
     6aa:	03 e0       	ldi	r16, 0x03	; 3
     6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <main+0x6a>
						delay1ms(1000);
						estado = ESTADO_TELA_INICIAL;
						break;
						} else {
						switch (tecla) {
							case '1': estado = ESTADO_SAQUE; break;
     6ae:	06 e0       	ldi	r16, 0x06	; 6
     6b0:	0f c0       	rjmp	.+30     	; 0x6d0 <main+0x6a>
			LCD_limpar();
			LCD_Escrever_Linha(0, 0, "1-Manualmente");
			LCD_Escrever_Linha(1, 0, "2-Codigo de barras");
			while(1) {
				if (isBlocked()) {
					estado = ESTADO_TELA_INICIAL;
     6b2:	00 e0       	ldi	r16, 0x00	; 0
     6b4:	0d c0       	rjmp	.+26     	; 0x6d0 <main+0x6a>
					break;
				}
				tecla = varredura();
				if (tecla == '1') {
					estado = ESTADO_PAGAMENTO_MANUAL;
     6b6:	07 e0       	ldi	r16, 0x07	; 7
     6b8:	0b c0       	rjmp	.+22     	; 0x6d0 <main+0x6a>
					break;
					} else if (tecla == '2') {
					estado = ESTADO_PAGAMENTO_BARCODE;
     6ba:	08 e0       	ldi	r16, 0x08	; 8
     6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <main+0x6a>
					break;
					} else if (tecla == '*') { // Cancel/Back
					estado = ESTADO_MENU;
     6be:	04 e0       	ldi	r16, 0x04	; 4
     6c0:	07 c0       	rjmp	.+14     	; 0x6d0 <main+0x6a>
			realizar_saque(); // Saque (máximo de R$1200,00)
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6c2:	04 e0       	ldi	r16, 0x04	; 4
     6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <main+0x6a>
			realizar_pagamento_manual();
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6c6:	04 e0       	ldi	r16, 0x04	; 4
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <main+0x6a>
			realizar_pagamento_barcode();
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6ca:	04 e0       	ldi	r16, 0x04	; 4
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <main+0x6a>
			consultar_saldo();
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6ce:	04 e0       	ldi	r16, 0x04	; 4

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		// Gerencia respostas da ISR e bloqueio (crítico)
		if (serial_response_pending) {
     6d0:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <serial_response_pending>
     6d4:	88 23       	and	r24, r24
     6d6:	51 f0       	breq	.+20     	; 0x6ec <main+0x86>
			SerialEnviaChars(2, serial_response_char);
     6d8:	68 e1       	ldi	r22, 0x18	; 24
     6da:	74 e0       	ldi	r23, 0x04	; 4
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <SerialEnviaChars>
			serial_response_pending = 0; // Limpa a flag após envio
     6e4:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <serial_response_pending>
			resetar_timeout(); // Reseta timeout após interação serial (útil se o timer estiver ativo)
     6e8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
		}

		// Sistema bloqueado por comando ST, SH ou timeout
		if (isBlocked()) {
     6ec:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     6f0:	88 23       	and	r24, r24
     6f2:	31 f0       	breq	.+12     	; 0x700 <main+0x9a>
			desabilitar_timer_timeout(); // Garante que o timer esteja desabilitado
     6f4:	0e 94 36 02 	call	0x46c	; 0x46c <desabilitar_timer_timeout>
			aguardar_desbloqueio();
     6f8:	0e 94 0b 03 	call	0x616	; 0x616 <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     6fc:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     6fe:	e8 cf       	rjmp	.-48     	; 0x6d0 <main+0x6a>
		}
		
		switch (estado) {
     700:	80 2f       	mov	r24, r16
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	8a 30       	cpi	r24, 0x0A	; 10
     706:	91 05       	cpc	r25, r1
     708:	18 f7       	brcc	.-58     	; 0x6d0 <main+0x6a>
     70a:	fc 01       	movw	r30, r24
     70c:	ec 5c       	subi	r30, 0xCC	; 204
     70e:	ff 4f       	sbci	r31, 0xFF	; 255
     710:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			desabilitar_timer_timeout(); // Desabilita o timer na tela inicial
     714:	0e 94 36 02 	call	0x46c	; 0x46c <desabilitar_timer_timeout>
			LCD_limpar();
     718:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
			mensagem_Inicial();
     71c:	0e 94 5d 00 	call	0xba	; 0xba <mensagem_Inicial>
			while (varredura() == 0) {
     720:	04 c0       	rjmp	.+8      	; 0x72a <main+0xc4>
				if (isBlocked()) break; // Sai se for bloqueado
     722:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     726:	81 11       	cpse	r24, r1
     728:	04 c0       	rjmp	.+8      	; 0x732 <main+0xcc>
		switch (estado) {
			case ESTADO_TELA_INICIAL:
			desabilitar_timer_timeout(); // Desabilita o timer na tela inicial
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     72a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
     72e:	88 23       	and	r24, r24
     730:	c1 f3       	breq	.-16     	; 0x722 <main+0xbc>
				if (isBlocked()) break; // Sai se for bloqueado
			}
			if (!isBlocked()) {
     732:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     736:	88 23       	and	r24, r24
     738:	09 f4       	brne	.+2      	; 0x73c <main+0xd6>
     73a:	b3 cf       	rjmp	.-154    	; 0x6a2 <main+0x3c>
     73c:	c9 cf       	rjmp	.-110    	; 0x6d0 <main+0x6a>
				estado = ESTADO_CODIGO;
			}
			break;

			case ESTADO_CODIGO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     73e:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			ler_codigo_aluno(codigo_aluno); // O cliente deve digitar seu código de aluno (6 dígitos)
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <ler_codigo_aluno>
			if (isBlocked()) {
     74a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     74e:	88 23       	and	r24, r24
     750:	09 f4       	brne	.+2      	; 0x754 <main+0xee>
     752:	a9 cf       	rjmp	.-174    	; 0x6a6 <main+0x40>
				estado = ESTADO_TELA_INICIAL;
     754:	00 e0       	ldi	r16, 0x00	; 0
     756:	bc cf       	rjmp	.-136    	; 0x6d0 <main+0x6a>
			}
			estado = ESTADO_SENHA;
			break;

			case ESTADO_SENHA:
			habilitar_timer_timeout(); // Habilita o timer aqui
     758:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			ler_senha(senha_aluno);
     75c:	ce 01       	movw	r24, r28
     75e:	08 96       	adiw	r24, 0x08	; 8
     760:	0e 94 42 01 	call	0x284	; 0x284 <ler_senha>
			if (isBlocked()) {
     764:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     768:	88 23       	and	r24, r24
     76a:	09 f4       	brne	.+2      	; 0x76e <main+0x108>
     76c:	9e cf       	rjmp	.-196    	; 0x6aa <main+0x44>
				estado = ESTADO_TELA_INICIAL;
     76e:	00 e0       	ldi	r16, 0x00	; 0
     770:	af cf       	rjmp	.-162    	; 0x6d0 <main+0x6a>
			}
			estado = ESTADO_VALIDACAO;
			break;

			case ESTADO_VALIDACAO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     772:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) { // O código será validado pelo servidor
     776:	be 01       	movw	r22, r28
     778:	68 5f       	subi	r22, 0xF8	; 248
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	ce 01       	movw	r24, r28
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	0e 94 89 01 	call	0x312	; 0x312 <validar_codigo_aluno>
     784:	89 2b       	or	r24, r25
     786:	a1 f0       	breq	.+40     	; 0x7b0 <main+0x14a>
				LCD_limpar();
     788:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "BEM VINDO(A)!");
     78c:	4e e6       	ldi	r20, 0x6E	; 110
     78e:	51 e0       	ldi	r21, 0x01	; 1
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "PROCESSANDO...");
     798:	4c e7       	ldi	r20, 0x7C	; 124
     79a:	51 e0       	ldi	r21, 0x01	; 1
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				delay1ms(2000);
     7a4:	80 ed       	ldi	r24, 0xD0	; 208
     7a6:	97 e0       	ldi	r25, 0x07	; 7
     7a8:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
				estado = ESTADO_MENU; // Após validado o cliente deve-se indicar as opções permitidas
     7ac:	04 e0       	ldi	r16, 0x04	; 4
     7ae:	90 cf       	rjmp	.-224    	; 0x6d0 <main+0x6a>
				} else {
				LCD_limpar();
     7b0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "CONTA INVALIDA!"); // Se o código não for válido o dispositivo exibe informação de conta inválida
     7b4:	4b e8       	ldi	r20, 0x8B	; 139
     7b6:	51 e0       	ldi	r21, 0x01	; 1
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "TENTE NOVAMENTE");
     7c0:	4b e9       	ldi	r20, 0x9B	; 155
     7c2:	51 e0       	ldi	r21, 0x01	; 1
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				delay1ms(2000);
     7cc:	80 ed       	ldi	r24, 0xD0	; 208
     7ce:	97 e0       	ldi	r25, 0x07	; 7
     7d0:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
				estado = ESTADO_TELA_INICIAL; // E volta à tela inicial
     7d4:	00 e0       	ldi	r16, 0x00	; 0
     7d6:	7c cf       	rjmp	.-264    	; 0x6d0 <main+0x6a>
			}
			break;

			case ESTADO_MENU:
			habilitar_timer_timeout(); // Habilita o timer aqui
     7d8:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			LCD_limpar();
     7dc:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
			indice_menu = 0;
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     7e0:	4b ea       	ldi	r20, 0xAB	; 171
     7e2:	51 e0       	ldi	r21, 0x01	; 1
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes) {
				LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     7ec:	43 eb       	ldi	r20, 0xB3	; 179
     7ee:	51 e0       	ldi	r21, 0x01	; 1
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
			break;

			case ESTADO_MENU:
			habilitar_timer_timeout(); // Habilita o timer aqui
			LCD_limpar();
			indice_menu = 0;
     7f8:	e1 2c       	mov	r14, r1
     7fa:	f1 2c       	mov	r15, r1
				} else {
				LCD_Escrever_Linha(1, 0, " ");
			}

			while (1) {
				if (isBlocked()) break;
     7fc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     800:	81 11       	cpse	r24, r1
     802:	66 cf       	rjmp	.-308    	; 0x6d0 <main+0x6a>

				tecla = varredura();
     804:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
     808:	18 2f       	mov	r17, r24
				if (tecla != 0) {
     80a:	88 23       	and	r24, r24
     80c:	b9 f3       	breq	.-18     	; 0x7fc <main+0x196>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
     80e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
					delay1ms(300); // Debounce
     812:	8c e2       	ldi	r24, 0x2C	; 44
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>

					if (tecla == 'B') { // Rolar para baixo
     81a:	12 34       	cpi	r17, 0x42	; 66
     81c:	c1 f5       	brne	.+112    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
						if (indice_menu < total_opcoes - 2) {
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	e8 16       	cp	r14, r24
     822:	f1 04       	cpc	r15, r1
     824:	5c f7       	brge	.-42     	; 0x7fc <main+0x196>
							indice_menu++;
     826:	67 01       	movw	r12, r14
     828:	9f ef       	ldi	r25, 0xFF	; 255
     82a:	c9 1a       	sub	r12, r25
     82c:	d9 0a       	sbc	r13, r25
							LCD_limpar();
     82e:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     832:	f6 01       	movw	r30, r12
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	8c 0f       	add	r24, r28
     83e:	9d 1f       	adc	r25, r29
     840:	e8 0f       	add	r30, r24
     842:	f9 1f       	adc	r31, r25
     844:	46 85       	ldd	r20, Z+14	; 0x0e
     846:	57 85       	ldd	r21, Z+15	; 0x0f
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
							if (indice_menu + 1 < total_opcoes) {
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	e9 0e       	add	r14, r25
     854:	f1 1c       	adc	r15, r1
     856:	84 e0       	ldi	r24, 0x04	; 4
     858:	e8 16       	cp	r14, r24
     85a:	f1 04       	cpc	r15, r1
     85c:	84 f4       	brge	.+32     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     85e:	ee 0c       	add	r14, r14
     860:	ff 1c       	adc	r15, r15
     862:	e1 e0       	ldi	r30, 0x01	; 1
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	ec 0f       	add	r30, r28
     868:	fd 1f       	adc	r31, r29
     86a:	ee 0d       	add	r30, r14
     86c:	ff 1d       	adc	r31, r15
     86e:	46 85       	ldd	r20, Z+14	; 0x0e
     870:	57 85       	ldd	r21, Z+15	; 0x0f
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
					delay1ms(300); // Debounce

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) {
							indice_menu++;
     87a:	76 01       	movw	r14, r12
     87c:	bf cf       	rjmp	.-130    	; 0x7fc <main+0x196>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							if (indice_menu + 1 < total_opcoes) {
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
     87e:	4f eb       	ldi	r20, 0xBF	; 191
     880:	51 e0       	ldi	r21, 0x01	; 1
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
					delay1ms(300); // Debounce

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) {
							indice_menu++;
     88a:	76 01       	movw	r14, r12
     88c:	b7 cf       	rjmp	.-146    	; 0x7fc <main+0x196>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
     88e:	11 34       	cpi	r17, 0x41	; 65
     890:	49 f5       	brne	.+82     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
						if (indice_menu > 0) {
     892:	1e 14       	cp	r1, r14
     894:	1f 04       	cpc	r1, r15
     896:	0c f0       	brlt	.+2      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
     898:	b1 cf       	rjmp	.-158    	; 0x7fc <main+0x196>
							indice_menu--;
     89a:	67 01       	movw	r12, r14
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	c9 1a       	sub	r12, r25
     8a0:	d1 08       	sbc	r13, r1
							LCD_limpar();
     8a2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     8a6:	f6 01       	movw	r30, r12
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	8c 0f       	add	r24, r28
     8b2:	9d 1f       	adc	r25, r29
     8b4:	e8 0f       	add	r30, r24
     8b6:	f9 1f       	adc	r31, r25
     8b8:	46 85       	ldd	r20, Z+14	; 0x0e
     8ba:	57 85       	ldd	r21, Z+15	; 0x0f
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     8c4:	ee 0c       	add	r14, r14
     8c6:	ff 1c       	adc	r15, r15
     8c8:	e1 e0       	ldi	r30, 0x01	; 1
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	ec 0f       	add	r30, r28
     8ce:	fd 1f       	adc	r31, r29
     8d0:	ee 0d       	add	r30, r14
     8d2:	ff 1d       	adc	r31, r15
     8d4:	46 85       	ldd	r20, Z+14	; 0x0e
     8d6:	57 85       	ldd	r21, Z+15	; 0x0f
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
						if (indice_menu > 0) {
							indice_menu--;
     8e0:	76 01       	movw	r14, r12
     8e2:	8c cf       	rjmp	.-232    	; 0x7fc <main+0x196>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
						}
						} else if (tecla == '*') { // Voltar para tela inicial
     8e4:	1a 32       	cpi	r17, 0x2A	; 42
     8e6:	71 f4       	brne	.+28     	; 0x904 <__stack+0x5>
						LCD_limpar();
     8e8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "VOLTANDO...");
     8ec:	41 ec       	ldi	r20, 0xC1	; 193
     8ee:	51 e0       	ldi	r21, 0x01	; 1
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
						delay1ms(1000);
     8f8:	88 ee       	ldi	r24, 0xE8	; 232
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
						estado = ESTADO_TELA_INICIAL;
     900:	00 e0       	ldi	r16, 0x00	; 0
						break;
     902:	e6 ce       	rjmp	.-564    	; 0x6d0 <main+0x6a>
						} else {
						switch (tecla) {
     904:	12 33       	cpi	r17, 0x32	; 50
     906:	51 f0       	breq	.+20     	; 0x91c <__stack+0x1d>
     908:	20 f4       	brcc	.+8      	; 0x912 <__stack+0x13>
     90a:	11 33       	cpi	r17, 0x31	; 49
     90c:	09 f4       	brne	.+2      	; 0x910 <__stack+0x11>
     90e:	cf ce       	rjmp	.-610    	; 0x6ae <main+0x48>
     910:	df ce       	rjmp	.-578    	; 0x6d0 <main+0x6a>
     912:	13 33       	cpi	r17, 0x33	; 51
     914:	29 f0       	breq	.+10     	; 0x920 <__stack+0x21>
     916:	14 33       	cpi	r17, 0x34	; 52
     918:	29 f0       	breq	.+10     	; 0x924 <__stack+0x25>
     91a:	da ce       	rjmp	.-588    	; 0x6d0 <main+0x6a>
							case '1': estado = ESTADO_SAQUE; break;
							case '2': estado = ESTADO_TIPO_PAGAMENTO; break; // New state for payment type
     91c:	05 e0       	ldi	r16, 0x05	; 5
     91e:	d8 ce       	rjmp	.-592    	; 0x6d0 <main+0x6a>
							case '3': estado = ESTADO_SALDO; break;
     920:	09 e0       	ldi	r16, 0x09	; 9
     922:	d6 ce       	rjmp	.-596    	; 0x6d0 <main+0x6a>
							case '4': // Sair
							finalizar_sessao();
     924:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <finalizar_sessao>
							estado = ESTADO_TELA_INICIAL;
     928:	00 e0       	ldi	r16, 0x00	; 0
							break;
     92a:	d2 ce       	rjmp	.-604    	; 0x6d0 <main+0x6a>
				}
			}
			break;

			case ESTADO_TIPO_PAGAMENTO:
			habilitar_timer_timeout();
     92c:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			LCD_limpar();
     930:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "1-Manualmente");
     934:	4d ec       	ldi	r20, 0xCD	; 205
     936:	51 e0       	ldi	r21, 0x01	; 1
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "2-Codigo de barras");
     940:	4b ed       	ldi	r20, 0xDB	; 219
     942:	51 e0       	ldi	r21, 0x01	; 1
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
			while(1) {
				if (isBlocked()) {
     94c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     950:	81 11       	cpse	r24, r1
     952:	af ce       	rjmp	.-674    	; 0x6b2 <main+0x4c>
					estado = ESTADO_TELA_INICIAL;
					break;
				}
				tecla = varredura();
     954:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
				if (tecla == '1') {
     958:	81 33       	cpi	r24, 0x31	; 49
     95a:	09 f4       	brne	.+2      	; 0x95e <__stack+0x5f>
     95c:	ac ce       	rjmp	.-680    	; 0x6b6 <main+0x50>
					estado = ESTADO_PAGAMENTO_MANUAL;
					break;
					} else if (tecla == '2') {
     95e:	82 33       	cpi	r24, 0x32	; 50
     960:	09 f4       	brne	.+2      	; 0x964 <__stack+0x65>
     962:	ab ce       	rjmp	.-682    	; 0x6ba <main+0x54>
					estado = ESTADO_PAGAMENTO_BARCODE;
					break;
					} else if (tecla == '*') { // Cancel/Back
     964:	8a 32       	cpi	r24, 0x2A	; 42
     966:	09 f4       	brne	.+2      	; 0x96a <__stack+0x6b>
     968:	aa ce       	rjmp	.-684    	; 0x6be <main+0x58>
					estado = ESTADO_MENU;
					break;
				}
				delay1ms(100);
     96a:	84 e6       	ldi	r24, 0x64	; 100
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
			}
     972:	ec cf       	rjmp	.-40     	; 0x94c <__stack+0x4d>
			break;

			case ESTADO_SAQUE:
			habilitar_timer_timeout(); // Habilita o timer aqui
     974:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			realizar_saque(); // Saque (máximo de R$1200,00)
     978:	0e 94 49 06 	call	0xc92	; 0xc92 <realizar_saque>
			if (isBlocked()) {
     97c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     980:	88 23       	and	r24, r24
     982:	09 f4       	brne	.+2      	; 0x986 <__stack+0x87>
     984:	9e ce       	rjmp	.-708    	; 0x6c2 <main+0x5c>
				estado = ESTADO_TELA_INICIAL;
     986:	00 e0       	ldi	r16, 0x00	; 0
     988:	a3 ce       	rjmp	.-698    	; 0x6d0 <main+0x6a>
			}
			estado = ESTADO_MENU;
			break;

			case ESTADO_PAGAMENTO_MANUAL:
			habilitar_timer_timeout(); // Habilita o timer aqui
     98a:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			realizar_pagamento_manual();
     98e:	0e 94 41 09 	call	0x1282	; 0x1282 <realizar_pagamento_manual>
			if (isBlocked()) {
     992:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     996:	88 23       	and	r24, r24
     998:	09 f4       	brne	.+2      	; 0x99c <__stack+0x9d>
     99a:	95 ce       	rjmp	.-726    	; 0x6c6 <main+0x60>
				estado = ESTADO_TELA_INICIAL;
     99c:	00 e0       	ldi	r16, 0x00	; 0
     99e:	98 ce       	rjmp	.-720    	; 0x6d0 <main+0x6a>
			}
			estado = ESTADO_MENU;
			break;

			case ESTADO_PAGAMENTO_BARCODE:
			habilitar_timer_timeout(); // Habilita o timer aqui
     9a0:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			realizar_pagamento_barcode();
     9a4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <realizar_pagamento_barcode>
			if (isBlocked()) {
     9a8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     9ac:	88 23       	and	r24, r24
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	8c ce       	rjmp	.-744    	; 0x6ca <main+0x64>
				estado = ESTADO_TELA_INICIAL;
     9b2:	00 e0       	ldi	r16, 0x00	; 0
     9b4:	8d ce       	rjmp	.-742    	; 0x6d0 <main+0x6a>
			}
			estado = ESTADO_MENU;
			break;

			case ESTADO_SALDO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     9b6:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			consultar_saldo();
     9ba:	0e 94 78 07 	call	0xef0	; 0xef0 <consultar_saldo>
			if (isBlocked()) {
     9be:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     9c2:	88 23       	and	r24, r24
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	83 ce       	rjmp	.-762    	; 0x6ce <main+0x68>
				estado = ESTADO_TELA_INICIAL;
     9c8:	00 e0       	ldi	r16, 0x00	; 0
     9ca:	82 ce       	rjmp	.-764    	; 0x6d0 <main+0x6a>

000009cc <confirmar_senha>:
    if (remainder == 0) {
        return 0;
    } else {
        return 10 - remainder;
    }
}
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	27 97       	sbiw	r28, 0x07	; 7
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	6c 01       	movw	r12, r24
     9ec:	fe 01       	movw	r30, r28
     9ee:	31 96       	adiw	r30, 0x01	; 1
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	df 01       	movw	r26, r30
     9f4:	1d 92       	st	X+, r1
     9f6:	8a 95       	dec	r24
     9f8:	e9 f7       	brne	.-6      	; 0x9f4 <confirmar_senha+0x28>
     9fa:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     9fe:	4d ef       	ldi	r20, 0xFD	; 253
     a00:	51 e0       	ldi	r21, 0x01	; 1
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     a0a:	4d e2       	ldi	r20, 0x2D	; 45
     a0c:	51 e0       	ldi	r21, 0x01	; 1
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     a16:	e1 2c       	mov	r14, r1
     a18:	f1 2c       	mov	r15, r1
     a1a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     a1e:	18 2f       	mov	r17, r24
     a20:	88 23       	and	r24, r24
     a22:	a1 f0       	breq	.+40     	; 0xa4c <confirmar_senha+0x80>
     a24:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     a28:	4f e0       	ldi	r20, 0x0F	; 15
     a2a:	52 e0       	ldi	r21, 0x02	; 2
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     a34:	4c e1       	ldi	r20, 0x1C	; 28
     a36:	52 e0       	ldi	r21, 0x02	; 2
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     a40:	80 ed       	ldi	r24, 0xD0	; 208
     a42:	97 e0       	ldi	r25, 0x07	; 7
     a44:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     a48:	10 e0       	ldi	r17, 0x00	; 0
     a4a:	71 c0       	rjmp	.+226    	; 0xb2e <confirmar_senha+0x162>
     a4c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
     a50:	90 ed       	ldi	r25, 0xD0	; 208
     a52:	98 0f       	add	r25, r24
     a54:	9a 30       	cpi	r25, 0x0A	; 10
     a56:	c8 f4       	brcc	.+50     	; 0xa8a <confirmar_senha+0xbe>
     a58:	b6 e0       	ldi	r27, 0x06	; 6
     a5a:	eb 16       	cp	r14, r27
     a5c:	f1 04       	cpc	r15, r1
     a5e:	ac f4       	brge	.+42     	; 0xa8a <confirmar_senha+0xbe>
     a60:	e1 e0       	ldi	r30, 0x01	; 1
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	ec 0f       	add	r30, r28
     a66:	fd 1f       	adc	r31, r29
     a68:	ee 0d       	add	r30, r14
     a6a:	ff 1d       	adc	r31, r15
     a6c:	80 83       	st	Z, r24
     a6e:	4a e2       	ldi	r20, 0x2A	; 42
     a70:	52 e0       	ldi	r21, 0x02	; 2
     a72:	6e 2d       	mov	r22, r14
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	e8 1a       	sub	r14, r24
     a7e:	f8 0a       	sbc	r15, r24
     a80:	88 ec       	ldi	r24, 0xC8	; 200
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     a88:	c8 cf       	rjmp	.-112    	; 0xa1a <confirmar_senha+0x4e>
     a8a:	83 32       	cpi	r24, 0x23	; 35
     a8c:	c9 f5       	brne	.+114    	; 0xb00 <confirmar_senha+0x134>
     a8e:	e1 e0       	ldi	r30, 0x01	; 1
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	ec 0f       	add	r30, r28
     a94:	fd 1f       	adc	r31, r29
     a96:	ee 0d       	add	r30, r14
     a98:	ff 1d       	adc	r31, r15
     a9a:	10 82       	st	Z, r1
     a9c:	b6 01       	movw	r22, r12
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <strcmp>
     aa6:	89 2b       	or	r24, r25
     aa8:	09 f4       	brne	.+2      	; 0xaac <confirmar_senha+0xe0>
     aaa:	40 c0       	rjmp	.+128    	; 0xb2c <confirmar_senha+0x160>
     aac:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     ab0:	4c e2       	ldi	r20, 0x2C	; 44
     ab2:	52 e0       	ldi	r21, 0x02	; 2
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     abc:	4d e3       	ldi	r20, 0x3D	; 61
     abe:	52 e0       	ldi	r21, 0x02	; 2
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ac8:	80 ed       	ldi	r24, 0xD0	; 208
     aca:	97 e0       	ldi	r25, 0x07	; 7
     acc:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     ad0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     ad4:	4d ef       	ldi	r20, 0xFD	; 253
     ad6:	51 e0       	ldi	r21, 0x01	; 1
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ae0:	4d e2       	ldi	r20, 0x2D	; 45
     ae2:	51 e0       	ldi	r21, 0x01	; 1
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     aec:	fe 01       	movw	r30, r28
     aee:	31 96       	adiw	r30, 0x01	; 1
     af0:	87 e0       	ldi	r24, 0x07	; 7
     af2:	df 01       	movw	r26, r30
     af4:	1d 92       	st	X+, r1
     af6:	8a 95       	dec	r24
     af8:	e9 f7       	brne	.-6      	; 0xaf4 <confirmar_senha+0x128>
     afa:	e1 2c       	mov	r14, r1
     afc:	f1 2c       	mov	r15, r1
     afe:	8d cf       	rjmp	.-230    	; 0xa1a <confirmar_senha+0x4e>
     b00:	8a 32       	cpi	r24, 0x2A	; 42
     b02:	09 f0       	breq	.+2      	; 0xb06 <confirmar_senha+0x13a>
     b04:	8a cf       	rjmp	.-236    	; 0xa1a <confirmar_senha+0x4e>
     b06:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     b0a:	4d e4       	ldi	r20, 0x4D	; 77
     b0c:	52 e0       	ldi	r21, 0x02	; 2
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b16:	46 e5       	ldi	r20, 0x56	; 86
     b18:	52 e0       	ldi	r21, 0x02	; 2
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b22:	80 ed       	ldi	r24, 0xD0	; 208
     b24:	97 e0       	ldi	r25, 0x07	; 7
     b26:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <confirmar_senha+0x162>
     b2c:	11 e0       	ldi	r17, 0x01	; 1
     b2e:	81 2f       	mov	r24, r17
     b30:	27 96       	adiw	r28, 0x07	; 7
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	08 95       	ret

00000b4c <perguntar_comprovante>:
     b4c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     b50:	40 e6       	ldi	r20, 0x60	; 96
     b52:	52 e0       	ldi	r21, 0x02	; 2
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b5c:	44 e7       	ldi	r20, 0x74	; 116
     b5e:	52 e0       	ldi	r21, 0x02	; 2
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b68:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     b6c:	88 23       	and	r24, r24
     b6e:	99 f0       	breq	.+38     	; 0xb96 <perguntar_comprovante+0x4a>
     b70:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     b74:	4f e0       	ldi	r20, 0x0F	; 15
     b76:	52 e0       	ldi	r21, 0x02	; 2
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b80:	4c e1       	ldi	r20, 0x1C	; 28
     b82:	52 e0       	ldi	r21, 0x02	; 2
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b8c:	80 ed       	ldi	r24, 0xD0	; 208
     b8e:	97 e0       	ldi	r25, 0x07	; 7
     b90:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     b94:	08 95       	ret
     b96:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
     b9a:	81 33       	cpi	r24, 0x31	; 49
     b9c:	99 f4       	brne	.+38     	; 0xbc4 <perguntar_comprovante+0x78>
     b9e:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	52 e0       	ldi	r21, 0x02	; 2
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     bae:	4f e8       	ldi	r20, 0x8F	; 143
     bb0:	52 e0       	ldi	r21, 0x02	; 2
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     bba:	80 ed       	ldi	r24, 0xD0	; 208
     bbc:	97 e0       	ldi	r25, 0x07	; 7
     bbe:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     bc2:	08 95       	ret
     bc4:	82 33       	cpi	r24, 0x32	; 50
     bc6:	81 f6       	brne	.-96     	; 0xb68 <perguntar_comprovante+0x1c>
     bc8:	08 95       	ret

00000bca <enviar_mensagem_saque>:
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	bc 01       	movw	r22, r24
     be0:	ed b6       	in	r14, 0x3d	; 61
     be2:	fe b6       	in	r15, 0x3e	; 62
     be4:	fc 01       	movw	r30, r24
     be6:	01 90       	ld	r0, Z+
     be8:	00 20       	and	r0, r0
     bea:	e9 f7       	brne	.-6      	; 0xbe6 <enviar_mensagem_saque+0x1c>
     bec:	31 97       	sbiw	r30, 0x01	; 1
     bee:	af 01       	movw	r20, r30
     bf0:	48 1b       	sub	r20, r24
     bf2:	59 0b       	sbc	r21, r25
     bf4:	6a 01       	movw	r12, r20
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	c8 0e       	add	r12, r24
     bfa:	d1 1c       	adc	r13, r1
     bfc:	ed b7       	in	r30, 0x3d	; 61
     bfe:	fe b7       	in	r31, 0x3e	; 62
     c00:	ec 19       	sub	r30, r12
     c02:	fd 09       	sbc	r31, r13
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	fe bf       	out	0x3e, r31	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	ed bf       	out	0x3d, r30	; 61
     c0e:	0d b7       	in	r16, 0x3d	; 61
     c10:	1e b7       	in	r17, 0x3e	; 62
     c12:	0f 5f       	subi	r16, 0xFF	; 255
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	83 e4       	ldi	r24, 0x43	; 67
     c18:	81 83       	std	Z+1, r24	; 0x01
     c1a:	83 e5       	ldi	r24, 0x53	; 83
     c1c:	f8 01       	movw	r30, r16
     c1e:	81 83       	std	Z+1, r24	; 0x01
     c20:	42 83       	std	Z+2, r20	; 0x02
     c22:	8d b7       	in	r24, 0x3d	; 61
     c24:	9e b7       	in	r25, 0x3e	; 62
     c26:	04 96       	adiw	r24, 0x04	; 4
     c28:	0e 94 e6 10 	call	0x21cc	; 0x21cc <memcpy>
     c2c:	b8 01       	movw	r22, r16
     c2e:	c6 01       	movw	r24, r12
     c30:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <SerialEnviaChars>
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	fe be       	out	0x3e, r15	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	ed be       	out	0x3d, r14	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	08 95       	ret

00000c50 <receber_resposta_saque>:
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	00 d0       	rcall	.+0      	; 0xc56 <receber_resposta_saque+0x6>
     c56:	00 d0       	rcall	.+0      	; 0xc58 <receber_resposta_saque+0x8>
     c58:	1f 92       	push	r1
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	be 01       	movw	r22, r28
     c60:	6f 5f       	subi	r22, 0xFF	; 255
     c62:	7f 4f       	sbci	r23, 0xFF	; 255
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <SerialRecebeChars>
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	83 35       	cpi	r24, 0x53	; 83
     c70:	29 f4       	brne	.+10     	; 0xc7c <receber_resposta_saque+0x2c>
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	83 35       	cpi	r24, 0x53	; 83
     c76:	21 f4       	brne	.+8      	; 0xc80 <receber_resposta_saque+0x30>
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <receber_resposta_saque+0x32>
     c7c:	85 e4       	ldi	r24, 0x45	; 69
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <receber_resposta_saque+0x32>
     c80:	85 e4       	ldi	r24, 0x45	; 69
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <realizar_saque>:
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	29 97       	sbiw	r28, 0x09	; 9
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	fe 01       	movw	r30, r28
     cac:	31 96       	adiw	r30, 0x01	; 1
     cae:	87 e0       	ldi	r24, 0x07	; 7
     cb0:	df 01       	movw	r26, r30
     cb2:	1d 92       	st	X+, r1
     cb4:	8a 95       	dec	r24
     cb6:	e9 f7       	brne	.-6      	; 0xcb2 <realizar_saque+0x20>
     cb8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     cbc:	4f e9       	ldi	r20, 0x9F	; 159
     cbe:	52 e0       	ldi	r21, 0x02	; 2
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     cc8:	4e e7       	ldi	r20, 0x7E	; 126
     cca:	53 e0       	ldi	r21, 0x03	; 3
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     cd4:	00 e0       	ldi	r16, 0x00	; 0
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     cdc:	88 23       	and	r24, r24
     cde:	99 f0       	breq	.+38     	; 0xd06 <realizar_saque+0x74>
     ce0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     ce4:	4f e0       	ldi	r20, 0x0F	; 15
     ce6:	52 e0       	ldi	r21, 0x02	; 2
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     cf0:	4c e1       	ldi	r20, 0x1C	; 28
     cf2:	52 e0       	ldi	r21, 0x02	; 2
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     cfc:	80 ed       	ldi	r24, 0xD0	; 208
     cfe:	97 e0       	ldi	r25, 0x07	; 7
     d00:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     d04:	ea c0       	rjmp	.+468    	; 0xeda <realizar_saque+0x248>
     d06:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
     d0a:	90 ed       	ldi	r25, 0xD0	; 208
     d0c:	98 0f       	add	r25, r24
     d0e:	9a 30       	cpi	r25, 0x0A	; 10
     d10:	d8 f4       	brcc	.+54     	; 0xd48 <realizar_saque+0xb6>
     d12:	06 30       	cpi	r16, 0x06	; 6
     d14:	11 05       	cpc	r17, r1
     d16:	c4 f4       	brge	.+48     	; 0xd48 <realizar_saque+0xb6>
     d18:	e1 e0       	ldi	r30, 0x01	; 1
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	ec 0f       	add	r30, r28
     d1e:	fd 1f       	adc	r31, r29
     d20:	e0 0f       	add	r30, r16
     d22:	f1 1f       	adc	r31, r17
     d24:	80 83       	st	Z, r24
     d26:	88 87       	std	Y+8, r24	; 0x08
     d28:	19 86       	std	Y+9, r1	; 0x09
     d2a:	62 e0       	ldi	r22, 0x02	; 2
     d2c:	60 0f       	add	r22, r16
     d2e:	ae 01       	movw	r20, r28
     d30:	48 5f       	subi	r20, 0xF8	; 248
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     d3a:	0f 5f       	subi	r16, 0xFF	; 255
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	88 ec       	ldi	r24, 0xC8	; 200
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     d46:	c8 cf       	rjmp	.-112    	; 0xcd8 <realizar_saque+0x46>
     d48:	83 32       	cpi	r24, 0x23	; 35
     d4a:	09 f0       	breq	.+2      	; 0xd4e <realizar_saque+0xbc>
     d4c:	b1 c0       	rjmp	.+354    	; 0xeb0 <realizar_saque+0x21e>
     d4e:	10 16       	cp	r1, r16
     d50:	11 06       	cpc	r1, r17
     d52:	0c f0       	brlt	.+2      	; 0xd56 <realizar_saque+0xc4>
     d54:	ad c0       	rjmp	.+346    	; 0xeb0 <realizar_saque+0x21e>
     d56:	e1 e0       	ldi	r30, 0x01	; 1
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	ec 0f       	add	r30, r28
     d5c:	fd 1f       	adc	r31, r29
     d5e:	e0 0f       	add	r30, r16
     d60:	f1 1f       	adc	r31, r17
     d62:	10 82       	st	Z, r1
     d64:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     d68:	88 23       	and	r24, r24
     d6a:	99 f0       	breq	.+38     	; 0xd92 <realizar_saque+0x100>
     d6c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     d70:	4f e0       	ldi	r20, 0x0F	; 15
     d72:	52 e0       	ldi	r21, 0x02	; 2
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     d7c:	4c e1       	ldi	r20, 0x1C	; 28
     d7e:	52 e0       	ldi	r21, 0x02	; 2
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     d88:	80 ed       	ldi	r24, 0xD0	; 208
     d8a:	97 e0       	ldi	r25, 0x07	; 7
     d8c:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     d90:	a4 c0       	rjmp	.+328    	; 0xeda <realizar_saque+0x248>
     d92:	ce 01       	movw	r24, r28
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	0e 94 bf 10 	call	0x217e	; 0x217e <atol>
     d9a:	61 3c       	cpi	r22, 0xC1	; 193
     d9c:	74 4d       	sbci	r23, 0xD4	; 212
     d9e:	81 40       	sbci	r24, 0x01	; 1
     da0:	91 05       	cpc	r25, r1
     da2:	54 f1       	brlt	.+84     	; 0xdf8 <realizar_saque+0x166>
     da4:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     da8:	4f ea       	ldi	r20, 0xAF	; 175
     daa:	52 e0       	ldi	r21, 0x02	; 2
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     db4:	4d eb       	ldi	r20, 0xBD	; 189
     db6:	52 e0       	ldi	r21, 0x02	; 2
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     dc0:	80 ed       	ldi	r24, 0xD0	; 208
     dc2:	97 e0       	ldi	r25, 0x07	; 7
     dc4:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     dc8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     dcc:	4f e9       	ldi	r20, 0x9F	; 159
     dce:	52 e0       	ldi	r21, 0x02	; 2
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     dd8:	4e e7       	ldi	r20, 0x7E	; 126
     dda:	53 e0       	ldi	r21, 0x03	; 3
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     de4:	fe 01       	movw	r30, r28
     de6:	31 96       	adiw	r30, 0x01	; 1
     de8:	87 e0       	ldi	r24, 0x07	; 7
     dea:	df 01       	movw	r26, r30
     dec:	1d 92       	st	X+, r1
     dee:	8a 95       	dec	r24
     df0:	e9 f7       	brne	.-6      	; 0xdec <realizar_saque+0x15a>
     df2:	00 e0       	ldi	r16, 0x00	; 0
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	70 cf       	rjmp	.-288    	; 0xcd8 <realizar_saque+0x46>
     df8:	0e 94 21 02 	call	0x442	; 0x442 <get_current_password>
     dfc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <confirmar_senha>
     e00:	88 23       	and	r24, r24
     e02:	09 f4       	brne	.+2      	; 0xe06 <realizar_saque+0x174>
     e04:	6a c0       	rjmp	.+212    	; 0xeda <realizar_saque+0x248>
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	0e 94 e5 05 	call	0xbca	; 0xbca <enviar_mensagem_saque>
     e0e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     e12:	88 23       	and	r24, r24
     e14:	99 f0       	breq	.+38     	; 0xe3c <realizar_saque+0x1aa>
     e16:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     e1a:	4f e0       	ldi	r20, 0x0F	; 15
     e1c:	52 e0       	ldi	r21, 0x02	; 2
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e26:	4c e1       	ldi	r20, 0x1C	; 28
     e28:	52 e0       	ldi	r21, 0x02	; 2
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e32:	80 ed       	ldi	r24, 0xD0	; 208
     e34:	97 e0       	ldi	r25, 0x07	; 7
     e36:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     e3a:	4f c0       	rjmp	.+158    	; 0xeda <realizar_saque+0x248>
     e3c:	0e 94 28 06 	call	0xc50	; 0xc50 <receber_resposta_saque>
     e40:	18 2f       	mov	r17, r24
     e42:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     e46:	1f 34       	cpi	r17, 0x4F	; 79
     e48:	99 f4       	brne	.+38     	; 0xe70 <realizar_saque+0x1de>
     e4a:	4d ea       	ldi	r20, 0xAD	; 173
     e4c:	51 e0       	ldi	r21, 0x01	; 1
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e56:	48 ec       	ldi	r20, 0xC8	; 200
     e58:	52 e0       	ldi	r21, 0x02	; 2
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e62:	80 ed       	ldi	r24, 0xD0	; 208
     e64:	97 e0       	ldi	r25, 0x07	; 7
     e66:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     e6a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <perguntar_comprovante>
     e6e:	1b c0       	rjmp	.+54     	; 0xea6 <realizar_saque+0x214>
     e70:	19 34       	cpi	r17, 0x49	; 73
     e72:	69 f4       	brne	.+26     	; 0xe8e <realizar_saque+0x1fc>
     e74:	40 ef       	ldi	r20, 0xF0	; 240
     e76:	51 e0       	ldi	r21, 0x01	; 1
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e80:	43 ed       	ldi	r20, 0xD3	; 211
     e82:	52 e0       	ldi	r21, 0x02	; 2
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e8c:	0c c0       	rjmp	.+24     	; 0xea6 <realizar_saque+0x214>
     e8e:	40 ee       	ldi	r20, 0xE0	; 224
     e90:	52 e0       	ldi	r21, 0x02	; 2
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e9a:	48 ee       	ldi	r20, 0xE8	; 232
     e9c:	52 e0       	ldi	r21, 0x02	; 2
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ea6:	88 eb       	ldi	r24, 0xB8	; 184
     ea8:	9b e0       	ldi	r25, 0x0B	; 11
     eaa:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     eae:	15 c0       	rjmp	.+42     	; 0xeda <realizar_saque+0x248>
     eb0:	8a 32       	cpi	r24, 0x2A	; 42
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <realizar_saque+0x224>
     eb4:	11 cf       	rjmp	.-478    	; 0xcd8 <realizar_saque+0x46>
     eb6:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     eba:	4d e4       	ldi	r20, 0x4D	; 77
     ebc:	52 e0       	ldi	r21, 0x02	; 2
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ec6:	46 e5       	ldi	r20, 0x56	; 86
     ec8:	52 e0       	ldi	r21, 0x02	; 2
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ed2:	80 ed       	ldi	r24, 0xD0	; 208
     ed4:	97 e0       	ldi	r25, 0x07	; 7
     ed6:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     eda:	29 96       	adiw	r28, 0x09	; 9
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <consultar_saldo>:
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	a9 97       	sbiw	r28, 0x29	; 41
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	0e 94 21 02 	call	0x442	; 0x442 <get_current_password>
     f10:	0e 94 e6 04 	call	0x9cc	; 0x9cc <confirmar_senha>
     f14:	81 11       	cpse	r24, r1
     f16:	13 c0       	rjmp	.+38     	; 0xf3e <consultar_saldo+0x4e>
     f18:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     f1c:	4d e4       	ldi	r20, 0x4D	; 77
     f1e:	52 e0       	ldi	r21, 0x02	; 2
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     f28:	46 e5       	ldi	r20, 0x56	; 86
     f2a:	52 e0       	ldi	r21, 0x02	; 2
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     f34:	80 ed       	ldi	r24, 0xD0	; 208
     f36:	97 e0       	ldi	r25, 0x07	; 7
     f38:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     f3c:	ee c0       	rjmp	.+476    	; 0x111a <consultar_saldo+0x22a>
     f3e:	83 e4       	ldi	r24, 0x43	; 67
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	86 e5       	ldi	r24, 0x56	; 86
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     f4a:	88 23       	and	r24, r24
     f4c:	99 f0       	breq	.+38     	; 0xf74 <consultar_saldo+0x84>
     f4e:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     f52:	4f e0       	ldi	r20, 0x0F	; 15
     f54:	52 e0       	ldi	r21, 0x02	; 2
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     f5e:	4c e1       	ldi	r20, 0x1C	; 28
     f60:	52 e0       	ldi	r21, 0x02	; 2
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     f6a:	80 ed       	ldi	r24, 0xD0	; 208
     f6c:	97 e0       	ldi	r25, 0x07	; 7
     f6e:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     f72:	d3 c0       	rjmp	.+422    	; 0x111a <consultar_saldo+0x22a>
     f74:	be 01       	movw	r22, r28
     f76:	6f 5f       	subi	r22, 0xFF	; 255
     f78:	7f 4f       	sbci	r23, 0xFF	; 255
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <SerialEnviaChars>
     f82:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     f86:	88 23       	and	r24, r24
     f88:	99 f0       	breq	.+38     	; 0xfb0 <consultar_saldo+0xc0>
     f8a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     f8e:	4f e0       	ldi	r20, 0x0F	; 15
     f90:	52 e0       	ldi	r21, 0x02	; 2
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     f9a:	4c e1       	ldi	r20, 0x1C	; 28
     f9c:	52 e0       	ldi	r21, 0x02	; 2
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     fa6:	80 ed       	ldi	r24, 0xD0	; 208
     fa8:	97 e0       	ldi	r25, 0x07	; 7
     faa:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
     fae:	b5 c0       	rjmp	.+362    	; 0x111a <consultar_saldo+0x22a>
     fb0:	be 01       	movw	r22, r28
     fb2:	6d 5f       	subi	r22, 0xFD	; 253
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	83 e0       	ldi	r24, 0x03	; 3
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <SerialRecebeChars>
     fbe:	1e 82       	std	Y+6, r1	; 0x06
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	83 35       	cpi	r24, 0x53	; 83
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <consultar_saldo+0xd8>
     fc6:	97 c0       	rjmp	.+302    	; 0x10f6 <consultar_saldo+0x206>
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	86 35       	cpi	r24, 0x56	; 86
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <consultar_saldo+0xe0>
     fce:	93 c0       	rjmp	.+294    	; 0x10f6 <consultar_saldo+0x206>
     fd0:	0d 81       	ldd	r16, Y+5	; 0x05
     fd2:	fe 01       	movw	r30, r28
     fd4:	7a 96       	adiw	r30, 0x1a	; 26
     fd6:	80 e1       	ldi	r24, 0x10	; 16
     fd8:	df 01       	movw	r26, r30
     fda:	1d 92       	st	X+, r1
     fdc:	8a 95       	dec	r24
     fde:	e9 f7       	brne	.-6      	; 0xfda <consultar_saldo+0xea>
     fe0:	00 31       	cpi	r16, 0x10	; 16
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <consultar_saldo+0xf6>
     fe4:	0f e0       	ldi	r16, 0x0F	; 15
     fe6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
     fea:	88 23       	and	r24, r24
     fec:	99 f0       	breq	.+38     	; 0x1014 <consultar_saldo+0x124>
     fee:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     ff2:	4f e0       	ldi	r20, 0x0F	; 15
     ff4:	52 e0       	ldi	r21, 0x02	; 2
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ffe:	4c e1       	ldi	r20, 0x1C	; 28
    1000:	52 e0       	ldi	r21, 0x02	; 2
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    100a:	80 ed       	ldi	r24, 0xD0	; 208
    100c:	97 e0       	ldi	r25, 0x07	; 7
    100e:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    1012:	83 c0       	rjmp	.+262    	; 0x111a <consultar_saldo+0x22a>
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	7e 01       	movw	r14, r28
    1018:	ba e1       	ldi	r27, 0x1A	; 26
    101a:	eb 0e       	add	r14, r27
    101c:	f1 1c       	adc	r15, r1
    101e:	b7 01       	movw	r22, r14
    1020:	c8 01       	movw	r24, r16
    1022:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <SerialRecebeChars>
    1026:	f7 01       	movw	r30, r14
    1028:	e0 0f       	add	r30, r16
    102a:	f1 1f       	adc	r31, r17
    102c:	10 82       	st	Z, r1
    102e:	f7 01       	movw	r30, r14
    1030:	01 90       	ld	r0, Z+
    1032:	00 20       	and	r0, r0
    1034:	e9 f7       	brne	.-6      	; 0x1030 <consultar_saldo+0x140>
    1036:	31 97       	sbiw	r30, 0x01	; 1
    1038:	ee 19       	sub	r30, r14
    103a:	ff 09       	sbc	r31, r15
    103c:	e2 30       	cpi	r30, 0x02	; 2
    103e:	f1 05       	cpc	r31, r1
    1040:	44 f1       	brlt	.+80     	; 0x1092 <consultar_saldo+0x1a2>
    1042:	7e 01       	movw	r14, r28
    1044:	86 e0       	ldi	r24, 0x06	; 6
    1046:	e8 0e       	add	r14, r24
    1048:	f1 1c       	adc	r15, r1
    104a:	82 e5       	ldi	r24, 0x52	; 82
    104c:	94 e2       	ldi	r25, 0x24	; 36
    104e:	9f 83       	std	Y+7, r25	; 0x07
    1050:	8e 83       	std	Y+6, r24	; 0x06
    1052:	d7 01       	movw	r26, r14
    1054:	12 96       	adiw	r26, 0x02	; 2
    1056:	1c 92       	st	X, r1
    1058:	8f 01       	movw	r16, r30
    105a:	02 50       	subi	r16, 0x02	; 2
    105c:	11 09       	sbc	r17, r1
    105e:	a8 01       	movw	r20, r16
    1060:	be 01       	movw	r22, r28
    1062:	66 5e       	subi	r22, 0xE6	; 230
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	c7 01       	movw	r24, r14
    1068:	0e 94 0a 11 	call	0x2214	; 0x2214 <strncat>
    106c:	f7 01       	movw	r30, r14
    106e:	01 90       	ld	r0, Z+
    1070:	00 20       	and	r0, r0
    1072:	e9 f7       	brne	.-6      	; 0x106e <consultar_saldo+0x17e>
    1074:	31 97       	sbiw	r30, 0x01	; 1
    1076:	8e e2       	ldi	r24, 0x2E	; 46
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
    107e:	6a e1       	ldi	r22, 0x1A	; 26
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	6c 0f       	add	r22, r28
    1084:	7d 1f       	adc	r23, r29
    1086:	60 0f       	add	r22, r16
    1088:	71 1f       	adc	r23, r17
    108a:	c7 01       	movw	r24, r14
    108c:	0e 94 ef 10 	call	0x21de	; 0x21de <strcat>
    1090:	1c c0       	rjmp	.+56     	; 0x10ca <consultar_saldo+0x1da>
    1092:	31 97       	sbiw	r30, 0x01	; 1
    1094:	89 f4       	brne	.+34     	; 0x10b8 <consultar_saldo+0x1c8>
    1096:	86 e0       	ldi	r24, 0x06	; 6
    1098:	e1 ef       	ldi	r30, 0xF1	; 241
    109a:	f2 e0       	ldi	r31, 0x02	; 2
    109c:	de 01       	movw	r26, r28
    109e:	16 96       	adiw	r26, 0x06	; 6
    10a0:	01 90       	ld	r0, Z+
    10a2:	0d 92       	st	X+, r0
    10a4:	8a 95       	dec	r24
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <consultar_saldo+0x1b0>
    10a8:	be 01       	movw	r22, r28
    10aa:	66 5e       	subi	r22, 0xE6	; 230
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	ce 01       	movw	r24, r28
    10b0:	06 96       	adiw	r24, 0x06	; 6
    10b2:	0e 94 ef 10 	call	0x21de	; 0x21de <strcat>
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <consultar_saldo+0x1da>
    10b8:	87 e0       	ldi	r24, 0x07	; 7
    10ba:	e7 ef       	ldi	r30, 0xF7	; 247
    10bc:	f2 e0       	ldi	r31, 0x02	; 2
    10be:	de 01       	movw	r26, r28
    10c0:	16 96       	adiw	r26, 0x06	; 6
    10c2:	01 90       	ld	r0, Z+
    10c4:	0d 92       	st	X+, r0
    10c6:	8a 95       	dec	r24
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <consultar_saldo+0x1d2>
    10ca:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    10ce:	4e ef       	ldi	r20, 0xFE	; 254
    10d0:	52 e0       	ldi	r21, 0x02	; 2
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    10da:	ae 01       	movw	r20, r28
    10dc:	4a 5f       	subi	r20, 0xFA	; 250
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    10e8:	88 eb       	ldi	r24, 0xB8	; 184
    10ea:	9b e0       	ldi	r25, 0x0B	; 11
    10ec:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    10f0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <perguntar_comprovante>
    10f4:	12 c0       	rjmp	.+36     	; 0x111a <consultar_saldo+0x22a>
    10f6:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    10fa:	4b e0       	ldi	r20, 0x0B	; 11
    10fc:	53 e0       	ldi	r21, 0x03	; 3
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1106:	49 e1       	ldi	r20, 0x19	; 25
    1108:	53 e0       	ldi	r21, 0x03	; 3
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1112:	88 eb       	ldi	r24, 0xB8	; 184
    1114:	9b e0       	ldi	r25, 0x0B	; 11
    1116:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    111a:	a9 96       	adiw	r28, 0x29	; 41
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	08 95       	ret

00001134 <enviar_mensagem_pagamento>:
    1134:	2f 92       	push	r2
    1136:	3f 92       	push	r3
    1138:	4f 92       	push	r4
    113a:	5f 92       	push	r5
    113c:	6f 92       	push	r6
    113e:	7f 92       	push	r7
    1140:	8f 92       	push	r8
    1142:	9f 92       	push	r9
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	fc 01       	movw	r30, r24
    115e:	4b 01       	movw	r8, r22
    1160:	3a 01       	movw	r6, r20
    1162:	2d b6       	in	r2, 0x3d	; 61
    1164:	3e b6       	in	r3, 0x3e	; 62
    1166:	dc 01       	movw	r26, r24
    1168:	0d 90       	ld	r0, X+
    116a:	00 20       	and	r0, r0
    116c:	e9 f7       	brne	.-6      	; 0x1168 <enviar_mensagem_pagamento+0x34>
    116e:	11 97       	sbiw	r26, 0x01	; 1
    1170:	8d 01       	movw	r16, r26
    1172:	08 1b       	sub	r16, r24
    1174:	19 0b       	sbc	r17, r25
    1176:	db 01       	movw	r26, r22
    1178:	0d 90       	ld	r0, X+
    117a:	00 20       	and	r0, r0
    117c:	e9 f7       	brne	.-6      	; 0x1178 <enviar_mensagem_pagamento+0x44>
    117e:	11 97       	sbiw	r26, 0x01	; 1
    1180:	7d 01       	movw	r14, r26
    1182:	e6 1a       	sub	r14, r22
    1184:	f7 0a       	sbc	r15, r23
    1186:	da 01       	movw	r26, r20
    1188:	0d 90       	ld	r0, X+
    118a:	00 20       	and	r0, r0
    118c:	e9 f7       	brne	.-6      	; 0x1188 <enviar_mensagem_pagamento+0x54>
    118e:	11 97       	sbiw	r26, 0x01	; 1
    1190:	6d 01       	movw	r12, r26
    1192:	c4 1a       	sub	r12, r20
    1194:	d5 0a       	sbc	r13, r21
    1196:	98 01       	movw	r18, r16
    1198:	2e 0d       	add	r18, r14
    119a:	3f 1d       	adc	r19, r15
    119c:	2c 0d       	add	r18, r12
    119e:	3d 1d       	adc	r19, r13
    11a0:	29 01       	movw	r4, r18
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	48 0e       	add	r4, r24
    11a6:	51 1c       	adc	r5, r1
    11a8:	ad b7       	in	r26, 0x3d	; 61
    11aa:	be b7       	in	r27, 0x3e	; 62
    11ac:	a4 19       	sub	r26, r4
    11ae:	b5 09       	sbc	r27, r5
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	be bf       	out	0x3e, r27	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	ad bf       	out	0x3d, r26	; 61
    11ba:	8d b7       	in	r24, 0x3d	; 61
    11bc:	9e b7       	in	r25, 0x3e	; 62
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	5c 01       	movw	r10, r24
    11c2:	83 e4       	ldi	r24, 0x43	; 67
    11c4:	11 96       	adiw	r26, 0x01	; 1
    11c6:	8c 93       	st	X, r24
    11c8:	80 e5       	ldi	r24, 0x50	; 80
    11ca:	d5 01       	movw	r26, r10
    11cc:	11 96       	adiw	r26, 0x01	; 1
    11ce:	8c 93       	st	X, r24
    11d0:	11 97       	sbiw	r26, 0x01	; 1
    11d2:	12 96       	adiw	r26, 0x02	; 2
    11d4:	2c 93       	st	X, r18
    11d6:	8d b7       	in	r24, 0x3d	; 61
    11d8:	9e b7       	in	r25, 0x3e	; 62
    11da:	04 96       	adiw	r24, 0x04	; 4
    11dc:	a8 01       	movw	r20, r16
    11de:	bf 01       	movw	r22, r30
    11e0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <memcpy>
    11e4:	0d 5f       	subi	r16, 0xFD	; 253
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	a7 01       	movw	r20, r14
    11ea:	b4 01       	movw	r22, r8
    11ec:	c5 01       	movw	r24, r10
    11ee:	80 0f       	add	r24, r16
    11f0:	91 1f       	adc	r25, r17
    11f2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <memcpy>
    11f6:	c7 01       	movw	r24, r14
    11f8:	80 0f       	add	r24, r16
    11fa:	91 1f       	adc	r25, r17
    11fc:	a6 01       	movw	r20, r12
    11fe:	b3 01       	movw	r22, r6
    1200:	8a 0d       	add	r24, r10
    1202:	9b 1d       	adc	r25, r11
    1204:	0e 94 e6 10 	call	0x21cc	; 0x21cc <memcpy>
    1208:	b5 01       	movw	r22, r10
    120a:	c2 01       	movw	r24, r4
    120c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <SerialEnviaChars>
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	3e be       	out	0x3e, r3	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	2d be       	out	0x3d, r2	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	7f 90       	pop	r7
    1234:	6f 90       	pop	r6
    1236:	5f 90       	pop	r5
    1238:	4f 90       	pop	r4
    123a:	3f 90       	pop	r3
    123c:	2f 90       	pop	r2
    123e:	08 95       	ret

00001240 <receber_resposta_pagamento>:
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	00 d0       	rcall	.+0      	; 0x1246 <receber_resposta_pagamento+0x6>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <receber_resposta_pagamento+0x8>
    1248:	1f 92       	push	r1
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	be 01       	movw	r22, r28
    1250:	6f 5f       	subi	r22, 0xFF	; 255
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <SerialRecebeChars>
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	83 35       	cpi	r24, 0x53	; 83
    1260:	29 f4       	brne	.+10     	; 0x126c <receber_resposta_pagamento+0x2c>
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 35       	cpi	r24, 0x50	; 80
    1266:	21 f4       	brne	.+8      	; 0x1270 <receber_resposta_pagamento+0x30>
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <receber_resposta_pagamento+0x32>
    126c:	85 e4       	ldi	r24, 0x45	; 69
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <receber_resposta_pagamento+0x32>
    1270:	85 e4       	ldi	r24, 0x45	; 69
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <realizar_pagamento_manual>:
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	62 97       	sbiw	r28, 0x12	; 18
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	19 82       	std	Y+1, r1	; 0x01
    129c:	1a 82       	std	Y+2, r1	; 0x02
    129e:	1b 82       	std	Y+3, r1	; 0x03
    12a0:	1c 82       	std	Y+4, r1	; 0x04
    12a2:	fe 01       	movw	r30, r28
    12a4:	35 96       	adiw	r30, 0x05	; 5
    12a6:	85 e0       	ldi	r24, 0x05	; 5
    12a8:	df 01       	movw	r26, r30
    12aa:	1d 92       	st	X+, r1
    12ac:	8a 95       	dec	r24
    12ae:	e9 f7       	brne	.-6      	; 0x12aa <realizar_pagamento_manual+0x28>
    12b0:	35 96       	adiw	r30, 0x05	; 5
    12b2:	87 e0       	ldi	r24, 0x07	; 7
    12b4:	df 01       	movw	r26, r30
    12b6:	1d 92       	st	X+, r1
    12b8:	8a 95       	dec	r24
    12ba:	e9 f7       	brne	.-6      	; 0x12b6 <realizar_pagamento_manual+0x34>
    12bc:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    12c0:	40 e2       	ldi	r20, 0x20	; 32
    12c2:	53 e0       	ldi	r21, 0x03	; 3
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    12cc:	40 e3       	ldi	r20, 0x30	; 48
    12ce:	51 e0       	ldi	r21, 0x01	; 1
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    12d8:	00 e0       	ldi	r16, 0x00	; 0
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	49 c0       	rjmp	.+146    	; 0x1370 <realizar_pagamento_manual+0xee>
    12de:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
    12e2:	88 23       	and	r24, r24
    12e4:	99 f0       	breq	.+38     	; 0x130c <realizar_pagamento_manual+0x8a>
    12e6:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    12ea:	4f e0       	ldi	r20, 0x0F	; 15
    12ec:	52 e0       	ldi	r21, 0x02	; 2
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    12f6:	4c e1       	ldi	r20, 0x1C	; 28
    12f8:	52 e0       	ldi	r21, 0x02	; 2
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1302:	80 ed       	ldi	r24, 0xD0	; 208
    1304:	97 e0       	ldi	r25, 0x07	; 7
    1306:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    130a:	5f c1       	rjmp	.+702    	; 0x15ca <realizar_pagamento_manual+0x348>
    130c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
    1310:	90 ed       	ldi	r25, 0xD0	; 208
    1312:	98 0f       	add	r25, r24
    1314:	9a 30       	cpi	r25, 0x0A	; 10
    1316:	b8 f4       	brcc	.+46     	; 0x1346 <realizar_pagamento_manual+0xc4>
    1318:	e1 e0       	ldi	r30, 0x01	; 1
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	ec 0f       	add	r30, r28
    131e:	fd 1f       	adc	r31, r29
    1320:	e0 0f       	add	r30, r16
    1322:	f1 1f       	adc	r31, r17
    1324:	80 83       	st	Z, r24
    1326:	89 8b       	std	Y+17, r24	; 0x11
    1328:	1a 8a       	std	Y+18, r1	; 0x12
    132a:	ae 01       	movw	r20, r28
    132c:	4f 5e       	subi	r20, 0xEF	; 239
    132e:	5f 4f       	sbci	r21, 0xFF	; 255
    1330:	60 2f       	mov	r22, r16
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1338:	0f 5f       	subi	r16, 0xFF	; 255
    133a:	1f 4f       	sbci	r17, 0xFF	; 255
    133c:	88 ec       	ldi	r24, 0xC8	; 200
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    1344:	15 c0       	rjmp	.+42     	; 0x1370 <realizar_pagamento_manual+0xee>
    1346:	8a 32       	cpi	r24, 0x2A	; 42
    1348:	99 f4       	brne	.+38     	; 0x1370 <realizar_pagamento_manual+0xee>
    134a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    134e:	4d e4       	ldi	r20, 0x4D	; 77
    1350:	52 e0       	ldi	r21, 0x02	; 2
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    135a:	46 e5       	ldi	r20, 0x56	; 86
    135c:	52 e0       	ldi	r21, 0x02	; 2
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1366:	80 ed       	ldi	r24, 0xD0	; 208
    1368:	97 e0       	ldi	r25, 0x07	; 7
    136a:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    136e:	2d c1       	rjmp	.+602    	; 0x15ca <realizar_pagamento_manual+0x348>
    1370:	03 30       	cpi	r16, 0x03	; 3
    1372:	11 05       	cpc	r17, r1
    1374:	0c f4       	brge	.+2      	; 0x1378 <realizar_pagamento_manual+0xf6>
    1376:	b3 cf       	rjmp	.-154    	; 0x12de <realizar_pagamento_manual+0x5c>
    1378:	1c 82       	std	Y+4, r1	; 0x04
    137a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    137e:	40 e3       	ldi	r20, 0x30	; 48
    1380:	53 e0       	ldi	r21, 0x03	; 3
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    138a:	4f e2       	ldi	r20, 0x2F	; 47
    138c:	51 e0       	ldi	r21, 0x01	; 1
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1396:	00 e0       	ldi	r16, 0x00	; 0
    1398:	10 e0       	ldi	r17, 0x00	; 0
    139a:	49 c0       	rjmp	.+146    	; 0x142e <realizar_pagamento_manual+0x1ac>
    139c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
    13a0:	88 23       	and	r24, r24
    13a2:	99 f0       	breq	.+38     	; 0x13ca <realizar_pagamento_manual+0x148>
    13a4:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    13a8:	4f e0       	ldi	r20, 0x0F	; 15
    13aa:	52 e0       	ldi	r21, 0x02	; 2
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    13b4:	4c e1       	ldi	r20, 0x1C	; 28
    13b6:	52 e0       	ldi	r21, 0x02	; 2
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    13c0:	80 ed       	ldi	r24, 0xD0	; 208
    13c2:	97 e0       	ldi	r25, 0x07	; 7
    13c4:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    13c8:	00 c1       	rjmp	.+512    	; 0x15ca <realizar_pagamento_manual+0x348>
    13ca:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
    13ce:	90 ed       	ldi	r25, 0xD0	; 208
    13d0:	98 0f       	add	r25, r24
    13d2:	9a 30       	cpi	r25, 0x0A	; 10
    13d4:	b8 f4       	brcc	.+46     	; 0x1404 <realizar_pagamento_manual+0x182>
    13d6:	e5 e0       	ldi	r30, 0x05	; 5
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	ec 0f       	add	r30, r28
    13dc:	fd 1f       	adc	r31, r29
    13de:	e0 0f       	add	r30, r16
    13e0:	f1 1f       	adc	r31, r17
    13e2:	80 83       	st	Z, r24
    13e4:	89 8b       	std	Y+17, r24	; 0x11
    13e6:	1a 8a       	std	Y+18, r1	; 0x12
    13e8:	ae 01       	movw	r20, r28
    13ea:	4f 5e       	subi	r20, 0xEF	; 239
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	60 2f       	mov	r22, r16
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    13f6:	0f 5f       	subi	r16, 0xFF	; 255
    13f8:	1f 4f       	sbci	r17, 0xFF	; 255
    13fa:	88 ec       	ldi	r24, 0xC8	; 200
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    1402:	15 c0       	rjmp	.+42     	; 0x142e <realizar_pagamento_manual+0x1ac>
    1404:	8a 32       	cpi	r24, 0x2A	; 42
    1406:	99 f4       	brne	.+38     	; 0x142e <realizar_pagamento_manual+0x1ac>
    1408:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    140c:	4d e4       	ldi	r20, 0x4D	; 77
    140e:	52 e0       	ldi	r21, 0x02	; 2
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1418:	46 e5       	ldi	r20, 0x56	; 86
    141a:	52 e0       	ldi	r21, 0x02	; 2
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1424:	80 ed       	ldi	r24, 0xD0	; 208
    1426:	97 e0       	ldi	r25, 0x07	; 7
    1428:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    142c:	ce c0       	rjmp	.+412    	; 0x15ca <realizar_pagamento_manual+0x348>
    142e:	04 30       	cpi	r16, 0x04	; 4
    1430:	11 05       	cpc	r17, r1
    1432:	0c f4       	brge	.+2      	; 0x1436 <realizar_pagamento_manual+0x1b4>
    1434:	b3 cf       	rjmp	.-154    	; 0x139c <realizar_pagamento_manual+0x11a>
    1436:	19 86       	std	Y+9, r1	; 0x09
    1438:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    143c:	43 e4       	ldi	r20, 0x43	; 67
    143e:	53 e0       	ldi	r21, 0x03	; 3
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1448:	4e e7       	ldi	r20, 0x7E	; 126
    144a:	53 e0       	ldi	r21, 0x03	; 3
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1454:	00 e0       	ldi	r16, 0x00	; 0
    1456:	10 e0       	ldi	r17, 0x00	; 0
    1458:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
    145c:	88 23       	and	r24, r24
    145e:	99 f0       	breq	.+38     	; 0x1486 <realizar_pagamento_manual+0x204>
    1460:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    1464:	4f e0       	ldi	r20, 0x0F	; 15
    1466:	52 e0       	ldi	r21, 0x02	; 2
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1470:	4c e1       	ldi	r20, 0x1C	; 28
    1472:	52 e0       	ldi	r21, 0x02	; 2
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    147c:	80 ed       	ldi	r24, 0xD0	; 208
    147e:	97 e0       	ldi	r25, 0x07	; 7
    1480:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    1484:	a2 c0       	rjmp	.+324    	; 0x15ca <realizar_pagamento_manual+0x348>
    1486:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <varredura>
    148a:	90 ed       	ldi	r25, 0xD0	; 208
    148c:	98 0f       	add	r25, r24
    148e:	9a 30       	cpi	r25, 0x0A	; 10
    1490:	d8 f4       	brcc	.+54     	; 0x14c8 <realizar_pagamento_manual+0x246>
    1492:	06 30       	cpi	r16, 0x06	; 6
    1494:	11 05       	cpc	r17, r1
    1496:	c4 f4       	brge	.+48     	; 0x14c8 <realizar_pagamento_manual+0x246>
    1498:	ea e0       	ldi	r30, 0x0A	; 10
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	ec 0f       	add	r30, r28
    149e:	fd 1f       	adc	r31, r29
    14a0:	e0 0f       	add	r30, r16
    14a2:	f1 1f       	adc	r31, r17
    14a4:	80 83       	st	Z, r24
    14a6:	89 8b       	std	Y+17, r24	; 0x11
    14a8:	1a 8a       	std	Y+18, r1	; 0x12
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	60 0f       	add	r22, r16
    14ae:	ae 01       	movw	r20, r28
    14b0:	4f 5e       	subi	r20, 0xEF	; 239
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    14ba:	0f 5f       	subi	r16, 0xFF	; 255
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	88 ec       	ldi	r24, 0xC8	; 200
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    14c6:	c8 cf       	rjmp	.-112    	; 0x1458 <realizar_pagamento_manual+0x1d6>
    14c8:	83 32       	cpi	r24, 0x23	; 35
    14ca:	09 f0       	breq	.+2      	; 0x14ce <realizar_pagamento_manual+0x24c>
    14cc:	69 c0       	rjmp	.+210    	; 0x15a0 <realizar_pagamento_manual+0x31e>
    14ce:	ea e0       	ldi	r30, 0x0A	; 10
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	ec 0f       	add	r30, r28
    14d4:	fd 1f       	adc	r31, r29
    14d6:	e0 0f       	add	r30, r16
    14d8:	f1 1f       	adc	r31, r17
    14da:	10 82       	st	Z, r1
    14dc:	0e 94 21 02 	call	0x442	; 0x442 <get_current_password>
    14e0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <confirmar_senha>
    14e4:	88 23       	and	r24, r24
    14e6:	09 f4       	brne	.+2      	; 0x14ea <realizar_pagamento_manual+0x268>
    14e8:	70 c0       	rjmp	.+224    	; 0x15ca <realizar_pagamento_manual+0x348>
    14ea:	ae 01       	movw	r20, r28
    14ec:	46 5f       	subi	r20, 0xF6	; 246
    14ee:	5f 4f       	sbci	r21, 0xFF	; 255
    14f0:	be 01       	movw	r22, r28
    14f2:	6b 5f       	subi	r22, 0xFB	; 251
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255
    14f6:	ce 01       	movw	r24, r28
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	0e 94 9a 08 	call	0x1134	; 0x1134 <enviar_mensagem_pagamento>
    14fe:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
    1502:	88 23       	and	r24, r24
    1504:	99 f0       	breq	.+38     	; 0x152c <realizar_pagamento_manual+0x2aa>
    1506:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    150a:	4f e0       	ldi	r20, 0x0F	; 15
    150c:	52 e0       	ldi	r21, 0x02	; 2
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1516:	4c e1       	ldi	r20, 0x1C	; 28
    1518:	52 e0       	ldi	r21, 0x02	; 2
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1522:	80 ed       	ldi	r24, 0xD0	; 208
    1524:	97 e0       	ldi	r25, 0x07	; 7
    1526:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    152a:	4f c0       	rjmp	.+158    	; 0x15ca <realizar_pagamento_manual+0x348>
    152c:	0e 94 20 09 	call	0x1240	; 0x1240 <receber_resposta_pagamento>
    1530:	18 2f       	mov	r17, r24
    1532:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    1536:	1f 34       	cpi	r17, 0x4F	; 79
    1538:	99 f4       	brne	.+38     	; 0x1560 <realizar_pagamento_manual+0x2de>
    153a:	45 eb       	ldi	r20, 0xB5	; 181
    153c:	51 e0       	ldi	r21, 0x01	; 1
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1546:	48 ec       	ldi	r20, 0xC8	; 200
    1548:	52 e0       	ldi	r21, 0x02	; 2
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1552:	80 ed       	ldi	r24, 0xD0	; 208
    1554:	97 e0       	ldi	r25, 0x07	; 7
    1556:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    155a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <perguntar_comprovante>
    155e:	1b c0       	rjmp	.+54     	; 0x1596 <realizar_pagamento_manual+0x314>
    1560:	19 34       	cpi	r17, 0x49	; 73
    1562:	69 f4       	brne	.+26     	; 0x157e <realizar_pagamento_manual+0x2fc>
    1564:	40 ef       	ldi	r20, 0xF0	; 240
    1566:	51 e0       	ldi	r21, 0x01	; 1
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1570:	43 ed       	ldi	r20, 0xD3	; 211
    1572:	52 e0       	ldi	r21, 0x02	; 2
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    157c:	0c c0       	rjmp	.+24     	; 0x1596 <realizar_pagamento_manual+0x314>
    157e:	40 ee       	ldi	r20, 0xE0	; 224
    1580:	52 e0       	ldi	r21, 0x02	; 2
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    158a:	48 ee       	ldi	r20, 0xE8	; 232
    158c:	52 e0       	ldi	r21, 0x02	; 2
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1596:	88 eb       	ldi	r24, 0xB8	; 184
    1598:	9b e0       	ldi	r25, 0x0B	; 11
    159a:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    159e:	15 c0       	rjmp	.+42     	; 0x15ca <realizar_pagamento_manual+0x348>
    15a0:	8a 32       	cpi	r24, 0x2A	; 42
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <realizar_pagamento_manual+0x324>
    15a4:	59 cf       	rjmp	.-334    	; 0x1458 <realizar_pagamento_manual+0x1d6>
    15a6:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    15aa:	4d e4       	ldi	r20, 0x4D	; 77
    15ac:	52 e0       	ldi	r21, 0x02	; 2
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    15b6:	46 e5       	ldi	r20, 0x56	; 86
    15b8:	52 e0       	ldi	r21, 0x02	; 2
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    15c2:	80 ed       	ldi	r24, 0xD0	; 208
    15c4:	97 e0       	ldi	r25, 0x07	; 7
    15c6:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    15ca:	62 96       	adiw	r28, 0x12	; 18
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	08 95       	ret

000015e0 <calculate_module11_dv>:

// Função para calcular o DV do código de barras (Módulo 11) [cite: 163]
int calculate_module11_dv(const char* data, int length) {
    15e0:	dc 01       	movw	r26, r24
    int sum = 0;
    int multiplier = 2;
    for (int i = length - 1; i >= 0; i--) {
    15e2:	61 50       	subi	r22, 0x01	; 1
    15e4:	71 09       	sbc	r23, r1
}

// Função para calcular o DV do código de barras (Módulo 11) [cite: 163]
int calculate_module11_dv(const char* data, int length) {
    int sum = 0;
    int multiplier = 2;
    15e6:	42 e0       	ldi	r20, 0x02	; 2
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    }
}

// Função para calcular o DV do código de barras (Módulo 11) [cite: 163]
int calculate_module11_dv(const char* data, int length) {
    int sum = 0;
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    int multiplier = 2;
    for (int i = length - 1; i >= 0; i--) {
    15ee:	1c c0       	rjmp	.+56     	; 0x1628 <calculate_module11_dv+0x48>
        // Skip the DV position (5th position in a 44-char barcode, which is index 4 for 0-indexed string)
        if (i == 4) continue;
    15f0:	64 30       	cpi	r22, 0x04	; 4
    15f2:	71 05       	cpc	r23, r1
    15f4:	b9 f0       	breq	.+46     	; 0x1624 <calculate_module11_dv+0x44>
        int digit = data[i] - '0';
    15f6:	fd 01       	movw	r30, r26
    15f8:	e6 0f       	add	r30, r22
    15fa:	f7 1f       	adc	r31, r23
    15fc:	20 81       	ld	r18, Z
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	20 53       	subi	r18, 0x30	; 48
    1602:	31 09       	sbc	r19, r1
        sum += digit * multiplier;
    1604:	42 9f       	mul	r20, r18
    1606:	f0 01       	movw	r30, r0
    1608:	43 9f       	mul	r20, r19
    160a:	f0 0d       	add	r31, r0
    160c:	52 9f       	mul	r21, r18
    160e:	f0 0d       	add	r31, r0
    1610:	11 24       	eor	r1, r1
    1612:	8e 0f       	add	r24, r30
    1614:	9f 1f       	adc	r25, r31
        multiplier++;
    1616:	4f 5f       	subi	r20, 0xFF	; 255
    1618:	5f 4f       	sbci	r21, 0xFF	; 255
        if (multiplier > 9) {
    161a:	4a 30       	cpi	r20, 0x0A	; 10
    161c:	51 05       	cpc	r21, r1
    161e:	14 f0       	brlt	.+4      	; 0x1624 <calculate_module11_dv+0x44>
            multiplier = 2;
    1620:	42 e0       	ldi	r20, 0x02	; 2
    1622:	50 e0       	ldi	r21, 0x00	; 0

// Função para calcular o DV do código de barras (Módulo 11) [cite: 163]
int calculate_module11_dv(const char* data, int length) {
    int sum = 0;
    int multiplier = 2;
    for (int i = length - 1; i >= 0; i--) {
    1624:	61 50       	subi	r22, 0x01	; 1
    1626:	71 09       	sbc	r23, r1
    1628:	77 23       	and	r23, r23
    162a:	14 f7       	brge	.-60     	; 0x15f0 <calculate_module11_dv+0x10>
        multiplier++;
        if (multiplier > 9) {
            multiplier = 2;
        }
    }
    int remainder = sum % 11;
    162c:	2b e0       	ldi	r18, 0x0B	; 11
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	b9 01       	movw	r22, r18
    1632:	0e 94 6f 10 	call	0x20de	; 0x20de <__divmodhi4>
    int dv = 11 - remainder;
    1636:	b9 01       	movw	r22, r18
    1638:	68 1b       	sub	r22, r24
    163a:	79 0b       	sbc	r23, r25

    if (dv == 0 || dv == 10 || dv == 11) { // DV equal to 0, 10 or 11 should be 1 [cite: 170]
    163c:	49 f0       	breq	.+18     	; 0x1650 <calculate_module11_dv+0x70>
    163e:	6a 30       	cpi	r22, 0x0A	; 10
    1640:	71 05       	cpc	r23, r1
    1642:	49 f0       	breq	.+18     	; 0x1656 <calculate_module11_dv+0x76>
    1644:	6b 30       	cpi	r22, 0x0B	; 11
    1646:	71 05       	cpc	r23, r1
    1648:	49 f4       	brne	.+18     	; 0x165c <calculate_module11_dv+0x7c>
        return 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	08 95       	ret
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	08 95       	ret
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	08 95       	ret
    } else {
        return dv;
    165c:	86 2f       	mov	r24, r22
    165e:	97 2f       	mov	r25, r23
    }
}
    1660:	08 95       	ret

00001662 <parse_barcode_data>:


// Função para extrair dados de um código de barras (44 posições) [cite: 38]
char parse_barcode_data(const char* barcode_data, char* banco, char* convenio, char* valor) {
    1662:	af 92       	push	r10
    1664:	bf 92       	push	r11
    1666:	cf 92       	push	r12
    1668:	df 92       	push	r13
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	e7 97       	sbiw	r28, 0x37	; 55
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    // 06 a 09: Fator de Vencimento [cite: 39]
    // 10 a 19: Valor (8 inteiros, 2 decimais) [cite: 39]
    // 20 a 44: Campo Livre [cite: 39] (This is where bank-specific info like Nosso Número, Agency, Account, etc. are)

    // Check if barcode_data has expected length (44 digits)
    if (strlen(barcode_data) != 44) {
    1686:	fc 01       	movw	r30, r24
    1688:	01 90       	ld	r0, Z+
    168a:	00 20       	and	r0, r0
    168c:	e9 f7       	brne	.-6      	; 0x1688 <parse_barcode_data+0x26>
    168e:	31 97       	sbiw	r30, 0x01	; 1
    1690:	e8 1b       	sub	r30, r24
    1692:	f9 0b       	sbc	r31, r25
    1694:	bc 97       	sbiw	r30, 0x2c	; 44
    1696:	09 f0       	breq	.+2      	; 0x169a <parse_barcode_data+0x38>
    1698:	47 c0       	rjmp	.+142    	; 0x1728 <parse_barcode_data+0xc6>
    169a:	69 01       	movw	r12, r18
    169c:	8a 01       	movw	r16, r20
    169e:	7b 01       	movw	r14, r22
    16a0:	5c 01       	movw	r10, r24
        return 0; // Invalid barcode length
    }

    // Extract Banco (3 digits from pos 1-3)
    strncpy(banco, barcode_data, 3);
    16a2:	43 e0       	ldi	r20, 0x03	; 3
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	bc 01       	movw	r22, r24
    16a8:	c7 01       	movw	r24, r14
    16aa:	0e 94 1a 11 	call	0x2234	; 0x2234 <strncpy>
    banco[3] = '\0';
    16ae:	f7 01       	movw	r30, r14
    16b0:	13 82       	std	Z+3, r1	; 0x03

    // Extract Valor (10 digits from pos 10-19)
    char temp_valor[11];
    strncpy(temp_valor, barcode_data + 9, 10);
    16b2:	b5 01       	movw	r22, r10
    16b4:	67 5f       	subi	r22, 0xF7	; 247
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	4a e0       	ldi	r20, 0x0A	; 10
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	0e 94 1a 11 	call	0x2234	; 0x2234 <strncpy>
    temp_valor[10] = '\0';
    16c4:	1b 86       	std	Y+11, r1	; 0x0b
    // The payment amount for CP message is in cents, so the 2 decimals are included in the string.
    strcpy(valor, temp_valor);
    16c6:	be 01       	movw	r22, r28
    16c8:	6f 5f       	subi	r22, 0xFF	; 255
    16ca:	7f 4f       	sbci	r23, 0xFF	; 255
    16cc:	c6 01       	movw	r24, r12
    16ce:	0e 94 03 11 	call	0x2206	; 0x2206 <strcpy>
    // This example will use the 'Nosso Número' field from the 'Campo Livre' (pos 20-44)
    // Assuming a 4-position convenio for this example as per the CP message.
    // In a real scenario, you would need to parse the "Campo Livre" (positions 20-44)
    // based on the specific convenio format (e.g., Anexo VII, VIII, IX) to get the correct convenio number.
    // For simplicity, let's assume the convenio is the first 4 digits of the 'Nosso Número' (pos 20-23) if using Anexo VII example. [cite: 180]
    strncpy(convenio, barcode_data + 19, 4); // Nosso Número starts at pos 20 (index 19) [cite: 180]
    16d2:	b5 01       	movw	r22, r10
    16d4:	6d 5e       	subi	r22, 0xED	; 237
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	44 e0       	ldi	r20, 0x04	; 4
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	c8 01       	movw	r24, r16
    16de:	0e 94 1a 11 	call	0x2234	; 0x2234 <strncpy>
    convenio[4] = '\0';
    16e2:	f8 01       	movw	r30, r16
    16e4:	14 82       	std	Z+4, r1	; 0x04
    // Perform verification checks (e.g., Module 10 for fields, Module 11 for barcode DV) [cite: 145, 163]
    // This is a simplified example; a full implementation would involve complex DV calculations
    // for each field of the 'linha digitavel' and the overall barcode.
    
    // Basic validation of the barcode's main DV (5th position) [cite: 39]
    char barcode_dv_char = barcode_data[4];
    16e6:	f5 01       	movw	r30, r10
    16e8:	14 81       	ldd	r17, Z+4	; 0x04
    char barcode_data_without_dv[44];
    strncpy(barcode_data_without_dv, barcode_data, 4);
    16ea:	44 e0       	ldi	r20, 0x04	; 4
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	b5 01       	movw	r22, r10
    16f0:	ce 01       	movw	r24, r28
    16f2:	0c 96       	adiw	r24, 0x0c	; 12
    16f4:	0e 94 1a 11 	call	0x2234	; 0x2234 <strncpy>
    strncpy(barcode_data_without_dv + 4, barcode_data + 5, 39);
    16f8:	b5 01       	movw	r22, r10
    16fa:	6b 5f       	subi	r22, 0xFB	; 251
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	47 e2       	ldi	r20, 0x27	; 39
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	ce 01       	movw	r24, r28
    1704:	40 96       	adiw	r24, 0x10	; 16
    1706:	0e 94 1a 11 	call	0x2234	; 0x2234 <strncpy>
    barcode_data_without_dv[43] = '\0';
    170a:	1f aa       	std	Y+55, r1	; 0x37

    int expected_dv = calculate_module11_dv(barcode_data, 44); // Use the full barcode for DV calculation
    170c:	6c e2       	ldi	r22, 0x2C	; 44
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	c5 01       	movw	r24, r10
    1712:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <calculate_module11_dv>
    if ((barcode_dv_char - '0') != expected_dv) {
    1716:	21 2f       	mov	r18, r17
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	20 53       	subi	r18, 0x30	; 48
    171c:	31 09       	sbc	r19, r1
    171e:	82 17       	cp	r24, r18
    1720:	93 07       	cpc	r25, r19
    1722:	21 f0       	breq	.+8      	; 0x172c <parse_barcode_data+0xca>
        return 0; // Barcode DV mismatch
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	03 c0       	rjmp	.+6      	; 0x172e <parse_barcode_data+0xcc>
    // 10 a 19: Valor (8 inteiros, 2 decimais) [cite: 39]
    // 20 a 44: Campo Livre [cite: 39] (This is where bank-specific info like Nosso Número, Agency, Account, etc. are)

    // Check if barcode_data has expected length (44 digits)
    if (strlen(barcode_data) != 44) {
        return 0; // Invalid barcode length
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	01 c0       	rjmp	.+2      	; 0x172e <parse_barcode_data+0xcc>
    // strncpy(campo1_str + 4, barcode_data + 20, 5); // CCCCC from "Campo Livre"
    // campo1_str[9] = '\0';
    // int campo1_calculated_dv = calculate_module10_dv(campo1_str, 9);
    // if (campo1_calculated_dv != (barcode_data[9] - '0')) return 0; // Check DV X

    return 1; // Barcode parsed and basic validation passed
    172c:	81 e0       	ldi	r24, 0x01	; 1
}
    172e:	e7 96       	adiw	r28, 0x37	; 55
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	af 90       	pop	r10
    174e:	08 95       	ret

00001750 <realizar_pagamento_barcode>:
		}
	}
}

// Realiza pagamento por código de barras [cite: 240]
void realizar_pagamento_barcode(void) {
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	c8 57       	subi	r28, 0x78	; 120
    175c:	d1 09       	sbc	r29, r1
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    char c;
    int received_bytes = 0;
	int timeout_count = 0;
	const int timeout_limit = 500; // 5 seconds timeout

    LCD_limpar();
    1768:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    LCD_Escrever_Linha(0, 0, "Aguardando barcode");
    176c:	42 e5       	ldi	r20, 0x52	; 82
    176e:	53 e0       	ldi	r21, 0x03	; 3
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    LCD_Escrever_Linha(1, 0, "do servidor...");
    1778:	45 e6       	ldi	r20, 0x65	; 101
    177a:	53 e0       	ldi	r21, 0x03	; 3
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>

    memset(barcode_raw, 0, sizeof(barcode_raw));
    1784:	fe 01       	movw	r30, r28
    1786:	31 96       	adiw	r30, 0x01	; 1
    1788:	84 e6       	ldi	r24, 0x64	; 100
    178a:	df 01       	movw	r26, r30
    178c:	1d 92       	st	X+, r1
    178e:	8a 95       	dec	r24
    1790:	e9 f7       	brne	.-6      	; 0x178c <realizar_pagamento_barcode+0x3c>
    memset(banco, 0, sizeof(banco));
    1792:	ec 59       	subi	r30, 0x9C	; 156
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	84 e0       	ldi	r24, 0x04	; 4
    1798:	df 01       	movw	r26, r30
    179a:	1d 92       	st	X+, r1
    179c:	8a 95       	dec	r24
    179e:	e9 f7       	brne	.-6      	; 0x179a <realizar_pagamento_barcode+0x4a>
    memset(convenio, 0, sizeof(convenio));
    17a0:	34 96       	adiw	r30, 0x04	; 4
    17a2:	85 e0       	ldi	r24, 0x05	; 5
    17a4:	df 01       	movw	r26, r30
    17a6:	1d 92       	st	X+, r1
    17a8:	8a 95       	dec	r24
    17aa:	e9 f7       	brne	.-6      	; 0x17a6 <realizar_pagamento_barcode+0x56>
    memset(valor_pagamento, 0, sizeof(valor_pagamento));
    17ac:	35 96       	adiw	r30, 0x05	; 5
    17ae:	87 e0       	ldi	r24, 0x07	; 7
    17b0:	df 01       	movw	r26, r30
    17b2:	1d 92       	st	X+, r1
    17b4:	8a 95       	dec	r24
    17b6:	e9 f7       	brne	.-6      	; 0x17b2 <realizar_pagamento_barcode+0x62>

    // Wait for the 'S' 'B' message from the server [cite: 265]
	char header[3];
	SerialRecebeChars(2, header); // Expect 'S', 'B'
    17b8:	be 01       	movw	r22, r28
    17ba:	6b 58       	subi	r22, 0x8B	; 139
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <SerialRecebeChars>
	header[2] = '\0';
    17c6:	e8 96       	adiw	r28, 0x38	; 56
    17c8:	1f ae       	std	Y+63, r1	; 0x3f
    17ca:	e8 97       	sbiw	r28, 0x38	; 56

	if (header[0] == 'S' && header[1] == 'B') {
    17cc:	e6 96       	adiw	r28, 0x36	; 54
    17ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    17d0:	e6 97       	sbiw	r28, 0x36	; 54
    17d2:	83 35       	cpi	r24, 0x53	; 83
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <realizar_pagamento_barcode+0x88>
    17d6:	ed c0       	rjmp	.+474    	; 0x19b2 <realizar_pagamento_barcode+0x262>
    17d8:	e7 96       	adiw	r28, 0x37	; 55
    17da:	8f ad       	ldd	r24, Y+63	; 0x3f
    17dc:	e7 97       	sbiw	r28, 0x37	; 55
    17de:	82 34       	cpi	r24, 0x42	; 66
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <realizar_pagamento_barcode+0x94>
    17e2:	e7 c0       	rjmp	.+462    	; 0x19b2 <realizar_pagamento_barcode+0x262>
		unsigned char num_bytes_barcode = 0;
    17e4:	e9 96       	adiw	r28, 0x39	; 57
    17e6:	1f ae       	std	Y+63, r1	; 0x3f
    17e8:	e9 97       	sbiw	r28, 0x39	; 57
		SerialRecebeChars(1, &num_bytes_barcode); // Get the length of the barcode data [cite: 265]
    17ea:	be 01       	movw	r22, r28
    17ec:	68 58       	subi	r22, 0x88	; 136
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <SerialRecebeChars>

		if (num_bytes_barcode > 0 && num_bytes_barcode < sizeof(barcode_raw)) {
    17f8:	e9 96       	adiw	r28, 0x39	; 57
    17fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    17fc:	e9 97       	sbiw	r28, 0x39	; 57
    17fe:	9f ef       	ldi	r25, 0xFF	; 255
    1800:	98 0f       	add	r25, r24
    1802:	93 36       	cpi	r25, 0x63	; 99
    1804:	08 f0       	brcs	.+2      	; 0x1808 <realizar_pagamento_barcode+0xb8>
    1806:	c2 c0       	rjmp	.+388    	; 0x198c <realizar_pagamento_barcode+0x23c>
			// Receive the barcode data
			SerialRecebeChars(num_bytes_barcode, barcode_raw); // Receives barcode data as a vector [cite: 242]
    1808:	be 01       	movw	r22, r28
    180a:	6f 5f       	subi	r22, 0xFF	; 255
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <SerialRecebeChars>
			barcode_raw[num_bytes_barcode] = '\0';
    1814:	e9 96       	adiw	r28, 0x39	; 57
    1816:	8f ad       	ldd	r24, Y+63	; 0x3f
    1818:	e9 97       	sbiw	r28, 0x39	; 57
    181a:	e1 e0       	ldi	r30, 0x01	; 1
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	ec 0f       	add	r30, r28
    1820:	fd 1f       	adc	r31, r29
    1822:	e8 0f       	add	r30, r24
    1824:	f1 1d       	adc	r31, r1
    1826:	10 82       	st	Z, r1
            
            // Interpret the barcode data [cite: 242]
			if (parse_barcode_data(barcode_raw, banco, convenio, valor_pagamento)) {
    1828:	9e 01       	movw	r18, r28
    182a:	22 59       	subi	r18, 0x92	; 146
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	ae 01       	movw	r20, r28
    1830:	47 59       	subi	r20, 0x97	; 151
    1832:	5f 4f       	sbci	r21, 0xFF	; 255
    1834:	be 01       	movw	r22, r28
    1836:	6b 59       	subi	r22, 0x9B	; 155
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	ce 01       	movw	r24, r28
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	0e 94 31 0b 	call	0x1662	; 0x1662 <parse_barcode_data>
    1842:	88 23       	and	r24, r24
    1844:	09 f4       	brne	.+2      	; 0x1848 <realizar_pagamento_barcode+0xf8>
    1846:	8f c0       	rjmp	.+286    	; 0x1966 <realizar_pagamento_barcode+0x216>
				// Display parsed data for confirmation (optional, for debugging)
				LCD_limpar();
    1848:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Bco:");
    184c:	44 e7       	ldi	r20, 0x74	; 116
    184e:	53 e0       	ldi	r21, 0x03	; 3
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				LCD_Escrever_Linha(0, 5, banco);
    1858:	ae 01       	movw	r20, r28
    185a:	4b 59       	subi	r20, 0x9B	; 155
    185c:	5f 4f       	sbci	r21, 0xFF	; 255
    185e:	65 e0       	ldi	r22, 0x05	; 5
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Val: R$");
    1866:	49 e7       	ldi	r20, 0x79	; 121
    1868:	53 e0       	ldi	r21, 0x03	; 3
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 7, valor_pagamento);
    1872:	ae 01       	movw	r20, r28
    1874:	42 59       	subi	r20, 0x92	; 146
    1876:	5f 4f       	sbci	r21, 0xFF	; 255
    1878:	67 e0       	ldi	r22, 0x07	; 7
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				delay1ms(3000); // Show for a few seconds
    1880:	88 eb       	ldi	r24, 0xB8	; 184
    1882:	9b e0       	ldi	r25, 0x0B	; 11
    1884:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>

				// Confirmation of senha before proceeding [cite: 229]
				if(!confirmar_senha(get_current_password())) {
    1888:	0e 94 21 02 	call	0x442	; 0x442 <get_current_password>
    188c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <confirmar_senha>
    1890:	81 11       	cpse	r24, r1
    1892:	13 c0       	rjmp	.+38     	; 0x18ba <realizar_pagamento_barcode+0x16a>
					LCD_limpar();
    1894:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
					LCD_Escrever_Linha(0, 0, "Operacao");
    1898:	4d e4       	ldi	r20, 0x4D	; 77
    189a:	52 e0       	ldi	r21, 0x02	; 2
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					LCD_Escrever_Linha(1, 0, "cancelada");
    18a4:	46 e5       	ldi	r20, 0x56	; 86
    18a6:	52 e0       	ldi	r21, 0x02	; 2
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					delay1ms(2000);
    18b0:	80 ed       	ldi	r24, 0xD0	; 208
    18b2:	97 e0       	ldi	r25, 0x07	; 7
    18b4:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
					return;
    18b8:	8e c0       	rjmp	.+284    	; 0x19d6 <realizar_pagamento_barcode+0x286>
				}

				enviar_mensagem_pagamento(banco, convenio, valor_pagamento); // Send to server [cite: 228]
    18ba:	ae 01       	movw	r20, r28
    18bc:	42 59       	subi	r20, 0x92	; 146
    18be:	5f 4f       	sbci	r21, 0xFF	; 255
    18c0:	be 01       	movw	r22, r28
    18c2:	67 59       	subi	r22, 0x97	; 151
    18c4:	7f 4f       	sbci	r23, 0xFF	; 255
    18c6:	ce 01       	movw	r24, r28
    18c8:	8b 59       	subi	r24, 0x9B	; 155
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	0e 94 9a 08 	call	0x1134	; 0x1134 <enviar_mensagem_pagamento>

				if (isBlocked()) {
    18d0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
    18d4:	88 23       	and	r24, r24
    18d6:	99 f0       	breq	.+38     	; 0x18fe <realizar_pagamento_barcode+0x1ae>
					LCD_limpar();
    18d8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
					LCD_Escrever_Linha(0, 0, "OP CANCELADA");
    18dc:	4f e0       	ldi	r20, 0x0F	; 15
    18de:	52 e0       	ldi	r21, 0x02	; 2
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
    18e8:	4c e1       	ldi	r20, 0x1C	; 28
    18ea:	52 e0       	ldi	r21, 0x02	; 2
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					delay1ms(2000);
    18f4:	80 ed       	ldi	r24, 0xD0	; 208
    18f6:	97 e0       	ldi	r25, 0x07	; 7
    18f8:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
					return;
    18fc:	6c c0       	rjmp	.+216    	; 0x19d6 <realizar_pagamento_barcode+0x286>
				}

				char resposta = receber_resposta_pagamento(); // Get response from server [cite: 228]
    18fe:	0e 94 20 09 	call	0x1240	; 0x1240 <receber_resposta_pagamento>
    1902:	18 2f       	mov	r17, r24

				LCD_limpar();
    1904:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
				if(resposta == 'O') {
    1908:	1f 34       	cpi	r17, 0x4F	; 79
    190a:	99 f4       	brne	.+38     	; 0x1932 <realizar_pagamento_barcode+0x1e2>
					LCD_Escrever_Linha(0, 0, "Pagamento");
    190c:	45 eb       	ldi	r20, 0xB5	; 181
    190e:	51 e0       	ldi	r21, 0x01	; 1
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					LCD_Escrever_Linha(1, 0, "Realizado!");
    1918:	48 ec       	ldi	r20, 0xC8	; 200
    191a:	52 e0       	ldi	r21, 0x02	; 2
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					delay1ms(2000);
    1924:	80 ed       	ldi	r24, 0xD0	; 208
    1926:	97 e0       	ldi	r25, 0x07	; 7
    1928:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
					perguntar_comprovante(); // [cite: 231]
    192c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <perguntar_comprovante>
    1930:	15 c0       	rjmp	.+42     	; 0x195c <realizar_pagamento_barcode+0x20c>
				} else if (resposta == 'I') {
    1932:	19 34       	cpi	r17, 0x49	; 73
    1934:	69 f4       	brne	.+26     	; 0x1950 <realizar_pagamento_barcode+0x200>
					LCD_Escrever_Linha(0, 0, "Saldo");
    1936:	40 ef       	ldi	r20, 0xF0	; 240
    1938:	51 e0       	ldi	r21, 0x01	; 1
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					LCD_Escrever_Linha(1, 0, "insuficiente");
    1942:	43 ed       	ldi	r20, 0xD3	; 211
    1944:	52 e0       	ldi	r21, 0x02	; 2
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    194e:	06 c0       	rjmp	.+12     	; 0x195c <realizar_pagamento_barcode+0x20c>
				} else {
					LCD_Escrever_Linha(0, 0, "Erro no pag.");
    1950:	41 e8       	ldi	r20, 0x81	; 129
    1952:	53 e0       	ldi	r21, 0x03	; 3
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				}
				delay1ms(3000);
    195c:	88 eb       	ldi	r24, 0xB8	; 184
    195e:	9b e0       	ldi	r25, 0x0B	; 11
    1960:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    1964:	38 c0       	rjmp	.+112    	; 0x19d6 <realizar_pagamento_barcode+0x286>
			} else {
				LCD_limpar();
    1966:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Barcode Invalido!");
    196a:	4e e8       	ldi	r20, 0x8E	; 142
    196c:	53 e0       	ldi	r21, 0x03	; 3
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente novamente");
    1976:	4d e3       	ldi	r20, 0x3D	; 61
    1978:	52 e0       	ldi	r21, 0x02	; 2
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				delay1ms(3000);
    1982:	88 eb       	ldi	r24, 0xB8	; 184
    1984:	9b e0       	ldi	r25, 0x0B	; 11
    1986:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    198a:	25 c0       	rjmp	.+74     	; 0x19d6 <realizar_pagamento_barcode+0x286>
			}
		} else {
			LCD_limpar();
    198c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Erro ao receber");
    1990:	40 ea       	ldi	r20, 0xA0	; 160
    1992:	53 e0       	ldi	r21, 0x03	; 3
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "barcode!");
    199c:	40 eb       	ldi	r20, 0xB0	; 176
    199e:	53 e0       	ldi	r21, 0x03	; 3
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
			delay1ms(3000);
    19a8:	88 eb       	ldi	r24, 0xB8	; 184
    19aa:	9b e0       	ldi	r25, 0x0B	; 11
    19ac:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    // Wait for the 'S' 'B' message from the server [cite: 265]
	char header[3];
	SerialRecebeChars(2, header); // Expect 'S', 'B'
	header[2] = '\0';

	if (header[0] == 'S' && header[1] == 'B') {
    19b0:	12 c0       	rjmp	.+36     	; 0x19d6 <realizar_pagamento_barcode+0x286>
			LCD_Escrever_Linha(0, 0, "Erro ao receber");
			LCD_Escrever_Linha(1, 0, "barcode!");
			delay1ms(3000);
		}
	} else {
		LCD_limpar();
    19b2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Nenhum barcode");
    19b6:	49 eb       	ldi	r20, 0xB9	; 185
    19b8:	53 e0       	ldi	r21, 0x03	; 3
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "recebido.");
    19c2:	48 ec       	ldi	r20, 0xC8	; 200
    19c4:	53 e0       	ldi	r21, 0x03	; 3
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		delay1ms(3000);
    19ce:	88 eb       	ldi	r24, 0xB8	; 184
    19d0:	9b e0       	ldi	r25, 0x0B	; 11
    19d2:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
	}
}
    19d6:	c8 58       	subi	r28, 0x88	; 136
    19d8:	df 4f       	sbci	r29, 0xFF	; 255
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	08 95       	ret

000019ec <finalizar_sessao>:
    return 1; // Barcode parsed and basic validation passed
}


// Finaliza a sessão [cite: 271]
void finalizar_sessao(void) {
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <finalizar_sessao+0x6>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <finalizar_sessao+0x8>
    19f4:	1f 92       	push	r1
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	char mensagem[2] = {'C', 'F'}; // Mensagem para informar que a sessão está sendo fechada [cite: 271]
    19fa:	83 e4       	ldi	r24, 0x43	; 67
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	86 e4       	ldi	r24, 0x46	; 70
    1a00:	8a 83       	std	Y+2, r24	; 0x02
	if (isBlocked()) {
    1a02:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
    1a06:	88 23       	and	r24, r24
    1a08:	99 f0       	breq	.+38     	; 0x1a30 <finalizar_sessao+0x44>
		LCD_limpar();
    1a0a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
    1a0e:	42 ed       	ldi	r20, 0xD2	; 210
    1a10:	53 e0       	ldi	r21, 0x03	; 3
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
    1a1a:	4d ed       	ldi	r20, 0xDD	; 221
    1a1c:	53 e0       	ldi	r21, 0x03	; 3
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		delay1ms(2000);
    1a26:	80 ed       	ldi	r24, 0xD0	; 208
    1a28:	97 e0       	ldi	r25, 0x07	; 7
    1a2a:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
		return;
    1a2e:	38 c0       	rjmp	.+112    	; 0x1aa0 <finalizar_sessao+0xb4>
	}
	SerialEnviaChars(2, mensagem);
    1a30:	be 01       	movw	r22, r28
    1a32:	6f 5f       	subi	r22, 0xFF	; 255
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <SerialEnviaChars>

	char resposta[3];
	if (isBlocked()) {
    1a3e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <isBlocked>
    1a42:	88 23       	and	r24, r24
    1a44:	99 f0       	breq	.+38     	; 0x1a6c <finalizar_sessao+0x80>
		LCD_limpar();
    1a46:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
    1a4a:	42 ed       	ldi	r20, 0xD2	; 210
    1a4c:	53 e0       	ldi	r21, 0x03	; 3
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
    1a56:	4d ed       	ldi	r20, 0xDD	; 221
    1a58:	53 e0       	ldi	r21, 0x03	; 3
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		delay1ms(2000);
    1a62:	80 ed       	ldi	r24, 0xD0	; 208
    1a64:	97 e0       	ldi	r25, 0x07	; 7
    1a66:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
		return;
    1a6a:	1a c0       	rjmp	.+52     	; 0x1aa0 <finalizar_sessao+0xb4>
	}
	SerialRecebeChars(2, resposta); // Espera 'S', 'F' como resposta [cite: 271]
    1a6c:	be 01       	movw	r22, r28
    1a6e:	6d 5f       	subi	r22, 0xFD	; 253
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <SerialRecebeChars>
	resposta[2] = '\0';
    1a7a:	1d 82       	std	Y+5, r1	; 0x05

	LCD_limpar();
    1a7c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
	//LCD_Escrever_Linha(0, 0, resposta);
	//delay1ms(2000);
	
	LCD_Escrever_Linha(0, 0, "Sessao");
    1a80:	49 ee       	ldi	r20, 0xE9	; 233
    1a82:	53 e0       	ldi	r21, 0x03	; 3
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "Finalizada!");
    1a8c:	40 ef       	ldi	r20, 0xF0	; 240
    1a8e:	53 e0       	ldi	r21, 0x03	; 3
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "Finalizada!");
		} else {
		LCD_Escrever_Linha(0, 0, "Erro ao finalizar");
		LCD_Escrever_Linha(1, 0, "sessao!");
	}*/
	delay1ms(2000);
    1a98:	80 ed       	ldi	r24, 0xD0	; 208
    1a9a:	97 e0       	ldi	r25, 0x07	; 7
    1a9c:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	08 95       	ret

00001ab0 <isBlocked>:
	if (uart_head >= uart_tail) {
		return uart_head - uart_tail;
		} else {
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}
    1ab0:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <blocked>
    1ab4:	08 95       	ret

00001ab6 <setBlocked>:
    1ab6:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <blocked>
    1aba:	08 95       	ret

00001abc <initUART>:
    1abc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1ac0:	83 e3       	ldi	r24, 0x33	; 51
    1ac2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1ac6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1aca:	88 e9       	ldi	r24, 0x98	; 152
    1acc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1ad0:	86 e0       	ldi	r24, 0x06	; 6
    1ad2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1ad6:	78 94       	sei
    1ad8:	08 95       	ret

00001ada <SerialEnviaChars>:
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	8c 01       	movw	r16, r24
    1ae8:	7b 01       	movw	r14, r22
    1aea:	c0 e0       	ldi	r28, 0x00	; 0
    1aec:	d0 e0       	ldi	r29, 0x00	; 0
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <SerialEnviaChars+0x34>
    1af0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1af4:	85 ff       	sbrs	r24, 5
    1af6:	fc cf       	rjmp	.-8      	; 0x1af0 <SerialEnviaChars+0x16>
    1af8:	f7 01       	movw	r30, r14
    1afa:	ec 0f       	add	r30, r28
    1afc:	fd 1f       	adc	r31, r29
    1afe:	80 81       	ld	r24, Z
    1b00:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1b04:	84 e1       	ldi	r24, 0x14	; 20
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    1b0c:	21 96       	adiw	r28, 0x01	; 1
    1b0e:	c0 17       	cp	r28, r16
    1b10:	d1 07       	cpc	r29, r17
    1b12:	74 f3       	brlt	.-36     	; 0x1af0 <SerialEnviaChars+0x16>
    1b14:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1b18:	86 ff       	sbrs	r24, 6
    1b1a:	fc cf       	rjmp	.-8      	; 0x1b14 <SerialEnviaChars+0x3a>
    1b1c:	e0 ec       	ldi	r30, 0xC0	; 192
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	80 64       	ori	r24, 0x40	; 64
    1b24:	80 83       	st	Z, r24
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	08 95       	ret

00001b34 <__vector_18>:
    1b34:	1f 92       	push	r1
    1b36:	0f 92       	push	r0
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	0f 92       	push	r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	2f 93       	push	r18
    1b40:	3f 93       	push	r19
    1b42:	4f 93       	push	r20
    1b44:	5f 93       	push	r21
    1b46:	6f 93       	push	r22
    1b48:	7f 93       	push	r23
    1b4a:	8f 93       	push	r24
    1b4c:	9f 93       	push	r25
    1b4e:	af 93       	push	r26
    1b50:	bf 93       	push	r27
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
    1b56:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1b5a:	e0 91 0c 04 	lds	r30, 0x040C	; 0x80040c <sh_bytes_count>
    1b5e:	9f ef       	ldi	r25, 0xFF	; 255
    1b60:	9e 0f       	add	r25, r30
    1b62:	95 30       	cpi	r25, 0x05	; 5
    1b64:	08 f5       	brcc	.+66     	; 0x1ba8 <__vector_18+0x74>
    1b66:	91 e0       	ldi	r25, 0x01	; 1
    1b68:	9e 0f       	add	r25, r30
    1b6a:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <sh_bytes_count>
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	e3 5f       	subi	r30, 0xF3	; 243
    1b72:	fb 4f       	sbci	r31, 0xFB	; 251
    1b74:	80 83       	st	Z, r24
    1b76:	96 30       	cpi	r25, 0x06	; 6
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <__vector_18+0x48>
    1b7a:	05 c1       	rjmp	.+522    	; 0x1d86 <__vector_18+0x252>
    1b7c:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <sh_command_bytes_received+0x4>
    1b80:	98 50       	subi	r25, 0x08	; 8
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	9c 30       	cpi	r25, 0x0C	; 12
    1b86:	08 f4       	brcc	.+2      	; 0x1b8a <__vector_18+0x56>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <setBlocked>
    1b8e:	e8 e1       	ldi	r30, 0x18	; 24
    1b90:	f4 e0       	ldi	r31, 0x04	; 4
    1b92:	83 e4       	ldi	r24, 0x43	; 67
    1b94:	80 83       	st	Z, r24
    1b96:	88 e4       	ldi	r24, 0x48	; 72
    1b98:	81 83       	std	Z+1, r24	; 0x01
    1b9a:	12 82       	std	Z+2, r1	; 0x02
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <serial_response_pending>
    1ba2:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <sh_bytes_count>
    1ba6:	ef c0       	rjmp	.+478    	; 0x1d86 <__vector_18+0x252>
    1ba8:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <waiting_for_second_byte>
    1bac:	99 23       	and	r25, r25
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <__vector_18+0x7e>
    1bb0:	c0 c0       	rjmp	.+384    	; 0x1d32 <__vector_18+0x1fe>
    1bb2:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <first_byte_of_potential_command>
    1bb6:	93 35       	cpi	r25, 0x53	; 83
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <__vector_18+0x88>
    1bba:	72 c0       	rjmp	.+228    	; 0x1ca0 <__vector_18+0x16c>
    1bbc:	84 35       	cpi	r24, 0x54	; 84
    1bbe:	71 f4       	brne	.+28     	; 0x1bdc <__vector_18+0xa8>
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <setBlocked>
    1bc6:	e8 e1       	ldi	r30, 0x18	; 24
    1bc8:	f4 e0       	ldi	r31, 0x04	; 4
    1bca:	83 e4       	ldi	r24, 0x43	; 67
    1bcc:	80 83       	st	Z, r24
    1bce:	84 e5       	ldi	r24, 0x54	; 84
    1bd0:	81 83       	std	Z+1, r24	; 0x01
    1bd2:	12 82       	std	Z+2, r1	; 0x02
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <serial_response_pending>
    1bda:	a6 c0       	rjmp	.+332    	; 0x1d28 <__vector_18+0x1f4>
    1bdc:	8c 34       	cpi	r24, 0x4C	; 76
    1bde:	71 f4       	brne	.+28     	; 0x1bfc <__vector_18+0xc8>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <setBlocked>
    1be6:	e8 e1       	ldi	r30, 0x18	; 24
    1be8:	f4 e0       	ldi	r31, 0x04	; 4
    1bea:	83 e4       	ldi	r24, 0x43	; 67
    1bec:	80 83       	st	Z, r24
    1bee:	8c e4       	ldi	r24, 0x4C	; 76
    1bf0:	81 83       	std	Z+1, r24	; 0x01
    1bf2:	12 82       	std	Z+2, r1	; 0x02
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <serial_response_pending>
    1bfa:	96 c0       	rjmp	.+300    	; 0x1d28 <__vector_18+0x1f4>
    1bfc:	88 34       	cpi	r24, 0x48	; 72
    1bfe:	51 f4       	brne	.+20     	; 0x1c14 <__vector_18+0xe0>
    1c00:	ed e0       	ldi	r30, 0x0D	; 13
    1c02:	f4 e0       	ldi	r31, 0x04	; 4
    1c04:	83 e5       	ldi	r24, 0x53	; 83
    1c06:	80 83       	st	Z, r24
    1c08:	88 e4       	ldi	r24, 0x48	; 72
    1c0a:	81 83       	std	Z+1, r24	; 0x01
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <sh_bytes_count>
    1c12:	8a c0       	rjmp	.+276    	; 0x1d28 <__vector_18+0x1f4>
    1c14:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <uart_head>
    1c18:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <uart_head+0x1>
    1c1c:	2f 5f       	subi	r18, 0xFF	; 255
    1c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c20:	2f 77       	andi	r18, 0x7F	; 127
    1c22:	30 78       	andi	r19, 0x80	; 128
    1c24:	33 23       	and	r19, r19
    1c26:	34 f4       	brge	.+12     	; 0x1c34 <__vector_18+0x100>
    1c28:	21 50       	subi	r18, 0x01	; 1
    1c2a:	31 09       	sbc	r19, r1
    1c2c:	20 68       	ori	r18, 0x80	; 128
    1c2e:	3f 6f       	ori	r19, 0xFF	; 255
    1c30:	2f 5f       	subi	r18, 0xFF	; 255
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
    1c34:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <uart_tail>
    1c38:	50 91 15 04 	lds	r21, 0x0415	; 0x800415 <uart_tail+0x1>
    1c3c:	24 17       	cp	r18, r20
    1c3e:	35 07       	cpc	r19, r21
    1c40:	59 f0       	breq	.+22     	; 0x1c58 <__vector_18+0x124>
    1c42:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <uart_head>
    1c46:	f0 91 17 04 	lds	r31, 0x0417	; 0x800417 <uart_head+0x1>
    1c4a:	e5 5e       	subi	r30, 0xE5	; 229
    1c4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c4e:	90 83       	st	Z, r25
    1c50:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <uart_head+0x1>
    1c54:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <uart_head>
    1c58:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <uart_head>
    1c5c:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <uart_head+0x1>
    1c60:	2f 5f       	subi	r18, 0xFF	; 255
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	2f 77       	andi	r18, 0x7F	; 127
    1c66:	30 78       	andi	r19, 0x80	; 128
    1c68:	33 23       	and	r19, r19
    1c6a:	34 f4       	brge	.+12     	; 0x1c78 <__vector_18+0x144>
    1c6c:	21 50       	subi	r18, 0x01	; 1
    1c6e:	31 09       	sbc	r19, r1
    1c70:	20 68       	ori	r18, 0x80	; 128
    1c72:	3f 6f       	ori	r19, 0xFF	; 255
    1c74:	2f 5f       	subi	r18, 0xFF	; 255
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <uart_tail>
    1c7c:	50 91 15 04 	lds	r21, 0x0415	; 0x800415 <uart_tail+0x1>
    1c80:	24 17       	cp	r18, r20
    1c82:	35 07       	cpc	r19, r21
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <__vector_18+0x154>
    1c86:	50 c0       	rjmp	.+160    	; 0x1d28 <__vector_18+0x1f4>
    1c88:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <uart_head>
    1c8c:	f0 91 17 04 	lds	r31, 0x0417	; 0x800417 <uart_head+0x1>
    1c90:	e5 5e       	subi	r30, 0xE5	; 229
    1c92:	fb 4f       	sbci	r31, 0xFB	; 251
    1c94:	80 83       	st	Z, r24
    1c96:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <uart_head+0x1>
    1c9a:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <uart_head>
    1c9e:	44 c0       	rjmp	.+136    	; 0x1d28 <__vector_18+0x1f4>
    1ca0:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <uart_head>
    1ca4:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <uart_head+0x1>
    1ca8:	2f 5f       	subi	r18, 0xFF	; 255
    1caa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cac:	2f 77       	andi	r18, 0x7F	; 127
    1cae:	30 78       	andi	r19, 0x80	; 128
    1cb0:	33 23       	and	r19, r19
    1cb2:	34 f4       	brge	.+12     	; 0x1cc0 <__vector_18+0x18c>
    1cb4:	21 50       	subi	r18, 0x01	; 1
    1cb6:	31 09       	sbc	r19, r1
    1cb8:	20 68       	ori	r18, 0x80	; 128
    1cba:	3f 6f       	ori	r19, 0xFF	; 255
    1cbc:	2f 5f       	subi	r18, 0xFF	; 255
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <uart_tail>
    1cc4:	50 91 15 04 	lds	r21, 0x0415	; 0x800415 <uart_tail+0x1>
    1cc8:	24 17       	cp	r18, r20
    1cca:	35 07       	cpc	r19, r21
    1ccc:	59 f0       	breq	.+22     	; 0x1ce4 <__vector_18+0x1b0>
    1cce:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <uart_head>
    1cd2:	f0 91 17 04 	lds	r31, 0x0417	; 0x800417 <uart_head+0x1>
    1cd6:	e5 5e       	subi	r30, 0xE5	; 229
    1cd8:	fb 4f       	sbci	r31, 0xFB	; 251
    1cda:	90 83       	st	Z, r25
    1cdc:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <uart_head+0x1>
    1ce0:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <uart_head>
    1ce4:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <uart_head>
    1ce8:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <uart_head+0x1>
    1cec:	2f 5f       	subi	r18, 0xFF	; 255
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	2f 77       	andi	r18, 0x7F	; 127
    1cf2:	30 78       	andi	r19, 0x80	; 128
    1cf4:	33 23       	and	r19, r19
    1cf6:	34 f4       	brge	.+12     	; 0x1d04 <__vector_18+0x1d0>
    1cf8:	21 50       	subi	r18, 0x01	; 1
    1cfa:	31 09       	sbc	r19, r1
    1cfc:	20 68       	ori	r18, 0x80	; 128
    1cfe:	3f 6f       	ori	r19, 0xFF	; 255
    1d00:	2f 5f       	subi	r18, 0xFF	; 255
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <uart_tail>
    1d08:	50 91 15 04 	lds	r21, 0x0415	; 0x800415 <uart_tail+0x1>
    1d0c:	24 17       	cp	r18, r20
    1d0e:	35 07       	cpc	r19, r21
    1d10:	59 f0       	breq	.+22     	; 0x1d28 <__vector_18+0x1f4>
    1d12:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <uart_head>
    1d16:	f0 91 17 04 	lds	r31, 0x0417	; 0x800417 <uart_head+0x1>
    1d1a:	e5 5e       	subi	r30, 0xE5	; 229
    1d1c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d1e:	80 83       	st	Z, r24
    1d20:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <uart_head+0x1>
    1d24:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <uart_head>
    1d28:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <waiting_for_second_byte>
    1d2c:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <first_byte_of_potential_command>
    1d30:	2a c0       	rjmp	.+84     	; 0x1d86 <__vector_18+0x252>
    1d32:	83 35       	cpi	r24, 0x53	; 83
    1d34:	31 f4       	brne	.+12     	; 0x1d42 <__vector_18+0x20e>
    1d36:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <first_byte_of_potential_command>
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <waiting_for_second_byte>
    1d40:	22 c0       	rjmp	.+68     	; 0x1d86 <__vector_18+0x252>
    1d42:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <uart_head>
    1d46:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <uart_head+0x1>
    1d4a:	2f 5f       	subi	r18, 0xFF	; 255
    1d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4e:	2f 77       	andi	r18, 0x7F	; 127
    1d50:	30 78       	andi	r19, 0x80	; 128
    1d52:	33 23       	and	r19, r19
    1d54:	34 f4       	brge	.+12     	; 0x1d62 <__vector_18+0x22e>
    1d56:	21 50       	subi	r18, 0x01	; 1
    1d58:	31 09       	sbc	r19, r1
    1d5a:	20 68       	ori	r18, 0x80	; 128
    1d5c:	3f 6f       	ori	r19, 0xFF	; 255
    1d5e:	2f 5f       	subi	r18, 0xFF	; 255
    1d60:	3f 4f       	sbci	r19, 0xFF	; 255
    1d62:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <uart_tail>
    1d66:	50 91 15 04 	lds	r21, 0x0415	; 0x800415 <uart_tail+0x1>
    1d6a:	24 17       	cp	r18, r20
    1d6c:	35 07       	cpc	r19, r21
    1d6e:	59 f0       	breq	.+22     	; 0x1d86 <__vector_18+0x252>
    1d70:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <uart_head>
    1d74:	f0 91 17 04 	lds	r31, 0x0417	; 0x800417 <uart_head+0x1>
    1d78:	e5 5e       	subi	r30, 0xE5	; 229
    1d7a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d7c:	80 83       	st	Z, r24
    1d7e:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <uart_head+0x1>
    1d82:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <uart_head>
    1d86:	ff 91       	pop	r31
    1d88:	ef 91       	pop	r30
    1d8a:	bf 91       	pop	r27
    1d8c:	af 91       	pop	r26
    1d8e:	9f 91       	pop	r25
    1d90:	8f 91       	pop	r24
    1d92:	7f 91       	pop	r23
    1d94:	6f 91       	pop	r22
    1d96:	5f 91       	pop	r21
    1d98:	4f 91       	pop	r20
    1d9a:	3f 91       	pop	r19
    1d9c:	2f 91       	pop	r18
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	0f 90       	pop	r0
    1da4:	1f 90       	pop	r1
    1da6:	18 95       	reti

00001da8 <uart_buffer_empty>:
    1da8:	40 91 16 04 	lds	r20, 0x0416	; 0x800416 <uart_head>
    1dac:	50 91 17 04 	lds	r21, 0x0417	; 0x800417 <uart_head+0x1>
    1db0:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <uart_tail>
    1db4:	30 91 15 04 	lds	r19, 0x0415	; 0x800415 <uart_tail+0x1>
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	42 17       	cp	r20, r18
    1dbc:	53 07       	cpc	r21, r19
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <uart_buffer_empty+0x1a>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	08 95       	ret

00001dc6 <uart_buffer_read_char>:

int uart_buffer_read_char(char *c) {
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) return 0;
    1dcc:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <uart_buffer_empty>
    1dd0:	89 2b       	or	r24, r25
    1dd2:	e1 f4       	brne	.+56     	; 0x1e0c <uart_buffer_read_char+0x46>
	*c = uart_buffer[uart_tail];
    1dd4:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <uart_tail>
    1dd8:	f0 91 15 04 	lds	r31, 0x0415	; 0x800415 <uart_tail+0x1>
    1ddc:	e5 5e       	subi	r30, 0xE5	; 229
    1dde:	fb 4f       	sbci	r31, 0xFB	; 251
    1de0:	80 81       	ld	r24, Z
    1de2:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
    1de4:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <uart_tail>
    1de8:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <uart_tail+0x1>
    1dec:	01 96       	adiw	r24, 0x01	; 1
    1dee:	8f 77       	andi	r24, 0x7F	; 127
    1df0:	90 78       	andi	r25, 0x80	; 128
    1df2:	99 23       	and	r25, r25
    1df4:	24 f4       	brge	.+8      	; 0x1dfe <uart_buffer_read_char+0x38>
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	80 68       	ori	r24, 0x80	; 128
    1dfa:	9f 6f       	ori	r25, 0xFF	; 255
    1dfc:	01 96       	adiw	r24, 0x01	; 1
    1dfe:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <uart_tail+0x1>
    1e02:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <uart_tail>
	return 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <uart_buffer_read_char+0x4a>
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}

int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) return 0;
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	08 95       	ret

00001e16 <SerialRecebeChars>:

void SerialRecebeChars(int sizeS, char* string) {
    1e16:	af 92       	push	r10
    1e18:	bf 92       	push	r11
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	1f 92       	push	r1
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	6c 01       	movw	r12, r24
    1e32:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
    1e34:	e1 2c       	mov	r14, r1
    1e36:	f1 2c       	mov	r15, r1
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
    1e38:	00 e0       	ldi	r16, 0x00	; 0
    1e3a:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100; // 1 segundo de timeout

	while (received < sizeS && timeout_count < timeout_limit) {
    1e3c:	20 c0       	rjmp	.+64     	; 0x1e7e <SerialRecebeChars+0x68>
		char c;
		// Permite ao main loop enviar ACK mesmo com bloqueio
		if (serial_response_pending) {
    1e3e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <serial_response_pending>
    1e42:	88 23       	and	r24, r24
    1e44:	29 f0       	breq	.+10     	; 0x1e50 <SerialRecebeChars+0x3a>
			delay1ms(10); // Pequeno atraso para o main loop
    1e46:	8a e0       	ldi	r24, 0x0A	; 10
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
    1e4e:	17 c0       	rjmp	.+46     	; 0x1e7e <SerialRecebeChars+0x68>
			continue; // Tenta novamente
		}

		if (uart_buffer_read_char(&c)) {
    1e50:	ce 01       	movw	r24, r28
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <uart_buffer_read_char>
    1e58:	89 2b       	or	r24, r25
    1e5a:	51 f0       	breq	.+20     	; 0x1e70 <SerialRecebeChars+0x5a>
			string[received++] = c;
    1e5c:	f5 01       	movw	r30, r10
    1e5e:	e0 0f       	add	r30, r16
    1e60:	f1 1f       	adc	r31, r17
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	80 83       	st	Z, r24
    1e66:	0f 5f       	subi	r16, 0xFF	; 255
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0; // Reseta timeout
    1e6a:	e1 2c       	mov	r14, r1
    1e6c:	f1 2c       	mov	r15, r1
    1e6e:	07 c0       	rjmp	.+14     	; 0x1e7e <SerialRecebeChars+0x68>
			} else {
			delay1ms(10); // Espera por dados
    1e70:	8a e0       	ldi	r24, 0x0A	; 10
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0e 94 3e 10 	call	0x207c	; 0x207c <delay1ms>
			timeout_count++;
    1e78:	8f ef       	ldi	r24, 0xFF	; 255
    1e7a:	e8 1a       	sub	r14, r24
    1e7c:	f8 0a       	sbc	r15, r24
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100; // 1 segundo de timeout

	while (received < sizeS && timeout_count < timeout_limit) {
    1e7e:	0c 15       	cp	r16, r12
    1e80:	1d 05       	cpc	r17, r13
    1e82:	24 f4       	brge	.+8      	; 0x1e8c <SerialRecebeChars+0x76>
    1e84:	84 e6       	ldi	r24, 0x64	; 100
    1e86:	e8 16       	cp	r14, r24
    1e88:	f1 04       	cpc	r15, r1
    1e8a:	cc f2       	brlt	.-78     	; 0x1e3e <SerialRecebeChars+0x28>
			} else {
			delay1ms(10); // Espera por dados
			timeout_count++;
		}
	}
	string[received] = '\0'; // Termina a string
    1e8c:	f5 01       	movw	r30, r10
    1e8e:	e0 0f       	add	r30, r16
    1e90:	f1 1f       	adc	r31, r17
    1e92:	10 82       	st	Z, r1
}
    1e94:	0f 90       	pop	r0
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	bf 90       	pop	r11
    1ea8:	af 90       	pop	r10
    1eaa:	08 95       	ret

00001eac <prepara_teclado>:
    1eac:	84 b1       	in	r24, 0x04	; 4
    1eae:	83 60       	ori	r24, 0x03	; 3
    1eb0:	84 b9       	out	0x04, r24	; 4
    1eb2:	8a b1       	in	r24, 0x0a	; 10
    1eb4:	80 6c       	ori	r24, 0xC0	; 192
    1eb6:	8a b9       	out	0x0a, r24	; 10
    1eb8:	8a b1       	in	r24, 0x0a	; 10
    1eba:	83 7c       	andi	r24, 0xC3	; 195
    1ebc:	8a b9       	out	0x0a, r24	; 10
    1ebe:	8b b1       	in	r24, 0x0b	; 11
    1ec0:	8c 63       	ori	r24, 0x3C	; 60
    1ec2:	8b b9       	out	0x0b, r24	; 11
    1ec4:	08 95       	ret

00001ec6 <atraso_debounce>:
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <atraso_debounce+0x6>
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	1a 82       	std	Y+2, r1	; 0x02
    1ed2:	19 82       	std	Y+1, r1	; 0x01
    1ed4:	05 c0       	rjmp	.+10     	; 0x1ee0 <atraso_debounce+0x1a>
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee4:	88 3e       	cpi	r24, 0xE8	; 232
    1ee6:	93 40       	sbci	r25, 0x03	; 3
    1ee8:	b0 f3       	brcs	.-20     	; 0x1ed6 <atraso_debounce+0x10>
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <debounce>:
    1ef4:	1f 93       	push	r17
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	18 2f       	mov	r17, r24
    1efc:	c0 e0       	ldi	r28, 0x00	; 0
    1efe:	d0 e0       	ldi	r29, 0x00	; 0
    1f00:	12 c0       	rjmp	.+36     	; 0x1f26 <debounce+0x32>
    1f02:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <atraso_debounce>
    1f06:	29 b1       	in	r18, 0x09	; 9
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	01 2e       	mov	r0, r17
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <debounce+0x20>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	0a 94       	dec	r0
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <debounce+0x1c>
    1f18:	82 23       	and	r24, r18
    1f1a:	d8 13       	cpse	r29, r24
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <debounce+0x2e>
    1f1e:	cf 5f       	subi	r28, 0xFF	; 255
    1f20:	01 c0       	rjmp	.+2      	; 0x1f24 <debounce+0x30>
    1f22:	c0 e0       	ldi	r28, 0x00	; 0
    1f24:	d8 2f       	mov	r29, r24
    1f26:	c7 30       	cpi	r28, 0x07	; 7
    1f28:	61 f7       	brne	.-40     	; 0x1f02 <debounce+0xe>
    1f2a:	8d 2f       	mov	r24, r29
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	1f 91       	pop	r17
    1f32:	08 95       	ret

00001f34 <varredura>:
    1f34:	cf 93       	push	r28
    1f36:	85 b1       	in	r24, 0x05	; 5
    1f38:	83 60       	ori	r24, 0x03	; 3
    1f3a:	85 b9       	out	0x05, r24	; 5
    1f3c:	8b b1       	in	r24, 0x0b	; 11
    1f3e:	80 6c       	ori	r24, 0xC0	; 192
    1f40:	8b b9       	out	0x0b, r24	; 11
    1f42:	85 b1       	in	r24, 0x05	; 5
    1f44:	8d 7f       	andi	r24, 0xFD	; 253
    1f46:	85 b9       	out	0x05, r24	; 5
    1f48:	85 e0       	ldi	r24, 0x05	; 5
    1f4a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    1f4e:	81 11       	cpse	r24, r1
    1f50:	04 c0       	rjmp	.+8      	; 0x1f5a <varredura+0x26>
    1f52:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1f56:	c1 e3       	ldi	r28, 0x31	; 49
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <varredura+0x28>
    1f5a:	c0 e0       	ldi	r28, 0x00	; 0
    1f5c:	84 e0       	ldi	r24, 0x04	; 4
    1f5e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    1f62:	81 11       	cpse	r24, r1
    1f64:	03 c0       	rjmp	.+6      	; 0x1f6c <varredura+0x38>
    1f66:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1f6a:	c2 e3       	ldi	r28, 0x32	; 50
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    1f72:	81 11       	cpse	r24, r1
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <varredura+0x48>
    1f76:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1f7a:	c3 e3       	ldi	r28, 0x33	; 51
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    1f82:	81 11       	cpse	r24, r1
    1f84:	03 c0       	rjmp	.+6      	; 0x1f8c <varredura+0x58>
    1f86:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1f8a:	c1 e4       	ldi	r28, 0x41	; 65
    1f8c:	85 b1       	in	r24, 0x05	; 5
    1f8e:	82 60       	ori	r24, 0x02	; 2
    1f90:	85 b9       	out	0x05, r24	; 5
    1f92:	85 b1       	in	r24, 0x05	; 5
    1f94:	8e 7f       	andi	r24, 0xFE	; 254
    1f96:	85 b9       	out	0x05, r24	; 5
    1f98:	85 e0       	ldi	r24, 0x05	; 5
    1f9a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	03 c0       	rjmp	.+6      	; 0x1fa8 <varredura+0x74>
    1fa2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1fa6:	c4 e3       	ldi	r28, 0x34	; 52
    1fa8:	84 e0       	ldi	r24, 0x04	; 4
    1faa:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    1fae:	81 11       	cpse	r24, r1
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <varredura+0x84>
    1fb2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1fb6:	c5 e3       	ldi	r28, 0x35	; 53
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    1fbe:	81 11       	cpse	r24, r1
    1fc0:	03 c0       	rjmp	.+6      	; 0x1fc8 <varredura+0x94>
    1fc2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1fc6:	c6 e3       	ldi	r28, 0x36	; 54
    1fc8:	82 e0       	ldi	r24, 0x02	; 2
    1fca:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    1fce:	81 11       	cpse	r24, r1
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <varredura+0xa4>
    1fd2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1fd6:	c2 e4       	ldi	r28, 0x42	; 66
    1fd8:	85 b1       	in	r24, 0x05	; 5
    1fda:	81 60       	ori	r24, 0x01	; 1
    1fdc:	85 b9       	out	0x05, r24	; 5
    1fde:	8b b1       	in	r24, 0x0b	; 11
    1fe0:	8f 77       	andi	r24, 0x7F	; 127
    1fe2:	8b b9       	out	0x0b, r24	; 11
    1fe4:	85 e0       	ldi	r24, 0x05	; 5
    1fe6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    1fea:	81 11       	cpse	r24, r1
    1fec:	03 c0       	rjmp	.+6      	; 0x1ff4 <varredura+0xc0>
    1fee:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1ff2:	c7 e3       	ldi	r28, 0x37	; 55
    1ff4:	84 e0       	ldi	r24, 0x04	; 4
    1ff6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    1ffa:	81 11       	cpse	r24, r1
    1ffc:	03 c0       	rjmp	.+6      	; 0x2004 <varredura+0xd0>
    1ffe:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    2002:	c8 e3       	ldi	r28, 0x38	; 56
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    200a:	81 11       	cpse	r24, r1
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <varredura+0xe0>
    200e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    2012:	c9 e3       	ldi	r28, 0x39	; 57
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    201a:	81 11       	cpse	r24, r1
    201c:	03 c0       	rjmp	.+6      	; 0x2024 <varredura+0xf0>
    201e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    2022:	c3 e4       	ldi	r28, 0x43	; 67
    2024:	8b b1       	in	r24, 0x0b	; 11
    2026:	80 68       	ori	r24, 0x80	; 128
    2028:	8b b9       	out	0x0b, r24	; 11
    202a:	8b b1       	in	r24, 0x0b	; 11
    202c:	8f 7b       	andi	r24, 0xBF	; 191
    202e:	8b b9       	out	0x0b, r24	; 11
    2030:	85 e0       	ldi	r24, 0x05	; 5
    2032:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    2036:	81 11       	cpse	r24, r1
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <varredura+0x10c>
    203a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    203e:	ca e2       	ldi	r28, 0x2A	; 42
    2040:	84 e0       	ldi	r24, 0x04	; 4
    2042:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    2046:	81 11       	cpse	r24, r1
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <varredura+0x11c>
    204a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    204e:	c0 e3       	ldi	r28, 0x30	; 48
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    2056:	81 11       	cpse	r24, r1
    2058:	03 c0       	rjmp	.+6      	; 0x2060 <varredura+0x12c>
    205a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    205e:	c3 e2       	ldi	r28, 0x23	; 35
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <debounce>
    2066:	81 11       	cpse	r24, r1
    2068:	03 c0       	rjmp	.+6      	; 0x2070 <varredura+0x13c>
    206a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    206e:	c4 e4       	ldi	r28, 0x44	; 68
    2070:	8b b1       	in	r24, 0x0b	; 11
    2072:	80 64       	ori	r24, 0x40	; 64
    2074:	8b b9       	out	0x0b, r24	; 11
    2076:	8c 2f       	mov	r24, r28
    2078:	cf 91       	pop	r28
    207a:	08 95       	ret

0000207c <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    207c:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    207e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    2080:	85 e0       	ldi	r24, 0x05	; 5
    2082:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    2084:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    2088:	81 ef       	ldi	r24, 0xF1	; 241
    208a:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	08 c0       	rjmp	.+16     	; 0x20a2 <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    2092:	a9 9b       	sbis	0x15, 1	; 21
    2094:	fe cf       	rjmp	.-4      	; 0x2092 <delay1ms+0x16>
		TCNT0 = 241;
    2096:	91 ef       	ldi	r25, 0xF1	; 241
    2098:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    209a:	92 e0       	ldi	r25, 0x02	; 2
    209c:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    209e:	2f 5f       	subi	r18, 0xFF	; 255
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	24 17       	cp	r18, r20
    20a4:	35 07       	cpc	r19, r21
    20a6:	ac f3       	brlt	.-22     	; 0x2092 <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    20a8:	15 bc       	out	0x25, r1	; 37
    20aa:	08 95       	ret

000020ac <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    20ac:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    20ae:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    20b4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    20b8:	85 ef       	ldi	r24, 0xF5	; 245
    20ba:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    20c2:	a9 9b       	sbis	0x15, 1	; 21
    20c4:	fe cf       	rjmp	.-4      	; 0x20c2 <delay1us+0x16>
		TCNT0 = 245;
    20c6:	95 ef       	ldi	r25, 0xF5	; 245
    20c8:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    20ca:	95 b3       	in	r25, 0x15	; 21
    20cc:	92 60       	ori	r25, 0x02	; 2
    20ce:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    20d0:	2f 5f       	subi	r18, 0xFF	; 255
    20d2:	3f 4f       	sbci	r19, 0xFF	; 255
    20d4:	24 17       	cp	r18, r20
    20d6:	35 07       	cpc	r19, r21
    20d8:	a4 f3       	brlt	.-24     	; 0x20c2 <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    20da:	15 bc       	out	0x25, r1	; 37
    20dc:	08 95       	ret

000020de <__divmodhi4>:
    20de:	97 fb       	bst	r25, 7
    20e0:	07 2e       	mov	r0, r23
    20e2:	16 f4       	brtc	.+4      	; 0x20e8 <__divmodhi4+0xa>
    20e4:	00 94       	com	r0
    20e6:	07 d0       	rcall	.+14     	; 0x20f6 <__divmodhi4_neg1>
    20e8:	77 fd       	sbrc	r23, 7
    20ea:	09 d0       	rcall	.+18     	; 0x20fe <__divmodhi4_neg2>
    20ec:	0e 94 ab 10 	call	0x2156	; 0x2156 <__udivmodhi4>
    20f0:	07 fc       	sbrc	r0, 7
    20f2:	05 d0       	rcall	.+10     	; 0x20fe <__divmodhi4_neg2>
    20f4:	3e f4       	brtc	.+14     	; 0x2104 <__divmodhi4_exit>

000020f6 <__divmodhi4_neg1>:
    20f6:	90 95       	com	r25
    20f8:	81 95       	neg	r24
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	08 95       	ret

000020fe <__divmodhi4_neg2>:
    20fe:	70 95       	com	r23
    2100:	61 95       	neg	r22
    2102:	7f 4f       	sbci	r23, 0xFF	; 255

00002104 <__divmodhi4_exit>:
    2104:	08 95       	ret

00002106 <__udivmodsi4>:
    2106:	a1 e2       	ldi	r26, 0x21	; 33
    2108:	1a 2e       	mov	r1, r26
    210a:	aa 1b       	sub	r26, r26
    210c:	bb 1b       	sub	r27, r27
    210e:	fd 01       	movw	r30, r26
    2110:	0d c0       	rjmp	.+26     	; 0x212c <__udivmodsi4_ep>

00002112 <__udivmodsi4_loop>:
    2112:	aa 1f       	adc	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	ee 1f       	adc	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	a2 17       	cp	r26, r18
    211c:	b3 07       	cpc	r27, r19
    211e:	e4 07       	cpc	r30, r20
    2120:	f5 07       	cpc	r31, r21
    2122:	20 f0       	brcs	.+8      	; 0x212c <__udivmodsi4_ep>
    2124:	a2 1b       	sub	r26, r18
    2126:	b3 0b       	sbc	r27, r19
    2128:	e4 0b       	sbc	r30, r20
    212a:	f5 0b       	sbc	r31, r21

0000212c <__udivmodsi4_ep>:
    212c:	66 1f       	adc	r22, r22
    212e:	77 1f       	adc	r23, r23
    2130:	88 1f       	adc	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	1a 94       	dec	r1
    2136:	69 f7       	brne	.-38     	; 0x2112 <__udivmodsi4_loop>
    2138:	60 95       	com	r22
    213a:	70 95       	com	r23
    213c:	80 95       	com	r24
    213e:	90 95       	com	r25
    2140:	9b 01       	movw	r18, r22
    2142:	ac 01       	movw	r20, r24
    2144:	bd 01       	movw	r22, r26
    2146:	cf 01       	movw	r24, r30
    2148:	08 95       	ret

0000214a <__tablejump2__>:
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	05 90       	lpm	r0, Z+
    2150:	f4 91       	lpm	r31, Z
    2152:	e0 2d       	mov	r30, r0
    2154:	09 94       	ijmp

00002156 <__udivmodhi4>:
    2156:	aa 1b       	sub	r26, r26
    2158:	bb 1b       	sub	r27, r27
    215a:	51 e1       	ldi	r21, 0x11	; 17
    215c:	07 c0       	rjmp	.+14     	; 0x216c <__udivmodhi4_ep>

0000215e <__udivmodhi4_loop>:
    215e:	aa 1f       	adc	r26, r26
    2160:	bb 1f       	adc	r27, r27
    2162:	a6 17       	cp	r26, r22
    2164:	b7 07       	cpc	r27, r23
    2166:	10 f0       	brcs	.+4      	; 0x216c <__udivmodhi4_ep>
    2168:	a6 1b       	sub	r26, r22
    216a:	b7 0b       	sbc	r27, r23

0000216c <__udivmodhi4_ep>:
    216c:	88 1f       	adc	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	5a 95       	dec	r21
    2172:	a9 f7       	brne	.-22     	; 0x215e <__udivmodhi4_loop>
    2174:	80 95       	com	r24
    2176:	90 95       	com	r25
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	08 95       	ret

0000217e <atol>:
    217e:	1f 93       	push	r17
    2180:	fc 01       	movw	r30, r24
    2182:	99 27       	eor	r25, r25
    2184:	88 27       	eor	r24, r24
    2186:	bc 01       	movw	r22, r24
    2188:	e8 94       	clt
    218a:	11 91       	ld	r17, Z+
    218c:	10 32       	cpi	r17, 0x20	; 32
    218e:	e9 f3       	breq	.-6      	; 0x218a <atol+0xc>
    2190:	19 30       	cpi	r17, 0x09	; 9
    2192:	10 f0       	brcs	.+4      	; 0x2198 <atol+0x1a>
    2194:	1e 30       	cpi	r17, 0x0E	; 14
    2196:	c8 f3       	brcs	.-14     	; 0x218a <atol+0xc>
    2198:	1b 32       	cpi	r17, 0x2B	; 43
    219a:	51 f0       	breq	.+20     	; 0x21b0 <atol+0x32>
    219c:	1d 32       	cpi	r17, 0x2D	; 45
    219e:	49 f4       	brne	.+18     	; 0x21b2 <atol+0x34>
    21a0:	68 94       	set
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <atol+0x32>
    21a4:	0e 94 43 11 	call	0x2286	; 0x2286 <__mulsi_const_10>
    21a8:	61 0f       	add	r22, r17
    21aa:	71 1d       	adc	r23, r1
    21ac:	81 1d       	adc	r24, r1
    21ae:	91 1d       	adc	r25, r1
    21b0:	11 91       	ld	r17, Z+
    21b2:	10 53       	subi	r17, 0x30	; 48
    21b4:	1a 30       	cpi	r17, 0x0A	; 10
    21b6:	b0 f3       	brcs	.-20     	; 0x21a4 <atol+0x26>
    21b8:	3e f4       	brtc	.+14     	; 0x21c8 <atol+0x4a>
    21ba:	90 95       	com	r25
    21bc:	80 95       	com	r24
    21be:	70 95       	com	r23
    21c0:	61 95       	neg	r22
    21c2:	7f 4f       	sbci	r23, 0xFF	; 255
    21c4:	8f 4f       	sbci	r24, 0xFF	; 255
    21c6:	9f 4f       	sbci	r25, 0xFF	; 255
    21c8:	1f 91       	pop	r17
    21ca:	08 95       	ret

000021cc <memcpy>:
    21cc:	fb 01       	movw	r30, r22
    21ce:	dc 01       	movw	r26, r24
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <memcpy+0xa>
    21d2:	01 90       	ld	r0, Z+
    21d4:	0d 92       	st	X+, r0
    21d6:	41 50       	subi	r20, 0x01	; 1
    21d8:	50 40       	sbci	r21, 0x00	; 0
    21da:	d8 f7       	brcc	.-10     	; 0x21d2 <memcpy+0x6>
    21dc:	08 95       	ret

000021de <strcat>:
    21de:	fb 01       	movw	r30, r22
    21e0:	dc 01       	movw	r26, r24
    21e2:	0d 90       	ld	r0, X+
    21e4:	00 20       	and	r0, r0
    21e6:	e9 f7       	brne	.-6      	; 0x21e2 <strcat+0x4>
    21e8:	11 97       	sbiw	r26, 0x01	; 1
    21ea:	01 90       	ld	r0, Z+
    21ec:	0d 92       	st	X+, r0
    21ee:	00 20       	and	r0, r0
    21f0:	e1 f7       	brne	.-8      	; 0x21ea <strcat+0xc>
    21f2:	08 95       	ret

000021f4 <strcmp>:
    21f4:	fb 01       	movw	r30, r22
    21f6:	dc 01       	movw	r26, r24
    21f8:	8d 91       	ld	r24, X+
    21fa:	01 90       	ld	r0, Z+
    21fc:	80 19       	sub	r24, r0
    21fe:	01 10       	cpse	r0, r1
    2200:	d9 f3       	breq	.-10     	; 0x21f8 <strcmp+0x4>
    2202:	99 0b       	sbc	r25, r25
    2204:	08 95       	ret

00002206 <strcpy>:
    2206:	fb 01       	movw	r30, r22
    2208:	dc 01       	movw	r26, r24
    220a:	01 90       	ld	r0, Z+
    220c:	0d 92       	st	X+, r0
    220e:	00 20       	and	r0, r0
    2210:	e1 f7       	brne	.-8      	; 0x220a <strcpy+0x4>
    2212:	08 95       	ret

00002214 <strncat>:
    2214:	fb 01       	movw	r30, r22
    2216:	dc 01       	movw	r26, r24
    2218:	0d 90       	ld	r0, X+
    221a:	00 20       	and	r0, r0
    221c:	e9 f7       	brne	.-6      	; 0x2218 <strncat+0x4>
    221e:	11 97       	sbiw	r26, 0x01	; 1
    2220:	41 50       	subi	r20, 0x01	; 1
    2222:	50 40       	sbci	r21, 0x00	; 0
    2224:	28 f0       	brcs	.+10     	; 0x2230 <strncat+0x1c>
    2226:	01 90       	ld	r0, Z+
    2228:	00 20       	and	r0, r0
    222a:	0d 92       	st	X+, r0
    222c:	c9 f7       	brne	.-14     	; 0x2220 <strncat+0xc>
    222e:	08 95       	ret
    2230:	1c 92       	st	X, r1
    2232:	08 95       	ret

00002234 <strncpy>:
    2234:	fb 01       	movw	r30, r22
    2236:	dc 01       	movw	r26, r24
    2238:	41 50       	subi	r20, 0x01	; 1
    223a:	50 40       	sbci	r21, 0x00	; 0
    223c:	48 f0       	brcs	.+18     	; 0x2250 <strncpy+0x1c>
    223e:	01 90       	ld	r0, Z+
    2240:	0d 92       	st	X+, r0
    2242:	00 20       	and	r0, r0
    2244:	c9 f7       	brne	.-14     	; 0x2238 <strncpy+0x4>
    2246:	01 c0       	rjmp	.+2      	; 0x224a <strncpy+0x16>
    2248:	1d 92       	st	X+, r1
    224a:	41 50       	subi	r20, 0x01	; 1
    224c:	50 40       	sbci	r21, 0x00	; 0
    224e:	e0 f7       	brcc	.-8      	; 0x2248 <strncpy+0x14>
    2250:	08 95       	ret

00002252 <strstr>:
    2252:	fb 01       	movw	r30, r22
    2254:	51 91       	ld	r21, Z+
    2256:	55 23       	and	r21, r21
    2258:	a9 f0       	breq	.+42     	; 0x2284 <strstr+0x32>
    225a:	bf 01       	movw	r22, r30
    225c:	dc 01       	movw	r26, r24
    225e:	4d 91       	ld	r20, X+
    2260:	45 17       	cp	r20, r21
    2262:	41 11       	cpse	r20, r1
    2264:	e1 f7       	brne	.-8      	; 0x225e <strstr+0xc>
    2266:	59 f4       	brne	.+22     	; 0x227e <strstr+0x2c>
    2268:	cd 01       	movw	r24, r26
    226a:	01 90       	ld	r0, Z+
    226c:	00 20       	and	r0, r0
    226e:	49 f0       	breq	.+18     	; 0x2282 <strstr+0x30>
    2270:	4d 91       	ld	r20, X+
    2272:	40 15       	cp	r20, r0
    2274:	41 11       	cpse	r20, r1
    2276:	c9 f3       	breq	.-14     	; 0x226a <strstr+0x18>
    2278:	fb 01       	movw	r30, r22
    227a:	41 11       	cpse	r20, r1
    227c:	ef cf       	rjmp	.-34     	; 0x225c <strstr+0xa>
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	08 95       	ret

00002286 <__mulsi_const_10>:
    2286:	59 2f       	mov	r21, r25
    2288:	48 2f       	mov	r20, r24
    228a:	37 2f       	mov	r19, r23
    228c:	26 2f       	mov	r18, r22
    228e:	66 0f       	add	r22, r22
    2290:	77 1f       	adc	r23, r23
    2292:	88 1f       	adc	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	66 0f       	add	r22, r22
    2298:	77 1f       	adc	r23, r23
    229a:	88 1f       	adc	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	62 0f       	add	r22, r18
    22a0:	73 1f       	adc	r23, r19
    22a2:	84 1f       	adc	r24, r20
    22a4:	95 1f       	adc	r25, r21
    22a6:	66 0f       	add	r22, r22
    22a8:	77 1f       	adc	r23, r23
    22aa:	88 1f       	adc	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	08 95       	ret

000022b0 <_exit>:
    22b0:	f8 94       	cli

000022b2 <__stop_program>:
    22b2:	ff cf       	rjmp	.-2      	; 0x22b2 <__stop_program>
