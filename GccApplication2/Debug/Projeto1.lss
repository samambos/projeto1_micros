
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00800100  00001140  000011d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  008002e2  008002e2  000013b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000297e  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4b  00000000  00000000  00003f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001369  00000000  00000000  00004dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  0000612c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000830  00000000  00000000  00006678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001571  00000000  00000000  00006ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008419  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_18>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      68:	e4 02       	muls	r30, r20
      6a:	f6 02       	muls	r31, r22
      6c:	ff 02       	muls	r31, r31
      6e:	08 03       	fmul	r16, r16
      70:	39 03       	fmul	r19, r17
      72:	b7 03       	fmuls	r19, r23
      74:	bb 03       	fmulsu	r19, r19
      76:	bf 03       	fmulsu	r19, r23
      78:	d3 03       	fmuls	r21, r19

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	12 e0       	ldi	r17, 0x02	; 2
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e0 e4       	ldi	r30, 0x40	; 64
      8e:	f1 e1       	ldi	r31, 0x11	; 17
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	a2 3e       	cpi	r26, 0xE2	; 226
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	23 e0       	ldi	r18, 0x03	; 3
      9e:	a2 ee       	ldi	r26, 0xE2	; 226
      a0:	b2 e0       	ldi	r27, 0x02	; 2
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a1 37       	cpi	r26, 0x71	; 113
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 ac 02 	call	0x558	; 0x558 <main>
      b0:	0c 94 9e 08 	jmp	0x113c	; 0x113c <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <mensagem_Inicial>:
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){

		LCD_texto_correndo(0, " Banco UFRGS ", 300, 0);
      b8:	20 e0       	ldi	r18, 0x00	; 0
      ba:	4c e2       	ldi	r20, 0x2C	; 44
      bc:	68 e0       	ldi	r22, 0x08	; 8
      be:	71 e0       	ldi	r23, 0x01	; 1
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_texto_correndo>
		LCD_Escrever_Linha(1, 0, "Digite cartao: ");
      c6:	46 e1       	ldi	r20, 0x16	; 22
      c8:	51 e0       	ldi	r21, 0x01	; 1
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
      d2:	08 95       	ret

000000d4 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      d4:	cf 93       	push	r28
      d6:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      d8:	88 b1       	in	r24, 0x08	; 8
      da:	80 7f       	andi	r24, 0xF0	; 240
      dc:	9c 2f       	mov	r25, r28
      de:	92 95       	swap	r25
      e0:	9f 70       	andi	r25, 0x0F	; 15
      e2:	89 2b       	or	r24, r25
      e4:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
      e6:	88 b1       	in	r24, 0x08	; 8
      e8:	8f 7d       	andi	r24, 0xDF	; 223
      ea:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
      ec:	88 b1       	in	r24, 0x08	; 8
      ee:	80 61       	ori	r24, 0x10	; 16
      f0:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
      f2:	88 b1       	in	r24, 0x08	; 8
      f4:	8f 7e       	andi	r24, 0xEF	; 239
      f6:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
      f8:	84 e6       	ldi	r24, 0x64	; 100
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 4f 08 	call	0x109e	; 0x109e <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
     100:	88 b1       	in	r24, 0x08	; 8
     102:	80 7f       	andi	r24, 0xF0	; 240
     104:	cf 70       	andi	r28, 0x0F	; 15
     106:	c8 2b       	or	r28, r24
     108:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     10a:	88 b1       	in	r24, 0x08	; 8
     10c:	80 61       	ori	r24, 0x10	; 16
     10e:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     110:	88 b1       	in	r24, 0x08	; 8
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
}
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     126:	8a e0       	ldi	r24, 0x0A	; 10
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     134:	88 e2       	ldi	r24, 0x28	; 40
     136:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     13a:	8c e0       	ldi	r24, 0x0C	; 12
     13c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     140:	86 e0       	ldi	r24, 0x06	; 6
     142:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     14c:	08 95       	ret

0000014e <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     154:	80 e8       	ldi	r24, 0x80	; 128
     156:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     15a:	08 95       	ret

0000015c <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	ec 01       	movw	r28, r24
	while(*texto) {
     162:	23 c0       	rjmp	.+70     	; 0x1aa <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     164:	98 b1       	in	r25, 0x08	; 8
     166:	90 7f       	andi	r25, 0xF0	; 240
     168:	82 95       	swap	r24
     16a:	8f 70       	andi	r24, 0x0F	; 15
     16c:	89 2b       	or	r24, r25
     16e:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     170:	88 b1       	in	r24, 0x08	; 8
     172:	80 62       	ori	r24, 0x20	; 32
     174:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     176:	88 b1       	in	r24, 0x08	; 8
     178:	80 61       	ori	r24, 0x10	; 16
     17a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     17c:	88 b1       	in	r24, 0x08	; 8
     17e:	8f 7e       	andi	r24, 0xEF	; 239
     180:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     182:	88 ec       	ldi	r24, 0xC8	; 200
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 4f 08 	call	0x109e	; 0x109e <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     18a:	98 b1       	in	r25, 0x08	; 8
     18c:	89 91       	ld	r24, Y+
     18e:	90 7f       	andi	r25, 0xF0	; 240
     190:	8f 70       	andi	r24, 0x0F	; 15
     192:	89 2b       	or	r24, r25
     194:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     196:	88 b1       	in	r24, 0x08	; 8
     198:	80 61       	ori	r24, 0x10	; 16
     19a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	8f 7e       	andi	r24, 0xEF	; 239
     1a0:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1aa:	88 81       	ld	r24, Y
     1ac:	81 11       	cpse	r24, r1
     1ae:	da cf       	rjmp	.-76     	; 0x164 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1bc:	81 11       	cpse	r24, r1
     1be:	08 c0       	rjmp	.+16     	; 0x1d0 <LCD_Escrever_Linha+0x1a>
     1c0:	60 31       	cpi	r22, 0x10	; 16
     1c2:	30 f4       	brcc	.+12     	; 0x1d0 <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1c4:	86 2f       	mov	r24, r22
     1c6:	8f 70       	andi	r24, 0x0F	; 15
     1c8:	80 68       	ori	r24, 0x80	; 128
     1ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	39 f4       	brne	.+14     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
     1d4:	60 31       	cpi	r22, 0x10	; 16
     1d6:	28 f4       	brcc	.+10     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1d8:	86 2f       	mov	r24, r22
     1da:	8f 70       	andi	r24, 0x0F	; 15
     1dc:	80 6c       	ori	r24, 0xC0	; 192
     1de:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     1e2:	ce 01       	movw	r24, r28
     1e4:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     1e8:	80 e8       	ldi	r24, 0x80	; 128
     1ea:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <LCD_texto_correndo>:

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
     1f4:	6f 92       	push	r6
     1f6:	7f 92       	push	r7
     1f8:	8f 92       	push	r8
     1fa:	9f 92       	push	r9
     1fc:	af 92       	push	r10
     1fe:	bf 92       	push	r11
     200:	cf 92       	push	r12
     202:	df 92       	push	r13
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	61 97       	sbiw	r28, 0x11	; 17
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	78 2e       	mov	r7, r24
     222:	4a 01       	movw	r8, r20
     224:	62 2e       	mov	r6, r18
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     226:	cd b6       	in	r12, 0x3d	; 61
     228:	de b6       	in	r13, 0x3e	; 62
	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
}

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
     22a:	ad b6       	in	r10, 0x3d	; 61
     22c:	be b6       	in	r11, 0x3e	; 62
    uint8_t tamanho = strlen(texto);
     22e:	fb 01       	movw	r30, r22
     230:	01 90       	ld	r0, Z+
     232:	00 20       	and	r0, r0
     234:	e9 f7       	brne	.-6      	; 0x230 <LCD_texto_correndo+0x3c>
     236:	31 97       	sbiw	r30, 0x01	; 1
     238:	e6 1b       	sub	r30, r22
     23a:	f7 0b       	sbc	r31, r23
     23c:	0e 2f       	mov	r16, r30
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
     23e:	e1 31       	cpi	r30, 0x11	; 17
     240:	28 f4       	brcc	.+10     	; 0x24c <LCD_texto_correndo+0x58>
        LCD_Escrever_Linha(linha, 0, texto);
     242:	ab 01       	movw	r20, r22
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
        return;
     24a:	42 c0       	rjmp	.+132    	; 0x2d0 <LCD_texto_correndo+0xdc>
    }
    
    // Adiciona espaços no final para melhor visualização
    char texto_extendido[tamanho + 17];
     24c:	ff 27       	eor	r31, r31
     24e:	71 96       	adiw	r30, 0x11	; 17
     250:	8d b7       	in	r24, 0x3d	; 61
     252:	9e b7       	in	r25, 0x3e	; 62
     254:	8e 1b       	sub	r24, r30
     256:	9f 0b       	sbc	r25, r31
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	9e bf       	out	0x3e, r25	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	8d bf       	out	0x3d, r24	; 61
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	7c 01       	movw	r14, r24
    strcpy(texto_extendido, texto);
     266:	0e 94 6e 08 	call	0x10dc	; 0x10dc <strcpy>
    strcat(texto_extendido, "                "); // 16 espaços
     26a:	d7 01       	movw	r26, r14
     26c:	0d 90       	ld	r0, X+
     26e:	00 20       	and	r0, r0
     270:	e9 f7       	brne	.-6      	; 0x26c <LCD_texto_correndo+0x78>
     272:	11 97       	sbiw	r26, 0x01	; 1
     274:	81 e1       	ldi	r24, 0x11	; 17
     276:	e6 e2       	ldi	r30, 0x26	; 38
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	01 90       	ld	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	8a 95       	dec	r24
     280:	e1 f7       	brne	.-8      	; 0x27a <LCD_texto_correndo+0x86>
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	1b c0       	rjmp	.+54     	; 0x2bc <LCD_texto_correndo+0xc8>
            // Copia 16 caracteres começando na posição i
            strncpy(buffer, &texto_extendido[i], 16);
     286:	40 e1       	ldi	r20, 0x10	; 16
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	b7 01       	movw	r22, r14
     28c:	61 0f       	add	r22, r17
     28e:	71 1d       	adc	r23, r1
     290:	ce 01       	movw	r24, r28
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	0e 94 75 08 	call	0x10ea	; 0x10ea <strncpy>
            buffer[16] = '\0';
     298:	19 8a       	std	Y+17, r1	; 0x11
            
            LCD_Escrever_Linha(linha, 0, buffer);
     29a:	ae 01       	movw	r20, r28
     29c:	4f 5f       	subi	r20, 0xFF	; 255
     29e:	5f 4f       	sbci	r21, 0xFF	; 255
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	87 2d       	mov	r24, r7
     2a4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
            delay1ms(velocidade_ms);
     2a8:	c4 01       	movw	r24, r8
     2aa:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
     2ae:	0e 94 b3 07 	call	0xf66	; 0xf66 <varredura>
     2b2:	89 2b       	or	r24, r25
     2b4:	11 f0       	breq	.+4      	; 0x2ba <LCD_texto_correndo+0xc6>
     2b6:	66 20       	and	r6, r6
     2b8:	59 f0       	breq	.+22     	; 0x2d0 <LCD_texto_correndo+0xdc>
    char texto_extendido[tamanho + 17];
    strcpy(texto_extendido, texto);
    strcat(texto_extendido, "                "); // 16 espaços
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
     2ba:	1f 5f       	subi	r17, 0xFF	; 255
     2bc:	01 17       	cp	r16, r17
     2be:	18 f7       	brcc	.-58     	; 0x286 <LCD_texto_correndo+0x92>
            delay1ms(velocidade_ms);
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     2c0:	61 10       	cpse	r6, r1
     2c2:	df cf       	rjmp	.-66     	; 0x282 <LCD_texto_correndo+0x8e>
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	be be       	out	0x3e, r11	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	ad be       	out	0x3d, r10	; 61
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <LCD_texto_correndo+0xe6>
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
        LCD_Escrever_Linha(linha, 0, texto);
        return;
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	be be       	out	0x3e, r11	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	ad be       	out	0x3d, r10	; 61
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de be       	out	0x3e, r13	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd be       	out	0x3d, r12	; 61
     2e4:	61 96       	adiw	r28, 0x11	; 17
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	df 90       	pop	r13
     2fe:	cf 90       	pop	r12
     300:	bf 90       	pop	r11
     302:	af 90       	pop	r10
     304:	9f 90       	pop	r9
     306:	8f 90       	pop	r8
     308:	7f 90       	pop	r7
     30a:	6f 90       	pop	r6
     30c:	08 95       	ret

0000030e <ler_codigo_aluno>:
	ESTADO_SALDO
} Estado;


// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	00 d0       	rcall	.+0      	; 0x31c <ler_codigo_aluno+0xe>
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
     322:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
     326:	47 e3       	ldi	r20, 0x37	; 55
     328:	51 e0       	ldi	r21, 0x01	; 1
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     332:	46 e4       	ldi	r20, 0x46	; 70
     334:	51 e0       	ldi	r21, 0x01	; 1
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
} Estado;


// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
	int pos = 0;
     33e:	00 e0       	ldi	r16, 0x00	; 0
     340:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     342:	1d c0       	rjmp	.+58     	; 0x37e <ler_codigo_aluno+0x70>
		if (isBlocked()) return;
     344:	0e 94 e7 06 	call	0xdce	; 0xdce <isBlocked>
     348:	89 2b       	or	r24, r25
     34a:	f1 f4       	brne	.+60     	; 0x388 <ler_codigo_aluno+0x7a>
		tecla = varredura();
     34c:	0e 94 b3 07 	call	0xf66	; 0xf66 <varredura>
		if (tecla >= '0' && tecla <= '9') {
     350:	90 ed       	ldi	r25, 0xD0	; 208
     352:	98 0f       	add	r25, r24
     354:	9a 30       	cpi	r25, 0x0A	; 10
     356:	98 f4       	brcc	.+38     	; 0x37e <ler_codigo_aluno+0x70>
			codigo[pos] = tecla;
     358:	f7 01       	movw	r30, r14
     35a:	e0 0f       	add	r30, r16
     35c:	f1 1f       	adc	r31, r17
     35e:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
     360:	89 83       	std	Y+1, r24	; 0x01
     362:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
     364:	ae 01       	movw	r20, r28
     366:	4f 5f       	subi	r20, 0xFF	; 255
     368:	5f 4f       	sbci	r21, 0xFF	; 255
     36a:	60 2f       	mov	r22, r16
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     372:	0f 5f       	subi	r16, 0xFF	; 255
     374:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     376:	88 ec       	ldi	r24, 0xC8	; 200
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     37e:	06 30       	cpi	r16, 0x06	; 6
     380:	11 05       	cpc	r17, r1
     382:	04 f3       	brlt	.-64     	; 0x344 <ler_codigo_aluno+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	codigo[6] = '\0';
     384:	f7 01       	movw	r30, r14
     386:	16 82       	std	Z+6, r1	; 0x06
}
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	08 95       	ret

0000039a <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
     39a:	ef 92       	push	r14
     39c:	ff 92       	push	r15
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <ler_senha+0xe>
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
     3ae:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite senha:");
     3b2:	4d e4       	ldi	r20, 0x4D	; 77
     3b4:	51 e0       	ldi	r21, 0x01	; 1
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     3be:	46 e4       	ldi	r20, 0x46	; 70
     3c0:	51 e0       	ldi	r21, 0x01	; 1
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
	int pos = 0;
     3ca:	00 e0       	ldi	r16, 0x00	; 0
     3cc:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     3ce:	1e c0       	rjmp	.+60     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		if (isBlocked()) return;
     3d0:	0e 94 e7 06 	call	0xdce	; 0xdce <isBlocked>
     3d4:	89 2b       	or	r24, r25
     3d6:	f9 f4       	brne	.+62     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		tecla = varredura();
     3d8:	0e 94 b3 07 	call	0xf66	; 0xf66 <varredura>
		if (tecla >= '0' && tecla <= '9') {
     3dc:	90 ed       	ldi	r25, 0xD0	; 208
     3de:	98 0f       	add	r25, r24
     3e0:	9a 30       	cpi	r25, 0x0A	; 10
     3e2:	a0 f4       	brcc	.+40     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			senha[pos] = tecla;
     3e4:	f7 01       	movw	r30, r14
     3e6:	e0 0f       	add	r30, r16
     3e8:	f1 1f       	adc	r31, r17
     3ea:	80 83       	st	Z, r24
			char temp[2] = { '*', '\0' };
     3ec:	8a e2       	ldi	r24, 0x2A	; 42
     3ee:	89 83       	std	Y+1, r24	; 0x01
     3f0:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
     3f2:	ae 01       	movw	r20, r28
     3f4:	4f 5f       	subi	r20, 0xFF	; 255
     3f6:	5f 4f       	sbci	r21, 0xFF	; 255
     3f8:	60 2f       	mov	r22, r16
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     400:	0f 5f       	subi	r16, 0xFF	; 255
     402:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     404:	88 ec       	ldi	r24, 0xC8	; 200
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     40c:	06 30       	cpi	r16, 0x06	; 6
     40e:	11 05       	cpc	r17, r1
     410:	fc f2       	brlt	.-66     	; 0x3d0 <ler_senha+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	senha[6] = '\0';
     412:	f7 01       	movw	r30, r14
     414:	16 82       	std	Z+6, r1	; 0x06
}
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	08 95       	ret

00000428 <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	a1 97       	sbiw	r28, 0x21	; 33
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     43c:	dc 01       	movw	r26, r24
     43e:	0d 90       	ld	r0, X+
     440:	00 20       	and	r0, r0
     442:	e9 f7       	brne	.-6      	; 0x43e <validar_codigo_aluno+0x16>
     444:	11 97       	sbiw	r26, 0x01	; 1
     446:	a8 1b       	sub	r26, r24
     448:	b9 0b       	sbc	r27, r25
     44a:	16 97       	sbiw	r26, 0x06	; 6
     44c:	09 f0       	breq	.+2      	; 0x450 <validar_codigo_aluno+0x28>
     44e:	53 c0       	rjmp	.+166    	; 0x4f6 <validar_codigo_aluno+0xce>
     450:	db 01       	movw	r26, r22
     452:	0d 90       	ld	r0, X+
     454:	00 20       	and	r0, r0
     456:	e9 f7       	brne	.-6      	; 0x452 <validar_codigo_aluno+0x2a>
     458:	11 97       	sbiw	r26, 0x01	; 1
     45a:	a6 1b       	sub	r26, r22
     45c:	b7 0b       	sbc	r27, r23
     45e:	16 97       	sbiw	r26, 0x06	; 6
     460:	09 f0       	breq	.+2      	; 0x464 <validar_codigo_aluno+0x3c>
     462:	4c c0       	rjmp	.+152    	; 0x4fc <validar_codigo_aluno+0xd4>
     464:	fc 01       	movw	r30, r24

	char mensagem[14];
	mensagem[0] = 'C';
     466:	83 e4       	ldi	r24, 0x43	; 67
     468:	89 83       	std	Y+1, r24	; 0x01
	mensagem[1] = 'E';
     46a:	85 e4       	ldi	r24, 0x45	; 69
     46c:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(&mensagem[2], codigo, 6);
     46e:	86 e0       	ldi	r24, 0x06	; 6
     470:	de 01       	movw	r26, r28
     472:	13 96       	adiw	r26, 0x03	; 3
     474:	01 90       	ld	r0, Z+
     476:	0d 92       	st	X+, r0
     478:	8a 95       	dec	r24
     47a:	e1 f7       	brne	.-8      	; 0x474 <validar_codigo_aluno+0x4c>
	memcpy(&mensagem[8], senha, 6);
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	fb 01       	movw	r30, r22
     480:	de 01       	movw	r26, r28
     482:	19 96       	adiw	r26, 0x09	; 9
     484:	01 90       	ld	r0, Z+
     486:	0d 92       	st	X+, r0
     488:	8a 95       	dec	r24
     48a:	e1 f7       	brne	.-8      	; 0x484 <validar_codigo_aluno+0x5c>

	SerialEnviaChars(14, mensagem);
     48c:	be 01       	movw	r22, r28
     48e:	6f 5f       	subi	r22, 0xFF	; 255
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	8e e0       	ldi	r24, 0x0E	; 14
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 08 06 	call	0xc10	; 0xc10 <SerialEnviaChars>

	char resposta[19]; // +1 para \0
	SerialRecebeChars(18, resposta);
     49a:	be 01       	movw	r22, r28
     49c:	61 5f       	subi	r22, 0xF1	; 241
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	82 e1       	ldi	r24, 0x12	; 18
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 2b 07 	call	0xe56	; 0xe56 <SerialRecebeChars>
	resposta[18] = '\0';
     4a8:	19 a2       	std	Y+33, r1	; 0x21

	LCD_limpar();
     4aa:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Resp Servidor:");
     4ae:	4b e5       	ldi	r20, 0x5B	; 91
     4b0:	51 e0       	ldi	r21, 0x01	; 1
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, resposta);
     4ba:	ae 01       	movw	r20, r28
     4bc:	41 5f       	subi	r20, 0xF1	; 241
     4be:	5f 4f       	sbci	r21, 0xFF	; 255
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	delay1ms(2000);
     4c8:	80 ed       	ldi	r24, 0xD0	; 208
     4ca:	97 e0       	ldi	r25, 0x07	; 7
     4cc:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
	LCD_limpar();
     4d0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
     4d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     4d6:	83 35       	cpi	r24, 0x53	; 83
     4d8:	a1 f4       	brne	.+40     	; 0x502 <validar_codigo_aluno+0xda>
     4da:	88 89       	ldd	r24, Y+16	; 0x10
     4dc:	85 34       	cpi	r24, 0x45	; 69
     4de:	a1 f4       	brne	.+40     	; 0x508 <validar_codigo_aluno+0xe0>
		if (strstr(resposta, "Nao") != NULL) {
     4e0:	6a e6       	ldi	r22, 0x6A	; 106
     4e2:	71 e0       	ldi	r23, 0x01	; 1
     4e4:	ce 01       	movw	r24, r28
     4e6:	0f 96       	adiw	r24, 0x0f	; 15
     4e8:	0e 94 84 08 	call	0x1108	; 0x1108 <strstr>
     4ec:	89 2b       	or	r24, r25
     4ee:	79 f0       	breq	.+30     	; 0x50e <validar_codigo_aluno+0xe6>
			return 0;
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e c0       	rjmp	.+28     	; 0x512 <validar_codigo_aluno+0xea>
	}
	senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0b c0       	rjmp	.+22     	; 0x512 <validar_codigo_aluno+0xea>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	08 c0       	rjmp	.+16     	; 0x512 <validar_codigo_aluno+0xea>
			return 0;
			} else {
			return 1;
		}
	}
	return 0;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	05 c0       	rjmp	.+10     	; 0x512 <validar_codigo_aluno+0xea>
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	02 c0       	rjmp	.+4      	; 0x512 <validar_codigo_aluno+0xea>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
		if (strstr(resposta, "Nao") != NULL) {
			return 0;
			} else {
			return 1;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
     512:	a1 96       	adiw	r28, 0x21	; 33
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <aguardar_desbloqueio>:


void aguardar_desbloqueio() {
	LCD_limpar();
     524:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
     528:	4e e6       	ldi	r20, 0x6E	; 110
     52a:	51 e0       	ldi	r21, 0x01	; 1
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
     534:	4b e7       	ldi	r20, 0x7B	; 123
     536:	51 e0       	ldi	r21, 0x01	; 1
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	while (isBlocked()) {
     540:	04 c0       	rjmp	.+8      	; 0x54a <aguardar_desbloqueio+0x26>
		delay1ms(200);
     542:	88 ec       	ldi	r24, 0xC8	; 200
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>

void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
	while (isBlocked()) {
     54a:	0e 94 e7 06 	call	0xdce	; 0xdce <isBlocked>
     54e:	89 2b       	or	r24, r25
     550:	c1 f7       	brne	.-16     	; 0x542 <aguardar_desbloqueio+0x1e>
		delay1ms(200);
	}
	LCD_limpar();
     552:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     556:	08 95       	ret

00000558 <main>:
}

int main(void) {
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	66 97       	sbiw	r28, 0x16	; 22
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     56c:	0e 94 6f 07 	call	0xede	; 0xede <prepara_teclado>
	LCD_iniciar();
     570:	0e 94 91 00 	call	0x122	; 0x122 <LCD_iniciar>
	initUART();
     574:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <initUART>

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
     578:	88 e0       	ldi	r24, 0x08	; 8
     57a:	e0 e0       	ldi	r30, 0x00	; 0
     57c:	f1 e0       	ldi	r31, 0x01	; 1
     57e:	de 01       	movw	r26, r28
     580:	1f 96       	adiw	r26, 0x0f	; 15
     582:	01 90       	ld	r0, Z+
     584:	0d 92       	st	X+, r0
     586:	8a 95       	dec	r24
     588:	e1 f7       	brne	.-8      	; 0x582 <main+0x2a>
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     58a:	00 e0       	ldi	r16, 0x00	; 0
		"2-Deposito",
		"3-Pagamento",
		"4-Saldo"
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
     58c:	e1 2c       	mov	r14, r1
     58e:	f1 2c       	mov	r15, r1
     590:	09 c0       	rjmp	.+18     	; 0x5a4 <main+0x4c>
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     592:	01 e0       	ldi	r16, 0x01	; 1
     594:	07 c0       	rjmp	.+14     	; 0x5a4 <main+0x4c>
			break;

			case ESTADO_CODIGO:
			ler_codigo_aluno(codigo_aluno);
			if (!isBlocked()) estado = ESTADO_SENHA;
     596:	02 e0       	ldi	r16, 0x02	; 2
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <main+0x4c>
			break;

			case ESTADO_SENHA:
			ler_senha(senha_aluno);
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     59a:	03 e0       	ldi	r16, 0x03	; 3
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <main+0x4c>
				if (isBlocked()) break;
			}

			delay1ms(300);
			if (tecla == 'B' && indice_menu < total_opcoes - 2) {
				indice_menu++;
     59e:	76 01       	movw	r14, r12
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <main+0x4c>
				LCD_Escrever_Linha(0, 0, "Voltando...");
				delay1ms(1000);
				estado = ESTADO_TELA_INICIAL;
				} else if (tecla == opcoes[indice_menu][0]) {
				switch (tecla) {
					case '1': estado = ESTADO_SAQUE; break;
     5a2:	05 e0       	ldi	r16, 0x05	; 5
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		if (isBlocked()) {
     5a4:	0e 94 e7 06 	call	0xdce	; 0xdce <isBlocked>
     5a8:	89 2b       	or	r24, r25
     5aa:	21 f0       	breq	.+8      	; 0x5b4 <main+0x5c>
			aguardar_desbloqueio();
     5ac:	0e 94 92 02 	call	0x524	; 0x524 <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     5b0:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     5b2:	f8 cf       	rjmp	.-16     	; 0x5a4 <main+0x4c>
		}

		switch (estado) {
     5b4:	80 2f       	mov	r24, r16
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	89 30       	cpi	r24, 0x09	; 9
     5ba:	91 05       	cpc	r25, r1
     5bc:	98 f7       	brcc	.-26     	; 0x5a4 <main+0x4c>
     5be:	fc 01       	movw	r30, r24
     5c0:	ec 5c       	subi	r30, 0xCC	; 204
     5c2:	ff 4f       	sbci	r31, 0xFF	; 255
     5c4:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			LCD_limpar();
     5c8:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			mensagem_Inicial();
     5cc:	0e 94 5c 00 	call	0xb8	; 0xb8 <mensagem_Inicial>
			while (varredura() == 0) {
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <main+0x82>
				if (isBlocked()) break;
     5d2:	0e 94 e7 06 	call	0xdce	; 0xdce <isBlocked>
     5d6:	89 2b       	or	r24, r25
     5d8:	21 f4       	brne	.+8      	; 0x5e2 <main+0x8a>

		switch (estado) {
			case ESTADO_TELA_INICIAL:
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     5da:	0e 94 b3 07 	call	0xf66	; 0xf66 <varredura>
     5de:	88 23       	and	r24, r24
     5e0:	c1 f3       	breq	.-16     	; 0x5d2 <main+0x7a>
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     5e2:	0e 94 e7 06 	call	0xdce	; 0xdce <isBlocked>
     5e6:	89 2b       	or	r24, r25
     5e8:	a1 f2       	breq	.-88     	; 0x592 <main+0x3a>
     5ea:	dc cf       	rjmp	.-72     	; 0x5a4 <main+0x4c>
			break;

			case ESTADO_CODIGO:
			ler_codigo_aluno(codigo_aluno);
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	0e 94 87 01 	call	0x30e	; 0x30e <ler_codigo_aluno>
			if (!isBlocked()) estado = ESTADO_SENHA;
     5f4:	0e 94 e7 06 	call	0xdce	; 0xdce <isBlocked>
     5f8:	89 2b       	or	r24, r25
     5fa:	69 f2       	breq	.-102    	; 0x596 <main+0x3e>
     5fc:	d3 cf       	rjmp	.-90     	; 0x5a4 <main+0x4c>
			break;

			case ESTADO_SENHA:
			ler_senha(senha_aluno);
     5fe:	ce 01       	movw	r24, r28
     600:	08 96       	adiw	r24, 0x08	; 8
     602:	0e 94 cd 01 	call	0x39a	; 0x39a <ler_senha>
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     606:	0e 94 e7 06 	call	0xdce	; 0xdce <isBlocked>
     60a:	89 2b       	or	r24, r25
     60c:	31 f2       	breq	.-116    	; 0x59a <main+0x42>
     60e:	ca cf       	rjmp	.-108    	; 0x5a4 <main+0x4c>
			break;

			case ESTADO_VALIDACAO:
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
     610:	be 01       	movw	r22, r28
     612:	68 5f       	subi	r22, 0xF8	; 248
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	0e 94 14 02 	call	0x428	; 0x428 <validar_codigo_aluno>
     61e:	89 2b       	or	r24, r25
     620:	a1 f0       	breq	.+40     	; 0x64a <main+0xf2>
				LCD_limpar();
     622:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Codigo valido!");
     626:	48 e8       	ldi	r20, 0x88	; 136
     628:	51 e0       	ldi	r21, 0x01	; 1
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Processando...");
     632:	47 e9       	ldi	r20, 0x97	; 151
     634:	51 e0       	ldi	r21, 0x01	; 1
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     63e:	80 ed       	ldi	r24, 0xD0	; 208
     640:	97 e0       	ldi	r25, 0x07	; 7
     642:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
				estado = ESTADO_MENU;
     646:	04 e0       	ldi	r16, 0x04	; 4
     648:	ad cf       	rjmp	.-166    	; 0x5a4 <main+0x4c>
				} else {
				LCD_limpar();
     64a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Conta invalida!");
     64e:	46 ea       	ldi	r20, 0xA6	; 166
     650:	51 e0       	ldi	r21, 0x01	; 1
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente novamente");
     65a:	46 eb       	ldi	r20, 0xB6	; 182
     65c:	51 e0       	ldi	r21, 0x01	; 1
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     666:	80 ed       	ldi	r24, 0xD0	; 208
     668:	97 e0       	ldi	r25, 0x07	; 7
     66a:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     66e:	00 e0       	ldi	r16, 0x00	; 0
     670:	99 cf       	rjmp	.-206    	; 0x5a4 <main+0x4c>
			}
			break;

			case ESTADO_MENU:
			LCD_limpar();
     672:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     676:	f7 01       	movw	r30, r14
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	8c 0f       	add	r24, r28
     682:	9d 1f       	adc	r25, r29
     684:	e8 0f       	add	r30, r24
     686:	f9 1f       	adc	r31, r25
     688:	46 85       	ldd	r20, Z+14	; 0x0e
     68a:	57 85       	ldd	r21, Z+15	; 0x0f
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes)
     694:	67 01       	movw	r12, r14
     696:	9f ef       	ldi	r25, 0xFF	; 255
     698:	c9 1a       	sub	r12, r25
     69a:	d9 0a       	sbc	r13, r25
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	c8 16       	cp	r12, r24
     6a0:	d1 04       	cpc	r13, r1
     6a2:	84 f4       	brge	.+32     	; 0x6c4 <main+0x16c>
			LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     6a4:	f6 01       	movw	r30, r12
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	8c 0f       	add	r24, r28
     6b0:	9d 1f       	adc	r25, r29
     6b2:	e8 0f       	add	r30, r24
     6b4:	f9 1f       	adc	r31, r25
     6b6:	46 85       	ldd	r20, Z+14	; 0x0e
     6b8:	57 85       	ldd	r21, Z+15	; 0x0f
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     6c2:	0b c0       	rjmp	.+22     	; 0x6da <main+0x182>
			else
			LCD_Escrever_Linha(1, 0, " ");
     6c4:	45 e3       	ldi	r20, 0x35	; 53
     6c6:	51 e0       	ldi	r21, 0x01	; 1
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     6d0:	04 c0       	rjmp	.+8      	; 0x6da <main+0x182>

			while ((tecla = varredura()) == 0) {
				if (isBlocked()) break;
     6d2:	0e 94 e7 06 	call	0xdce	; 0xdce <isBlocked>
     6d6:	89 2b       	or	r24, r25
     6d8:	29 f4       	brne	.+10     	; 0x6e4 <main+0x18c>
			if (indice_menu + 1 < total_opcoes)
			LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
			else
			LCD_Escrever_Linha(1, 0, " ");

			while ((tecla = varredura()) == 0) {
     6da:	0e 94 b3 07 	call	0xf66	; 0xf66 <varredura>
     6de:	18 2f       	mov	r17, r24
     6e0:	88 23       	and	r24, r24
     6e2:	b9 f3       	breq	.-18     	; 0x6d2 <main+0x17a>
				if (isBlocked()) break;
			}

			delay1ms(300);
     6e4:	8c e2       	ldi	r24, 0x2C	; 44
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
			if (tecla == 'B' && indice_menu < total_opcoes - 2) {
     6ec:	12 34       	cpi	r17, 0x42	; 66
     6ee:	29 f4       	brne	.+10     	; 0x6fa <main+0x1a2>
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	e9 16       	cp	r14, r25
     6f4:	f1 04       	cpc	r15, r1
     6f6:	0c f4       	brge	.+2      	; 0x6fa <main+0x1a2>
     6f8:	52 cf       	rjmp	.-348    	; 0x59e <main+0x46>
				indice_menu++;
				} else if (tecla == 'A' && indice_menu > 0) {
     6fa:	11 34       	cpi	r17, 0x41	; 65
     6fc:	39 f4       	brne	.+14     	; 0x70c <main+0x1b4>
     6fe:	1e 14       	cp	r1, r14
     700:	1f 04       	cpc	r1, r15
     702:	24 f4       	brge	.+8      	; 0x70c <main+0x1b4>
				indice_menu--;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	e8 1a       	sub	r14, r24
     708:	f1 08       	sbc	r15, r1
     70a:	4c cf       	rjmp	.-360    	; 0x5a4 <main+0x4c>
				} else if (tecla == '*') {
     70c:	1a 32       	cpi	r17, 0x2A	; 42
     70e:	71 f4       	brne	.+28     	; 0x72c <main+0x1d4>
				LCD_limpar();
     710:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Voltando...");
     714:	46 ec       	ldi	r20, 0xC6	; 198
     716:	51 e0       	ldi	r21, 0x01	; 1
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(1000);
     720:	88 ee       	ldi	r24, 0xE8	; 232
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     728:	00 e0       	ldi	r16, 0x00	; 0
     72a:	3c cf       	rjmp	.-392    	; 0x5a4 <main+0x4c>
				} else if (tecla == opcoes[indice_menu][0]) {
     72c:	f7 01       	movw	r30, r14
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	8c 0f       	add	r24, r28
     738:	9d 1f       	adc	r25, r29
     73a:	e8 0f       	add	r30, r24
     73c:	f9 1f       	adc	r31, r25
     73e:	06 84       	ldd	r0, Z+14	; 0x0e
     740:	f7 85       	ldd	r31, Z+15	; 0x0f
     742:	e0 2d       	mov	r30, r0
     744:	80 81       	ld	r24, Z
     746:	18 13       	cpse	r17, r24
     748:	2d cf       	rjmp	.-422    	; 0x5a4 <main+0x4c>
				switch (tecla) {
     74a:	12 33       	cpi	r17, 0x32	; 50
     74c:	51 f0       	breq	.+20     	; 0x762 <main+0x20a>
     74e:	20 f4       	brcc	.+8      	; 0x758 <main+0x200>
     750:	11 33       	cpi	r17, 0x31	; 49
     752:	09 f4       	brne	.+2      	; 0x756 <main+0x1fe>
     754:	26 cf       	rjmp	.-436    	; 0x5a2 <main+0x4a>
     756:	26 cf       	rjmp	.-436    	; 0x5a4 <main+0x4c>
     758:	13 33       	cpi	r17, 0x33	; 51
     75a:	29 f0       	breq	.+10     	; 0x766 <main+0x20e>
     75c:	14 33       	cpi	r17, 0x34	; 52
     75e:	29 f0       	breq	.+10     	; 0x76a <main+0x212>
     760:	21 cf       	rjmp	.-446    	; 0x5a4 <main+0x4c>
					case '1': estado = ESTADO_SAQUE; break;
					case '2': estado = ESTADO_DEPOSITO; break;
     762:	06 e0       	ldi	r16, 0x06	; 6
     764:	1f cf       	rjmp	.-450    	; 0x5a4 <main+0x4c>
					case '3': estado = ESTADO_PAGAMENTO; break;
     766:	07 e0       	ldi	r16, 0x07	; 7
     768:	1d cf       	rjmp	.-454    	; 0x5a4 <main+0x4c>
					case '4': estado = ESTADO_SALDO; break;
     76a:	08 e0       	ldi	r16, 0x08	; 8
     76c:	1b cf       	rjmp	.-458    	; 0x5a4 <main+0x4c>
				}
			}
			break;

			case ESTADO_SAQUE:
			realizar_saque();
     76e:	0e 94 49 04 	call	0x892	; 0x892 <realizar_saque>
			estado = ESTADO_MENU;
     772:	04 e0       	ldi	r16, 0x04	; 4
			break;
     774:	17 cf       	rjmp	.-466    	; 0x5a4 <main+0x4c>

			case ESTADO_DEPOSITO:
			realizar_deposito();
     776:	0e 94 25 05 	call	0xa4a	; 0xa4a <realizar_deposito>
			estado = ESTADO_MENU;
     77a:	04 e0       	ldi	r16, 0x04	; 4
			break;
     77c:	13 cf       	rjmp	.-474    	; 0x5a4 <main+0x4c>

			case ESTADO_PAGAMENTO:
			LCD_limpar();
     77e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Pagamento");
     782:	4a ef       	ldi	r20, 0xFA	; 250
     784:	51 e0       	ldi	r21, 0x01	; 1
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
     78e:	42 ed       	ldi	r20, 0xD2	; 210
     790:	51 e0       	ldi	r21, 0x01	; 1
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     79a:	80 ed       	ldi	r24, 0xD0	; 208
     79c:	97 e0       	ldi	r25, 0x07	; 7
     79e:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
			estado = ESTADO_MENU;
     7a2:	04 e0       	ldi	r16, 0x04	; 4
			break;
     7a4:	ff ce       	rjmp	.-514    	; 0x5a4 <main+0x4c>

			case ESTADO_SALDO:
			consultar_saldo();
     7a6:	0e 94 ac 05 	call	0xb58	; 0xb58 <consultar_saldo>
			estado = ESTADO_MENU;
     7aa:	04 e0       	ldi	r16, 0x04	; 4
			break;
     7ac:	fb ce       	rjmp	.-522    	; 0x5a4 <main+0x4c>

000007ae <enviar_mensagem_saque>:
		}
	}
}

// Função para enviar mensagem de saque
void enviar_mensagem_saque(const char* valor) {
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	bc 01       	movw	r22, r24
	mensagem[2] = (char)tamanho_valor;

	strncpy(&mensagem[3], valor, tamanho_valor);

	SerialEnviaChars(tamanho_mensagem, mensagem);
}
     7c4:	ed b6       	in	r14, 0x3d	; 61
     7c6:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de saque
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
     7c8:	fc 01       	movw	r30, r24
     7ca:	01 90       	ld	r0, Z+
     7cc:	00 20       	and	r0, r0
     7ce:	e9 f7       	brne	.-6      	; 0x7ca <enviar_mensagem_saque+0x1c>
     7d0:	31 97       	sbiw	r30, 0x01	; 1
     7d2:	af 01       	movw	r20, r30
     7d4:	48 1b       	sub	r20, r24
     7d6:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3;
     7d8:	6a 01       	movw	r12, r20
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	c8 0e       	add	r12, r24
     7de:	d1 1c       	adc	r13, r1

	char mensagem[tamanho_mensagem];
     7e0:	ed b7       	in	r30, 0x3d	; 61
     7e2:	fe b7       	in	r31, 0x3e	; 62
     7e4:	ec 19       	sub	r30, r12
     7e6:	fd 09       	sbc	r31, r13
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	fe bf       	out	0x3e, r31	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	ed bf       	out	0x3d, r30	; 61
     7f2:	0d b7       	in	r16, 0x3d	; 61
     7f4:	1e b7       	in	r17, 0x3e	; 62
     7f6:	0f 5f       	subi	r16, 0xFF	; 255
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
	mensagem[0] = 'C';
     7fa:	83 e4       	ldi	r24, 0x43	; 67
     7fc:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S';
     7fe:	83 e5       	ldi	r24, 0x53	; 83
     800:	f8 01       	movw	r30, r16
     802:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor;
     804:	42 83       	std	Z+2, r20	; 0x02

	strncpy(&mensagem[3], valor, tamanho_valor);
     806:	8d b7       	in	r24, 0x3d	; 61
     808:	9e b7       	in	r25, 0x3e	; 62
     80a:	04 96       	adiw	r24, 0x04	; 4
     80c:	0e 94 75 08 	call	0x10ea	; 0x10ea <strncpy>

	SerialEnviaChars(tamanho_mensagem, mensagem);
     810:	b8 01       	movw	r22, r16
     812:	c6 01       	movw	r24, r12
     814:	0e 94 08 06 	call	0xc10	; 0xc10 <SerialEnviaChars>
}
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	fe be       	out	0x3e, r15	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	ed be       	out	0x3d, r14	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	08 95       	ret

00000834 <receber_resposta_servidor>:

// Função para receber resposta do servidor
char receber_resposta_servidor(void) {
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	00 d0       	rcall	.+0      	; 0x83a <receber_resposta_servidor+0x6>
     83a:	00 d0       	rcall	.+0      	; 0x83c <receber_resposta_servidor+0x8>
     83c:	1f 92       	push	r1
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
	char resposta[5];

	SerialRecebeChars(4, resposta);
     842:	be 01       	movw	r22, r28
     844:	6f 5f       	subi	r22, 0xFF	; 255
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 2b 07 	call	0xe56	; 0xe56 <SerialRecebeChars>
	resposta[4]='\0';
     850:	1d 82       	std	Y+5, r1	; 0x05
	
	LCD_limpar();
     852:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, resposta);
     856:	ae 01       	movw	r20, r28
     858:	4f 5f       	subi	r20, 0xFF	; 255
     85a:	5f 4f       	sbci	r21, 0xFF	; 255
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	delay1ms(2000);
     864:	80 ed       	ldi	r24, 0xD0	; 208
     866:	97 e0       	ldi	r25, 0x07	; 7
     868:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>

	if(resposta[1] == 'S' && resposta[2] == 'S') {
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	83 35       	cpi	r24, 0x53	; 83
     870:	29 f4       	brne	.+10     	; 0x87c <receber_resposta_servidor+0x48>
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	83 35       	cpi	r24, 0x53	; 83
     876:	21 f4       	brne	.+8      	; 0x880 <receber_resposta_servidor+0x4c>
		return resposta[3]; // 'O' ou 'I'
     878:	8c 81       	ldd	r24, Y+4	; 0x04
     87a:	03 c0       	rjmp	.+6      	; 0x882 <receber_resposta_servidor+0x4e>
	}

	return 'E'; // Erro
     87c:	85 e4       	ldi	r24, 0x45	; 69
     87e:	01 c0       	rjmp	.+2      	; 0x882 <receber_resposta_servidor+0x4e>
     880:	85 e4       	ldi	r24, 0x45	; 69
}
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <realizar_saque>:
#include "teclado.h"
#include <util/delay.h>
#include <string.h>

// Função para realizar um saque
void realizar_saque(void) {
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	2b 97       	sbiw	r28, 0x0b	; 11
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
     8aa:	fe 01       	movw	r30, r28
     8ac:	31 96       	adiw	r30, 0x01	; 1
     8ae:	89 e0       	ldi	r24, 0x09	; 9
     8b0:	df 01       	movw	r26, r30
     8b2:	1d 92       	st	X+, r1
     8b4:	8a 95       	dec	r24
     8b6:	e9 f7       	brne	.-6      	; 0x8b2 <realizar_saque+0x20>
	int pos = 0;
	char tecla;

	LCD_limpar();
     8b8:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
     8bc:	4c e0       	ldi	r20, 0x0C	; 12
     8be:	52 e0       	ldi	r21, 0x02	; 2
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
     8c8:	4c e1       	ldi	r20, 0x1C	; 28
     8ca:	52 e0       	ldi	r21, 0x02	; 2
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
#include <string.h>

// Função para realizar um saque
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
     8d4:	00 e0       	ldi	r16, 0x00	; 0
     8d6:	10 e0       	ldi	r17, 0x00	; 0
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		tecla = varredura();
     8d8:	0e 94 b3 07 	call	0xf66	; 0xf66 <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     8dc:	90 ed       	ldi	r25, 0xD0	; 208
     8de:	98 0f       	add	r25, r24
     8e0:	9a 30       	cpi	r25, 0x0A	; 10
     8e2:	d8 f4       	brcc	.+54     	; 0x91a <__stack+0x1b>
     8e4:	08 30       	cpi	r16, 0x08	; 8
     8e6:	11 05       	cpc	r17, r1
     8e8:	c4 f4       	brge	.+48     	; 0x91a <__stack+0x1b>
			valor_saque[pos] = tecla;
     8ea:	e1 e0       	ldi	r30, 0x01	; 1
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	ec 0f       	add	r30, r28
     8f0:	fd 1f       	adc	r31, r29
     8f2:	e0 0f       	add	r30, r16
     8f4:	f1 1f       	adc	r31, r17
     8f6:	80 83       	st	Z, r24

			char str[2] = {tecla, '\0'};
     8f8:	8a 87       	std	Y+10, r24	; 0x0a
     8fa:	1b 86       	std	Y+11, r1	; 0x0b
			LCD_Escrever_Linha(1, 2 + pos, str);
     8fc:	62 e0       	ldi	r22, 0x02	; 2
     8fe:	60 0f       	add	r22, r16
     900:	ae 01       	movw	r20, r28
     902:	46 5f       	subi	r20, 0xF6	; 246
     904:	5f 4f       	sbci	r21, 0xFF	; 255
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     90c:	0f 5f       	subi	r16, 0xFF	; 255
     90e:	1f 4f       	sbci	r17, 0xFF	; 255

			delay1ms(200);
     910:	88 ec       	ldi	r24, 0xC8	; 200
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		tecla = varredura();

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     918:	df cf       	rjmp	.-66     	; 0x8d8 <realizar_saque+0x46>
			LCD_Escrever_Linha(1, 2 + pos, str);
			pos++;

			delay1ms(200);
		}
		else if(tecla == '#' && pos > 0) {
     91a:	83 32       	cpi	r24, 0x23	; 35
     91c:	99 f5       	brne	.+102    	; 0x984 <__stack+0x85>
     91e:	10 16       	cp	r1, r16
     920:	11 06       	cpc	r1, r17
     922:	84 f5       	brge	.+96     	; 0x984 <__stack+0x85>
			valor_saque[pos] = '\0';
     924:	e1 e0       	ldi	r30, 0x01	; 1
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	ec 0f       	add	r30, r28
     92a:	fd 1f       	adc	r31, r29
     92c:	e0 0f       	add	r30, r16
     92e:	f1 1f       	adc	r31, r17
     930:	10 82       	st	Z, r1

			enviar_mensagem_saque(valor_saque);
     932:	ce 01       	movw	r24, r28
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	0e 94 d7 03 	call	0x7ae	; 0x7ae <enviar_mensagem_saque>
			char resposta = receber_resposta_servidor();
     93a:	0e 94 1a 04 	call	0x834	; 0x834 <receber_resposta_servidor>
     93e:	18 2f       	mov	r17, r24

			LCD_limpar();
     940:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			if(resposta == 'O') {
     944:	1f 34       	cpi	r17, 0x4F	; 79
     946:	69 f4       	brne	.+26     	; 0x962 <__stack+0x63>
				LCD_Escrever_Linha(0, 0, "Saque realizado!");
     948:	4f e1       	ldi	r20, 0x1F	; 31
     94a:	52 e0       	ldi	r21, 0x02	; 2
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Retire o dinheiro");
     954:	40 e3       	ldi	r20, 0x30	; 48
     956:	52 e0       	ldi	r21, 0x02	; 2
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     960:	0c c0       	rjmp	.+24     	; 0x97a <__stack+0x7b>
				} else {
				LCD_Escrever_Linha(0, 0, "Saldo insuficiente");
     962:	42 e4       	ldi	r20, 0x42	; 66
     964:	52 e0       	ldi	r21, 0x02	; 2
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente outro valor");
     96e:	45 e5       	ldi	r20, 0x55	; 85
     970:	52 e0       	ldi	r21, 0x02	; 2
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			}
			delay1ms(3000);
     97a:	88 eb       	ldi	r24, 0xB8	; 184
     97c:	9b e0       	ldi	r25, 0x0B	; 11
     97e:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
			break;
     982:	15 c0       	rjmp	.+42     	; 0x9ae <__stack+0xaf>
		}
		else if(tecla == '*') {
     984:	8a 32       	cpi	r24, 0x2A	; 42
     986:	09 f0       	breq	.+2      	; 0x98a <__stack+0x8b>
     988:	a7 cf       	rjmp	.-178    	; 0x8d8 <realizar_saque+0x46>
			LCD_limpar();
     98a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
     98e:	47 e6       	ldi	r20, 0x67	; 103
     990:	52 e0       	ldi	r21, 0x02	; 2
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
     99a:	4d ea       	ldi	r20, 0xAD	; 173
     99c:	52 e0       	ldi	r21, 0x02	; 2
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     9a6:	80 ed       	ldi	r24, 0xD0	; 208
     9a8:	97 e0       	ldi	r25, 0x07	; 7
     9aa:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
			break;
		}
	}
}
     9ae:	2b 96       	adiw	r28, 0x0b	; 11
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	08 95       	ret

000009c4 <enviar_mensagem_deposito>:
		}
	}
}

// Função para enviar mensagem de depósito
void enviar_mensagem_deposito(const char* valor) {
     9c4:	cf 92       	push	r12
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	bc 01       	movw	r22, r24
	mensagem[2] = (char)tamanho_valor;

	strncpy(&mensagem[3], valor, tamanho_valor);

	SerialEnviaChars(tamanho_mensagem, mensagem);
}
     9da:	ed b6       	in	r14, 0x3d	; 61
     9dc:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de depósito
void enviar_mensagem_deposito(const char* valor) {
	int tamanho_valor = strlen(valor);
     9de:	fc 01       	movw	r30, r24
     9e0:	01 90       	ld	r0, Z+
     9e2:	00 20       	and	r0, r0
     9e4:	e9 f7       	brne	.-6      	; 0x9e0 <enviar_mensagem_deposito+0x1c>
     9e6:	31 97       	sbiw	r30, 0x01	; 1
     9e8:	af 01       	movw	r20, r30
     9ea:	48 1b       	sub	r20, r24
     9ec:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3;
     9ee:	6a 01       	movw	r12, r20
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	c8 0e       	add	r12, r24
     9f4:	d1 1c       	adc	r13, r1

	char mensagem[tamanho_mensagem];
     9f6:	ed b7       	in	r30, 0x3d	; 61
     9f8:	fe b7       	in	r31, 0x3e	; 62
     9fa:	ec 19       	sub	r30, r12
     9fc:	fd 09       	sbc	r31, r13
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	fe bf       	out	0x3e, r31	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	ed bf       	out	0x3d, r30	; 61
     a08:	0d b7       	in	r16, 0x3d	; 61
     a0a:	1e b7       	in	r17, 0x3e	; 62
     a0c:	0f 5f       	subi	r16, 0xFF	; 255
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
	mensagem[0] = 'C';
     a10:	83 e4       	ldi	r24, 0x43	; 67
     a12:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'D';
     a14:	84 e4       	ldi	r24, 0x44	; 68
     a16:	f8 01       	movw	r30, r16
     a18:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor;
     a1a:	42 83       	std	Z+2, r20	; 0x02

	strncpy(&mensagem[3], valor, tamanho_valor);
     a1c:	8d b7       	in	r24, 0x3d	; 61
     a1e:	9e b7       	in	r25, 0x3e	; 62
     a20:	04 96       	adiw	r24, 0x04	; 4
     a22:	0e 94 75 08 	call	0x10ea	; 0x10ea <strncpy>

	SerialEnviaChars(tamanho_mensagem, mensagem);
     a26:	b8 01       	movw	r22, r16
     a28:	c6 01       	movw	r24, r12
     a2a:	0e 94 08 06 	call	0xc10	; 0xc10 <SerialEnviaChars>
}
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	fe be       	out	0x3e, r15	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	ed be       	out	0x3d, r14	; 61
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	08 95       	ret

00000a4a <realizar_deposito>:

	return 'E'; // Erro
}

// Função para realizar um depósito
void realizar_deposito(void) {
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	2b 97       	sbiw	r28, 0x0b	; 11
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
	char valor_deposito[MAX_VALOR_SAQUE] = {0};
     a62:	fe 01       	movw	r30, r28
     a64:	31 96       	adiw	r30, 0x01	; 1
     a66:	89 e0       	ldi	r24, 0x09	; 9
     a68:	df 01       	movw	r26, r30
     a6a:	1d 92       	st	X+, r1
     a6c:	8a 95       	dec	r24
     a6e:	e9 f7       	brne	.-6      	; 0xa6a <realizar_deposito+0x20>
	int pos = 0;
	char tecla;

	LCD_limpar();
     a70:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do deposito:");
     a74:	40 e7       	ldi	r20, 0x70	; 112
     a76:	52 e0       	ldi	r21, 0x02	; 2
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
     a80:	4c e1       	ldi	r20, 0x1C	; 28
     a82:	52 e0       	ldi	r21, 0x02	; 2
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
}

// Função para realizar um depósito
void realizar_deposito(void) {
	char valor_deposito[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
     a8c:	00 e0       	ldi	r16, 0x00	; 0
     a8e:	10 e0       	ldi	r17, 0x00	; 0
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Valor do deposito:");
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		tecla = varredura();
     a90:	0e 94 b3 07 	call	0xf66	; 0xf66 <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     a94:	90 ed       	ldi	r25, 0xD0	; 208
     a96:	98 0f       	add	r25, r24
     a98:	9a 30       	cpi	r25, 0x0A	; 10
     a9a:	d8 f4       	brcc	.+54     	; 0xad2 <realizar_deposito+0x88>
     a9c:	08 30       	cpi	r16, 0x08	; 8
     a9e:	11 05       	cpc	r17, r1
     aa0:	c4 f4       	brge	.+48     	; 0xad2 <realizar_deposito+0x88>
			valor_deposito[pos] = tecla;
     aa2:	e1 e0       	ldi	r30, 0x01	; 1
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	ec 0f       	add	r30, r28
     aa8:	fd 1f       	adc	r31, r29
     aaa:	e0 0f       	add	r30, r16
     aac:	f1 1f       	adc	r31, r17
     aae:	80 83       	st	Z, r24

			char str[2] = {tecla, '\0'};
     ab0:	8a 87       	std	Y+10, r24	; 0x0a
     ab2:	1b 86       	std	Y+11, r1	; 0x0b
			LCD_Escrever_Linha(1, 2 + pos, str);
     ab4:	62 e0       	ldi	r22, 0x02	; 2
     ab6:	60 0f       	add	r22, r16
     ab8:	ae 01       	movw	r20, r28
     aba:	46 5f       	subi	r20, 0xF6	; 246
     abc:	5f 4f       	sbci	r21, 0xFF	; 255
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     ac4:	0f 5f       	subi	r16, 0xFF	; 255
     ac6:	1f 4f       	sbci	r17, 0xFF	; 255

			delay1ms(200);
     ac8:	88 ec       	ldi	r24, 0xC8	; 200
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		tecla = varredura();

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     ad0:	df cf       	rjmp	.-66     	; 0xa90 <realizar_deposito+0x46>
			LCD_Escrever_Linha(1, 2 + pos, str);
			pos++;

			delay1ms(200);
		}
		else if(tecla == '#' && pos > 0) {
     ad2:	83 32       	cpi	r24, 0x23	; 35
     ad4:	39 f5       	brne	.+78     	; 0xb24 <realizar_deposito+0xda>
     ad6:	10 16       	cp	r1, r16
     ad8:	11 06       	cpc	r1, r17
     ada:	24 f5       	brge	.+72     	; 0xb24 <realizar_deposito+0xda>
			valor_deposito[pos] = '\0';
     adc:	e1 e0       	ldi	r30, 0x01	; 1
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ec 0f       	add	r30, r28
     ae2:	fd 1f       	adc	r31, r29
     ae4:	e0 0f       	add	r30, r16
     ae6:	f1 1f       	adc	r31, r17
     ae8:	10 82       	st	Z, r1

			enviar_mensagem_deposito(valor_deposito);
     aea:	ce 01       	movw	r24, r28
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <enviar_mensagem_deposito>
			char resposta = receber_resposta_servidor();
     af2:	0e 94 1a 04 	call	0x834	; 0x834 <receber_resposta_servidor>
     af6:	18 2f       	mov	r17, r24

			LCD_limpar();
     af8:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			if(resposta == 'O') {
     afc:	1f 34       	cpi	r17, 0x4F	; 79
     afe:	39 f4       	brne	.+14     	; 0xb0e <realizar_deposito+0xc4>
				LCD_Escrever_Linha(0, 0, "Deposito feito!");
     b00:	43 e8       	ldi	r20, 0x83	; 131
     b02:	52 e0       	ldi	r21, 0x02	; 2
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <realizar_deposito+0xd0>
				} else {
				LCD_Escrever_Linha(0, 0, "Erro no deposito");
     b0e:	43 e9       	ldi	r20, 0x93	; 147
     b10:	52 e0       	ldi	r21, 0x02	; 2
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			}
			delay1ms(3000);
     b1a:	88 eb       	ldi	r24, 0xB8	; 184
     b1c:	9b e0       	ldi	r25, 0x0B	; 11
     b1e:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
			break;
     b22:	0f c0       	rjmp	.+30     	; 0xb42 <realizar_deposito+0xf8>
		}
		else if(tecla == '*') {
     b24:	8a 32       	cpi	r24, 0x2A	; 42
     b26:	09 f0       	breq	.+2      	; 0xb2a <realizar_deposito+0xe0>
     b28:	b3 cf       	rjmp	.-154    	; 0xa90 <realizar_deposito+0x46>
			LCD_limpar();
     b2a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao cancelada");
     b2e:	44 ea       	ldi	r20, 0xA4	; 164
     b30:	52 e0       	ldi	r21, 0x02	; 2
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     b3a:	80 ed       	ldi	r24, 0xD0	; 208
     b3c:	97 e0       	ldi	r25, 0x07	; 7
     b3e:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
			break;
		}
	}
}
     b42:	2b 96       	adiw	r28, 0x0b	; 11
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	08 95       	ret

00000b58 <consultar_saldo>:

	SerialEnviaChars(tamanho_mensagem, mensagem);
}

// Função para consultar saldo
void consultar_saldo(void) {
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	2d 97       	sbiw	r28, 0x0d	; 13
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
	char mensagem[3] = { 'C', 'L', 0 };
     b6c:	83 e4       	ldi	r24, 0x43	; 67
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	8c e4       	ldi	r24, 0x4C	; 76
     b72:	8a 83       	std	Y+2, r24	; 0x02
     b74:	1b 82       	std	Y+3, r1	; 0x03
	SerialEnviaChars(3, mensagem);
     b76:	be 01       	movw	r22, r28
     b78:	6f 5f       	subi	r22, 0xFF	; 255
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 08 06 	call	0xc10	; 0xc10 <SerialEnviaChars>

	char resposta[10];
	SerialRecebeChars(9, resposta);
     b84:	be 01       	movw	r22, r28
     b86:	6c 5f       	subi	r22, 0xFC	; 252
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	89 e0       	ldi	r24, 0x09	; 9
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 2b 07 	call	0xe56	; 0xe56 <SerialRecebeChars>
	resposta[9] = '\0';
     b92:	1d 86       	std	Y+13, r1	; 0x0d

	LCD_limpar();
     b94:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	if (resposta[0] == 'S' && resposta[1] == 'L') {
     b98:	8c 81       	ldd	r24, Y+4	; 0x04
     b9a:	83 35       	cpi	r24, 0x53	; 83
     b9c:	89 f4       	brne	.+34     	; 0xbc0 <consultar_saldo+0x68>
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	8c 34       	cpi	r24, 0x4C	; 76
     ba2:	71 f4       	brne	.+28     	; 0xbc0 <consultar_saldo+0x68>
		LCD_Escrever_Linha(0, 0, "Saldo atual:");
     ba4:	47 eb       	ldi	r20, 0xB7	; 183
     ba6:	52 e0       	ldi	r21, 0x02	; 2
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, &resposta[2]);
     bb0:	ae 01       	movw	r20, r28
     bb2:	4a 5f       	subi	r20, 0xFA	; 250
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     bbe:	0c c0       	rjmp	.+24     	; 0xbd8 <consultar_saldo+0x80>
		} else {
		LCD_Escrever_Linha(0, 0, "Erro ao obter");
     bc0:	44 ec       	ldi	r20, 0xC4	; 196
     bc2:	52 e0       	ldi	r21, 0x02	; 2
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "saldo");
     bcc:	42 ed       	ldi	r20, 0xD2	; 210
     bce:	52 e0       	ldi	r21, 0x02	; 2
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	}
	delay1ms(3000);
     bd8:	88 eb       	ldi	r24, 0xB8	; 184
     bda:	9b e0       	ldi	r25, 0x0B	; 11
     bdc:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
}
     be0:	2d 96       	adiw	r28, 0x0d	; 13
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <initUART>:
	return bytes_recebidos;
}

int SerialTemDados() {
	return !uart_buffer_empty();
}
     bf2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     bf6:	83 e3       	ldi	r24, 0x33	; 51
     bf8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     bfc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c00:	88 e9       	ldi	r24, 0x98	; 152
     c02:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     c06:	86 e0       	ldi	r24, 0x06	; 6
     c08:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     c0c:	78 94       	sei
     c0e:	08 95       	ret

00000c10 <SerialEnviaChars>:
     c10:	ac 01       	movw	r20, r24
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	0c c0       	rjmp	.+24     	; 0xc30 <SerialEnviaChars+0x20>
     c18:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c1c:	95 ff       	sbrs	r25, 5
     c1e:	fc cf       	rjmp	.-8      	; 0xc18 <SerialEnviaChars+0x8>
     c20:	fb 01       	movw	r30, r22
     c22:	e2 0f       	add	r30, r18
     c24:	f3 1f       	adc	r31, r19
     c26:	90 81       	ld	r25, Z
     c28:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c2c:	2f 5f       	subi	r18, 0xFF	; 255
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	24 17       	cp	r18, r20
     c32:	35 07       	cpc	r19, r21
     c34:	8c f3       	brlt	.-30     	; 0xc18 <SerialEnviaChars+0x8>
     c36:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     c3a:	86 ff       	sbrs	r24, 6
     c3c:	fc cf       	rjmp	.-8      	; 0xc36 <SerialEnviaChars+0x26>
     c3e:	e0 ec       	ldi	r30, 0xC0	; 192
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	80 64       	ori	r24, 0x40	; 64
     c46:	80 83       	st	Z, r24
     c48:	08 95       	ret

00000c4a <SerialEnviaString>:
     c4a:	fc 01       	movw	r30, r24
     c4c:	01 90       	ld	r0, Z+
     c4e:	00 20       	and	r0, r0
     c50:	e9 f7       	brne	.-6      	; 0xc4c <SerialEnviaString+0x2>
     c52:	31 97       	sbiw	r30, 0x01	; 1
     c54:	bc 01       	movw	r22, r24
     c56:	9f 01       	movw	r18, r30
     c58:	28 1b       	sub	r18, r24
     c5a:	39 0b       	sbc	r19, r25
     c5c:	c9 01       	movw	r24, r18
     c5e:	0e 94 08 06 	call	0xc10	; 0xc10 <SerialEnviaChars>
     c62:	08 95       	ret

00000c64 <__vector_18>:
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	0f 92       	push	r0
     c6c:	11 24       	eor	r1, r1
     c6e:	2f 93       	push	r18
     c70:	3f 93       	push	r19
     c72:	4f 93       	push	r20
     c74:	5f 93       	push	r21
     c76:	6f 93       	push	r22
     c78:	7f 93       	push	r23
     c7a:	8f 93       	push	r24
     c7c:	9f 93       	push	r25
     c7e:	af 93       	push	r26
     c80:	bf 93       	push	r27
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
     c86:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c8a:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <temp_index.1893>
     c8e:	9f ef       	ldi	r25, 0xFF	; 255
     c90:	9e 0f       	add	r25, r30
     c92:	95 30       	cpi	r25, 0x05	; 5
     c94:	d8 f4       	brcc	.+54     	; 0xccc <__vector_18+0x68>
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	9e 0f       	add	r25, r30
     c9a:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <temp_index.1893>
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	ee 51       	subi	r30, 0x1E	; 30
     ca2:	fd 4f       	sbci	r31, 0xFD	; 253
     ca4:	80 83       	st	Z, r24
     ca6:	96 30       	cpi	r25, 0x06	; 6
     ca8:	09 f0       	breq	.+2      	; 0xcac <__vector_18+0x48>
     caa:	80 c0       	rjmp	.+256    	; 0xdac <__vector_18+0x148>
     cac:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__data_end+0x4>
     cb0:	88 50       	subi	r24, 0x08	; 8
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	8c 30       	cpi	r24, 0x0C	; 12
     cb6:	08 f4       	brcc	.+2      	; 0xcba <__vector_18+0x56>
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <blocked>
     cbe:	88 ed       	ldi	r24, 0xD8	; 216
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 25 06 	call	0xc4a	; 0xc4a <SerialEnviaString>
     cc6:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <temp_index.1893>
     cca:	70 c0       	rjmp	.+224    	; 0xdac <__vector_18+0x148>
     ccc:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <comando_index>
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	9e 0f       	add	r25, r30
     cd4:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <comando_index>
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	e1 59       	subi	r30, 0x91	; 145
     cdc:	fc 4f       	sbci	r31, 0xFC	; 252
     cde:	80 83       	st	Z, r24
     ce0:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <comando_index>
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	09 f0       	breq	.+2      	; 0xcea <__vector_18+0x86>
     ce8:	61 c0       	rjmp	.+194    	; 0xdac <__vector_18+0x148>
     cea:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <comando_buffer>
     cee:	83 35       	cpi	r24, 0x53	; 83
     cf0:	61 f4       	brne	.+24     	; 0xd0a <__vector_18+0xa6>
     cf2:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <comando_buffer+0x1>
     cf6:	84 35       	cpi	r24, 0x54	; 84
     cf8:	41 f4       	brne	.+16     	; 0xd0a <__vector_18+0xa6>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <blocked>
     d00:	8b ed       	ldi	r24, 0xDB	; 219
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	0e 94 25 06 	call	0xc4a	; 0xc4a <SerialEnviaString>
     d08:	4f c0       	rjmp	.+158    	; 0xda8 <__vector_18+0x144>
     d0a:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <comando_buffer>
     d0e:	83 35       	cpi	r24, 0x53	; 83
     d10:	59 f4       	brne	.+22     	; 0xd28 <__vector_18+0xc4>
     d12:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <comando_buffer+0x1>
     d16:	8c 34       	cpi	r24, 0x4C	; 76
     d18:	39 f4       	brne	.+14     	; 0xd28 <__vector_18+0xc4>
     d1a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <blocked>
     d1e:	8e ed       	ldi	r24, 0xDE	; 222
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 25 06 	call	0xc4a	; 0xc4a <SerialEnviaString>
     d26:	40 c0       	rjmp	.+128    	; 0xda8 <__vector_18+0x144>
     d28:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <comando_buffer>
     d2c:	83 35       	cpi	r24, 0x53	; 83
     d2e:	a1 f5       	brne	.+104    	; 0xd98 <__vector_18+0x134>
     d30:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <comando_buffer+0x1>
     d34:	88 34       	cpi	r24, 0x48	; 72
     d36:	99 f5       	brne	.+102    	; 0xd9e <__vector_18+0x13a>
     d38:	e2 ee       	ldi	r30, 0xE2	; 226
     d3a:	f2 e0       	ldi	r31, 0x02	; 2
     d3c:	83 e5       	ldi	r24, 0x53	; 83
     d3e:	80 83       	st	Z, r24
     d40:	88 e4       	ldi	r24, 0x48	; 72
     d42:	81 83       	std	Z+1, r24	; 0x01
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <temp_index.1893>
     d4a:	2e c0       	rjmp	.+92     	; 0xda8 <__vector_18+0x144>
     d4c:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <uart_head>
     d50:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <uart_head+0x1>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	8f 77       	andi	r24, 0x7F	; 127
     d58:	90 78       	andi	r25, 0x80	; 128
     d5a:	99 23       	and	r25, r25
     d5c:	24 f4       	brge	.+8      	; 0xd66 <__vector_18+0x102>
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	80 68       	ori	r24, 0x80	; 128
     d62:	9f 6f       	ori	r25, 0xFF	; 255
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	40 91 eb 02 	lds	r20, 0x02EB	; 0x8002eb <uart_tail>
     d6a:	50 91 ec 02 	lds	r21, 0x02EC	; 0x8002ec <uart_tail+0x1>
     d6e:	84 17       	cp	r24, r20
     d70:	95 07       	cpc	r25, r21
     d72:	79 f0       	breq	.+30     	; 0xd92 <__vector_18+0x12e>
     d74:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <uart_head>
     d78:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <uart_head+0x1>
     d7c:	d9 01       	movw	r26, r18
     d7e:	a1 59       	subi	r26, 0x91	; 145
     d80:	bc 4f       	sbci	r27, 0xFC	; 252
     d82:	4c 91       	ld	r20, X
     d84:	e1 51       	subi	r30, 0x11	; 17
     d86:	fd 4f       	sbci	r31, 0xFD	; 253
     d88:	40 83       	st	Z, r20
     d8a:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <uart_head+0x1>
     d8e:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <uart_head>
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	3f 4f       	sbci	r19, 0xFF	; 255
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <__vector_18+0x13e>
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <__vector_18+0x13e>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	94 f2       	brlt	.-92     	; 0xd4c <__vector_18+0xe8>
     da8:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <comando_index>
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <isBlocked>:
     dce:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <blocked>
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	08 95       	ret

00000dd6 <uart_buffer_empty>:
     dd6:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <uart_head>
     dda:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <uart_head+0x1>
     dde:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <uart_tail>
     de2:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <uart_tail+0x1>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	42 17       	cp	r20, r18
     dea:	53 07       	cpc	r21, r19
     dec:	09 f0       	breq	.+2      	; 0xdf0 <uart_buffer_empty+0x1a>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	08 95       	ret

00000df4 <uart_buffer_read_char>:
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	ec 01       	movw	r28, r24
     dfa:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <uart_buffer_empty>
     dfe:	89 2b       	or	r24, r25
     e00:	e1 f4       	brne	.+56     	; 0xe3a <uart_buffer_read_char+0x46>
     e02:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <uart_tail>
     e06:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <uart_tail+0x1>
     e0a:	e1 51       	subi	r30, 0x11	; 17
     e0c:	fd 4f       	sbci	r31, 0xFD	; 253
     e0e:	80 81       	ld	r24, Z
     e10:	88 83       	st	Y, r24
     e12:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <uart_tail>
     e16:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <uart_tail+0x1>
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	8f 77       	andi	r24, 0x7F	; 127
     e1e:	90 78       	andi	r25, 0x80	; 128
     e20:	99 23       	and	r25, r25
     e22:	24 f4       	brge	.+8      	; 0xe2c <uart_buffer_read_char+0x38>
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	80 68       	ori	r24, 0x80	; 128
     e28:	9f 6f       	ori	r25, 0xFF	; 255
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <uart_tail+0x1>
     e30:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <uart_tail>
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <uart_buffer_read_char+0x4a>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <uart_buffer_clear>:

void uart_buffer_clear() {
	uart_head = 0;
     e44:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <uart_head+0x1>
     e48:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <uart_head>
	uart_tail = 0;
     e4c:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <uart_tail+0x1>
     e50:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <uart_tail>
     e54:	08 95       	ret

00000e56 <SerialRecebeChars>:
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	1f 92       	push	r1
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	6c 01       	movw	r12, r24
     e72:	5b 01       	movw	r10, r22
	uart_buffer_clear();
     e74:	0e 94 22 07 	call	0xe44	; 0xe44 <uart_buffer_clear>
	int received = 0;
	int timeout_count = 0;
     e78:	e1 2c       	mov	r14, r1
     e7a:	f1 2c       	mov	r15, r1
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
	uart_buffer_clear();
	int received = 0;
     e7c:	00 e0       	ldi	r16, 0x00	; 0
     e7e:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100;

	while (received < sizeS && timeout_count < timeout_limit) {
     e80:	17 c0       	rjmp	.+46     	; 0xeb0 <SerialRecebeChars+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
     e82:	ce 01       	movw	r24, r28
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <uart_buffer_read_char>
     e8a:	89 2b       	or	r24, r25
     e8c:	51 f0       	breq	.+20     	; 0xea2 <SerialRecebeChars+0x4c>
			string[received++] = c;
     e8e:	f5 01       	movw	r30, r10
     e90:	e0 0f       	add	r30, r16
     e92:	f1 1f       	adc	r31, r17
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	80 83       	st	Z, r24
     e98:	0f 5f       	subi	r16, 0xFF	; 255
     e9a:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0;
     e9c:	e1 2c       	mov	r14, r1
     e9e:	f1 2c       	mov	r15, r1
     ea0:	07 c0       	rjmp	.+14     	; 0xeb0 <SerialRecebeChars+0x5a>
			} else {
			delay1ms(10);
     ea2:	8a e0       	ldi	r24, 0x0A	; 10
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 37 08 	call	0x106e	; 0x106e <delay1ms>
			timeout_count++;
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	e8 1a       	sub	r14, r24
     eae:	f8 0a       	sbc	r15, r24
	uart_buffer_clear();
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100;

	while (received < sizeS && timeout_count < timeout_limit) {
     eb0:	0c 15       	cp	r16, r12
     eb2:	1d 05       	cpc	r17, r13
     eb4:	24 f4       	brge	.+8      	; 0xebe <SerialRecebeChars+0x68>
     eb6:	84 e6       	ldi	r24, 0x64	; 100
     eb8:	e8 16       	cp	r14, r24
     eba:	f1 04       	cpc	r15, r1
     ebc:	14 f3       	brlt	.-60     	; 0xe82 <SerialRecebeChars+0x2c>
			} else {
			delay1ms(10);
			timeout_count++;
		}
	}
	string[received] = '\0';
     ebe:	f5 01       	movw	r30, r10
     ec0:	e0 0f       	add	r30, r16
     ec2:	f1 1f       	adc	r31, r17
     ec4:	10 82       	st	Z, r1
}
     ec6:	0f 90       	pop	r0
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	df 90       	pop	r13
     ed6:	cf 90       	pop	r12
     ed8:	bf 90       	pop	r11
     eda:	af 90       	pop	r10
     edc:	08 95       	ret

00000ede <prepara_teclado>:
#define COL4 PD2    // Coluna 4 no PD2

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
     ede:	84 b1       	in	r24, 0x04	; 4
     ee0:	83 60       	ori	r24, 0x03	; 3
     ee2:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
     ee4:	8a b1       	in	r24, 0x0a	; 10
     ee6:	80 6c       	ori	r24, 0xC0	; 192
     ee8:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4)); // PD5, PD4, PD3 e PD2 como entradas
     eea:	8a b1       	in	r24, 0x0a	; 10
     eec:	83 7c       	andi	r24, 0xC3	; 195
     eee:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);   // Habilitar resistores de Pull-up
     ef0:	8b b1       	in	r24, 0x0b	; 11
     ef2:	8c 63       	ori	r24, 0x3C	; 60
     ef4:	8b b9       	out	0x0b, r24	; 11
     ef6:	08 95       	ret

00000ef8 <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	00 d0       	rcall	.+0      	; 0xefe <atraso_debounce+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
     f02:	1a 82       	std	Y+2, r1	; 0x02
     f04:	19 82       	std	Y+1, r1	; 0x01
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <atraso_debounce+0x1a>
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	88 3e       	cpi	r24, 0xE8	; 232
     f18:	93 40       	sbci	r25, 0x03	; 3
     f1a:	b0 f3       	brcs	.-20     	; 0xf08 <atraso_debounce+0x10>
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	08 95       	ret

00000f26 <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
     f2e:	c0 e0       	ldi	r28, 0x00	; 0
     f30:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
     f32:	12 c0       	rjmp	.+36     	; 0xf58 <debounce+0x32>
        atraso_debounce();
     f34:	0e 94 7c 07 	call	0xef8	; 0xef8 <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
     f38:	29 b1       	in	r18, 0x09	; 9
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	01 2e       	mov	r0, r17
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <debounce+0x20>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <debounce+0x1c>
     f4a:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
     f4c:	d8 13       	cpse	r29, r24
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <debounce+0x2e>
            counter++;
     f50:	cf 5f       	subi	r28, 0xFF	; 255
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <debounce+0x30>
        } else {
            counter = 0;
     f54:	c0 e0       	ldi	r28, 0x00	; 0
     f56:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
     f58:	c7 30       	cpi	r28, 0x07	; 7
     f5a:	61 f7       	brne	.-40     	; 0xf34 <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
     f5c:	8d 2f       	mov	r24, r29
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	08 95       	ret

00000f66 <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
     f66:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
     f68:	85 b1       	in	r24, 0x05	; 5
     f6a:	83 60       	ori	r24, 0x03	; 3
     f6c:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
     f6e:	8b b1       	in	r24, 0x0b	; 11
     f70:	80 6c       	ori	r24, 0xC0	; 192
     f72:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
     f74:	85 b1       	in	r24, 0x05	; 5
     f76:	8d 7f       	andi	r24, 0xFD	; 253
     f78:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
     f7a:	85 e0       	ldi	r24, 0x05	; 5
     f7c:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
     f80:	88 23       	and	r24, r24
     f82:	11 f0       	breq	.+4      	; 0xf88 <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
     f84:	c0 e0       	ldi	r28, 0x00	; 0
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
     f88:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
     f8a:	84 e0       	ldi	r24, 0x04	; 4
     f8c:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
     f90:	81 11       	cpse	r24, r1
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <varredura+0x30>
     f94:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
     f9c:	81 11       	cpse	r24, r1
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <varredura+0x3c>
     fa0:	c3 e3       	ldi	r28, 0x33	; 51
	if (!debounce(COL4 - 0)) tecla = 'A'; 
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
     fa8:	81 11       	cpse	r24, r1
     faa:	01 c0       	rjmp	.+2      	; 0xfae <varredura+0x48>
     fac:	c1 e4       	ldi	r28, 0x41	; 65
    PORTB |= (1 << LIN1); // Desativa LIN1
     fae:	85 b1       	in	r24, 0x05	; 5
     fb0:	82 60       	ori	r24, 0x02	; 2
     fb2:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
     fb4:	85 b1       	in	r24, 0x05	; 5
     fb6:	8e 7f       	andi	r24, 0xFE	; 254
     fb8:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
     fba:	85 e0       	ldi	r24, 0x05	; 5
     fbc:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
     fc0:	81 11       	cpse	r24, r1
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <varredura+0x60>
     fc4:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
     fc6:	84 e0       	ldi	r24, 0x04	; 4
     fc8:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
     fcc:	81 11       	cpse	r24, r1
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <varredura+0x6c>
     fd0:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
     fd2:	83 e0       	ldi	r24, 0x03	; 3
     fd4:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
     fd8:	81 11       	cpse	r24, r1
     fda:	01 c0       	rjmp	.+2      	; 0xfde <varredura+0x78>
     fdc:	c6 e3       	ldi	r28, 0x36	; 54
	if (!debounce(COL4 - 0)) tecla = 'B'; 
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
     fe4:	81 11       	cpse	r24, r1
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <varredura+0x84>
     fe8:	c2 e4       	ldi	r28, 0x42	; 66
    PORTB |= (1 << LIN2); // Desativa LIN2
     fea:	85 b1       	in	r24, 0x05	; 5
     fec:	81 60       	ori	r24, 0x01	; 1
     fee:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
     ff0:	8b b1       	in	r24, 0x0b	; 11
     ff2:	8f 77       	andi	r24, 0x7F	; 127
     ff4:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
     ff6:	85 e0       	ldi	r24, 0x05	; 5
     ff8:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
     ffc:	81 11       	cpse	r24, r1
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <varredura+0x9c>
    1000:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
    1002:	84 e0       	ldi	r24, 0x04	; 4
    1004:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
    1008:	81 11       	cpse	r24, r1
    100a:	01 c0       	rjmp	.+2      	; 0x100e <varredura+0xa8>
    100c:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
    1014:	81 11       	cpse	r24, r1
    1016:	01 c0       	rjmp	.+2      	; 0x101a <varredura+0xb4>
    1018:	c9 e3       	ldi	r28, 0x39	; 57
	if (!debounce(COL4 - 0)) tecla = 'C'; 
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
    1020:	81 11       	cpse	r24, r1
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <varredura+0xc0>
    1024:	c3 e4       	ldi	r28, 0x43	; 67
    PORTD |= (1 << LIN3); // Desativa LIN3
    1026:	8b b1       	in	r24, 0x0b	; 11
    1028:	80 68       	ori	r24, 0x80	; 128
    102a:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
    102c:	8b b1       	in	r24, 0x0b	; 11
    102e:	8f 7b       	andi	r24, 0xBF	; 191
    1030:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
    1032:	85 e0       	ldi	r24, 0x05	; 5
    1034:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
    1038:	81 11       	cpse	r24, r1
    103a:	01 c0       	rjmp	.+2      	; 0x103e <varredura+0xd8>
    103c:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
    103e:	84 e0       	ldi	r24, 0x04	; 4
    1040:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
    1044:	81 11       	cpse	r24, r1
    1046:	01 c0       	rjmp	.+2      	; 0x104a <varredura+0xe4>
    1048:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
    1050:	81 11       	cpse	r24, r1
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <varredura+0xf0>
    1054:	c3 e2       	ldi	r28, 0x23	; 35
	if (!debounce(COL4 - 0)) tecla = 'D'; 
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	0e 94 93 07 	call	0xf26	; 0xf26 <debounce>
    105c:	81 11       	cpse	r24, r1
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <varredura+0xfc>
    1060:	c4 e4       	ldi	r28, 0x44	; 68
    PORTD |= (1 << LIN4); // Desativa LIN4
    1062:	8b b1       	in	r24, 0x0b	; 11
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
    1068:	8c 2f       	mov	r24, r28
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    106e:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    1070:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    1072:	85 e0       	ldi	r24, 0x05	; 5
    1074:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    1076:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    107a:	81 ef       	ldi	r24, 0xF1	; 241
    107c:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	08 c0       	rjmp	.+16     	; 0x1094 <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    1084:	a9 9b       	sbis	0x15, 1	; 21
    1086:	fe cf       	rjmp	.-4      	; 0x1084 <delay1ms+0x16>
		TCNT0 = 241;
    1088:	91 ef       	ldi	r25, 0xF1	; 241
    108a:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    1090:	2f 5f       	subi	r18, 0xFF	; 255
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	24 17       	cp	r18, r20
    1096:	35 07       	cpc	r19, r21
    1098:	ac f3       	brlt	.-22     	; 0x1084 <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    109a:	15 bc       	out	0x25, r1	; 37
    109c:	08 95       	ret

0000109e <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    109e:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    10a0:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    10a6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    10aa:	85 ef       	ldi	r24, 0xF5	; 245
    10ac:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    10b4:	a9 9b       	sbis	0x15, 1	; 21
    10b6:	fe cf       	rjmp	.-4      	; 0x10b4 <delay1us+0x16>
		TCNT0 = 245;
    10b8:	95 ef       	ldi	r25, 0xF5	; 245
    10ba:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    10bc:	95 b3       	in	r25, 0x15	; 21
    10be:	92 60       	ori	r25, 0x02	; 2
    10c0:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	24 17       	cp	r18, r20
    10c8:	35 07       	cpc	r19, r21
    10ca:	a4 f3       	brlt	.-24     	; 0x10b4 <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    10cc:	15 bc       	out	0x25, r1	; 37
    10ce:	08 95       	ret

000010d0 <__tablejump2__>:
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	05 90       	lpm	r0, Z+
    10d6:	f4 91       	lpm	r31, Z
    10d8:	e0 2d       	mov	r30, r0
    10da:	09 94       	ijmp

000010dc <strcpy>:
    10dc:	fb 01       	movw	r30, r22
    10de:	dc 01       	movw	r26, r24
    10e0:	01 90       	ld	r0, Z+
    10e2:	0d 92       	st	X+, r0
    10e4:	00 20       	and	r0, r0
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <strcpy+0x4>
    10e8:	08 95       	ret

000010ea <strncpy>:
    10ea:	fb 01       	movw	r30, r22
    10ec:	dc 01       	movw	r26, r24
    10ee:	41 50       	subi	r20, 0x01	; 1
    10f0:	50 40       	sbci	r21, 0x00	; 0
    10f2:	48 f0       	brcs	.+18     	; 0x1106 <strncpy+0x1c>
    10f4:	01 90       	ld	r0, Z+
    10f6:	0d 92       	st	X+, r0
    10f8:	00 20       	and	r0, r0
    10fa:	c9 f7       	brne	.-14     	; 0x10ee <strncpy+0x4>
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <strncpy+0x16>
    10fe:	1d 92       	st	X+, r1
    1100:	41 50       	subi	r20, 0x01	; 1
    1102:	50 40       	sbci	r21, 0x00	; 0
    1104:	e0 f7       	brcc	.-8      	; 0x10fe <strncpy+0x14>
    1106:	08 95       	ret

00001108 <strstr>:
    1108:	fb 01       	movw	r30, r22
    110a:	51 91       	ld	r21, Z+
    110c:	55 23       	and	r21, r21
    110e:	a9 f0       	breq	.+42     	; 0x113a <strstr+0x32>
    1110:	bf 01       	movw	r22, r30
    1112:	dc 01       	movw	r26, r24
    1114:	4d 91       	ld	r20, X+
    1116:	45 17       	cp	r20, r21
    1118:	41 11       	cpse	r20, r1
    111a:	e1 f7       	brne	.-8      	; 0x1114 <strstr+0xc>
    111c:	59 f4       	brne	.+22     	; 0x1134 <strstr+0x2c>
    111e:	cd 01       	movw	r24, r26
    1120:	01 90       	ld	r0, Z+
    1122:	00 20       	and	r0, r0
    1124:	49 f0       	breq	.+18     	; 0x1138 <strstr+0x30>
    1126:	4d 91       	ld	r20, X+
    1128:	40 15       	cp	r20, r0
    112a:	41 11       	cpse	r20, r1
    112c:	c9 f3       	breq	.-14     	; 0x1120 <strstr+0x18>
    112e:	fb 01       	movw	r30, r22
    1130:	41 11       	cpse	r20, r1
    1132:	ef cf       	rjmp	.-34     	; 0x1112 <strstr+0xa>
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	08 95       	ret

0000113c <_exit>:
    113c:	f8 94       	cli

0000113e <__stop_program>:
    113e:	ff cf       	rjmp	.-2      	; 0x113e <__stop_program>
