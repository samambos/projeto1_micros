
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d2  00800100  0000132e  000013c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000132e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  008002d2  008002d2  00001594  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d54  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee1  00000000  00000000  00004540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b9  00000000  00000000  00005421  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  000069dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b9  00000000  00000000  00006fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001693  00000000  00000000  00007975  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00009008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_11>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__vector_18>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	c7 02       	muls	r28, r23
      6a:	d9 02       	muls	r29, r25
      6c:	e2 02       	muls	r30, r18
      6e:	eb 02       	muls	r30, r27
      70:	1c 03       	fmul	r17, r20
      72:	5f 03       	fmul	r21, r23
      74:	63 03       	mulsu	r22, r19
      76:	77 03       	mulsu	r23, r23

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	12 e0       	ldi	r17, 0x02	; 2
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	ee e2       	ldi	r30, 0x2E	; 46
      8c:	f3 e1       	ldi	r31, 0x13	; 19
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a2 3d       	cpi	r26, 0xD2	; 210
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	23 e0       	ldi	r18, 0x03	; 3
      9c:	a2 ed       	ldi	r26, 0xD2	; 210
      9e:	b2 e0       	ldi	r27, 0x02	; 2
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a4 36       	cpi	r26, 0x64	; 100
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 9c 02 	call	0x538	; 0x538 <main>
      ae:	0c 94 95 09 	jmp	0x132a	; 0x132a <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <mensagem_Inicial>:
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	51 e0       	ldi	r21, 0x01	; 1
      ba:	63 e0       	ldi	r22, 0x03	; 3
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
      c2:	4b e0       	ldi	r20, 0x0B	; 11
      c4:	51 e0       	ldi	r21, 0x01	; 1
      c6:	61 e0       	ldi	r22, 0x01	; 1
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
      ce:	88 eb       	ldi	r24, 0xB8	; 184
      d0:	9b e0       	ldi	r25, 0x0B	; 11
      d2:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
      d6:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
      da:	4a e1       	ldi	r20, 0x1A	; 26
      dc:	51 e0       	ldi	r21, 0x01	; 1
      de:	62 e0       	ldi	r22, 0x02	; 2
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
      e6:	48 e2       	ldi	r20, 0x28	; 40
      e8:	51 e0       	ldi	r21, 0x01	; 1
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
      f2:	08 95       	ret

000000f4 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      f4:	cf 93       	push	r28
      f6:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      f8:	88 b1       	in	r24, 0x08	; 8
      fa:	80 7f       	andi	r24, 0xF0	; 240
      fc:	9c 2f       	mov	r25, r28
      fe:	92 95       	swap	r25
     100:	9f 70       	andi	r25, 0x0F	; 15
     102:	89 2b       	or	r24, r25
     104:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
     106:	88 b1       	in	r24, 0x08	; 8
     108:	8f 7d       	andi	r24, 0xDF	; 223
     10a:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
     10c:	88 b1       	in	r24, 0x08	; 8
     10e:	80 61       	ori	r24, 0x10	; 16
     110:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     112:	88 b1       	in	r24, 0x08	; 8
     114:	8f 7e       	andi	r24, 0xEF	; 239
     116:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
     118:	84 e6       	ldi	r24, 0x64	; 100
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 32 09 	call	0x1264	; 0x1264 <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
     120:	88 b1       	in	r24, 0x08	; 8
     122:	80 7f       	andi	r24, 0xF0	; 240
     124:	cf 70       	andi	r28, 0x0F	; 15
     126:	c8 2b       	or	r28, r24
     128:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     12a:	88 b1       	in	r24, 0x08	; 8
     12c:	80 61       	ori	r24, 0x10	; 16
     12e:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     130:	88 b1       	in	r24, 0x08	; 8
     132:	8f 7e       	andi	r24, 0xEF	; 239
     134:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
}
     13e:	cf 91       	pop	r28
     140:	08 95       	ret

00000142 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     146:	8a e0       	ldi	r24, 0x0A	; 10
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     154:	88 e2       	ldi	r24, 0x28	; 40
     156:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     15a:	8c e0       	ldi	r24, 0x0C	; 12
     15c:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     160:	86 e0       	ldi	r24, 0x06	; 6
     162:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
     16c:	08 95       	ret

0000016e <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     174:	80 e8       	ldi	r24, 0x80	; 128
     176:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
     17a:	08 95       	ret

0000017c <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	ec 01       	movw	r28, r24
	while(*texto) {
     182:	23 c0       	rjmp	.+70     	; 0x1ca <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     184:	98 b1       	in	r25, 0x08	; 8
     186:	90 7f       	andi	r25, 0xF0	; 240
     188:	82 95       	swap	r24
     18a:	8f 70       	andi	r24, 0x0F	; 15
     18c:	89 2b       	or	r24, r25
     18e:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     190:	88 b1       	in	r24, 0x08	; 8
     192:	80 62       	ori	r24, 0x20	; 32
     194:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     196:	88 b1       	in	r24, 0x08	; 8
     198:	80 61       	ori	r24, 0x10	; 16
     19a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	8f 7e       	andi	r24, 0xEF	; 239
     1a0:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     1a2:	88 ec       	ldi	r24, 0xC8	; 200
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 32 09 	call	0x1264	; 0x1264 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     1aa:	98 b1       	in	r25, 0x08	; 8
     1ac:	89 91       	ld	r24, Y+
     1ae:	90 7f       	andi	r25, 0xF0	; 240
     1b0:	8f 70       	andi	r24, 0x0F	; 15
     1b2:	89 2b       	or	r24, r25
     1b4:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     1b6:	88 b1       	in	r24, 0x08	; 8
     1b8:	80 61       	ori	r24, 0x10	; 16
     1ba:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     1bc:	88 b1       	in	r24, 0x08	; 8
     1be:	8f 7e       	andi	r24, 0xEF	; 239
     1c0:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1ca:	88 81       	ld	r24, Y
     1cc:	81 11       	cpse	r24, r1
     1ce:	da cf       	rjmp	.-76     	; 0x184 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1dc:	81 11       	cpse	r24, r1
     1de:	08 c0       	rjmp	.+16     	; 0x1f0 <LCD_Escrever_Linha+0x1a>
     1e0:	60 31       	cpi	r22, 0x10	; 16
     1e2:	30 f4       	brcc	.+12     	; 0x1f0 <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1e4:	86 2f       	mov	r24, r22
     1e6:	8f 70       	andi	r24, 0x0F	; 15
     1e8:	80 68       	ori	r24, 0x80	; 128
     1ea:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
     1ee:	09 c0       	rjmp	.+18     	; 0x202 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	39 f4       	brne	.+14     	; 0x202 <LCD_Escrever_Linha+0x2c>
     1f4:	60 31       	cpi	r22, 0x10	; 16
     1f6:	28 f4       	brcc	.+10     	; 0x202 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1f8:	86 2f       	mov	r24, r22
     1fa:	8f 70       	andi	r24, 0x0F	; 15
     1fc:	80 6c       	ori	r24, 0xC0	; 192
     1fe:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     202:	ce 01       	movw	r24, r28
     204:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     208:	80 e8       	ldi	r24, 0x80	; 128
     20a:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <configurar_timer>:
void enviar_confirmacao_operacional();

// Configuração do Timer para interrupção periódica
void configurar_timer() {
	// Configurar o Timer1 para gerar interrupção a cada 1ms
	TCCR1A = 0; // Modo normal
     214:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // CTC mode, prescaler 64
     218:	8b e0       	ldi	r24, 0x0B	; 11
     21a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz/64/250 = 1ms)
     21e:	8a ef       	ldi	r24, 0xFA	; 250
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     226:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A); // Habilitar interrupção por comparação
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     230:	08 95       	ret

00000232 <enviar_confirmacao_operacional>:
		timer_count = 0;
	}
}

// Função para enviar a mensagem de confirmação operacional
void enviar_confirmacao_operacional() {
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	00 d0       	rcall	.+0      	; 0x238 <enviar_confirmacao_operacional+0x6>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
	char confirmacao[2];
	confirmacao[0]='C';
     23c:	83 e4       	ldi	r24, 0x43	; 67
     23e:	89 83       	std	Y+1, r24	; 0x01
	confirmacao[1]='O';
     240:	8f e4       	ldi	r24, 0x4F	; 79
     242:	8a 83       	std	Y+2, r24	; 0x02
	SerialEnviaChars(2, confirmacao);
     244:	be 01       	movw	r22, r28
     246:	6f 5f       	subi	r22, 0xFF	; 255
     248:	7f 4f       	sbci	r23, 0xFF	; 255
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 66 06 	call	0xccc	; 0xccc <SerialEnviaChars>
}
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <__vector_11>:
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // CTC mode, prescaler 64
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz/64/250 = 1ms)
	TIMSK1 = (1 << OCIE1A); // Habilitar interrupção por comparação
}

ISR(TIMER1_COMPA_vect) {
     25c:	1f 92       	push	r1
     25e:	0f 92       	push	r0
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	0f 92       	push	r0
     264:	11 24       	eor	r1, r1
     266:	2f 93       	push	r18
     268:	3f 93       	push	r19
     26a:	4f 93       	push	r20
     26c:	5f 93       	push	r21
     26e:	6f 93       	push	r22
     270:	7f 93       	push	r23
     272:	8f 93       	push	r24
     274:	9f 93       	push	r25
     276:	af 93       	push	r26
     278:	bf 93       	push	r27
     27a:	ef 93       	push	r30
     27c:	ff 93       	push	r31
	timer_count++;
     27e:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <__data_end>
     282:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <__data_end+0x1>
     286:	a0 91 d4 02 	lds	r26, 0x02D4	; 0x8002d4 <__data_end+0x2>
     28a:	b0 91 d5 02 	lds	r27, 0x02D5	; 0x8002d5 <__data_end+0x3>
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	a1 1d       	adc	r26, r1
     292:	b1 1d       	adc	r27, r1
     294:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <__data_end>
     298:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <__data_end+0x1>
     29c:	a0 93 d4 02 	sts	0x02D4, r26	; 0x8002d4 <__data_end+0x2>
     2a0:	b0 93 d5 02 	sts	0x02D5, r27	; 0x8002d5 <__data_end+0x3>
	if (timer_count >= INTERVALO_CONFIRMACAO) {
     2a4:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <__data_end>
     2a8:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <__data_end+0x1>
     2ac:	a0 91 d4 02 	lds	r26, 0x02D4	; 0x8002d4 <__data_end+0x2>
     2b0:	b0 91 d5 02 	lds	r27, 0x02D5	; 0x8002d5 <__data_end+0x3>
     2b4:	80 33       	cpi	r24, 0x30	; 48
     2b6:	95 47       	sbci	r25, 0x75	; 117
     2b8:	a1 05       	cpc	r26, r1
     2ba:	b1 05       	cpc	r27, r1
     2bc:	50 f0       	brcs	.+20     	; 0x2d2 <__vector_11+0x76>
		enviar_confirmacao_operacional();
     2be:	0e 94 19 01 	call	0x232	; 0x232 <enviar_confirmacao_operacional>
		timer_count = 0;
     2c2:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <__data_end>
     2c6:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <__data_end+0x1>
     2ca:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <__data_end+0x2>
     2ce:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <__data_end+0x3>
	}
}
     2d2:	ff 91       	pop	r31
     2d4:	ef 91       	pop	r30
     2d6:	bf 91       	pop	r27
     2d8:	af 91       	pop	r26
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	7f 91       	pop	r23
     2e0:	6f 91       	pop	r22
     2e2:	5f 91       	pop	r21
     2e4:	4f 91       	pop	r20
     2e6:	3f 91       	pop	r19
     2e8:	2f 91       	pop	r18
     2ea:	0f 90       	pop	r0
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	0f 90       	pop	r0
     2f0:	1f 90       	pop	r1
     2f2:	18 95       	reti

000002f4 <ler_codigo_aluno>:
	SerialEnviaChars(2, confirmacao);
}


// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	00 d0       	rcall	.+0      	; 0x302 <ler_codigo_aluno+0xe>
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
     308:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
     30c:	47 e3       	ldi	r20, 0x37	; 55
     30e:	51 e0       	ldi	r21, 0x01	; 1
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     318:	46 e4       	ldi	r20, 0x46	; 70
     31a:	51 e0       	ldi	r21, 0x01	; 1
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
}


// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
	int pos = 0;
     324:	00 e0       	ldi	r16, 0x00	; 0
     326:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     328:	1d c0       	rjmp	.+58     	; 0x364 <ler_codigo_aluno+0x70>
		if (isBlocked()) return;
     32a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     32e:	89 2b       	or	r24, r25
     330:	f1 f4       	brne	.+60     	; 0x36e <ler_codigo_aluno+0x7a>
		tecla = varredura();
     332:	0e 94 96 08 	call	0x112c	; 0x112c <varredura>
		if (tecla >= '0' && tecla <= '9') {
     336:	90 ed       	ldi	r25, 0xD0	; 208
     338:	98 0f       	add	r25, r24
     33a:	9a 30       	cpi	r25, 0x0A	; 10
     33c:	98 f4       	brcc	.+38     	; 0x364 <ler_codigo_aluno+0x70>
			codigo[pos] = tecla;
     33e:	f7 01       	movw	r30, r14
     340:	e0 0f       	add	r30, r16
     342:	f1 1f       	adc	r31, r17
     344:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
     346:	89 83       	std	Y+1, r24	; 0x01
     348:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
     34a:	ae 01       	movw	r20, r28
     34c:	4f 5f       	subi	r20, 0xFF	; 255
     34e:	5f 4f       	sbci	r21, 0xFF	; 255
     350:	60 2f       	mov	r22, r16
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			pos++;
     358:	0f 5f       	subi	r16, 0xFF	; 255
     35a:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     35c:	88 ec       	ldi	r24, 0xC8	; 200
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     364:	06 30       	cpi	r16, 0x06	; 6
     366:	11 05       	cpc	r17, r1
     368:	04 f3       	brlt	.-64     	; 0x32a <ler_codigo_aluno+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	codigo[6] = '\0';
     36a:	f7 01       	movw	r30, r14
     36c:	16 82       	std	Z+6, r1	; 0x06
}
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	08 95       	ret

00000380 <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	00 d0       	rcall	.+0      	; 0x38e <ler_senha+0xe>
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
     394:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite senha:");
     398:	4d e4       	ldi	r20, 0x4D	; 77
     39a:	51 e0       	ldi	r21, 0x01	; 1
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     3a4:	46 e4       	ldi	r20, 0x46	; 70
     3a6:	51 e0       	ldi	r21, 0x01	; 1
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
	int pos = 0;
     3b0:	00 e0       	ldi	r16, 0x00	; 0
     3b2:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     3b4:	1e c0       	rjmp	.+60     	; 0x3f2 <ler_senha+0x72>
		if (isBlocked()) return;
     3b6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     3ba:	89 2b       	or	r24, r25
     3bc:	f9 f4       	brne	.+62     	; 0x3fc <ler_senha+0x7c>
		tecla = varredura();
     3be:	0e 94 96 08 	call	0x112c	; 0x112c <varredura>
		if (tecla >= '0' && tecla <= '9') {
     3c2:	90 ed       	ldi	r25, 0xD0	; 208
     3c4:	98 0f       	add	r25, r24
     3c6:	9a 30       	cpi	r25, 0x0A	; 10
     3c8:	a0 f4       	brcc	.+40     	; 0x3f2 <ler_senha+0x72>
			senha[pos] = tecla;
     3ca:	f7 01       	movw	r30, r14
     3cc:	e0 0f       	add	r30, r16
     3ce:	f1 1f       	adc	r31, r17
     3d0:	80 83       	st	Z, r24
			char temp[2] = { '*', '\0' };
     3d2:	8a e2       	ldi	r24, 0x2A	; 42
     3d4:	89 83       	std	Y+1, r24	; 0x01
     3d6:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
     3d8:	ae 01       	movw	r20, r28
     3da:	4f 5f       	subi	r20, 0xFF	; 255
     3dc:	5f 4f       	sbci	r21, 0xFF	; 255
     3de:	60 2f       	mov	r22, r16
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			pos++;
     3e6:	0f 5f       	subi	r16, 0xFF	; 255
     3e8:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     3ea:	88 ec       	ldi	r24, 0xC8	; 200
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     3f2:	06 30       	cpi	r16, 0x06	; 6
     3f4:	11 05       	cpc	r17, r1
     3f6:	fc f2       	brlt	.-66     	; 0x3b6 <ler_senha+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	senha[6] = '\0';
     3f8:	f7 01       	movw	r30, r14
     3fa:	16 82       	std	Z+6, r1	; 0x06
}
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	08 95       	ret

0000040e <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	ae 97       	sbiw	r28, 0x2e	; 46
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     422:	dc 01       	movw	r26, r24
     424:	0d 90       	ld	r0, X+
     426:	00 20       	and	r0, r0
     428:	e9 f7       	brne	.-6      	; 0x424 <validar_codigo_aluno+0x16>
     42a:	11 97       	sbiw	r26, 0x01	; 1
     42c:	a8 1b       	sub	r26, r24
     42e:	b9 0b       	sbc	r27, r25
     430:	16 97       	sbiw	r26, 0x06	; 6
     432:	09 f0       	breq	.+2      	; 0x436 <validar_codigo_aluno+0x28>
     434:	50 c0       	rjmp	.+160    	; 0x4d6 <validar_codigo_aluno+0xc8>
     436:	db 01       	movw	r26, r22
     438:	0d 90       	ld	r0, X+
     43a:	00 20       	and	r0, r0
     43c:	e9 f7       	brne	.-6      	; 0x438 <validar_codigo_aluno+0x2a>
     43e:	11 97       	sbiw	r26, 0x01	; 1
     440:	a6 1b       	sub	r26, r22
     442:	b7 0b       	sbc	r27, r23
     444:	16 97       	sbiw	r26, 0x06	; 6
     446:	09 f0       	breq	.+2      	; 0x44a <validar_codigo_aluno+0x3c>
     448:	49 c0       	rjmp	.+146    	; 0x4dc <validar_codigo_aluno+0xce>
     44a:	fc 01       	movw	r30, r24

	char mensagem[14];
	mensagem[0] = 'C';
     44c:	83 e4       	ldi	r24, 0x43	; 67
     44e:	89 83       	std	Y+1, r24	; 0x01
	mensagem[1] = 'E';
     450:	85 e4       	ldi	r24, 0x45	; 69
     452:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(&mensagem[2], codigo, 6);
     454:	86 e0       	ldi	r24, 0x06	; 6
     456:	de 01       	movw	r26, r28
     458:	13 96       	adiw	r26, 0x03	; 3
     45a:	01 90       	ld	r0, Z+
     45c:	0d 92       	st	X+, r0
     45e:	8a 95       	dec	r24
     460:	e1 f7       	brne	.-8      	; 0x45a <validar_codigo_aluno+0x4c>
	memcpy(&mensagem[8], senha, 6);
     462:	86 e0       	ldi	r24, 0x06	; 6
     464:	fb 01       	movw	r30, r22
     466:	de 01       	movw	r26, r28
     468:	19 96       	adiw	r26, 0x09	; 9
     46a:	01 90       	ld	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	8a 95       	dec	r24
     470:	e1 f7       	brne	.-8      	; 0x46a <validar_codigo_aluno+0x5c>

	SerialEnviaChars(14, mensagem);
     472:	be 01       	movw	r22, r28
     474:	6f 5f       	subi	r22, 0xFF	; 255
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	8e e0       	ldi	r24, 0x0E	; 14
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 66 06 	call	0xccc	; 0xccc <SerialEnviaChars>

	char resposta[32];
	memset(resposta, 0, sizeof(resposta));
     480:	be 01       	movw	r22, r28
     482:	61 5f       	subi	r22, 0xF1	; 241
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	80 e2       	ldi	r24, 0x20	; 32
     488:	fb 01       	movw	r30, r22
     48a:	11 92       	st	Z+, r1
     48c:	8a 95       	dec	r24
     48e:	e9 f7       	brne	.-6      	; 0x48a <validar_codigo_aluno+0x7c>

	SerialRecebeChars(31, resposta);
     490:	8f e1       	ldi	r24, 0x1F	; 31
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 0e 08 	call	0x101c	; 0x101c <SerialRecebeChars>

	LCD_limpar();
     498:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
	LCD_Escrever_Linha(0, 4, "Aguarde...");
     49c:	4b e5       	ldi	r20, 0x5B	; 91
     49e:	51 e0       	ldi	r21, 0x01	; 1
     4a0:	64 e0       	ldi	r22, 0x04	; 4
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	delay1ms(2000);
     4a8:	80 ed       	ldi	r24, 0xD0	; 208
     4aa:	97 e0       	ldi	r25, 0x07	; 7
     4ac:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
	LCD_limpar();
     4b0:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
     4b4:	8f 85       	ldd	r24, Y+15	; 0x0f
     4b6:	83 35       	cpi	r24, 0x53	; 83
     4b8:	a1 f4       	brne	.+40     	; 0x4e2 <validar_codigo_aluno+0xd4>
     4ba:	88 89       	ldd	r24, Y+16	; 0x10
     4bc:	85 34       	cpi	r24, 0x45	; 69
     4be:	a1 f4       	brne	.+40     	; 0x4e8 <validar_codigo_aluno+0xda>
		if (strstr(resposta, "Nao autorizado") != NULL) {
     4c0:	66 e6       	ldi	r22, 0x66	; 102
     4c2:	71 e0       	ldi	r23, 0x01	; 1
     4c4:	ce 01       	movw	r24, r28
     4c6:	0f 96       	adiw	r24, 0x0f	; 15
     4c8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <strstr>
     4cc:	89 2b       	or	r24, r25
     4ce:	79 f0       	breq	.+30     	; 0x4ee <validar_codigo_aluno+0xe0>
			return 0;
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <validar_codigo_aluno+0xe4>
	}
	senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0b c0       	rjmp	.+22     	; 0x4f2 <validar_codigo_aluno+0xe4>
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <validar_codigo_aluno+0xe4>
			return 0;
			} else {				
			return 1;
		}
	}
	return 0;
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <validar_codigo_aluno+0xe4>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <validar_codigo_aluno+0xe4>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
		if (strstr(resposta, "Nao autorizado") != NULL) {
			return 0;
			} else {				
			return 1;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
     4f2:	ae 96       	adiw	r28, 0x2e	; 46
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <aguardar_desbloqueio>:

void aguardar_desbloqueio() {
	LCD_limpar();
     504:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
     508:	45 e7       	ldi	r20, 0x75	; 117
     50a:	51 e0       	ldi	r21, 0x01	; 1
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
     514:	42 e8       	ldi	r20, 0x82	; 130
     516:	51 e0       	ldi	r21, 0x01	; 1
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	while (isBlocked()) {
     520:	04 c0       	rjmp	.+8      	; 0x52a <aguardar_desbloqueio+0x26>
		delay1ms(200);
     522:	88 ec       	ldi	r24, 0xC8	; 200
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>

void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
	while (isBlocked()) {
     52a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     52e:	89 2b       	or	r24, r25
     530:	c1 f7       	brne	.-16     	; 0x522 <aguardar_desbloqueio+0x1e>
		delay1ms(200);
	}
	LCD_limpar();
     532:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     536:	08 95       	ret

00000538 <main>:
}

int main(void) {
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	2e 97       	sbiw	r28, 0x0e	; 14
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     54c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <prepara_teclado>
	LCD_iniciar();
     550:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_iniciar>
	initUART();
     554:	0e 94 57 06 	call	0xcae	; 0xcae <initUART>
	configurar_timer();
     558:	0e 94 0a 01 	call	0x214	; 0x214 <configurar_timer>
	sei(); // Habilitar interrupções globais
     55c:	78 94       	sei
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     55e:	00 e0       	ldi	r16, 0x00	; 0
     560:	07 c0       	rjmp	.+14     	; 0x570 <main+0x38>
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     562:	01 e0       	ldi	r16, 0x01	; 1
     564:	05 c0       	rjmp	.+10     	; 0x570 <main+0x38>
			break;

			case ESTADO_CODIGO:
			ler_codigo_aluno(codigo_aluno);
			if (!isBlocked()) estado = ESTADO_SENHA;
     566:	02 e0       	ldi	r16, 0x02	; 2
     568:	03 c0       	rjmp	.+6      	; 0x570 <main+0x38>
			break;

			case ESTADO_SENHA:
			ler_senha(senha_aluno);
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     56a:	03 e0       	ldi	r16, 0x03	; 3
     56c:	01 c0       	rjmp	.+2      	; 0x570 <main+0x38>
				LCD_Escrever_Linha(0, 0, "VOLTANDO...");
				delay1ms(1000);
				estado = ESTADO_TELA_INICIAL;
				} else {
				switch (tecla) {
					case '1': estado = ESTADO_SAQUE; break;
     56e:	05 e0       	ldi	r16, 0x05	; 5
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		if (isBlocked()) {
     570:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     574:	89 2b       	or	r24, r25
     576:	21 f0       	breq	.+8      	; 0x580 <main+0x48>
			aguardar_desbloqueio();
     578:	0e 94 82 02 	call	0x504	; 0x504 <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     57c:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     57e:	f8 cf       	rjmp	.-16     	; 0x570 <main+0x38>
		}

		switch (estado) {
     580:	80 2f       	mov	r24, r16
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	fc 01       	movw	r30, r24
     586:	ec 5c       	subi	r30, 0xCC	; 204
     588:	ff 4f       	sbci	r31, 0xFF	; 255
     58a:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			LCD_limpar();
     58e:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
			mensagem_Inicial();
     592:	0e 94 5b 00 	call	0xb6	; 0xb6 <mensagem_Inicial>
			while (varredura() == 0) {
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <main+0x68>
				if (isBlocked()) break;
     598:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     59c:	89 2b       	or	r24, r25
     59e:	21 f4       	brne	.+8      	; 0x5a8 <main+0x70>

		switch (estado) {
			case ESTADO_TELA_INICIAL:
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     5a0:	0e 94 96 08 	call	0x112c	; 0x112c <varredura>
     5a4:	88 23       	and	r24, r24
     5a6:	c1 f3       	breq	.-16     	; 0x598 <main+0x60>
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     5a8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     5ac:	89 2b       	or	r24, r25
     5ae:	c9 f2       	breq	.-78     	; 0x562 <main+0x2a>
     5b0:	df cf       	rjmp	.-66     	; 0x570 <main+0x38>
			break;

			case ESTADO_CODIGO:
			ler_codigo_aluno(codigo_aluno);
     5b2:	ce 01       	movw	r24, r28
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <ler_codigo_aluno>
			if (!isBlocked()) estado = ESTADO_SENHA;
     5ba:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     5be:	89 2b       	or	r24, r25
     5c0:	91 f2       	breq	.-92     	; 0x566 <main+0x2e>
     5c2:	d6 cf       	rjmp	.-84     	; 0x570 <main+0x38>
			break;

			case ESTADO_SENHA:
			ler_senha(senha_aluno);
     5c4:	ce 01       	movw	r24, r28
     5c6:	08 96       	adiw	r24, 0x08	; 8
     5c8:	0e 94 c0 01 	call	0x380	; 0x380 <ler_senha>
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     5cc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     5d0:	89 2b       	or	r24, r25
     5d2:	59 f2       	breq	.-106    	; 0x56a <main+0x32>
     5d4:	cd cf       	rjmp	.-102    	; 0x570 <main+0x38>
			break;

			case ESTADO_VALIDACAO:
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
     5d6:	be 01       	movw	r22, r28
     5d8:	68 5f       	subi	r22, 0xF8	; 248
     5da:	7f 4f       	sbci	r23, 0xFF	; 255
     5dc:	ce 01       	movw	r24, r28
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	0e 94 07 02 	call	0x40e	; 0x40e <validar_codigo_aluno>
     5e4:	89 2b       	or	r24, r25
     5e6:	a1 f0       	breq	.+40     	; 0x610 <main+0xd8>
				LCD_limpar();
     5e8:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "BEM VINDO(A)!");
     5ec:	4f e8       	ldi	r20, 0x8F	; 143
     5ee:	51 e0       	ldi	r21, 0x01	; 1
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "PROCESSANDO...");
     5f8:	4d e9       	ldi	r20, 0x9D	; 157
     5fa:	51 e0       	ldi	r21, 0x01	; 1
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				delay1ms(2000);
     604:	80 ed       	ldi	r24, 0xD0	; 208
     606:	97 e0       	ldi	r25, 0x07	; 7
     608:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
				estado = ESTADO_MENU;
     60c:	04 e0       	ldi	r16, 0x04	; 4
     60e:	b0 cf       	rjmp	.-160    	; 0x570 <main+0x38>
				} else {
				LCD_limpar();
     610:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "CONTA INVALIDA!");
     614:	4c ea       	ldi	r20, 0xAC	; 172
     616:	51 e0       	ldi	r21, 0x01	; 1
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "TENTE NOVAMENTE");
     620:	4c eb       	ldi	r20, 0xBC	; 188
     622:	51 e0       	ldi	r21, 0x01	; 1
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				delay1ms(2000);
     62c:	80 ed       	ldi	r24, 0xD0	; 208
     62e:	97 e0       	ldi	r25, 0x07	; 7
     630:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	9c cf       	rjmp	.-200    	; 0x570 <main+0x38>
			}
			break;

			case ESTADO_MENU:
			LCD_limpar();
     638:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
			indice_menu=0;
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     63c:	4c ec       	ldi	r20, 0xCC	; 204
     63e:	51 e0       	ldi	r21, 0x01	; 1
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes)
			LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     648:	44 ed       	ldi	r20, 0xD4	; 212
     64a:	51 e0       	ldi	r21, 0x01	; 1
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     654:	04 c0       	rjmp	.+8      	; 0x65e <main+0x126>
			else
			LCD_Escrever_Linha(1, 0, " ");

			while ((tecla = varredura()) == 0) {
				if (isBlocked()) break;
     656:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     65a:	89 2b       	or	r24, r25
     65c:	29 f4       	brne	.+10     	; 0x668 <main+0x130>
			if (indice_menu + 1 < total_opcoes)
			LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
			else
			LCD_Escrever_Linha(1, 0, " ");

			while ((tecla = varredura()) == 0) {
     65e:	0e 94 96 08 	call	0x112c	; 0x112c <varredura>
     662:	18 2f       	mov	r17, r24
     664:	88 23       	and	r24, r24
     666:	b9 f3       	breq	.-18     	; 0x656 <main+0x11e>
				if (isBlocked()) break;
			}

			delay1ms(300); // Debounce delay
     668:	8c e2       	ldi	r24, 0x2C	; 44
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>

			if (tecla == 'B' && indice_menu < total_opcoes - 2) {
     670:	12 34       	cpi	r17, 0x42	; 66
     672:	09 f4       	brne	.+2      	; 0x676 <main+0x13e>
     674:	7d cf       	rjmp	.-262    	; 0x570 <main+0x38>
				indice_menu++;
				} else if (tecla == 'A' && indice_menu > 0) {
				indice_menu--;
				} else if (tecla == '*') {
     676:	1a 32       	cpi	r17, 0x2A	; 42
     678:	71 f4       	brne	.+28     	; 0x696 <main+0x15e>
				LCD_limpar();
     67a:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "VOLTANDO...");
     67e:	40 ee       	ldi	r20, 0xE0	; 224
     680:	51 e0       	ldi	r21, 0x01	; 1
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				delay1ms(1000);
     68a:	88 ee       	ldi	r24, 0xE8	; 232
     68c:	93 e0       	ldi	r25, 0x03	; 3
     68e:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     692:	00 e0       	ldi	r16, 0x00	; 0
     694:	6d cf       	rjmp	.-294    	; 0x570 <main+0x38>
				} else {
				switch (tecla) {
     696:	12 33       	cpi	r17, 0x32	; 50
     698:	51 f0       	breq	.+20     	; 0x6ae <main+0x176>
     69a:	20 f4       	brcc	.+8      	; 0x6a4 <main+0x16c>
     69c:	11 33       	cpi	r17, 0x31	; 49
     69e:	09 f4       	brne	.+2      	; 0x6a2 <main+0x16a>
     6a0:	66 cf       	rjmp	.-308    	; 0x56e <main+0x36>
     6a2:	66 cf       	rjmp	.-308    	; 0x570 <main+0x38>
     6a4:	13 33       	cpi	r17, 0x33	; 51
     6a6:	29 f0       	breq	.+10     	; 0x6b2 <main+0x17a>
     6a8:	14 33       	cpi	r17, 0x34	; 52
     6aa:	29 f0       	breq	.+10     	; 0x6b6 <main+0x17e>
     6ac:	61 cf       	rjmp	.-318    	; 0x570 <main+0x38>
					case '1': estado = ESTADO_SAQUE; break;
					case '2': estado = ESTADO_PAGAMENTO; break;
     6ae:	06 e0       	ldi	r16, 0x06	; 6
     6b0:	5f cf       	rjmp	.-322    	; 0x570 <main+0x38>
					case '3': estado = ESTADO_SALDO; break;
     6b2:	07 e0       	ldi	r16, 0x07	; 7
     6b4:	5d cf       	rjmp	.-326    	; 0x570 <main+0x38>
					case '4':
					finalizar_sessao(); 
     6b6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <finalizar_sessao>
					estado = ESTADO_TELA_INICIAL; 
     6ba:	00 e0       	ldi	r16, 0x00	; 0
					break;
     6bc:	59 cf       	rjmp	.-334    	; 0x570 <main+0x38>
				}
			}
			break;

			case ESTADO_SAQUE:
			realizar_saque();
     6be:	0e 94 ed 03 	call	0x7da	; 0x7da <realizar_saque>
			estado = ESTADO_MENU;
     6c2:	04 e0       	ldi	r16, 0x04	; 4
			break;
     6c4:	55 cf       	rjmp	.-342    	; 0x570 <main+0x38>

			case ESTADO_PAGAMENTO:
			LCD_limpar();
     6c6:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Pagamento");
     6ca:	46 ed       	ldi	r20, 0xD6	; 214
     6cc:	51 e0       	ldi	r21, 0x01	; 1
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
     6d6:	4c ee       	ldi	r20, 0xEC	; 236
     6d8:	51 e0       	ldi	r21, 0x01	; 1
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			delay1ms(2000);
     6e2:	80 ed       	ldi	r24, 0xD0	; 208
     6e4:	97 e0       	ldi	r25, 0x07	; 7
     6e6:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
			estado = ESTADO_MENU;
     6ea:	04 e0       	ldi	r16, 0x04	; 4
			break;
     6ec:	41 cf       	rjmp	.-382    	; 0x570 <main+0x38>

			case ESTADO_SALDO:
			consultar_saldo();
     6ee:	0e 94 db 04 	call	0x9b6	; 0x9b6 <consultar_saldo>
			estado = ESTADO_MENU;
     6f2:	04 e0       	ldi	r16, 0x04	; 4
			break;
     6f4:	3d cf       	rjmp	.-390    	; 0x570 <main+0x38>

000006f6 <enviar_mensagem_saque>:
		}
	}
}

// Função para enviar mensagem de saque
void enviar_mensagem_saque(const char* valor) {
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	bc 01       	movw	r22, r24
	mensagem[2] = (char)tamanho_valor; // Tamanho do valor como byte

	strncpy(&mensagem[3], valor, tamanho_valor);

	SerialEnviaChars(tamanho_mensagem, mensagem);
}
     70c:	ed b6       	in	r14, 0x3d	; 61
     70e:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de saque
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
     710:	fc 01       	movw	r30, r24
     712:	01 90       	ld	r0, Z+
     714:	00 20       	and	r0, r0
     716:	e9 f7       	brne	.-6      	; 0x712 <enviar_mensagem_saque+0x1c>
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	af 01       	movw	r20, r30
     71c:	48 1b       	sub	r20, r24
     71e:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3;
     720:	6a 01       	movw	r12, r20
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	c8 0e       	add	r12, r24
     726:	d1 1c       	adc	r13, r1

	char mensagem[tamanho_mensagem];
     728:	ed b7       	in	r30, 0x3d	; 61
     72a:	fe b7       	in	r31, 0x3e	; 62
     72c:	ec 19       	sub	r30, r12
     72e:	fd 09       	sbc	r31, r13
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	fe bf       	out	0x3e, r31	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	ed bf       	out	0x3d, r30	; 61
     73a:	0d b7       	in	r16, 0x3d	; 61
     73c:	1e b7       	in	r17, 0x3e	; 62
     73e:	0f 5f       	subi	r16, 0xFF	; 255
     740:	1f 4f       	sbci	r17, 0xFF	; 255
	mensagem[0] = 'C';
     742:	83 e4       	ldi	r24, 0x43	; 67
     744:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S';
     746:	83 e5       	ldi	r24, 0x53	; 83
     748:	f8 01       	movw	r30, r16
     74a:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor; // Tamanho do valor como byte
     74c:	42 83       	std	Z+2, r20	; 0x02

	strncpy(&mensagem[3], valor, tamanho_valor);
     74e:	8d b7       	in	r24, 0x3d	; 61
     750:	9e b7       	in	r25, 0x3e	; 62
     752:	04 96       	adiw	r24, 0x04	; 4
     754:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <strncpy>

	SerialEnviaChars(tamanho_mensagem, mensagem);
     758:	b8 01       	movw	r22, r16
     75a:	c6 01       	movw	r24, r12
     75c:	0e 94 66 06 	call	0xccc	; 0xccc <SerialEnviaChars>
}
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	fe be       	out	0x3e, r15	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	ed be       	out	0x3d, r14	; 61
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	08 95       	ret

0000077c <receber_resposta_servidor>:

// Função para receber resposta do servidor
char receber_resposta_servidor(void) {
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <receber_resposta_servidor+0x6>
     782:	00 d0       	rcall	.+0      	; 0x784 <receber_resposta_servidor+0x8>
     784:	1f 92       	push	r1
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
	char resposta[5]; // Suficiente para "SSO", "SSI", "SSE" + '\0'

	// Espera 3 bytes de resposta do servidor (ex: "SSO")
	// Idealmente, SerialRecebeChars também deveria verificar isBlocked() ou ter timeout
	SerialRecebeChars(3, resposta);
     78a:	be 01       	movw	r22, r28
     78c:	6f 5f       	subi	r22, 0xFF	; 255
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 0e 08 	call	0x101c	; 0x101c <SerialRecebeChars>
	resposta[3]='\0'; // Garante terminação nula
     798:	1c 82       	std	Y+4, r1	; 0x04

	LCD_limpar();
     79a:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, resposta); // Para debug, mostra a resposta crua
     79e:	ae 01       	movw	r20, r28
     7a0:	4f 5f       	subi	r20, 0xFF	; 255
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	delay1ms(2000); // Mostra a resposta por 2 segundos
     7ac:	80 ed       	ldi	r24, 0xD0	; 208
     7ae:	97 e0       	ldi	r25, 0x07	; 7
     7b0:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>

	if(resposta[0] == 'S' && resposta[1] == 'S') {
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	83 35       	cpi	r24, 0x53	; 83
     7b8:	29 f4       	brne	.+10     	; 0x7c4 <receber_resposta_servidor+0x48>
     7ba:	8a 81       	ldd	r24, Y+2	; 0x02
     7bc:	83 35       	cpi	r24, 0x53	; 83
     7be:	21 f4       	brne	.+8      	; 0x7c8 <receber_resposta_servidor+0x4c>
		return resposta[2]; // Retorna 'O' (Ok) ou 'I' (Insuficiente)
     7c0:	8b 81       	ldd	r24, Y+3	; 0x03
     7c2:	03 c0       	rjmp	.+6      	; 0x7ca <receber_resposta_servidor+0x4e>
	}

	return 'E'; // Retorna 'E' para Erro padrão
     7c4:	85 e4       	ldi	r24, 0x45	; 69
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <receber_resposta_servidor+0x4e>
     7c8:	85 e4       	ldi	r24, 0x45	; 69
}
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <realizar_saque>:
#include <string.h>
#include <stdio.h>
#include "timers.h"

// Função para realizar um saque
void realizar_saque(void) {
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	c2 5b       	subi	r28, 0xB2	; 178
     7e8:	d4 40       	sbci	r29, 0x04	; 4
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
     7f4:	fe 01       	movw	r30, r28
     7f6:	31 96       	adiw	r30, 0x01	; 1
     7f8:	80 eb       	ldi	r24, 0xB0	; 176
     7fa:	94 e0       	ldi	r25, 0x04	; 4
     7fc:	df 01       	movw	r26, r30
     7fe:	9c 01       	movw	r18, r24
     800:	1d 92       	st	X+, r1
     802:	21 50       	subi	r18, 0x01	; 1
     804:	30 40       	sbci	r19, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
	int pos = 0;
	char tecla;

	LCD_limpar();
     808:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
     80c:	4f ef       	ldi	r20, 0xFF	; 255
     80e:	51 e0       	ldi	r21, 0x01	; 1
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
     818:	4f e0       	ldi	r20, 0x0F	; 15
     81a:	52 e0       	ldi	r21, 0x02	; 2
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
#include "timers.h"

// Função para realizar um saque
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
     824:	00 e0       	ldi	r16, 0x00	; 0
     826:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		// Verifica bloqueio durante a entrada do valor
		if (isBlocked()) {
     828:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     82c:	89 2b       	or	r24, r25
     82e:	99 f0       	breq	.+38     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
			LCD_limpar();
     830:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     834:	42 e1       	ldi	r20, 0x12	; 18
     836:	52 e0       	ldi	r21, 0x02	; 2
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     840:	4f e1       	ldi	r20, 0x1F	; 31
     842:	52 e0       	ldi	r21, 0x02	; 2
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			delay1ms(2000);
     84c:	80 ed       	ldi	r24, 0xD0	; 208
     84e:	97 e0       	ldi	r25, 0x07	; 7
     850:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
			return; // Sai da função imediatamente
     854:	a4 c0       	rjmp	.+328    	; 0x99e <__stack+0x9f>
		}

		tecla = varredura();
     856:	0e 94 96 08 	call	0x112c	; 0x112c <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     85a:	90 ed       	ldi	r25, 0xD0	; 208
     85c:	98 0f       	add	r25, r24
     85e:	9a 30       	cpi	r25, 0x0A	; 10
     860:	20 f5       	brcc	.+72     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
     862:	0f 3a       	cpi	r16, 0xAF	; 175
     864:	34 e0       	ldi	r19, 0x04	; 4
     866:	13 07       	cpc	r17, r19
     868:	04 f5       	brge	.+64     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
			valor_saque[pos] = tecla;
     86a:	e1 e0       	ldi	r30, 0x01	; 1
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	ec 0f       	add	r30, r28
     870:	fd 1f       	adc	r31, r29
     872:	e0 0f       	add	r30, r16
     874:	f1 1f       	adc	r31, r17
     876:	80 83       	st	Z, r24

			char str[2] = {tecla, '\0'};
     878:	cf 54       	subi	r28, 0x4F	; 79
     87a:	db 4f       	sbci	r29, 0xFB	; 251
     87c:	88 83       	st	Y, r24
     87e:	c1 5b       	subi	r28, 0xB1	; 177
     880:	d4 40       	sbci	r29, 0x04	; 4
     882:	ce 54       	subi	r28, 0x4E	; 78
     884:	db 4f       	sbci	r29, 0xFB	; 251
     886:	18 82       	st	Y, r1
     888:	c2 5b       	subi	r28, 0xB2	; 178
     88a:	d4 40       	sbci	r29, 0x04	; 4
			LCD_Escrever_Linha(1, 2 + pos, str);
     88c:	62 e0       	ldi	r22, 0x02	; 2
     88e:	60 0f       	add	r22, r16
     890:	ae 01       	movw	r20, r28
     892:	4f 54       	subi	r20, 0x4F	; 79
     894:	5b 4f       	sbci	r21, 0xFB	; 251
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			pos++;
     89c:	0f 5f       	subi	r16, 0xFF	; 255
     89e:	1f 4f       	sbci	r17, 0xFF	; 255

			delay1ms(200);
     8a0:	88 ec       	ldi	r24, 0xC8	; 200
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
			return; // Sai da função imediatamente
		}

		tecla = varredura();

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     8a8:	bf cf       	rjmp	.-130    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			LCD_Escrever_Linha(1, 2 + pos, str);
			pos++;

			delay1ms(200);
		}
		else if(tecla == '#' && pos > 0) {
     8aa:	83 32       	cpi	r24, 0x23	; 35
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
     8ae:	62 c0       	rjmp	.+196    	; 0x974 <__stack+0x75>
     8b0:	10 16       	cp	r1, r16
     8b2:	11 06       	cpc	r1, r17
     8b4:	0c f0       	brlt	.+2      	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
     8b6:	5e c0       	rjmp	.+188    	; 0x974 <__stack+0x75>
			valor_saque[pos] = '\0';
     8b8:	e1 e0       	ldi	r30, 0x01	; 1
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	ec 0f       	add	r30, r28
     8be:	fd 1f       	adc	r31, r29
     8c0:	e0 0f       	add	r30, r16
     8c2:	f1 1f       	adc	r31, r17
     8c4:	10 82       	st	Z, r1

			// Verifica bloqueio antes de enviar a mensagem
			if (isBlocked()) {
     8c6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     8ca:	89 2b       	or	r24, r25
     8cc:	99 f0       	breq	.+38     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
				LCD_limpar();
     8ce:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     8d2:	42 e1       	ldi	r20, 0x12	; 18
     8d4:	52 e0       	ldi	r21, 0x02	; 2
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     8de:	4f e1       	ldi	r20, 0x1F	; 31
     8e0:	52 e0       	ldi	r21, 0x02	; 2
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				delay1ms(2000);
     8ea:	80 ed       	ldi	r24, 0xD0	; 208
     8ec:	97 e0       	ldi	r25, 0x07	; 7
     8ee:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
				return;
     8f2:	55 c0       	rjmp	.+170    	; 0x99e <__stack+0x9f>
			}
			enviar_mensagem_saque(valor_saque);
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <enviar_mensagem_saque>

			// Verifica bloqueio antes de receber resposta
			if (isBlocked()) {
     8fc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     900:	89 2b       	or	r24, r25
     902:	99 f0       	breq	.+38     	; 0x92a <__stack+0x2b>
				LCD_limpar();
     904:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     908:	42 e1       	ldi	r20, 0x12	; 18
     90a:	52 e0       	ldi	r21, 0x02	; 2
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     914:	4f e1       	ldi	r20, 0x1F	; 31
     916:	52 e0       	ldi	r21, 0x02	; 2
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				delay1ms(2000);
     920:	80 ed       	ldi	r24, 0xD0	; 208
     922:	97 e0       	ldi	r25, 0x07	; 7
     924:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
				return;
     928:	3a c0       	rjmp	.+116    	; 0x99e <__stack+0x9f>
			}
			char resposta = receber_resposta_servidor(); // Esta função já tem um delay e exibe algo
     92a:	0e 94 be 03 	call	0x77c	; 0x77c <receber_resposta_servidor>
     92e:	18 2f       	mov	r17, r24

			LCD_limpar();
     930:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
			if(resposta == 'O') {
     934:	1f 34       	cpi	r17, 0x4F	; 79
     936:	69 f4       	brne	.+26     	; 0x952 <__stack+0x53>
				LCD_Escrever_Linha(0, 0, "Saque");
     938:	4e ec       	ldi	r20, 0xCE	; 206
     93a:	51 e0       	ldi	r21, 0x01	; 1
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Realizado!");
     944:	4d e2       	ldi	r20, 0x2D	; 45
     946:	52 e0       	ldi	r21, 0x02	; 2
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     950:	0c c0       	rjmp	.+24     	; 0x96a <__stack+0x6b>
				} else {
				LCD_Escrever_Linha(0, 0, "Saldo");
     952:	48 e3       	ldi	r20, 0x38	; 56
     954:	52 e0       	ldi	r21, 0x02	; 2
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "insuficiente");
     95e:	4e e3       	ldi	r20, 0x3E	; 62
     960:	52 e0       	ldi	r21, 0x02	; 2
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			}
			delay1ms(3000);
     96a:	88 eb       	ldi	r24, 0xB8	; 184
     96c:	9b e0       	ldi	r25, 0x0B	; 11
     96e:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
			break; // Sai do loop após processar o saque
     972:	15 c0       	rjmp	.+42     	; 0x99e <__stack+0x9f>
		}
		else if(tecla == '*') {
     974:	8a 32       	cpi	r24, 0x2A	; 42
     976:	09 f0       	breq	.+2      	; 0x97a <__stack+0x7b>
     978:	57 cf       	rjmp	.-338    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			LCD_limpar();
     97a:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
     97e:	4b e4       	ldi	r20, 0x4B	; 75
     980:	52 e0       	ldi	r21, 0x02	; 2
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
     98a:	44 e5       	ldi	r20, 0x54	; 84
     98c:	52 e0       	ldi	r21, 0x02	; 2
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			delay1ms(2000);
     996:	80 ed       	ldi	r24, 0xD0	; 208
     998:	97 e0       	ldi	r25, 0x07	; 7
     99a:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
			break; // Sai do loop se cancelar
		}
	}
}
     99e:	ce 54       	subi	r28, 0x4E	; 78
     9a0:	db 4f       	sbci	r29, 0xFB	; 251
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	08 95       	ret

000009b6 <consultar_saldo>:
	return 'E'; // Retorna 'E' para Erro padrão
}


// Função para consultar saldo
void consultar_saldo(void) {
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	a9 97       	sbiw	r28, 0x29	; 41
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
	char mensagem[2] = { 'C', 'V' }; // Mensagem de consulta de saldo: 'C' 'V'
     9d2:	83 e4       	ldi	r24, 0x43	; 67
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	86 e5       	ldi	r24, 0x56	; 86
     9d8:	8a 83       	std	Y+2, r24	; 0x02

	// Verifica bloqueio antes de enviar a mensagem
	if (isBlocked()) {
     9da:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     9de:	89 2b       	or	r24, r25
     9e0:	99 f0       	breq	.+38     	; 0xa08 <consultar_saldo+0x52>
		LCD_limpar();
     9e2:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     9e6:	42 e1       	ldi	r20, 0x12	; 18
     9e8:	52 e0       	ldi	r21, 0x02	; 2
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     9f2:	4f e1       	ldi	r20, 0x1F	; 31
     9f4:	52 e0       	ldi	r21, 0x02	; 2
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		delay1ms(2000);
     9fe:	80 ed       	ldi	r24, 0xD0	; 208
     a00:	97 e0       	ldi	r25, 0x07	; 7
     a02:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
		return;
     a06:	d1 c0       	rjmp	.+418    	; 0xbaa <consultar_saldo+0x1f4>
	}
	SerialEnviaChars(2, mensagem); // Envia 2 bytes
     a08:	be 01       	movw	r22, r28
     a0a:	6f 5f       	subi	r22, 0xFF	; 255
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 66 06 	call	0xccc	; 0xccc <SerialEnviaChars>

	char resposta_header[3]; // Para 'S', 'V', 'n'
	// Verifica bloqueio antes de receber o cabeçalho da resposta
	if (isBlocked()) {
     a16:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     a1a:	89 2b       	or	r24, r25
     a1c:	99 f0       	breq	.+38     	; 0xa44 <consultar_saldo+0x8e>
		LCD_limpar();
     a1e:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     a22:	42 e1       	ldi	r20, 0x12	; 18
     a24:	52 e0       	ldi	r21, 0x02	; 2
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     a2e:	4f e1       	ldi	r20, 0x1F	; 31
     a30:	52 e0       	ldi	r21, 0x02	; 2
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		delay1ms(2000);
     a3a:	80 ed       	ldi	r24, 0xD0	; 208
     a3c:	97 e0       	ldi	r25, 0x07	; 7
     a3e:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
		return;
     a42:	b3 c0       	rjmp	.+358    	; 0xbaa <consultar_saldo+0x1f4>
	}
	// Recebe os primeiros 3 bytes da resposta (comando + tamanho do campo de dados)
	SerialRecebeChars(3, resposta_header);
     a44:	be 01       	movw	r22, r28
     a46:	6d 5f       	subi	r22, 0xFD	; 253
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 0e 08 	call	0x101c	; 0x101c <SerialRecebeChars>
	resposta_header[3] = '\0'; // Garante terminação nula
     a52:	1e 82       	std	Y+6, r1	; 0x06

	// Verifica se o cabeçalho da resposta é 'S' 'V'
	if (resposta_header[0] == 'S' && resposta_header[1] == 'V') {
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	83 35       	cpi	r24, 0x53	; 83
     a58:	09 f0       	breq	.+2      	; 0xa5c <consultar_saldo+0xa6>
     a5a:	95 c0       	rjmp	.+298    	; 0xb86 <consultar_saldo+0x1d0>
     a5c:	8c 81       	ldd	r24, Y+4	; 0x04
     a5e:	86 35       	cpi	r24, 0x56	; 86
     a60:	09 f0       	breq	.+2      	; 0xa64 <consultar_saldo+0xae>
     a62:	91 c0       	rjmp	.+290    	; 0xb86 <consultar_saldo+0x1d0>
		unsigned char num_bytes_saldo = resposta_header[2]; // 'n' é o número de bytes do saldo
     a64:	0d 81       	ldd	r16, Y+5	; 0x05

		char saldo_bruto[16]; // Buffer para o saldo recebido (ex: "169071")
		memset(saldo_bruto, 0, sizeof(saldo_bruto)); // Limpa o buffer
     a66:	fe 01       	movw	r30, r28
     a68:	7a 96       	adiw	r30, 0x1a	; 26
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	df 01       	movw	r26, r30
     a6e:	1d 92       	st	X+, r1
     a70:	8a 95       	dec	r24
     a72:	e9 f7       	brne	.-6      	; 0xa6e <consultar_saldo+0xb8>

		// Limita a leitura para não exceder o buffer
		if (num_bytes_saldo >= sizeof(saldo_bruto)) {
     a74:	00 31       	cpi	r16, 0x10	; 16
     a76:	08 f0       	brcs	.+2      	; 0xa7a <consultar_saldo+0xc4>
			num_bytes_saldo = sizeof(saldo_bruto) - 1;
     a78:	0f e0       	ldi	r16, 0x0F	; 15
		}

		// Verifica bloqueio antes de receber os bytes do saldo
		if (isBlocked()) {
     a7a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     a7e:	89 2b       	or	r24, r25
     a80:	99 f0       	breq	.+38     	; 0xaa8 <consultar_saldo+0xf2>
			LCD_limpar();
     a82:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     a86:	42 e1       	ldi	r20, 0x12	; 18
     a88:	52 e0       	ldi	r21, 0x02	; 2
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     a92:	4f e1       	ldi	r20, 0x1F	; 31
     a94:	52 e0       	ldi	r21, 0x02	; 2
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			delay1ms(2000);
     a9e:	80 ed       	ldi	r24, 0xD0	; 208
     aa0:	97 e0       	ldi	r25, 0x07	; 7
     aa2:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
     aa6:	81 c0       	rjmp	.+258    	; 0xbaa <consultar_saldo+0x1f4>
			return;
		}
		// Recebe os 'n' bytes do saldo
		SerialRecebeChars(num_bytes_saldo, saldo_bruto);
     aa8:	10 e0       	ldi	r17, 0x00	; 0
     aaa:	7e 01       	movw	r14, r28
     aac:	ba e1       	ldi	r27, 0x1A	; 26
     aae:	eb 0e       	add	r14, r27
     ab0:	f1 1c       	adc	r15, r1
     ab2:	b7 01       	movw	r22, r14
     ab4:	c8 01       	movw	r24, r16
     ab6:	0e 94 0e 08 	call	0x101c	; 0x101c <SerialRecebeChars>
		saldo_bruto[num_bytes_saldo] = '\0'; // Garante terminação nula
     aba:	f7 01       	movw	r30, r14
     abc:	e0 0f       	add	r30, r16
     abe:	f1 1f       	adc	r31, r17
     ac0:	10 82       	st	Z, r1

	
		char saldo_formatado[20]; // Buffer para a string formatada (ex: "R$1690.71")
		int len_bruto = strlen(saldo_bruto);
     ac2:	f7 01       	movw	r30, r14
     ac4:	01 90       	ld	r0, Z+
     ac6:	00 20       	and	r0, r0
     ac8:	e9 f7       	brne	.-6      	; 0xac4 <consultar_saldo+0x10e>
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	ee 19       	sub	r30, r14
     ace:	ff 09       	sbc	r31, r15
		if (len_bruto >= 2) {
     ad0:	e2 30       	cpi	r30, 0x02	; 2
     ad2:	f1 05       	cpc	r31, r1
     ad4:	44 f1       	brlt	.+80     	; 0xb26 <consultar_saldo+0x170>
			strcpy(saldo_formatado, "R$"); // Começa com "R$"
     ad6:	7e 01       	movw	r14, r28
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	e8 0e       	add	r14, r24
     adc:	f1 1c       	adc	r15, r1
     ade:	82 e5       	ldi	r24, 0x52	; 82
     ae0:	94 e2       	ldi	r25, 0x24	; 36
     ae2:	9f 83       	std	Y+7, r25	; 0x07
     ae4:	8e 83       	std	Y+6, r24	; 0x06
     ae6:	d7 01       	movw	r26, r14
     ae8:	12 96       	adiw	r26, 0x02	; 2
     aea:	1c 92       	st	X, r1
			// Concatena a parte dos reais (todos os dígitos menos os últimos 2)
			strncat(saldo_formatado, saldo_bruto, len_bruto - 2);
     aec:	8f 01       	movw	r16, r30
     aee:	02 50       	subi	r16, 0x02	; 2
     af0:	11 09       	sbc	r17, r1
     af2:	a8 01       	movw	r20, r16
     af4:	be 01       	movw	r22, r28
     af6:	66 5e       	subi	r22, 0xE6	; 230
     af8:	7f 4f       	sbci	r23, 0xFF	; 255
     afa:	c7 01       	movw	r24, r14
     afc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <strncat>
			strcat(saldo_formatado, "."); // Adiciona o ponto decimal
     b00:	f7 01       	movw	r30, r14
     b02:	01 90       	ld	r0, Z+
     b04:	00 20       	and	r0, r0
     b06:	e9 f7       	brne	.-6      	; 0xb02 <consultar_saldo+0x14c>
     b08:	31 97       	sbiw	r30, 0x01	; 1
     b0a:	8e e2       	ldi	r24, 0x2E	; 46
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	91 83       	std	Z+1, r25	; 0x01
     b10:	80 83       	st	Z, r24
			// Concatena os centavos (os últimos 2 dígitos)
			strcat(saldo_formatado, &saldo_bruto[len_bruto - 2]);
     b12:	6a e1       	ldi	r22, 0x1A	; 26
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	6c 0f       	add	r22, r28
     b18:	7d 1f       	adc	r23, r29
     b1a:	60 0f       	add	r22, r16
     b1c:	71 1f       	adc	r23, r17
     b1e:	c7 01       	movw	r24, r14
     b20:	0e 94 51 09 	call	0x12a2	; 0x12a2 <strcat>
     b24:	1c c0       	rjmp	.+56     	; 0xb5e <consultar_saldo+0x1a8>
			} else if (len_bruto == 1) { // Ex: saldo "5" -> R$0.05
     b26:	31 97       	sbiw	r30, 0x01	; 1
     b28:	89 f4       	brne	.+34     	; 0xb4c <consultar_saldo+0x196>
			strcpy(saldo_formatado, "R$0.0");
     b2a:	86 e0       	ldi	r24, 0x06	; 6
     b2c:	ee e5       	ldi	r30, 0x5E	; 94
     b2e:	f2 e0       	ldi	r31, 0x02	; 2
     b30:	de 01       	movw	r26, r28
     b32:	16 96       	adiw	r26, 0x06	; 6
     b34:	01 90       	ld	r0, Z+
     b36:	0d 92       	st	X+, r0
     b38:	8a 95       	dec	r24
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <consultar_saldo+0x17e>
			strcat(saldo_formatado, saldo_bruto);
     b3c:	be 01       	movw	r22, r28
     b3e:	66 5e       	subi	r22, 0xE6	; 230
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	ce 01       	movw	r24, r28
     b44:	06 96       	adiw	r24, 0x06	; 6
     b46:	0e 94 51 09 	call	0x12a2	; 0x12a2 <strcat>
     b4a:	09 c0       	rjmp	.+18     	; 0xb5e <consultar_saldo+0x1a8>
			} else { // Ex: saldo "0" ou vazio -> R$0.00
			strcpy(saldo_formatado, "R$0.00");
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	e4 e6       	ldi	r30, 0x64	; 100
     b50:	f2 e0       	ldi	r31, 0x02	; 2
     b52:	de 01       	movw	r26, r28
     b54:	16 96       	adiw	r26, 0x06	; 6
     b56:	01 90       	ld	r0, Z+
     b58:	0d 92       	st	X+, r0
     b5a:	8a 95       	dec	r24
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <consultar_saldo+0x1a0>
		}


		LCD_limpar();
     b5e:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Saldo atual:");
     b62:	4b e6       	ldi	r20, 0x6B	; 107
     b64:	52 e0       	ldi	r21, 0x02	; 2
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, saldo_formatado); // Exibe o saldo formatado
     b6e:	ae 01       	movw	r20, r28
     b70:	4a 5f       	subi	r20, 0xFA	; 250
     b72:	5f 4f       	sbci	r21, 0xFF	; 255
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		delay1ms(3000); // Exibe por 3 segundos
     b7c:	88 eb       	ldi	r24, 0xB8	; 184
     b7e:	9b e0       	ldi	r25, 0x0B	; 11
     b80:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
	// Recebe os primeiros 3 bytes da resposta (comando + tamanho do campo de dados)
	SerialRecebeChars(3, resposta_header);
	resposta_header[3] = '\0'; // Garante terminação nula

	// Verifica se o cabeçalho da resposta é 'S' 'V'
	if (resposta_header[0] == 'S' && resposta_header[1] == 'V') {
     b84:	12 c0       	rjmp	.+36     	; 0xbaa <consultar_saldo+0x1f4>
		LCD_Escrever_Linha(0, 0, "Saldo atual:");
		LCD_Escrever_Linha(1, 0, saldo_formatado); // Exibe o saldo formatado
		delay1ms(3000); // Exibe por 3 segundos
		} else {
		// Se a resposta do servidor não seguir o formato esperado
		LCD_limpar();
     b86:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Erro ao obter");
     b8a:	48 e7       	ldi	r20, 0x78	; 120
     b8c:	52 e0       	ldi	r21, 0x02	; 2
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "saldo!");
     b96:	46 e8       	ldi	r20, 0x86	; 134
     b98:	52 e0       	ldi	r21, 0x02	; 2
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		delay1ms(3000);
     ba2:	88 eb       	ldi	r24, 0xB8	; 184
     ba4:	9b e0       	ldi	r25, 0x0B	; 11
     ba6:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
	}
}
     baa:	a9 96       	adiw	r28, 0x29	; 41
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	08 95       	ret

00000bc4 <finalizar_sessao>:

// Função para finalizar a sessão
void finalizar_sessao(void) {
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	00 d0       	rcall	.+0      	; 0xbca <finalizar_sessao+0x6>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <finalizar_sessao+0x8>
     bcc:	1f 92       	push	r1
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	char mensagem[2] = {'C', 'F'}; // Comando para finalizar sessão
     bd2:	83 e4       	ldi	r24, 0x43	; 67
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	86 e4       	ldi	r24, 0x46	; 70
     bd8:	8a 83       	std	Y+2, r24	; 0x02

	// Verifica bloqueio antes de enviar a mensagem
	if (isBlocked()) {
     bda:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     bde:	89 2b       	or	r24, r25
     be0:	99 f0       	breq	.+38     	; 0xc08 <finalizar_sessao+0x44>
		LCD_limpar();
     be2:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
     be6:	4d e8       	ldi	r20, 0x8D	; 141
     be8:	52 e0       	ldi	r21, 0x02	; 2
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
     bf2:	48 e9       	ldi	r20, 0x98	; 152
     bf4:	52 e0       	ldi	r21, 0x02	; 2
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		delay1ms(2000);
     bfe:	80 ed       	ldi	r24, 0xD0	; 208
     c00:	97 e0       	ldi	r25, 0x07	; 7
     c02:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
		return;
     c06:	4b c0       	rjmp	.+150    	; 0xc9e <finalizar_sessao+0xda>
	}
	SerialEnviaChars(2, mensagem);
     c08:	be 01       	movw	r22, r28
     c0a:	6f 5f       	subi	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 66 06 	call	0xccc	; 0xccc <SerialEnviaChars>

	char resposta[3]; // Suficiente para "SF" + '\0'
	// Verifica bloqueio antes de receber a resposta
	if (isBlocked()) {
     c16:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isBlocked>
     c1a:	89 2b       	or	r24, r25
     c1c:	99 f0       	breq	.+38     	; 0xc44 <finalizar_sessao+0x80>
		LCD_limpar();
     c1e:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
     c22:	4d e8       	ldi	r20, 0x8D	; 141
     c24:	52 e0       	ldi	r21, 0x02	; 2
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
     c2e:	48 e9       	ldi	r20, 0x98	; 152
     c30:	52 e0       	ldi	r21, 0x02	; 2
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		delay1ms(2000);
     c3a:	80 ed       	ldi	r24, 0xD0	; 208
     c3c:	97 e0       	ldi	r25, 0x07	; 7
     c3e:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
		return;
     c42:	2d c0       	rjmp	.+90     	; 0xc9e <finalizar_sessao+0xda>
	}
	SerialRecebeChars(2, resposta); // Espera 2 bytes de resposta ("SF")
     c44:	be 01       	movw	r22, r28
     c46:	6d 5f       	subi	r22, 0xFD	; 253
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 0e 08 	call	0x101c	; 0x101c <SerialRecebeChars>
	resposta[2] = '\0'; // Garante terminação nula
     c52:	1d 82       	std	Y+5, r1	; 0x05

	LCD_limpar();
     c54:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
	
	if (resposta[0] == 'S' && resposta[1] == 'F') {
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	83 35       	cpi	r24, 0x53	; 83
     c5c:	81 f4       	brne	.+32     	; 0xc7e <finalizar_sessao+0xba>
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	86 34       	cpi	r24, 0x46	; 70
     c62:	69 f4       	brne	.+26     	; 0xc7e <finalizar_sessao+0xba>
		LCD_Escrever_Linha(0, 0, "Sessao");
     c64:	44 ea       	ldi	r20, 0xA4	; 164
     c66:	52 e0       	ldi	r21, 0x02	; 2
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "Finalizada!");
     c70:	4b ea       	ldi	r20, 0xAB	; 171
     c72:	52 e0       	ldi	r21, 0x02	; 2
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     c7c:	0c c0       	rjmp	.+24     	; 0xc96 <finalizar_sessao+0xd2>
		} else {
		LCD_Escrever_Linha(0, 0, "Erro ao finalizar");
     c7e:	47 eb       	ldi	r20, 0xB7	; 183
     c80:	52 e0       	ldi	r21, 0x02	; 2
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "sessao!");
     c8a:	49 ec       	ldi	r20, 0xC9	; 201
     c8c:	52 e0       	ldi	r21, 0x02	; 2
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	}
	delay1ms(2000); // Exibe a mensagem por 2 segundos
     c96:	80 ed       	ldi	r24, 0xD0	; 208
     c98:	97 e0       	ldi	r25, 0x07	; 7
     c9a:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <initUART>:
     cae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     cb2:	83 e3       	ldi	r24, 0x33	; 51
     cb4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     cb8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     cbc:	88 e9       	ldi	r24, 0x98	; 152
     cbe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     cc2:	86 e0       	ldi	r24, 0x06	; 6
     cc4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     cc8:	78 94       	sei
     cca:	08 95       	ret

00000ccc <SerialEnviaChars>:
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	8c 01       	movw	r16, r24
     cda:	7b 01       	movw	r14, r22
     cdc:	c0 e0       	ldi	r28, 0x00	; 0
     cde:	d0 e0       	ldi	r29, 0x00	; 0
     ce0:	0f c0       	rjmp	.+30     	; 0xd00 <SerialEnviaChars+0x34>
     ce2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ce6:	85 ff       	sbrs	r24, 5
     ce8:	fc cf       	rjmp	.-8      	; 0xce2 <SerialEnviaChars+0x16>
     cea:	f7 01       	movw	r30, r14
     cec:	ec 0f       	add	r30, r28
     cee:	fd 1f       	adc	r31, r29
     cf0:	80 81       	ld	r24, Z
     cf2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     cf6:	84 e1       	ldi	r24, 0x14	; 20
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1ms>
     cfe:	21 96       	adiw	r28, 0x01	; 1
     d00:	c0 17       	cp	r28, r16
     d02:	d1 07       	cpc	r29, r17
     d04:	74 f3       	brlt	.-36     	; 0xce2 <SerialEnviaChars+0x16>
     d06:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     d0a:	86 ff       	sbrs	r24, 6
     d0c:	fc cf       	rjmp	.-8      	; 0xd06 <SerialEnviaChars+0x3a>
     d0e:	e0 ec       	ldi	r30, 0xC0	; 192
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	80 64       	ori	r24, 0x40	; 64
     d16:	80 83       	st	Z, r24
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	08 95       	ret

00000d26 <__vector_18>:
     d26:	1f 92       	push	r1
     d28:	0f 92       	push	r0
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	0f 92       	push	r0
     d2e:	11 24       	eor	r1, r1
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <__vector_18+0x28>
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     d56:	93 e4       	ldi	r25, 0x43	; 67
     d58:	99 83       	std	Y+1, r25	; 0x01
     d5a:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <sh_bytes_count>
     d5e:	9f ef       	ldi	r25, 0xFF	; 255
     d60:	9e 0f       	add	r25, r30
     d62:	95 30       	cpi	r25, 0x05	; 5
     d64:	00 f5       	brcc	.+64     	; 0xda6 <__vector_18+0x80>
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	9e 0f       	add	r25, r30
     d6a:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <sh_bytes_count>
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	e7 52       	subi	r30, 0x27	; 39
     d72:	fd 4f       	sbci	r31, 0xFD	; 253
     d74:	80 83       	st	Z, r24
     d76:	96 30       	cpi	r25, 0x06	; 6
     d78:	09 f0       	breq	.+2      	; 0xd7c <__vector_18+0x56>
     d7a:	00 c1       	rjmp	.+512    	; 0xf7c <__vector_18+0x256>
     d7c:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <sh_command_bytes_received+0x4>
     d80:	89 50       	subi	r24, 0x09	; 9
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	8b 30       	cpi	r24, 0x0B	; 11
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__vector_18+0x64>
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <blocked>
     d8e:	88 e4       	ldi	r24, 0x48	; 72
     d90:	8a 83       	std	Y+2, r24	; 0x02
     d92:	be 01       	movw	r22, r28
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 66 06 	call	0xccc	; 0xccc <SerialEnviaChars>
     da0:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <sh_bytes_count>
     da4:	eb c0       	rjmp	.+470    	; 0xf7c <__vector_18+0x256>
     da6:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <waiting_for_second_byte>
     daa:	99 23       	and	r25, r25
     dac:	09 f4       	brne	.+2      	; 0xdb0 <__vector_18+0x8a>
     dae:	bc c0       	rjmp	.+376    	; 0xf28 <__vector_18+0x202>
     db0:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <first_byte_of_potential_command>
     db4:	93 35       	cpi	r25, 0x53	; 83
     db6:	09 f0       	breq	.+2      	; 0xdba <__vector_18+0x94>
     db8:	6e c0       	rjmp	.+220    	; 0xe96 <__vector_18+0x170>
     dba:	84 35       	cpi	r24, 0x54	; 84
     dbc:	69 f4       	brne	.+26     	; 0xdd8 <__vector_18+0xb2>
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <blocked>
     dc4:	84 e5       	ldi	r24, 0x54	; 84
     dc6:	8a 83       	std	Y+2, r24	; 0x02
     dc8:	be 01       	movw	r22, r28
     dca:	6f 5f       	subi	r22, 0xFF	; 255
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 66 06 	call	0xccc	; 0xccc <SerialEnviaChars>
     dd6:	a3 c0       	rjmp	.+326    	; 0xf1e <__vector_18+0x1f8>
     dd8:	8c 34       	cpi	r24, 0x4C	; 76
     dda:	59 f4       	brne	.+22     	; 0xdf2 <__vector_18+0xcc>
     ddc:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <blocked>
     de0:	8a 83       	std	Y+2, r24	; 0x02
     de2:	be 01       	movw	r22, r28
     de4:	6f 5f       	subi	r22, 0xFF	; 255
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 66 06 	call	0xccc	; 0xccc <SerialEnviaChars>
     df0:	96 c0       	rjmp	.+300    	; 0xf1e <__vector_18+0x1f8>
     df2:	88 34       	cpi	r24, 0x48	; 72
     df4:	51 f4       	brne	.+20     	; 0xe0a <__vector_18+0xe4>
     df6:	e9 ed       	ldi	r30, 0xD9	; 217
     df8:	f2 e0       	ldi	r31, 0x02	; 2
     dfa:	83 e5       	ldi	r24, 0x53	; 83
     dfc:	80 83       	st	Z, r24
     dfe:	88 e4       	ldi	r24, 0x48	; 72
     e00:	81 83       	std	Z+1, r24	; 0x01
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <sh_bytes_count>
     e08:	8a c0       	rjmp	.+276    	; 0xf1e <__vector_18+0x1f8>
     e0a:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <uart_head>
     e0e:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <uart_head+0x1>
     e12:	2f 5f       	subi	r18, 0xFF	; 255
     e14:	3f 4f       	sbci	r19, 0xFF	; 255
     e16:	2f 77       	andi	r18, 0x7F	; 127
     e18:	30 78       	andi	r19, 0x80	; 128
     e1a:	33 23       	and	r19, r19
     e1c:	34 f4       	brge	.+12     	; 0xe2a <__vector_18+0x104>
     e1e:	21 50       	subi	r18, 0x01	; 1
     e20:	31 09       	sbc	r19, r1
     e22:	20 68       	ori	r18, 0x80	; 128
     e24:	3f 6f       	ori	r19, 0xFF	; 255
     e26:	2f 5f       	subi	r18, 0xFF	; 255
     e28:	3f 4f       	sbci	r19, 0xFF	; 255
     e2a:	40 91 e0 02 	lds	r20, 0x02E0	; 0x8002e0 <uart_tail>
     e2e:	50 91 e1 02 	lds	r21, 0x02E1	; 0x8002e1 <uart_tail+0x1>
     e32:	24 17       	cp	r18, r20
     e34:	35 07       	cpc	r19, r21
     e36:	59 f0       	breq	.+22     	; 0xe4e <__vector_18+0x128>
     e38:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <uart_head>
     e3c:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <uart_head+0x1>
     e40:	ec 51       	subi	r30, 0x1C	; 28
     e42:	fd 4f       	sbci	r31, 0xFD	; 253
     e44:	90 83       	st	Z, r25
     e46:	30 93 e3 02 	sts	0x02E3, r19	; 0x8002e3 <uart_head+0x1>
     e4a:	20 93 e2 02 	sts	0x02E2, r18	; 0x8002e2 <uart_head>
     e4e:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <uart_head>
     e52:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <uart_head+0x1>
     e56:	2f 5f       	subi	r18, 0xFF	; 255
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	2f 77       	andi	r18, 0x7F	; 127
     e5c:	30 78       	andi	r19, 0x80	; 128
     e5e:	33 23       	and	r19, r19
     e60:	34 f4       	brge	.+12     	; 0xe6e <__vector_18+0x148>
     e62:	21 50       	subi	r18, 0x01	; 1
     e64:	31 09       	sbc	r19, r1
     e66:	20 68       	ori	r18, 0x80	; 128
     e68:	3f 6f       	ori	r19, 0xFF	; 255
     e6a:	2f 5f       	subi	r18, 0xFF	; 255
     e6c:	3f 4f       	sbci	r19, 0xFF	; 255
     e6e:	40 91 e0 02 	lds	r20, 0x02E0	; 0x8002e0 <uart_tail>
     e72:	50 91 e1 02 	lds	r21, 0x02E1	; 0x8002e1 <uart_tail+0x1>
     e76:	24 17       	cp	r18, r20
     e78:	35 07       	cpc	r19, r21
     e7a:	09 f4       	brne	.+2      	; 0xe7e <__vector_18+0x158>
     e7c:	50 c0       	rjmp	.+160    	; 0xf1e <__vector_18+0x1f8>
     e7e:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <uart_head>
     e82:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <uart_head+0x1>
     e86:	ec 51       	subi	r30, 0x1C	; 28
     e88:	fd 4f       	sbci	r31, 0xFD	; 253
     e8a:	80 83       	st	Z, r24
     e8c:	30 93 e3 02 	sts	0x02E3, r19	; 0x8002e3 <uart_head+0x1>
     e90:	20 93 e2 02 	sts	0x02E2, r18	; 0x8002e2 <uart_head>
     e94:	44 c0       	rjmp	.+136    	; 0xf1e <__vector_18+0x1f8>
     e96:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <uart_head>
     e9a:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <uart_head+0x1>
     e9e:	2f 5f       	subi	r18, 0xFF	; 255
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	2f 77       	andi	r18, 0x7F	; 127
     ea4:	30 78       	andi	r19, 0x80	; 128
     ea6:	33 23       	and	r19, r19
     ea8:	34 f4       	brge	.+12     	; 0xeb6 <__vector_18+0x190>
     eaa:	21 50       	subi	r18, 0x01	; 1
     eac:	31 09       	sbc	r19, r1
     eae:	20 68       	ori	r18, 0x80	; 128
     eb0:	3f 6f       	ori	r19, 0xFF	; 255
     eb2:	2f 5f       	subi	r18, 0xFF	; 255
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	40 91 e0 02 	lds	r20, 0x02E0	; 0x8002e0 <uart_tail>
     eba:	50 91 e1 02 	lds	r21, 0x02E1	; 0x8002e1 <uart_tail+0x1>
     ebe:	24 17       	cp	r18, r20
     ec0:	35 07       	cpc	r19, r21
     ec2:	59 f0       	breq	.+22     	; 0xeda <__vector_18+0x1b4>
     ec4:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <uart_head>
     ec8:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <uart_head+0x1>
     ecc:	ec 51       	subi	r30, 0x1C	; 28
     ece:	fd 4f       	sbci	r31, 0xFD	; 253
     ed0:	90 83       	st	Z, r25
     ed2:	30 93 e3 02 	sts	0x02E3, r19	; 0x8002e3 <uart_head+0x1>
     ed6:	20 93 e2 02 	sts	0x02E2, r18	; 0x8002e2 <uart_head>
     eda:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <uart_head>
     ede:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <uart_head+0x1>
     ee2:	2f 5f       	subi	r18, 0xFF	; 255
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	2f 77       	andi	r18, 0x7F	; 127
     ee8:	30 78       	andi	r19, 0x80	; 128
     eea:	33 23       	and	r19, r19
     eec:	34 f4       	brge	.+12     	; 0xefa <__vector_18+0x1d4>
     eee:	21 50       	subi	r18, 0x01	; 1
     ef0:	31 09       	sbc	r19, r1
     ef2:	20 68       	ori	r18, 0x80	; 128
     ef4:	3f 6f       	ori	r19, 0xFF	; 255
     ef6:	2f 5f       	subi	r18, 0xFF	; 255
     ef8:	3f 4f       	sbci	r19, 0xFF	; 255
     efa:	40 91 e0 02 	lds	r20, 0x02E0	; 0x8002e0 <uart_tail>
     efe:	50 91 e1 02 	lds	r21, 0x02E1	; 0x8002e1 <uart_tail+0x1>
     f02:	24 17       	cp	r18, r20
     f04:	35 07       	cpc	r19, r21
     f06:	59 f0       	breq	.+22     	; 0xf1e <__vector_18+0x1f8>
     f08:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <uart_head>
     f0c:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <uart_head+0x1>
     f10:	ec 51       	subi	r30, 0x1C	; 28
     f12:	fd 4f       	sbci	r31, 0xFD	; 253
     f14:	80 83       	st	Z, r24
     f16:	30 93 e3 02 	sts	0x02E3, r19	; 0x8002e3 <uart_head+0x1>
     f1a:	20 93 e2 02 	sts	0x02E2, r18	; 0x8002e2 <uart_head>
     f1e:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <waiting_for_second_byte>
     f22:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <first_byte_of_potential_command>
     f26:	2a c0       	rjmp	.+84     	; 0xf7c <__vector_18+0x256>
     f28:	83 35       	cpi	r24, 0x53	; 83
     f2a:	31 f4       	brne	.+12     	; 0xf38 <__vector_18+0x212>
     f2c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <first_byte_of_potential_command>
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <waiting_for_second_byte>
     f36:	22 c0       	rjmp	.+68     	; 0xf7c <__vector_18+0x256>
     f38:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <uart_head>
     f3c:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <uart_head+0x1>
     f40:	2f 5f       	subi	r18, 0xFF	; 255
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	2f 77       	andi	r18, 0x7F	; 127
     f46:	30 78       	andi	r19, 0x80	; 128
     f48:	33 23       	and	r19, r19
     f4a:	34 f4       	brge	.+12     	; 0xf58 <__vector_18+0x232>
     f4c:	21 50       	subi	r18, 0x01	; 1
     f4e:	31 09       	sbc	r19, r1
     f50:	20 68       	ori	r18, 0x80	; 128
     f52:	3f 6f       	ori	r19, 0xFF	; 255
     f54:	2f 5f       	subi	r18, 0xFF	; 255
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	40 91 e0 02 	lds	r20, 0x02E0	; 0x8002e0 <uart_tail>
     f5c:	50 91 e1 02 	lds	r21, 0x02E1	; 0x8002e1 <uart_tail+0x1>
     f60:	24 17       	cp	r18, r20
     f62:	35 07       	cpc	r19, r21
     f64:	59 f0       	breq	.+22     	; 0xf7c <__vector_18+0x256>
     f66:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <uart_head>
     f6a:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <uart_head+0x1>
     f6e:	ec 51       	subi	r30, 0x1C	; 28
     f70:	fd 4f       	sbci	r31, 0xFD	; 253
     f72:	80 83       	st	Z, r24
     f74:	30 93 e3 02 	sts	0x02E3, r19	; 0x8002e3 <uart_head+0x1>
     f78:	20 93 e2 02 	sts	0x02E2, r18	; 0x8002e2 <uart_head>
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	ff 91       	pop	r31
     f86:	ef 91       	pop	r30
     f88:	bf 91       	pop	r27
     f8a:	af 91       	pop	r26
     f8c:	9f 91       	pop	r25
     f8e:	8f 91       	pop	r24
     f90:	7f 91       	pop	r23
     f92:	6f 91       	pop	r22
     f94:	5f 91       	pop	r21
     f96:	4f 91       	pop	r20
     f98:	3f 91       	pop	r19
     f9a:	2f 91       	pop	r18
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	0f 90       	pop	r0
     fa2:	1f 90       	pop	r1
     fa4:	18 95       	reti

00000fa6 <isBlocked>:
     fa6:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <blocked>
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	08 95       	ret

00000fae <uart_buffer_empty>:
     fae:	40 91 e2 02 	lds	r20, 0x02E2	; 0x8002e2 <uart_head>
     fb2:	50 91 e3 02 	lds	r21, 0x02E3	; 0x8002e3 <uart_head+0x1>
     fb6:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <uart_tail>
     fba:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <uart_tail+0x1>
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	42 17       	cp	r20, r18
     fc2:	53 07       	cpc	r21, r19
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <uart_buffer_empty+0x1a>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	08 95       	ret

00000fcc <uart_buffer_read_char>:
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	ec 01       	movw	r28, r24
     fd2:	0e 94 d7 07 	call	0xfae	; 0xfae <uart_buffer_empty>
     fd6:	89 2b       	or	r24, r25
     fd8:	e1 f4       	brne	.+56     	; 0x1012 <uart_buffer_read_char+0x46>
     fda:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <uart_tail>
     fde:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <uart_tail+0x1>
     fe2:	ec 51       	subi	r30, 0x1C	; 28
     fe4:	fd 4f       	sbci	r31, 0xFD	; 253
     fe6:	80 81       	ld	r24, Z
     fe8:	88 83       	st	Y, r24
     fea:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <uart_tail>
     fee:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <uart_tail+0x1>
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	8f 77       	andi	r24, 0x7F	; 127
     ff6:	90 78       	andi	r25, 0x80	; 128
     ff8:	99 23       	and	r25, r25
     ffa:	24 f4       	brge	.+8      	; 0x1004 <uart_buffer_read_char+0x38>
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	9f 6f       	ori	r25, 0xFF	; 255
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <uart_tail+0x1>
    1008:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <uart_tail>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <uart_buffer_read_char+0x4a>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <SerialRecebeChars>:
    101c:	af 92       	push	r10
    101e:	bf 92       	push	r11
    1020:	cf 92       	push	r12
    1022:	df 92       	push	r13
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	1f 92       	push	r1
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	6c 01       	movw	r12, r24
    1038:	5b 01       	movw	r10, r22
    103a:	e1 2c       	mov	r14, r1
    103c:	f1 2c       	mov	r15, r1
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	10 e0       	ldi	r17, 0x00	; 0
    1042:	19 c0       	rjmp	.+50     	; 0x1076 <SerialRecebeChars+0x5a>
    1044:	ce 01       	movw	r24, r28
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	0e 94 e6 07 	call	0xfcc	; 0xfcc <uart_buffer_read_char>
    104c:	89 2b       	or	r24, r25
    104e:	51 f0       	breq	.+20     	; 0x1064 <SerialRecebeChars+0x48>
    1050:	f5 01       	movw	r30, r10
    1052:	e0 0f       	add	r30, r16
    1054:	f1 1f       	adc	r31, r17
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	80 83       	st	Z, r24
    105a:	0f 5f       	subi	r16, 0xFF	; 255
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	e1 2c       	mov	r14, r1
    1060:	f1 2c       	mov	r15, r1
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <SerialRecebeChars+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1064:	83 ec       	ldi	r24, 0xC3	; 195
    1066:	99 e0       	ldi	r25, 0x09	; 9
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <SerialRecebeChars+0x4c>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <SerialRecebeChars+0x52>
    106e:	00 00       	nop
    1070:	9f ef       	ldi	r25, 0xFF	; 255
    1072:	e9 1a       	sub	r14, r25
    1074:	f9 0a       	sbc	r15, r25
    1076:	0c 15       	cp	r16, r12
    1078:	1d 05       	cpc	r17, r13
    107a:	24 f4       	brge	.+8      	; 0x1084 <SerialRecebeChars+0x68>
    107c:	84 e6       	ldi	r24, 0x64	; 100
    107e:	e8 16       	cp	r14, r24
    1080:	f1 04       	cpc	r15, r1
    1082:	04 f3       	brlt	.-64     	; 0x1044 <SerialRecebeChars+0x28>
    1084:	f5 01       	movw	r30, r10
    1086:	e0 0f       	add	r30, r16
    1088:	f1 1f       	adc	r31, r17
    108a:	10 82       	st	Z, r1
    108c:	0f 90       	pop	r0
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	bf 90       	pop	r11
    10a0:	af 90       	pop	r10
    10a2:	08 95       	ret

000010a4 <prepara_teclado>:
#define COL4 PD2    // Coluna 4 no PD2

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
    10a4:	84 b1       	in	r24, 0x04	; 4
    10a6:	83 60       	ori	r24, 0x03	; 3
    10a8:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
    10aa:	8a b1       	in	r24, 0x0a	; 10
    10ac:	80 6c       	ori	r24, 0xC0	; 192
    10ae:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4)); // PD5, PD4, PD3 e PD2 como entradas
    10b0:	8a b1       	in	r24, 0x0a	; 10
    10b2:	83 7c       	andi	r24, 0xC3	; 195
    10b4:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);   // Habilitar resistores de Pull-up
    10b6:	8b b1       	in	r24, 0x0b	; 11
    10b8:	8c 63       	ori	r24, 0x3C	; 60
    10ba:	8b b9       	out	0x0b, r24	; 11
    10bc:	08 95       	ret

000010be <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <atraso_debounce+0x6>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
    10c8:	1a 82       	std	Y+2, r1	; 0x02
    10ca:	19 82       	std	Y+1, r1	; 0x01
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <atraso_debounce+0x1a>
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	88 3e       	cpi	r24, 0xE8	; 232
    10de:	93 40       	sbci	r25, 0x03	; 3
    10e0:	b0 f3       	brcs	.-20     	; 0x10ce <atraso_debounce+0x10>
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    10f4:	c0 e0       	ldi	r28, 0x00	; 0
    10f6:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
    10f8:	12 c0       	rjmp	.+36     	; 0x111e <debounce+0x32>
        atraso_debounce();
    10fa:	0e 94 5f 08 	call	0x10be	; 0x10be <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
    10fe:	29 b1       	in	r18, 0x09	; 9
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	01 2e       	mov	r0, r17
    1106:	02 c0       	rjmp	.+4      	; 0x110c <debounce+0x20>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <debounce+0x1c>
    1110:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
    1112:	d8 13       	cpse	r29, r24
    1114:	02 c0       	rjmp	.+4      	; 0x111a <debounce+0x2e>
            counter++;
    1116:	cf 5f       	subi	r28, 0xFF	; 255
    1118:	01 c0       	rjmp	.+2      	; 0x111c <debounce+0x30>
        } else {
            counter = 0;
    111a:	c0 e0       	ldi	r28, 0x00	; 0
    111c:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
    111e:	c7 30       	cpi	r28, 0x07	; 7
    1120:	61 f7       	brne	.-40     	; 0x10fa <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
    1122:	8d 2f       	mov	r24, r29
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	08 95       	ret

0000112c <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
    112c:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
    112e:	85 b1       	in	r24, 0x05	; 5
    1130:	83 60       	ori	r24, 0x03	; 3
    1132:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
    1134:	8b b1       	in	r24, 0x0b	; 11
    1136:	80 6c       	ori	r24, 0xC0	; 192
    1138:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    113a:	85 b1       	in	r24, 0x05	; 5
    113c:	8d 7f       	andi	r24, 0xFD	; 253
    113e:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
    1140:	85 e0       	ldi	r24, 0x05	; 5
    1142:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    1146:	88 23       	and	r24, r24
    1148:	11 f0       	breq	.+4      	; 0x114e <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
    114a:	c0 e0       	ldi	r28, 0x00	; 0
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
    114e:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
    1150:	84 e0       	ldi	r24, 0x04	; 4
    1152:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    1156:	81 11       	cpse	r24, r1
    1158:	01 c0       	rjmp	.+2      	; 0x115c <varredura+0x30>
    115a:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    1162:	81 11       	cpse	r24, r1
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <varredura+0x3c>
    1166:	c3 e3       	ldi	r28, 0x33	; 51
	if (!debounce(COL4 - 0)) tecla = 'A'; 
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    116e:	81 11       	cpse	r24, r1
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <varredura+0x48>
    1172:	c1 e4       	ldi	r28, 0x41	; 65
    PORTB |= (1 << LIN1); // Desativa LIN1
    1174:	85 b1       	in	r24, 0x05	; 5
    1176:	82 60       	ori	r24, 0x02	; 2
    1178:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
    117a:	85 b1       	in	r24, 0x05	; 5
    117c:	8e 7f       	andi	r24, 0xFE	; 254
    117e:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    1186:	81 11       	cpse	r24, r1
    1188:	01 c0       	rjmp	.+2      	; 0x118c <varredura+0x60>
    118a:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
    118c:	84 e0       	ldi	r24, 0x04	; 4
    118e:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    1192:	81 11       	cpse	r24, r1
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <varredura+0x6c>
    1196:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
    1198:	83 e0       	ldi	r24, 0x03	; 3
    119a:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    119e:	81 11       	cpse	r24, r1
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <varredura+0x78>
    11a2:	c6 e3       	ldi	r28, 0x36	; 54
	if (!debounce(COL4 - 0)) tecla = 'B'; 
    11a4:	82 e0       	ldi	r24, 0x02	; 2
    11a6:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    11aa:	81 11       	cpse	r24, r1
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <varredura+0x84>
    11ae:	c2 e4       	ldi	r28, 0x42	; 66
    PORTB |= (1 << LIN2); // Desativa LIN2
    11b0:	85 b1       	in	r24, 0x05	; 5
    11b2:	81 60       	ori	r24, 0x01	; 1
    11b4:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
    11b6:	8b b1       	in	r24, 0x0b	; 11
    11b8:	8f 77       	andi	r24, 0x7F	; 127
    11ba:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
    11bc:	85 e0       	ldi	r24, 0x05	; 5
    11be:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    11c2:	81 11       	cpse	r24, r1
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <varredura+0x9c>
    11c6:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
    11c8:	84 e0       	ldi	r24, 0x04	; 4
    11ca:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    11ce:	81 11       	cpse	r24, r1
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <varredura+0xa8>
    11d2:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
    11d4:	83 e0       	ldi	r24, 0x03	; 3
    11d6:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    11da:	81 11       	cpse	r24, r1
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <varredura+0xb4>
    11de:	c9 e3       	ldi	r28, 0x39	; 57
	if (!debounce(COL4 - 0)) tecla = 'C'; 
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    11e6:	81 11       	cpse	r24, r1
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <varredura+0xc0>
    11ea:	c3 e4       	ldi	r28, 0x43	; 67
    PORTD |= (1 << LIN3); // Desativa LIN3
    11ec:	8b b1       	in	r24, 0x0b	; 11
    11ee:	80 68       	ori	r24, 0x80	; 128
    11f0:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
    11f2:	8b b1       	in	r24, 0x0b	; 11
    11f4:	8f 7b       	andi	r24, 0xBF	; 191
    11f6:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
    11f8:	85 e0       	ldi	r24, 0x05	; 5
    11fa:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    11fe:	81 11       	cpse	r24, r1
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <varredura+0xd8>
    1202:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    120a:	81 11       	cpse	r24, r1
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <varredura+0xe4>
    120e:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    1216:	81 11       	cpse	r24, r1
    1218:	01 c0       	rjmp	.+2      	; 0x121c <varredura+0xf0>
    121a:	c3 e2       	ldi	r28, 0x23	; 35
	if (!debounce(COL4 - 0)) tecla = 'D'; 
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	0e 94 76 08 	call	0x10ec	; 0x10ec <debounce>
    1222:	81 11       	cpse	r24, r1
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <varredura+0xfc>
    1226:	c4 e4       	ldi	r28, 0x44	; 68
    PORTD |= (1 << LIN4); // Desativa LIN4
    1228:	8b b1       	in	r24, 0x0b	; 11
    122a:	80 64       	ori	r24, 0x40	; 64
    122c:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
    122e:	8c 2f       	mov	r24, r28
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    1234:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    1236:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    1238:	85 e0       	ldi	r24, 0x05	; 5
    123a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    123c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    1240:	81 ef       	ldi	r24, 0xF1	; 241
    1242:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	08 c0       	rjmp	.+16     	; 0x125a <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    124a:	a9 9b       	sbis	0x15, 1	; 21
    124c:	fe cf       	rjmp	.-4      	; 0x124a <delay1ms+0x16>
		TCNT0 = 241;
    124e:	91 ef       	ldi	r25, 0xF1	; 241
    1250:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    1252:	92 e0       	ldi	r25, 0x02	; 2
    1254:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    1256:	2f 5f       	subi	r18, 0xFF	; 255
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	24 17       	cp	r18, r20
    125c:	35 07       	cpc	r19, r21
    125e:	ac f3       	brlt	.-22     	; 0x124a <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    1260:	15 bc       	out	0x25, r1	; 37
    1262:	08 95       	ret

00001264 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    1264:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    1266:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    126c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    1270:	85 ef       	ldi	r24, 0xF5	; 245
    1272:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	09 c0       	rjmp	.+18     	; 0x128c <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    127a:	a9 9b       	sbis	0x15, 1	; 21
    127c:	fe cf       	rjmp	.-4      	; 0x127a <delay1us+0x16>
		TCNT0 = 245;
    127e:	95 ef       	ldi	r25, 0xF5	; 245
    1280:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    1282:	95 b3       	in	r25, 0x15	; 21
    1284:	92 60       	ori	r25, 0x02	; 2
    1286:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    1288:	2f 5f       	subi	r18, 0xFF	; 255
    128a:	3f 4f       	sbci	r19, 0xFF	; 255
    128c:	24 17       	cp	r18, r20
    128e:	35 07       	cpc	r19, r21
    1290:	a4 f3       	brlt	.-24     	; 0x127a <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    1292:	15 bc       	out	0x25, r1	; 37
    1294:	08 95       	ret

00001296 <__tablejump2__>:
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	05 90       	lpm	r0, Z+
    129c:	f4 91       	lpm	r31, Z
    129e:	e0 2d       	mov	r30, r0
    12a0:	09 94       	ijmp

000012a2 <strcat>:
    12a2:	fb 01       	movw	r30, r22
    12a4:	dc 01       	movw	r26, r24
    12a6:	0d 90       	ld	r0, X+
    12a8:	00 20       	and	r0, r0
    12aa:	e9 f7       	brne	.-6      	; 0x12a6 <strcat+0x4>
    12ac:	11 97       	sbiw	r26, 0x01	; 1
    12ae:	01 90       	ld	r0, Z+
    12b0:	0d 92       	st	X+, r0
    12b2:	00 20       	and	r0, r0
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <strcat+0xc>
    12b6:	08 95       	ret

000012b8 <strncat>:
    12b8:	fb 01       	movw	r30, r22
    12ba:	dc 01       	movw	r26, r24
    12bc:	0d 90       	ld	r0, X+
    12be:	00 20       	and	r0, r0
    12c0:	e9 f7       	brne	.-6      	; 0x12bc <strncat+0x4>
    12c2:	11 97       	sbiw	r26, 0x01	; 1
    12c4:	41 50       	subi	r20, 0x01	; 1
    12c6:	50 40       	sbci	r21, 0x00	; 0
    12c8:	28 f0       	brcs	.+10     	; 0x12d4 <strncat+0x1c>
    12ca:	01 90       	ld	r0, Z+
    12cc:	00 20       	and	r0, r0
    12ce:	0d 92       	st	X+, r0
    12d0:	c9 f7       	brne	.-14     	; 0x12c4 <strncat+0xc>
    12d2:	08 95       	ret
    12d4:	1c 92       	st	X, r1
    12d6:	08 95       	ret

000012d8 <strncpy>:
    12d8:	fb 01       	movw	r30, r22
    12da:	dc 01       	movw	r26, r24
    12dc:	41 50       	subi	r20, 0x01	; 1
    12de:	50 40       	sbci	r21, 0x00	; 0
    12e0:	48 f0       	brcs	.+18     	; 0x12f4 <strncpy+0x1c>
    12e2:	01 90       	ld	r0, Z+
    12e4:	0d 92       	st	X+, r0
    12e6:	00 20       	and	r0, r0
    12e8:	c9 f7       	brne	.-14     	; 0x12dc <strncpy+0x4>
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <strncpy+0x16>
    12ec:	1d 92       	st	X+, r1
    12ee:	41 50       	subi	r20, 0x01	; 1
    12f0:	50 40       	sbci	r21, 0x00	; 0
    12f2:	e0 f7       	brcc	.-8      	; 0x12ec <strncpy+0x14>
    12f4:	08 95       	ret

000012f6 <strstr>:
    12f6:	fb 01       	movw	r30, r22
    12f8:	51 91       	ld	r21, Z+
    12fa:	55 23       	and	r21, r21
    12fc:	a9 f0       	breq	.+42     	; 0x1328 <strstr+0x32>
    12fe:	bf 01       	movw	r22, r30
    1300:	dc 01       	movw	r26, r24
    1302:	4d 91       	ld	r20, X+
    1304:	45 17       	cp	r20, r21
    1306:	41 11       	cpse	r20, r1
    1308:	e1 f7       	brne	.-8      	; 0x1302 <strstr+0xc>
    130a:	59 f4       	brne	.+22     	; 0x1322 <strstr+0x2c>
    130c:	cd 01       	movw	r24, r26
    130e:	01 90       	ld	r0, Z+
    1310:	00 20       	and	r0, r0
    1312:	49 f0       	breq	.+18     	; 0x1326 <strstr+0x30>
    1314:	4d 91       	ld	r20, X+
    1316:	40 15       	cp	r20, r0
    1318:	41 11       	cpse	r20, r1
    131a:	c9 f3       	breq	.-14     	; 0x130e <strstr+0x18>
    131c:	fb 01       	movw	r30, r22
    131e:	41 11       	cpse	r20, r1
    1320:	ef cf       	rjmp	.-34     	; 0x1300 <strstr+0xa>
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	08 95       	ret

0000132a <_exit>:
    132a:	f8 94       	cli

0000132c <__stop_program>:
    132c:	ff cf       	rjmp	.-2      	; 0x132c <__stop_program>
