
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ae  00800100  00001198  0000122c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001198  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  008002ae  008002ae  000013da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028cc  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e84  00000000  00000000  00003ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a9  00000000  00000000  00004d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  00006118  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e0  00000000  00000000  0000664c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014b7  00000000  00000000  00006f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000083e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_18>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	d9 02       	muls	r29, r25
      6a:	eb 02       	muls	r30, r27
      6c:	f4 02       	muls	r31, r20
      6e:	fd 02       	muls	r31, r29
      70:	2e 03       	fmul	r18, r22
      72:	71 03       	mulsu	r23, r17
      74:	75 03       	mulsu	r23, r21
      76:	89 03       	fmulsu	r16, r17

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	12 e0       	ldi	r17, 0x02	; 2
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e8 e9       	ldi	r30, 0x98	; 152
      8c:	f1 e1       	ldi	r31, 0x11	; 17
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	ae 3a       	cpi	r26, 0xAE	; 174
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	23 e0       	ldi	r18, 0x03	; 3
      9c:	ae ea       	ldi	r26, 0xAE	; 174
      9e:	b2 e0       	ldi	r27, 0x02	; 2
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	ac 33       	cpi	r26, 0x3C	; 60
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 b1 02 	call	0x562	; 0x562 <main>
      ae:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <mensagem_Inicial>:
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){

		LCD_texto_correndo(0, " Banco UFRGS ", 300, 0);
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	4c e2       	ldi	r20, 0x2C	; 44
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	71 e0       	ldi	r23, 0x01	; 1
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_texto_correndo>
		LCD_Escrever_Linha(1, 0, "Digite cartao: ");
      c4:	4e e0       	ldi	r20, 0x0E	; 14
      c6:	51 e0       	ldi	r21, 0x01	; 1
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
      d0:	08 95       	ret

000000d2 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      d2:	cf 93       	push	r28
      d4:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      d6:	88 b1       	in	r24, 0x08	; 8
      d8:	80 7f       	andi	r24, 0xF0	; 240
      da:	9c 2f       	mov	r25, r28
      dc:	92 95       	swap	r25
      de:	9f 70       	andi	r25, 0x0F	; 15
      e0:	89 2b       	or	r24, r25
      e2:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
      e4:	88 b1       	in	r24, 0x08	; 8
      e6:	8f 7d       	andi	r24, 0xDF	; 223
      e8:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
      ea:	88 b1       	in	r24, 0x08	; 8
      ec:	80 61       	ori	r24, 0x10	; 16
      ee:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
      f0:	88 b1       	in	r24, 0x08	; 8
      f2:	8f 7e       	andi	r24, 0xEF	; 239
      f4:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
      f6:	84 e6       	ldi	r24, 0x64	; 100
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 60 08 	call	0x10c0	; 0x10c0 <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
      fe:	88 b1       	in	r24, 0x08	; 8
     100:	80 7f       	andi	r24, 0xF0	; 240
     102:	cf 70       	andi	r28, 0x0F	; 15
     104:	c8 2b       	or	r28, r24
     106:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     108:	88 b1       	in	r24, 0x08	; 8
     10a:	80 61       	ori	r24, 0x10	; 16
     10c:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     10e:	88 b1       	in	r24, 0x08	; 8
     110:	8f 7e       	andi	r24, 0xEF	; 239
     112:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     114:	82 e0       	ldi	r24, 0x02	; 2
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
}
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

00000120 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     120:	8f ef       	ldi	r24, 0xFF	; 255
     122:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     124:	8a e0       	ldi	r24, 0x0A	; 10
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     132:	88 e2       	ldi	r24, 0x28	; 40
     134:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     138:	8c e0       	ldi	r24, 0x0C	; 12
     13a:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     13e:	86 e0       	ldi	r24, 0x06	; 6
     140:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
     14a:	08 95       	ret

0000014c <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     152:	80 e8       	ldi	r24, 0x80	; 128
     154:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
     158:	08 95       	ret

0000015a <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	ec 01       	movw	r28, r24
	while(*texto) {
     160:	23 c0       	rjmp	.+70     	; 0x1a8 <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     162:	98 b1       	in	r25, 0x08	; 8
     164:	90 7f       	andi	r25, 0xF0	; 240
     166:	82 95       	swap	r24
     168:	8f 70       	andi	r24, 0x0F	; 15
     16a:	89 2b       	or	r24, r25
     16c:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     16e:	88 b1       	in	r24, 0x08	; 8
     170:	80 62       	ori	r24, 0x20	; 32
     172:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     174:	88 b1       	in	r24, 0x08	; 8
     176:	80 61       	ori	r24, 0x10	; 16
     178:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     17a:	88 b1       	in	r24, 0x08	; 8
     17c:	8f 7e       	andi	r24, 0xEF	; 239
     17e:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     180:	88 ec       	ldi	r24, 0xC8	; 200
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 60 08 	call	0x10c0	; 0x10c0 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     188:	98 b1       	in	r25, 0x08	; 8
     18a:	89 91       	ld	r24, Y+
     18c:	90 7f       	andi	r25, 0xF0	; 240
     18e:	8f 70       	andi	r24, 0x0F	; 15
     190:	89 2b       	or	r24, r25
     192:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     194:	88 b1       	in	r24, 0x08	; 8
     196:	80 61       	ori	r24, 0x10	; 16
     198:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     19a:	88 b1       	in	r24, 0x08	; 8
     19c:	8f 7e       	andi	r24, 0xEF	; 239
     19e:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1a8:	88 81       	ld	r24, Y
     1aa:	81 11       	cpse	r24, r1
     1ac:	da cf       	rjmp	.-76     	; 0x162 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1ba:	81 11       	cpse	r24, r1
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <LCD_Escrever_Linha+0x1a>
     1be:	60 31       	cpi	r22, 0x10	; 16
     1c0:	30 f4       	brcc	.+12     	; 0x1ce <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1c2:	86 2f       	mov	r24, r22
     1c4:	8f 70       	andi	r24, 0x0F	; 15
     1c6:	80 68       	ori	r24, 0x80	; 128
     1c8:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
     1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	39 f4       	brne	.+14     	; 0x1e0 <LCD_Escrever_Linha+0x2c>
     1d2:	60 31       	cpi	r22, 0x10	; 16
     1d4:	28 f4       	brcc	.+10     	; 0x1e0 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1d6:	86 2f       	mov	r24, r22
     1d8:	8f 70       	andi	r24, 0x0F	; 15
     1da:	80 6c       	ori	r24, 0xC0	; 192
     1dc:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     1e0:	ce 01       	movw	r24, r28
     1e2:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     1e6:	80 e8       	ldi	r24, 0x80	; 128
     1e8:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <LCD_texto_correndo>:

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
     1f2:	6f 92       	push	r6
     1f4:	7f 92       	push	r7
     1f6:	8f 92       	push	r8
     1f8:	9f 92       	push	r9
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	61 97       	sbiw	r28, 0x11	; 17
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	78 2e       	mov	r7, r24
     220:	4a 01       	movw	r8, r20
     222:	62 2e       	mov	r6, r18
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     224:	cd b6       	in	r12, 0x3d	; 61
     226:	de b6       	in	r13, 0x3e	; 62
	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
}

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
     228:	ad b6       	in	r10, 0x3d	; 61
     22a:	be b6       	in	r11, 0x3e	; 62
    uint8_t tamanho = strlen(texto);
     22c:	fb 01       	movw	r30, r22
     22e:	01 90       	ld	r0, Z+
     230:	00 20       	and	r0, r0
     232:	e9 f7       	brne	.-6      	; 0x22e <LCD_texto_correndo+0x3c>
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	e6 1b       	sub	r30, r22
     238:	f7 0b       	sbc	r31, r23
     23a:	0e 2f       	mov	r16, r30
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
     23c:	e1 31       	cpi	r30, 0x11	; 17
     23e:	28 f4       	brcc	.+10     	; 0x24a <LCD_texto_correndo+0x58>
        LCD_Escrever_Linha(linha, 0, texto);
     240:	ab 01       	movw	r20, r22
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
        return;
     248:	42 c0       	rjmp	.+132    	; 0x2ce <LCD_texto_correndo+0xdc>
    }
    
    // Adiciona espaços no final para melhor visualização
    char texto_extendido[tamanho + 17];
     24a:	ff 27       	eor	r31, r31
     24c:	71 96       	adiw	r30, 0x11	; 17
     24e:	8d b7       	in	r24, 0x3d	; 61
     250:	9e b7       	in	r25, 0x3e	; 62
     252:	8e 1b       	sub	r24, r30
     254:	9f 0b       	sbc	r25, r31
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	9e bf       	out	0x3e, r25	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	8d bf       	out	0x3d, r24	; 61
     260:	01 96       	adiw	r24, 0x01	; 1
     262:	7c 01       	movw	r14, r24
    strcpy(texto_extendido, texto);
     264:	0e 94 8a 08 	call	0x1114	; 0x1114 <strcpy>
    strcat(texto_extendido, "                "); // 16 espaços
     268:	d7 01       	movw	r26, r14
     26a:	0d 90       	ld	r0, X+
     26c:	00 20       	and	r0, r0
     26e:	e9 f7       	brne	.-6      	; 0x26a <LCD_texto_correndo+0x78>
     270:	11 97       	sbiw	r26, 0x01	; 1
     272:	81 e1       	ldi	r24, 0x11	; 17
     274:	ee e1       	ldi	r30, 0x1E	; 30
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	01 90       	ld	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	8a 95       	dec	r24
     27e:	e1 f7       	brne	.-8      	; 0x278 <LCD_texto_correndo+0x86>
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	1b c0       	rjmp	.+54     	; 0x2ba <LCD_texto_correndo+0xc8>
            // Copia 16 caracteres começando na posição i
            strncpy(buffer, &texto_extendido[i], 16);
     284:	40 e1       	ldi	r20, 0x10	; 16
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	b7 01       	movw	r22, r14
     28a:	61 0f       	add	r22, r17
     28c:	71 1d       	adc	r23, r1
     28e:	ce 01       	movw	r24, r28
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	0e 94 a1 08 	call	0x1142	; 0x1142 <strncpy>
            buffer[16] = '\0';
     296:	19 8a       	std	Y+17, r1	; 0x11
            
            LCD_Escrever_Linha(linha, 0, buffer);
     298:	ae 01       	movw	r20, r28
     29a:	4f 5f       	subi	r20, 0xFF	; 255
     29c:	5f 4f       	sbci	r21, 0xFF	; 255
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	87 2d       	mov	r24, r7
     2a2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
            delay1ms(velocidade_ms);
     2a6:	c4 01       	movw	r24, r8
     2a8:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
     2ac:	0e 94 c4 07 	call	0xf88	; 0xf88 <varredura>
     2b0:	89 2b       	or	r24, r25
     2b2:	11 f0       	breq	.+4      	; 0x2b8 <LCD_texto_correndo+0xc6>
     2b4:	66 20       	and	r6, r6
     2b6:	59 f0       	breq	.+22     	; 0x2ce <LCD_texto_correndo+0xdc>
    char texto_extendido[tamanho + 17];
    strcpy(texto_extendido, texto);
    strcat(texto_extendido, "                "); // 16 espaços
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
     2b8:	1f 5f       	subi	r17, 0xFF	; 255
     2ba:	01 17       	cp	r16, r17
     2bc:	18 f7       	brcc	.-58     	; 0x284 <LCD_texto_correndo+0x92>
            delay1ms(velocidade_ms);
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     2be:	61 10       	cpse	r6, r1
     2c0:	df cf       	rjmp	.-66     	; 0x280 <LCD_texto_correndo+0x8e>
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	be be       	out	0x3e, r11	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	ad be       	out	0x3d, r10	; 61
     2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <LCD_texto_correndo+0xe6>
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
        LCD_Escrever_Linha(linha, 0, texto);
        return;
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	f8 94       	cli
     2d2:	be be       	out	0x3e, r11	; 62
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	ad be       	out	0x3d, r10	; 61
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de be       	out	0x3e, r13	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd be       	out	0x3d, r12	; 61
     2e2:	61 96       	adiw	r28, 0x11	; 17
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	bf 90       	pop	r11
     300:	af 90       	pop	r10
     302:	9f 90       	pop	r9
     304:	8f 90       	pop	r8
     306:	7f 90       	pop	r7
     308:	6f 90       	pop	r6
     30a:	08 95       	ret

0000030c <ler_codigo_aluno>:
	ESTADO_PAGAMENTO,
	ESTADO_SALDO
} Estado;

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	00 d0       	rcall	.+0      	; 0x31a <ler_codigo_aluno+0xe>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
     320:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
     324:	4f e2       	ldi	r20, 0x2F	; 47
     326:	51 e0       	ldi	r21, 0x01	; 1
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     330:	4e e3       	ldi	r20, 0x3E	; 62
     332:	51 e0       	ldi	r21, 0x01	; 1
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	ESTADO_SALDO
} Estado;

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
	int pos = 0;
     33c:	00 e0       	ldi	r16, 0x00	; 0
     33e:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     340:	1d c0       	rjmp	.+58     	; 0x37c <ler_codigo_aluno+0x70>
		if (isBlocked()) return;
     342:	0e 94 01 07 	call	0xe02	; 0xe02 <isBlocked>
     346:	89 2b       	or	r24, r25
     348:	f1 f4       	brne	.+60     	; 0x386 <ler_codigo_aluno+0x7a>
		tecla = varredura();
     34a:	0e 94 c4 07 	call	0xf88	; 0xf88 <varredura>
		if (tecla >= '0' && tecla <= '9') {
     34e:	90 ed       	ldi	r25, 0xD0	; 208
     350:	98 0f       	add	r25, r24
     352:	9a 30       	cpi	r25, 0x0A	; 10
     354:	98 f4       	brcc	.+38     	; 0x37c <ler_codigo_aluno+0x70>
			codigo[pos] = tecla;
     356:	f7 01       	movw	r30, r14
     358:	e0 0f       	add	r30, r16
     35a:	f1 1f       	adc	r31, r17
     35c:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
     362:	ae 01       	movw	r20, r28
     364:	4f 5f       	subi	r20, 0xFF	; 255
     366:	5f 4f       	sbci	r21, 0xFF	; 255
     368:	60 2f       	mov	r22, r16
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			pos++;
     370:	0f 5f       	subi	r16, 0xFF	; 255
     372:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     374:	88 ec       	ldi	r24, 0xC8	; 200
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     37c:	06 30       	cpi	r16, 0x06	; 6
     37e:	11 05       	cpc	r17, r1
     380:	04 f3       	brlt	.-64     	; 0x342 <ler_codigo_aluno+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	codigo[6] = '\0';
     382:	f7 01       	movw	r30, r14
     384:	16 82       	std	Z+6, r1	; 0x06
}
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <ler_senha+0xe>
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
     3ac:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite senha:");
     3b0:	45 e4       	ldi	r20, 0x45	; 69
     3b2:	51 e0       	ldi	r21, 0x01	; 1
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     3bc:	4e e3       	ldi	r20, 0x3E	; 62
     3be:	51 e0       	ldi	r21, 0x01	; 1
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
	int pos = 0;
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     3cc:	1e c0       	rjmp	.+60     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		if (isBlocked()) return;
     3ce:	0e 94 01 07 	call	0xe02	; 0xe02 <isBlocked>
     3d2:	89 2b       	or	r24, r25
     3d4:	f9 f4       	brne	.+62     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		tecla = varredura();
     3d6:	0e 94 c4 07 	call	0xf88	; 0xf88 <varredura>
		if (tecla >= '0' && tecla <= '9') {
     3da:	90 ed       	ldi	r25, 0xD0	; 208
     3dc:	98 0f       	add	r25, r24
     3de:	9a 30       	cpi	r25, 0x0A	; 10
     3e0:	a0 f4       	brcc	.+40     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			senha[pos] = tecla;
     3e2:	f7 01       	movw	r30, r14
     3e4:	e0 0f       	add	r30, r16
     3e6:	f1 1f       	adc	r31, r17
     3e8:	80 83       	st	Z, r24
			char temp[2] = { '*', '\0' };
     3ea:	8a e2       	ldi	r24, 0x2A	; 42
     3ec:	89 83       	std	Y+1, r24	; 0x01
     3ee:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
     3f0:	ae 01       	movw	r20, r28
     3f2:	4f 5f       	subi	r20, 0xFF	; 255
     3f4:	5f 4f       	sbci	r21, 0xFF	; 255
     3f6:	60 2f       	mov	r22, r16
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			pos++;
     3fe:	0f 5f       	subi	r16, 0xFF	; 255
     400:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     402:	88 ec       	ldi	r24, 0xC8	; 200
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     40a:	06 30       	cpi	r16, 0x06	; 6
     40c:	11 05       	cpc	r17, r1
     40e:	fc f2       	brlt	.-66     	; 0x3ce <ler_senha+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	senha[6] = '\0';
     410:	f7 01       	movw	r30, r14
     412:	16 82       	std	Z+6, r1	; 0x06
}
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	08 95       	ret

00000426 <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	ae 97       	sbiw	r28, 0x2e	; 46
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     43e:	dc 01       	movw	r26, r24
     440:	0d 90       	ld	r0, X+
     442:	00 20       	and	r0, r0
     444:	e9 f7       	brne	.-6      	; 0x440 <validar_codigo_aluno+0x1a>
     446:	11 97       	sbiw	r26, 0x01	; 1
     448:	a8 1b       	sub	r26, r24
     44a:	b9 0b       	sbc	r27, r25
     44c:	16 97       	sbiw	r26, 0x06	; 6
     44e:	09 f0       	breq	.+2      	; 0x452 <validar_codigo_aluno+0x2c>
     450:	55 c0       	rjmp	.+170    	; 0x4fc <validar_codigo_aluno+0xd6>
     452:	db 01       	movw	r26, r22
     454:	0d 90       	ld	r0, X+
     456:	00 20       	and	r0, r0
     458:	e9 f7       	brne	.-6      	; 0x454 <validar_codigo_aluno+0x2e>
     45a:	11 97       	sbiw	r26, 0x01	; 1
     45c:	a6 1b       	sub	r26, r22
     45e:	b7 0b       	sbc	r27, r23
     460:	16 97       	sbiw	r26, 0x06	; 6
     462:	09 f0       	breq	.+2      	; 0x466 <validar_codigo_aluno+0x40>
     464:	4e c0       	rjmp	.+156    	; 0x502 <validar_codigo_aluno+0xdc>
     466:	fc 01       	movw	r30, r24

	char mensagem[14];
	mensagem[0] = 'C';
     468:	83 e4       	ldi	r24, 0x43	; 67
     46a:	89 83       	std	Y+1, r24	; 0x01
	mensagem[1] = 'E';
     46c:	85 e4       	ldi	r24, 0x45	; 69
     46e:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(&mensagem[2], codigo, 6);
     470:	86 e0       	ldi	r24, 0x06	; 6
     472:	de 01       	movw	r26, r28
     474:	13 96       	adiw	r26, 0x03	; 3
     476:	01 90       	ld	r0, Z+
     478:	0d 92       	st	X+, r0
     47a:	8a 95       	dec	r24
     47c:	e1 f7       	brne	.-8      	; 0x476 <validar_codigo_aluno+0x50>
	memcpy(&mensagem[8], senha, 6);
     47e:	86 e0       	ldi	r24, 0x06	; 6
     480:	fb 01       	movw	r30, r22
     482:	de 01       	movw	r26, r28
     484:	19 96       	adiw	r26, 0x09	; 9
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	8a 95       	dec	r24
     48c:	e1 f7       	brne	.-8      	; 0x486 <validar_codigo_aluno+0x60>

	SerialEnviaChars(14, mensagem);
     48e:	be 01       	movw	r22, r28
     490:	6f 5f       	subi	r22, 0xFF	; 255
     492:	7f 4f       	sbci	r23, 0xFF	; 255
     494:	8e e0       	ldi	r24, 0x0E	; 14
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 b0 05 	call	0xb60	; 0xb60 <SerialEnviaChars>

	char resposta[32];
	memset(resposta, 0, sizeof(resposta));
     49c:	8e 01       	movw	r16, r28
     49e:	01 5f       	subi	r16, 0xF1	; 241
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	80 e2       	ldi	r24, 0x20	; 32
     4a4:	f8 01       	movw	r30, r16
     4a6:	11 92       	st	Z+, r1
     4a8:	8a 95       	dec	r24
     4aa:	e9 f7       	brne	.-6      	; 0x4a6 <validar_codigo_aluno+0x80>

	SerialRecebeChars(31, resposta);
     4ac:	b8 01       	movw	r22, r16
     4ae:	8f e1       	ldi	r24, 0x1F	; 31
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 3c 07 	call	0xe78	; 0xe78 <SerialRecebeChars>

	LCD_limpar();
     4b6:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Resp Servidor:");
     4ba:	43 e5       	ldi	r20, 0x53	; 83
     4bc:	51 e0       	ldi	r21, 0x01	; 1
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, resposta);
     4c6:	a8 01       	movw	r20, r16
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	delay1ms(2000);
     4d0:	80 ed       	ldi	r24, 0xD0	; 208
     4d2:	97 e0       	ldi	r25, 0x07	; 7
     4d4:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
	LCD_limpar();
     4d8:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
     4dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     4de:	83 35       	cpi	r24, 0x53	; 83
     4e0:	99 f4       	brne	.+38     	; 0x508 <validar_codigo_aluno+0xe2>
     4e2:	88 89       	ldd	r24, Y+16	; 0x10
     4e4:	85 34       	cpi	r24, 0x45	; 69
     4e6:	99 f4       	brne	.+38     	; 0x50e <validar_codigo_aluno+0xe8>
		if (strstr(resposta, "Nao autorizado") != NULL) {
     4e8:	62 e6       	ldi	r22, 0x62	; 98
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	c8 01       	movw	r24, r16
     4ee:	0e 94 b0 08 	call	0x1160	; 0x1160 <strstr>
     4f2:	89 2b       	or	r24, r25
     4f4:	79 f0       	breq	.+30     	; 0x514 <validar_codigo_aluno+0xee>
			return 0;
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e c0       	rjmp	.+28     	; 0x518 <validar_codigo_aluno+0xf2>
	}
	senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0b c0       	rjmp	.+22     	; 0x518 <validar_codigo_aluno+0xf2>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	08 c0       	rjmp	.+16     	; 0x518 <validar_codigo_aluno+0xf2>
			return 0;
			} else {
			return 1;
		}
	}
	return 0;
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	05 c0       	rjmp	.+10     	; 0x518 <validar_codigo_aluno+0xf2>
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <validar_codigo_aluno+0xf2>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
		if (strstr(resposta, "Nao autorizado") != NULL) {
			return 0;
			} else {
			return 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
     518:	ae 96       	adiw	r28, 0x2e	; 46
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	08 95       	ret

0000052e <aguardar_desbloqueio>:

void aguardar_desbloqueio() {
	LCD_limpar();
     52e:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
     532:	41 e7       	ldi	r20, 0x71	; 113
     534:	51 e0       	ldi	r21, 0x01	; 1
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
     53e:	4e e7       	ldi	r20, 0x7E	; 126
     540:	51 e0       	ldi	r21, 0x01	; 1
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	while (isBlocked()) {
     54a:	04 c0       	rjmp	.+8      	; 0x554 <aguardar_desbloqueio+0x26>
		delay1ms(200);
     54c:	88 ec       	ldi	r24, 0xC8	; 200
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>

void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
	while (isBlocked()) {
     554:	0e 94 01 07 	call	0xe02	; 0xe02 <isBlocked>
     558:	89 2b       	or	r24, r25
     55a:	c1 f7       	brne	.-16     	; 0x54c <aguardar_desbloqueio+0x1e>
		delay1ms(200);
	}
	LCD_limpar();
     55c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
     560:	08 95       	ret

00000562 <main>:
}

int main(void) {
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	2e 97       	sbiw	r28, 0x0e	; 14
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     576:	0e 94 80 07 	call	0xf00	; 0xf00 <prepara_teclado>
	LCD_iniciar();
     57a:	0e 94 90 00 	call	0x120	; 0x120 <LCD_iniciar>
	initUART();
     57e:	0e 94 a1 05 	call	0xb42	; 0xb42 <initUART>
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     582:	00 e0       	ldi	r16, 0x00	; 0
     584:	07 c0       	rjmp	.+14     	; 0x594 <main+0x32>
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     586:	01 e0       	ldi	r16, 0x01	; 1
     588:	05 c0       	rjmp	.+10     	; 0x594 <main+0x32>
			break;

			case ESTADO_CODIGO:
			ler_codigo_aluno(codigo_aluno);
			if (!isBlocked()) estado = ESTADO_SENHA;
     58a:	02 e0       	ldi	r16, 0x02	; 2
     58c:	03 c0       	rjmp	.+6      	; 0x594 <main+0x32>
			break;

			case ESTADO_SENHA:
			ler_senha(senha_aluno);
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     58e:	03 e0       	ldi	r16, 0x03	; 3
     590:	01 c0       	rjmp	.+2      	; 0x594 <main+0x32>
				LCD_Escrever_Linha(0, 0, "Voltando...");
				delay1ms(1000);
				estado = ESTADO_TELA_INICIAL;
				} else {
				switch (tecla) {
					case '1': estado = ESTADO_SAQUE; break;
     592:	05 e0       	ldi	r16, 0x05	; 5
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		if (isBlocked()) {
     594:	0e 94 01 07 	call	0xe02	; 0xe02 <isBlocked>
     598:	89 2b       	or	r24, r25
     59a:	21 f0       	breq	.+8      	; 0x5a4 <main+0x42>
			aguardar_desbloqueio();
     59c:	0e 94 97 02 	call	0x52e	; 0x52e <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     5a0:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     5a2:	f8 cf       	rjmp	.-16     	; 0x594 <main+0x32>
		}

		switch (estado) {
     5a4:	80 2f       	mov	r24, r16
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	fc 01       	movw	r30, r24
     5aa:	ec 5c       	subi	r30, 0xCC	; 204
     5ac:	ff 4f       	sbci	r31, 0xFF	; 255
     5ae:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			LCD_limpar();
     5b2:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			mensagem_Inicial();
     5b6:	0e 94 5b 00 	call	0xb6	; 0xb6 <mensagem_Inicial>
			while (varredura() == 0) {
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <main+0x62>
				if (isBlocked()) break;
     5bc:	0e 94 01 07 	call	0xe02	; 0xe02 <isBlocked>
     5c0:	89 2b       	or	r24, r25
     5c2:	21 f4       	brne	.+8      	; 0x5cc <main+0x6a>

		switch (estado) {
			case ESTADO_TELA_INICIAL:
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     5c4:	0e 94 c4 07 	call	0xf88	; 0xf88 <varredura>
     5c8:	88 23       	and	r24, r24
     5ca:	c1 f3       	breq	.-16     	; 0x5bc <main+0x5a>
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     5cc:	0e 94 01 07 	call	0xe02	; 0xe02 <isBlocked>
     5d0:	89 2b       	or	r24, r25
     5d2:	c9 f2       	breq	.-78     	; 0x586 <main+0x24>
     5d4:	df cf       	rjmp	.-66     	; 0x594 <main+0x32>
			break;

			case ESTADO_CODIGO:
			ler_codigo_aluno(codigo_aluno);
     5d6:	ce 01       	movw	r24, r28
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	0e 94 86 01 	call	0x30c	; 0x30c <ler_codigo_aluno>
			if (!isBlocked()) estado = ESTADO_SENHA;
     5de:	0e 94 01 07 	call	0xe02	; 0xe02 <isBlocked>
     5e2:	89 2b       	or	r24, r25
     5e4:	91 f2       	breq	.-92     	; 0x58a <main+0x28>
     5e6:	d6 cf       	rjmp	.-84     	; 0x594 <main+0x32>
			break;

			case ESTADO_SENHA:
			ler_senha(senha_aluno);
     5e8:	ce 01       	movw	r24, r28
     5ea:	08 96       	adiw	r24, 0x08	; 8
     5ec:	0e 94 cc 01 	call	0x398	; 0x398 <ler_senha>
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     5f0:	0e 94 01 07 	call	0xe02	; 0xe02 <isBlocked>
     5f4:	89 2b       	or	r24, r25
     5f6:	59 f2       	breq	.-106    	; 0x58e <main+0x2c>
     5f8:	cd cf       	rjmp	.-102    	; 0x594 <main+0x32>
			break;

			case ESTADO_VALIDACAO:
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
     5fa:	be 01       	movw	r22, r28
     5fc:	68 5f       	subi	r22, 0xF8	; 248
     5fe:	7f 4f       	sbci	r23, 0xFF	; 255
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	0e 94 13 02 	call	0x426	; 0x426 <validar_codigo_aluno>
     608:	89 2b       	or	r24, r25
     60a:	a1 f0       	breq	.+40     	; 0x634 <main+0xd2>
				LCD_limpar();
     60c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Codigo valido!");
     610:	4b e8       	ldi	r20, 0x8B	; 139
     612:	51 e0       	ldi	r21, 0x01	; 1
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Processando...");
     61c:	4a e9       	ldi	r20, 0x9A	; 154
     61e:	51 e0       	ldi	r21, 0x01	; 1
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				delay1ms(2000);
     628:	80 ed       	ldi	r24, 0xD0	; 208
     62a:	97 e0       	ldi	r25, 0x07	; 7
     62c:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
				estado = ESTADO_MENU;
     630:	04 e0       	ldi	r16, 0x04	; 4
     632:	b0 cf       	rjmp	.-160    	; 0x594 <main+0x32>
				} else {
				LCD_limpar();
     634:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Conta invalida!");
     638:	49 ea       	ldi	r20, 0xA9	; 169
     63a:	51 e0       	ldi	r21, 0x01	; 1
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente novamente");
     644:	49 eb       	ldi	r20, 0xB9	; 185
     646:	51 e0       	ldi	r21, 0x01	; 1
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				delay1ms(2000);
     650:	80 ed       	ldi	r24, 0xD0	; 208
     652:	97 e0       	ldi	r25, 0x07	; 7
     654:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     658:	00 e0       	ldi	r16, 0x00	; 0
     65a:	9c cf       	rjmp	.-200    	; 0x594 <main+0x32>
			}
			break;

			case ESTADO_MENU:
			LCD_limpar();
     65c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			indice_menu=0;
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     660:	49 ec       	ldi	r20, 0xC9	; 201
     662:	51 e0       	ldi	r21, 0x01	; 1
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes)
			LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     66c:	41 ed       	ldi	r20, 0xD1	; 209
     66e:	51 e0       	ldi	r21, 0x01	; 1
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
     678:	04 c0       	rjmp	.+8      	; 0x682 <main+0x120>
			else
			LCD_Escrever_Linha(1, 0, " ");

			while ((tecla = varredura()) == 0) {
				if (isBlocked()) break;
     67a:	0e 94 01 07 	call	0xe02	; 0xe02 <isBlocked>
     67e:	89 2b       	or	r24, r25
     680:	29 f4       	brne	.+10     	; 0x68c <main+0x12a>
			if (indice_menu + 1 < total_opcoes)
			LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
			else
			LCD_Escrever_Linha(1, 0, " ");

			while ((tecla = varredura()) == 0) {
     682:	0e 94 c4 07 	call	0xf88	; 0xf88 <varredura>
     686:	18 2f       	mov	r17, r24
     688:	88 23       	and	r24, r24
     68a:	b9 f3       	breq	.-18     	; 0x67a <main+0x118>
				if (isBlocked()) break;
			}

			delay1ms(300); // Debounce delay
     68c:	8c e2       	ldi	r24, 0x2C	; 44
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>

			if (tecla == 'B' && indice_menu < total_opcoes - 2) {
     694:	12 34       	cpi	r17, 0x42	; 66
     696:	09 f4       	brne	.+2      	; 0x69a <main+0x138>
     698:	7d cf       	rjmp	.-262    	; 0x594 <main+0x32>
				indice_menu++;
				} else if (tecla == 'A' && indice_menu > 0) {
				indice_menu--;
				} else if (tecla == '*') {
     69a:	1a 32       	cpi	r17, 0x2A	; 42
     69c:	71 f4       	brne	.+28     	; 0x6ba <main+0x158>
				LCD_limpar();
     69e:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Voltando...");
     6a2:	4d ed       	ldi	r20, 0xDD	; 221
     6a4:	51 e0       	ldi	r21, 0x01	; 1
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				delay1ms(1000);
     6ae:	88 ee       	ldi	r24, 0xE8	; 232
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     6b6:	00 e0       	ldi	r16, 0x00	; 0
     6b8:	6d cf       	rjmp	.-294    	; 0x594 <main+0x32>
				} else {
				switch (tecla) {
     6ba:	12 33       	cpi	r17, 0x32	; 50
     6bc:	51 f0       	breq	.+20     	; 0x6d2 <main+0x170>
     6be:	20 f4       	brcc	.+8      	; 0x6c8 <main+0x166>
     6c0:	11 33       	cpi	r17, 0x31	; 49
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <main+0x164>
     6c4:	66 cf       	rjmp	.-308    	; 0x592 <main+0x30>
     6c6:	66 cf       	rjmp	.-308    	; 0x594 <main+0x32>
     6c8:	13 33       	cpi	r17, 0x33	; 51
     6ca:	29 f0       	breq	.+10     	; 0x6d6 <main+0x174>
     6cc:	14 33       	cpi	r17, 0x34	; 52
     6ce:	29 f0       	breq	.+10     	; 0x6da <main+0x178>
     6d0:	61 cf       	rjmp	.-318    	; 0x594 <main+0x32>
					case '1': estado = ESTADO_SAQUE; break;
					case '2': estado = ESTADO_PAGAMENTO; break;
     6d2:	06 e0       	ldi	r16, 0x06	; 6
     6d4:	5f cf       	rjmp	.-322    	; 0x594 <main+0x32>
					case '3': estado = ESTADO_SALDO; break;
     6d6:	07 e0       	ldi	r16, 0x07	; 7
     6d8:	5d cf       	rjmp	.-326    	; 0x594 <main+0x32>
					case '4':
					finalizar_sessao(); 
     6da:	0e 94 5a 05 	call	0xab4	; 0xab4 <finalizar_sessao>
					estado = ESTADO_TELA_INICIAL; 
     6de:	00 e0       	ldi	r16, 0x00	; 0
					break;
     6e0:	59 cf       	rjmp	.-334    	; 0x594 <main+0x32>
				}
			}
			break;

			case ESTADO_SAQUE:
			realizar_saque();
     6e2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <realizar_saque>
			estado = ESTADO_MENU;
     6e6:	04 e0       	ldi	r16, 0x04	; 4
			break;
     6e8:	55 cf       	rjmp	.-342    	; 0x594 <main+0x32>

			case ESTADO_PAGAMENTO:
			LCD_limpar();
     6ea:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Pagamento");
     6ee:	43 ed       	ldi	r20, 0xD3	; 211
     6f0:	51 e0       	ldi	r21, 0x01	; 1
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
     6fa:	49 ee       	ldi	r20, 0xE9	; 233
     6fc:	51 e0       	ldi	r21, 0x01	; 1
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			delay1ms(2000);
     706:	80 ed       	ldi	r24, 0xD0	; 208
     708:	97 e0       	ldi	r25, 0x07	; 7
     70a:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
			estado = ESTADO_MENU;
     70e:	04 e0       	ldi	r16, 0x04	; 4
			break;
     710:	41 cf       	rjmp	.-382    	; 0x594 <main+0x32>

			case ESTADO_SALDO:
			consultar_saldo();
     712:	0e 94 98 04 	call	0x930	; 0x930 <consultar_saldo>
			estado = ESTADO_MENU;
     716:	04 e0       	ldi	r16, 0x04	; 4
			break;
     718:	3d cf       	rjmp	.-390    	; 0x594 <main+0x32>

0000071a <enviar_mensagem_saque>:
		}
	}
}

// Função para enviar mensagem de saque
void enviar_mensagem_saque(const char* valor) {
     71a:	cf 92       	push	r12
     71c:	df 92       	push	r13
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	bc 01       	movw	r22, r24
	mensagem[2] = (char)tamanho_valor;

	strncpy(&mensagem[3], valor, tamanho_valor);

	SerialEnviaChars(tamanho_mensagem, mensagem);
}
     730:	ed b6       	in	r14, 0x3d	; 61
     732:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de saque
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
     734:	fc 01       	movw	r30, r24
     736:	01 90       	ld	r0, Z+
     738:	00 20       	and	r0, r0
     73a:	e9 f7       	brne	.-6      	; 0x736 <enviar_mensagem_saque+0x1c>
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	af 01       	movw	r20, r30
     740:	48 1b       	sub	r20, r24
     742:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3;
     744:	6a 01       	movw	r12, r20
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	c8 0e       	add	r12, r24
     74a:	d1 1c       	adc	r13, r1

	char mensagem[tamanho_mensagem];
     74c:	ed b7       	in	r30, 0x3d	; 61
     74e:	fe b7       	in	r31, 0x3e	; 62
     750:	ec 19       	sub	r30, r12
     752:	fd 09       	sbc	r31, r13
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	fe bf       	out	0x3e, r31	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	ed bf       	out	0x3d, r30	; 61
     75e:	0d b7       	in	r16, 0x3d	; 61
     760:	1e b7       	in	r17, 0x3e	; 62
     762:	0f 5f       	subi	r16, 0xFF	; 255
     764:	1f 4f       	sbci	r17, 0xFF	; 255
	mensagem[0] = 'C';
     766:	83 e4       	ldi	r24, 0x43	; 67
     768:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S';
     76a:	83 e5       	ldi	r24, 0x53	; 83
     76c:	f8 01       	movw	r30, r16
     76e:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor;
     770:	42 83       	std	Z+2, r20	; 0x02

	strncpy(&mensagem[3], valor, tamanho_valor);
     772:	8d b7       	in	r24, 0x3d	; 61
     774:	9e b7       	in	r25, 0x3e	; 62
     776:	04 96       	adiw	r24, 0x04	; 4
     778:	0e 94 a1 08 	call	0x1142	; 0x1142 <strncpy>

	SerialEnviaChars(tamanho_mensagem, mensagem);
     77c:	b8 01       	movw	r22, r16
     77e:	c6 01       	movw	r24, r12
     780:	0e 94 b0 05 	call	0xb60	; 0xb60 <SerialEnviaChars>
}
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	fe be       	out	0x3e, r15	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	ed be       	out	0x3d, r14	; 61
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	08 95       	ret

000007a0 <receber_resposta_servidor>:

// Função para receber resposta do servidor
char receber_resposta_servidor(void) {
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <receber_resposta_servidor+0x6>
     7a6:	00 d0       	rcall	.+0      	; 0x7a8 <receber_resposta_servidor+0x8>
     7a8:	1f 92       	push	r1
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
	char resposta[5];

	SerialRecebeChars(3, resposta);
     7ae:	be 01       	movw	r22, r28
     7b0:	6f 5f       	subi	r22, 0xFF	; 255
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 3c 07 	call	0xe78	; 0xe78 <SerialRecebeChars>
	resposta[3]='\0';
     7bc:	1c 82       	std	Y+4, r1	; 0x04

	LCD_limpar();
     7be:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, resposta);
     7c2:	ae 01       	movw	r20, r28
     7c4:	4f 5f       	subi	r20, 0xFF	; 255
     7c6:	5f 4f       	sbci	r21, 0xFF	; 255
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	delay1ms(2000);
     7d0:	80 ed       	ldi	r24, 0xD0	; 208
     7d2:	97 e0       	ldi	r25, 0x07	; 7
     7d4:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>

	if(resposta[0] == 'S' && resposta[1] == 'S') {
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	83 35       	cpi	r24, 0x53	; 83
     7dc:	29 f4       	brne	.+10     	; 0x7e8 <receber_resposta_servidor+0x48>
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	83 35       	cpi	r24, 0x53	; 83
     7e2:	21 f4       	brne	.+8      	; 0x7ec <receber_resposta_servidor+0x4c>
		return resposta[2];
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <receber_resposta_servidor+0x4e>
	}

	return 'E';
     7e8:	85 e4       	ldi	r24, 0x45	; 69
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <receber_resposta_servidor+0x4e>
     7ec:	85 e4       	ldi	r24, 0x45	; 69
}
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <realizar_saque>:
#include <util/delay.h>
#include <string.h>
#include <stdio.h>

// Função para realizar um saque
void realizar_saque(void) {
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	2b 97       	sbiw	r28, 0x0b	; 11
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
     816:	fe 01       	movw	r30, r28
     818:	31 96       	adiw	r30, 0x01	; 1
     81a:	89 e0       	ldi	r24, 0x09	; 9
     81c:	df 01       	movw	r26, r30
     81e:	1d 92       	st	X+, r1
     820:	8a 95       	dec	r24
     822:	e9 f7       	brne	.-6      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
	int pos = 0;
	char tecla;

	LCD_limpar();
     824:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
     828:	4c ef       	ldi	r20, 0xFC	; 252
     82a:	51 e0       	ldi	r21, 0x01	; 1
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
     834:	4c e0       	ldi	r20, 0x0C	; 12
     836:	52 e0       	ldi	r21, 0x02	; 2
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
#include <stdio.h>

// Função para realizar um saque
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
     840:	00 e0       	ldi	r16, 0x00	; 0
     842:	10 e0       	ldi	r17, 0x00	; 0
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		tecla = varredura();
     844:	0e 94 c4 07 	call	0xf88	; 0xf88 <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     848:	90 ed       	ldi	r25, 0xD0	; 208
     84a:	98 0f       	add	r25, r24
     84c:	9a 30       	cpi	r25, 0x0A	; 10
     84e:	d8 f4       	brcc	.+54     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     850:	08 30       	cpi	r16, 0x08	; 8
     852:	11 05       	cpc	r17, r1
     854:	c4 f4       	brge	.+48     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
			valor_saque[pos] = tecla;
     856:	e1 e0       	ldi	r30, 0x01	; 1
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	ec 0f       	add	r30, r28
     85c:	fd 1f       	adc	r31, r29
     85e:	e0 0f       	add	r30, r16
     860:	f1 1f       	adc	r31, r17
     862:	80 83       	st	Z, r24

			char str[2] = {tecla, '\0'};
     864:	8a 87       	std	Y+10, r24	; 0x0a
     866:	1b 86       	std	Y+11, r1	; 0x0b
			LCD_Escrever_Linha(1, 2 + pos, str);
     868:	62 e0       	ldi	r22, 0x02	; 2
     86a:	60 0f       	add	r22, r16
     86c:	ae 01       	movw	r20, r28
     86e:	46 5f       	subi	r20, 0xF6	; 246
     870:	5f 4f       	sbci	r21, 0xFF	; 255
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			pos++;
     878:	0f 5f       	subi	r16, 0xFF	; 255
     87a:	1f 4f       	sbci	r17, 0xFF	; 255

			delay1ms(200);
     87c:	88 ec       	ldi	r24, 0xC8	; 200
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		tecla = varredura();

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     884:	df cf       	rjmp	.-66     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
			LCD_Escrever_Linha(1, 2 + pos, str);
			pos++;

			delay1ms(200);
		}
		else if(tecla == '#' && pos > 0) {
     886:	83 32       	cpi	r24, 0x23	; 35
     888:	99 f5       	brne	.+102    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     88a:	10 16       	cp	r1, r16
     88c:	11 06       	cpc	r1, r17
     88e:	84 f5       	brge	.+96     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
			valor_saque[pos] = '\0';
     890:	e1 e0       	ldi	r30, 0x01	; 1
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	ec 0f       	add	r30, r28
     896:	fd 1f       	adc	r31, r29
     898:	e0 0f       	add	r30, r16
     89a:	f1 1f       	adc	r31, r17
     89c:	10 82       	st	Z, r1

			enviar_mensagem_saque(valor_saque);
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	0e 94 8d 03 	call	0x71a	; 0x71a <enviar_mensagem_saque>
			char resposta = receber_resposta_servidor();
     8a6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <receber_resposta_servidor>
     8aa:	18 2f       	mov	r17, r24

			LCD_limpar();
     8ac:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			if(resposta == 'O') {
     8b0:	1f 34       	cpi	r17, 0x4F	; 79
     8b2:	69 f4       	brne	.+26     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
				LCD_Escrever_Linha(0, 0, "Saque");
     8b4:	4b ec       	ldi	r20, 0xCB	; 203
     8b6:	51 e0       	ldi	r21, 0x01	; 1
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Realizado!");
     8c0:	4f e0       	ldi	r20, 0x0F	; 15
     8c2:	52 e0       	ldi	r21, 0x02	; 2
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
     8cc:	0c c0       	rjmp	.+24     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
				} else {
				LCD_Escrever_Linha(0, 0, "Saldo");
     8ce:	4a e1       	ldi	r20, 0x1A	; 26
     8d0:	52 e0       	ldi	r21, 0x02	; 2
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "insuficiente");
     8da:	40 e2       	ldi	r20, 0x20	; 32
     8dc:	52 e0       	ldi	r21, 0x02	; 2
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			}
			delay1ms(3000);
     8e6:	88 eb       	ldi	r24, 0xB8	; 184
     8e8:	9b e0       	ldi	r25, 0x0B	; 11
     8ea:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
			break;
     8ee:	15 c0       	rjmp	.+42     	; 0x91a <__stack+0x1b>
		}
		else if(tecla == '*') {
     8f0:	8a 32       	cpi	r24, 0x2A	; 42
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
     8f4:	a7 cf       	rjmp	.-178    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
			LCD_limpar();
     8f6:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
     8fa:	4d e2       	ldi	r20, 0x2D	; 45
     8fc:	52 e0       	ldi	r21, 0x02	; 2
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
     906:	46 e3       	ldi	r20, 0x36	; 54
     908:	52 e0       	ldi	r21, 0x02	; 2
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			delay1ms(2000);
     912:	80 ed       	ldi	r24, 0xD0	; 208
     914:	97 e0       	ldi	r25, 0x07	; 7
     916:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
			break;
		}
	}
}
     91a:	2b 96       	adiw	r28, 0x0b	; 11
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	08 95       	ret

00000930 <consultar_saldo>:
	return 'E';
}


// Função para consultar saldo
void consultar_saldo(void) {
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	a9 97       	sbiw	r28, 0x29	; 41
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
	char mensagem[2] = { 'C', 'V' };
     94c:	83 e4       	ldi	r24, 0x43	; 67
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	86 e5       	ldi	r24, 0x56	; 86
     952:	8a 83       	std	Y+2, r24	; 0x02
	SerialEnviaChars(2, mensagem);
     954:	be 01       	movw	r22, r28
     956:	6f 5f       	subi	r22, 0xFF	; 255
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	82 e0       	ldi	r24, 0x02	; 2
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 b0 05 	call	0xb60	; 0xb60 <SerialEnviaChars>

	char resposta_header[3];
	SerialRecebeChars(3, resposta_header);
     962:	be 01       	movw	r22, r28
     964:	6d 5f       	subi	r22, 0xFD	; 253
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 3c 07 	call	0xe78	; 0xe78 <SerialRecebeChars>
	resposta_header[3] = '\0';
     970:	1e 82       	std	Y+6, r1	; 0x06

	if (resposta_header[0] == 'S' && resposta_header[1] == 'V') {
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	83 35       	cpi	r24, 0x53	; 83
     976:	09 f0       	breq	.+2      	; 0x97a <consultar_saldo+0x4a>
     978:	7e c0       	rjmp	.+252    	; 0xa76 <consultar_saldo+0x146>
     97a:	8c 81       	ldd	r24, Y+4	; 0x04
     97c:	86 35       	cpi	r24, 0x56	; 86
     97e:	09 f0       	breq	.+2      	; 0x982 <consultar_saldo+0x52>
     980:	7a c0       	rjmp	.+244    	; 0xa76 <consultar_saldo+0x146>
		unsigned char num_bytes_saldo = resposta_header[2];
     982:	0d 81       	ldd	r16, Y+5	; 0x05

		char saldo_bruto[16];
		memset(saldo_bruto, 0, sizeof(saldo_bruto));
     984:	fe 01       	movw	r30, r28
     986:	7a 96       	adiw	r30, 0x1a	; 26
     988:	80 e1       	ldi	r24, 0x10	; 16
     98a:	df 01       	movw	r26, r30
     98c:	1d 92       	st	X+, r1
     98e:	8a 95       	dec	r24
     990:	e9 f7       	brne	.-6      	; 0x98c <consultar_saldo+0x5c>

		if (num_bytes_saldo >= sizeof(saldo_bruto)) {
     992:	00 31       	cpi	r16, 0x10	; 16
     994:	08 f0       	brcs	.+2      	; 0x998 <consultar_saldo+0x68>
			num_bytes_saldo = sizeof(saldo_bruto) - 1;
     996:	0f e0       	ldi	r16, 0x0F	; 15
		}

		SerialRecebeChars(num_bytes_saldo, saldo_bruto);
     998:	10 e0       	ldi	r17, 0x00	; 0
     99a:	7e 01       	movw	r14, r28
     99c:	ba e1       	ldi	r27, 0x1A	; 26
     99e:	eb 0e       	add	r14, r27
     9a0:	f1 1c       	adc	r15, r1
     9a2:	b7 01       	movw	r22, r14
     9a4:	c8 01       	movw	r24, r16
     9a6:	0e 94 3c 07 	call	0xe78	; 0xe78 <SerialRecebeChars>
		saldo_bruto[num_bytes_saldo] = '\0';
     9aa:	f7 01       	movw	r30, r14
     9ac:	e0 0f       	add	r30, r16
     9ae:	f1 1f       	adc	r31, r17
     9b0:	10 82       	st	Z, r1

		char saldo_formatado[20];
		int len_bruto = strlen(saldo_bruto);
     9b2:	f7 01       	movw	r30, r14
     9b4:	01 90       	ld	r0, Z+
     9b6:	00 20       	and	r0, r0
     9b8:	e9 f7       	brne	.-6      	; 0x9b4 <consultar_saldo+0x84>
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	ee 19       	sub	r30, r14
     9be:	ff 09       	sbc	r31, r15

		if (len_bruto >= 2) {
     9c0:	e2 30       	cpi	r30, 0x02	; 2
     9c2:	f1 05       	cpc	r31, r1
     9c4:	44 f1       	brlt	.+80     	; 0xa16 <consultar_saldo+0xe6>
			strcpy(saldo_formatado, "R$");
     9c6:	7e 01       	movw	r14, r28
     9c8:	86 e0       	ldi	r24, 0x06	; 6
     9ca:	e8 0e       	add	r14, r24
     9cc:	f1 1c       	adc	r15, r1
     9ce:	82 e5       	ldi	r24, 0x52	; 82
     9d0:	94 e2       	ldi	r25, 0x24	; 36
     9d2:	9f 83       	std	Y+7, r25	; 0x07
     9d4:	8e 83       	std	Y+6, r24	; 0x06
     9d6:	d7 01       	movw	r26, r14
     9d8:	12 96       	adiw	r26, 0x02	; 2
     9da:	1c 92       	st	X, r1
			strncat(saldo_formatado, saldo_bruto, len_bruto - 2);
     9dc:	8f 01       	movw	r16, r30
     9de:	02 50       	subi	r16, 0x02	; 2
     9e0:	11 09       	sbc	r17, r1
     9e2:	a8 01       	movw	r20, r16
     9e4:	be 01       	movw	r22, r28
     9e6:	66 5e       	subi	r22, 0xE6	; 230
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	c7 01       	movw	r24, r14
     9ec:	0e 94 91 08 	call	0x1122	; 0x1122 <strncat>
			strcat(saldo_formatado, ".");
     9f0:	f7 01       	movw	r30, r14
     9f2:	01 90       	ld	r0, Z+
     9f4:	00 20       	and	r0, r0
     9f6:	e9 f7       	brne	.-6      	; 0x9f2 <consultar_saldo+0xc2>
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	8e e2       	ldi	r24, 0x2E	; 46
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	91 83       	std	Z+1, r25	; 0x01
     a00:	80 83       	st	Z, r24
			strcat(saldo_formatado, &saldo_bruto[len_bruto - 2]);
     a02:	6a e1       	ldi	r22, 0x1A	; 26
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	6c 0f       	add	r22, r28
     a08:	7d 1f       	adc	r23, r29
     a0a:	60 0f       	add	r22, r16
     a0c:	71 1f       	adc	r23, r17
     a0e:	c7 01       	movw	r24, r14
     a10:	0e 94 7f 08 	call	0x10fe	; 0x10fe <strcat>
     a14:	1c c0       	rjmp	.+56     	; 0xa4e <consultar_saldo+0x11e>
			} else if (len_bruto == 1) {
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	89 f4       	brne	.+34     	; 0xa3c <consultar_saldo+0x10c>
			strcpy(saldo_formatado, "R$0.0");
     a1a:	86 e0       	ldi	r24, 0x06	; 6
     a1c:	e0 e4       	ldi	r30, 0x40	; 64
     a1e:	f2 e0       	ldi	r31, 0x02	; 2
     a20:	de 01       	movw	r26, r28
     a22:	16 96       	adiw	r26, 0x06	; 6
     a24:	01 90       	ld	r0, Z+
     a26:	0d 92       	st	X+, r0
     a28:	8a 95       	dec	r24
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <consultar_saldo+0xf4>
			strcat(saldo_formatado, saldo_bruto);
     a2c:	be 01       	movw	r22, r28
     a2e:	66 5e       	subi	r22, 0xE6	; 230
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	ce 01       	movw	r24, r28
     a34:	06 96       	adiw	r24, 0x06	; 6
     a36:	0e 94 7f 08 	call	0x10fe	; 0x10fe <strcat>
     a3a:	09 c0       	rjmp	.+18     	; 0xa4e <consultar_saldo+0x11e>
			} else {
			strcpy(saldo_formatado, "R$0.00");
     a3c:	87 e0       	ldi	r24, 0x07	; 7
     a3e:	e6 e4       	ldi	r30, 0x46	; 70
     a40:	f2 e0       	ldi	r31, 0x02	; 2
     a42:	de 01       	movw	r26, r28
     a44:	16 96       	adiw	r26, 0x06	; 6
     a46:	01 90       	ld	r0, Z+
     a48:	0d 92       	st	X+, r0
     a4a:	8a 95       	dec	r24
     a4c:	e1 f7       	brne	.-8      	; 0xa46 <consultar_saldo+0x116>
		}

		LCD_limpar();
     a4e:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Saldo atual:");
     a52:	4d e4       	ldi	r20, 0x4D	; 77
     a54:	52 e0       	ldi	r21, 0x02	; 2
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, saldo_formatado);
     a5e:	ae 01       	movw	r20, r28
     a60:	4a 5f       	subi	r20, 0xFA	; 250
     a62:	5f 4f       	sbci	r21, 0xFF	; 255
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		delay1ms(3000);
     a6c:	88 eb       	ldi	r24, 0xB8	; 184
     a6e:	9b e0       	ldi	r25, 0x0B	; 11
     a70:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>

	char resposta_header[3];
	SerialRecebeChars(3, resposta_header);
	resposta_header[3] = '\0';

	if (resposta_header[0] == 'S' && resposta_header[1] == 'V') {
     a74:	12 c0       	rjmp	.+36     	; 0xa9a <consultar_saldo+0x16a>
		LCD_limpar();
		LCD_Escrever_Linha(0, 0, "Saldo atual:");
		LCD_Escrever_Linha(1, 0, saldo_formatado);
		delay1ms(3000);
		} else {
		LCD_limpar();
     a76:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Erro na resposta");
     a7a:	4a e5       	ldi	r20, 0x5A	; 90
     a7c:	52 e0       	ldi	r21, 0x02	; 2
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "do servidor!");
     a86:	4b e6       	ldi	r20, 0x6B	; 107
     a88:	52 e0       	ldi	r21, 0x02	; 2
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		delay1ms(3000);
     a92:	88 eb       	ldi	r24, 0xB8	; 184
     a94:	9b e0       	ldi	r25, 0x0B	; 11
     a96:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
	}
}
     a9a:	a9 96       	adiw	r28, 0x29	; 41
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	08 95       	ret

00000ab4 <finalizar_sessao>:

// Função para finalizar a sessão
void finalizar_sessao(void) {
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	00 d0       	rcall	.+0      	; 0xaba <finalizar_sessao+0x6>
     aba:	00 d0       	rcall	.+0      	; 0xabc <finalizar_sessao+0x8>
     abc:	1f 92       	push	r1
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
	char mensagem[2] = {'C', 'F'};
     ac2:	83 e4       	ldi	r24, 0x43	; 67
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	86 e4       	ldi	r24, 0x46	; 70
     ac8:	8a 83       	std	Y+2, r24	; 0x02
	SerialEnviaChars(2, mensagem);
     aca:	be 01       	movw	r22, r28
     acc:	6f 5f       	subi	r22, 0xFF	; 255
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 b0 05 	call	0xb60	; 0xb60 <SerialEnviaChars>

	char resposta[3];
	SerialRecebeChars(2, resposta);
     ad8:	be 01       	movw	r22, r28
     ada:	6d 5f       	subi	r22, 0xFD	; 253
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 3c 07 	call	0xe78	; 0xe78 <SerialRecebeChars>
	resposta[2] = '\0';
     ae6:	1d 82       	std	Y+5, r1	; 0x05

	LCD_limpar();
     ae8:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	
	if (resposta[0] == 'S' && resposta[1] == 'F') {
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	83 35       	cpi	r24, 0x53	; 83
     af0:	81 f4       	brne	.+32     	; 0xb12 <finalizar_sessao+0x5e>
     af2:	8c 81       	ldd	r24, Y+4	; 0x04
     af4:	86 34       	cpi	r24, 0x46	; 70
     af6:	69 f4       	brne	.+26     	; 0xb12 <finalizar_sessao+0x5e>
		LCD_Escrever_Linha(0, 0, "Sessao");
     af8:	48 e7       	ldi	r20, 0x78	; 120
     afa:	52 e0       	ldi	r21, 0x02	; 2
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "Finalizada!");
     b04:	4f e7       	ldi	r20, 0x7F	; 127
     b06:	52 e0       	ldi	r21, 0x02	; 2
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
     b10:	0c c0       	rjmp	.+24     	; 0xb2a <finalizar_sessao+0x76>
		} else {
		LCD_Escrever_Linha(0, 0, "Erro ao finalizar");
     b12:	4b e8       	ldi	r20, 0x8B	; 139
     b14:	52 e0       	ldi	r21, 0x02	; 2
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "sessao!");
     b1e:	4d e9       	ldi	r20, 0x9D	; 157
     b20:	52 e0       	ldi	r21, 0x02	; 2
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	}
	delay1ms(2000);
     b2a:	80 ed       	ldi	r24, 0xD0	; 208
     b2c:	97 e0       	ldi	r25, 0x07	; 7
     b2e:	0e 94 48 08 	call	0x1090	; 0x1090 <delay1ms>
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <initUART>:
	if (uart_head >= uart_tail) {
		return uart_head - uart_tail;
		} else {
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}
     b42:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     b46:	83 e3       	ldi	r24, 0x33	; 51
     b48:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     b4c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b50:	88 e9       	ldi	r24, 0x98	; 152
     b52:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     b56:	86 e0       	ldi	r24, 0x06	; 6
     b58:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     b5c:	78 94       	sei
     b5e:	08 95       	ret

00000b60 <SerialEnviaChars>:
     b60:	ac 01       	movw	r20, r24
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	0c c0       	rjmp	.+24     	; 0xb80 <SerialEnviaChars+0x20>
     b68:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b6c:	95 ff       	sbrs	r25, 5
     b6e:	fc cf       	rjmp	.-8      	; 0xb68 <SerialEnviaChars+0x8>
     b70:	fb 01       	movw	r30, r22
     b72:	e2 0f       	add	r30, r18
     b74:	f3 1f       	adc	r31, r19
     b76:	90 81       	ld	r25, Z
     b78:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	24 17       	cp	r18, r20
     b82:	35 07       	cpc	r19, r21
     b84:	8c f3       	brlt	.-30     	; 0xb68 <SerialEnviaChars+0x8>
     b86:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b8a:	86 ff       	sbrs	r24, 6
     b8c:	fc cf       	rjmp	.-8      	; 0xb86 <SerialEnviaChars+0x26>
     b8e:	e0 ec       	ldi	r30, 0xC0	; 192
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	80 64       	ori	r24, 0x40	; 64
     b96:	80 83       	st	Z, r24
     b98:	08 95       	ret

00000b9a <SerialEnviaString>:
     b9a:	fc 01       	movw	r30, r24
     b9c:	01 90       	ld	r0, Z+
     b9e:	00 20       	and	r0, r0
     ba0:	e9 f7       	brne	.-6      	; 0xb9c <SerialEnviaString+0x2>
     ba2:	31 97       	sbiw	r30, 0x01	; 1
     ba4:	bc 01       	movw	r22, r24
     ba6:	9f 01       	movw	r18, r30
     ba8:	28 1b       	sub	r18, r24
     baa:	39 0b       	sbc	r19, r25
     bac:	c9 01       	movw	r24, r18
     bae:	0e 94 b0 05 	call	0xb60	; 0xb60 <SerialEnviaChars>
     bb2:	08 95       	ret

00000bb4 <__vector_18>:
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	2f 93       	push	r18
     bc0:	3f 93       	push	r19
     bc2:	4f 93       	push	r20
     bc4:	5f 93       	push	r21
     bc6:	6f 93       	push	r22
     bc8:	7f 93       	push	r23
     bca:	8f 93       	push	r24
     bcc:	9f 93       	push	r25
     bce:	af 93       	push	r26
     bd0:	bf 93       	push	r27
     bd2:	ef 93       	push	r30
     bd4:	ff 93       	push	r31
     bd6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bda:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <sh_bytes_count>
     bde:	9f ef       	ldi	r25, 0xFF	; 255
     be0:	9e 0f       	add	r25, r30
     be2:	95 30       	cpi	r25, 0x05	; 5
     be4:	d8 f4       	brcc	.+54     	; 0xc1c <__vector_18+0x68>
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	9e 0f       	add	r25, r30
     bea:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <sh_bytes_count>
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	ef 54       	subi	r30, 0x4F	; 79
     bf2:	fd 4f       	sbci	r31, 0xFD	; 253
     bf4:	80 83       	st	Z, r24
     bf6:	96 30       	cpi	r25, 0x06	; 6
     bf8:	09 f0       	breq	.+2      	; 0xbfc <__vector_18+0x48>
     bfa:	f2 c0       	rjmp	.+484    	; 0xde0 <__vector_18+0x22c>
     bfc:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <sh_command_bytes_received+0x4>
     c00:	88 50       	subi	r24, 0x08	; 8
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	8c 30       	cpi	r24, 0x0C	; 12
     c06:	08 f4       	brcc	.+2      	; 0xc0a <__vector_18+0x56>
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <blocked>
     c0e:	85 ea       	ldi	r24, 0xA5	; 165
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	0e 94 cd 05 	call	0xb9a	; 0xb9a <SerialEnviaString>
     c16:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <sh_bytes_count>
     c1a:	e2 c0       	rjmp	.+452    	; 0xde0 <__vector_18+0x22c>
     c1c:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <__data_end>
     c20:	99 23       	and	r25, r25
     c22:	09 f4       	brne	.+2      	; 0xc26 <__vector_18+0x72>
     c24:	b3 c0       	rjmp	.+358    	; 0xd8c <__vector_18+0x1d8>
     c26:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <first_byte_of_potential_command>
     c2a:	93 35       	cpi	r25, 0x53	; 83
     c2c:	09 f0       	breq	.+2      	; 0xc30 <__vector_18+0x7c>
     c2e:	65 c0       	rjmp	.+202    	; 0xcfa <__vector_18+0x146>
     c30:	84 35       	cpi	r24, 0x54	; 84
     c32:	41 f4       	brne	.+16     	; 0xc44 <__vector_18+0x90>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <blocked>
     c3a:	88 ea       	ldi	r24, 0xA8	; 168
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <SerialEnviaString>
     c42:	9f c0       	rjmp	.+318    	; 0xd82 <__vector_18+0x1ce>
     c44:	8c 34       	cpi	r24, 0x4C	; 76
     c46:	39 f4       	brne	.+14     	; 0xc56 <__vector_18+0xa2>
     c48:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <blocked>
     c4c:	8b ea       	ldi	r24, 0xAB	; 171
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	0e 94 cd 05 	call	0xb9a	; 0xb9a <SerialEnviaString>
     c54:	96 c0       	rjmp	.+300    	; 0xd82 <__vector_18+0x1ce>
     c56:	88 34       	cpi	r24, 0x48	; 72
     c58:	51 f4       	brne	.+20     	; 0xc6e <__vector_18+0xba>
     c5a:	e1 eb       	ldi	r30, 0xB1	; 177
     c5c:	f2 e0       	ldi	r31, 0x02	; 2
     c5e:	83 e5       	ldi	r24, 0x53	; 83
     c60:	80 83       	st	Z, r24
     c62:	88 e4       	ldi	r24, 0x48	; 72
     c64:	81 83       	std	Z+1, r24	; 0x01
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <sh_bytes_count>
     c6c:	8a c0       	rjmp	.+276    	; 0xd82 <__vector_18+0x1ce>
     c6e:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <uart_head>
     c72:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <uart_head+0x1>
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	2f 77       	andi	r18, 0x7F	; 127
     c7c:	30 78       	andi	r19, 0x80	; 128
     c7e:	33 23       	and	r19, r19
     c80:	34 f4       	brge	.+12     	; 0xc8e <__vector_18+0xda>
     c82:	21 50       	subi	r18, 0x01	; 1
     c84:	31 09       	sbc	r19, r1
     c86:	20 68       	ori	r18, 0x80	; 128
     c88:	3f 6f       	ori	r19, 0xFF	; 255
     c8a:	2f 5f       	subi	r18, 0xFF	; 255
     c8c:	3f 4f       	sbci	r19, 0xFF	; 255
     c8e:	40 91 b8 02 	lds	r20, 0x02B8	; 0x8002b8 <uart_tail>
     c92:	50 91 b9 02 	lds	r21, 0x02B9	; 0x8002b9 <uart_tail+0x1>
     c96:	24 17       	cp	r18, r20
     c98:	35 07       	cpc	r19, r21
     c9a:	59 f0       	breq	.+22     	; 0xcb2 <__vector_18+0xfe>
     c9c:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <uart_head>
     ca0:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <uart_head+0x1>
     ca4:	e4 54       	subi	r30, 0x44	; 68
     ca6:	fd 4f       	sbci	r31, 0xFD	; 253
     ca8:	90 83       	st	Z, r25
     caa:	30 93 bb 02 	sts	0x02BB, r19	; 0x8002bb <uart_head+0x1>
     cae:	20 93 ba 02 	sts	0x02BA, r18	; 0x8002ba <uart_head>
     cb2:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <uart_head>
     cb6:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <uart_head+0x1>
     cba:	2f 5f       	subi	r18, 0xFF	; 255
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	2f 77       	andi	r18, 0x7F	; 127
     cc0:	30 78       	andi	r19, 0x80	; 128
     cc2:	33 23       	and	r19, r19
     cc4:	34 f4       	brge	.+12     	; 0xcd2 <__vector_18+0x11e>
     cc6:	21 50       	subi	r18, 0x01	; 1
     cc8:	31 09       	sbc	r19, r1
     cca:	20 68       	ori	r18, 0x80	; 128
     ccc:	3f 6f       	ori	r19, 0xFF	; 255
     cce:	2f 5f       	subi	r18, 0xFF	; 255
     cd0:	3f 4f       	sbci	r19, 0xFF	; 255
     cd2:	40 91 b8 02 	lds	r20, 0x02B8	; 0x8002b8 <uart_tail>
     cd6:	50 91 b9 02 	lds	r21, 0x02B9	; 0x8002b9 <uart_tail+0x1>
     cda:	24 17       	cp	r18, r20
     cdc:	35 07       	cpc	r19, r21
     cde:	09 f4       	brne	.+2      	; 0xce2 <__vector_18+0x12e>
     ce0:	50 c0       	rjmp	.+160    	; 0xd82 <__vector_18+0x1ce>
     ce2:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <uart_head>
     ce6:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <uart_head+0x1>
     cea:	e4 54       	subi	r30, 0x44	; 68
     cec:	fd 4f       	sbci	r31, 0xFD	; 253
     cee:	80 83       	st	Z, r24
     cf0:	30 93 bb 02 	sts	0x02BB, r19	; 0x8002bb <uart_head+0x1>
     cf4:	20 93 ba 02 	sts	0x02BA, r18	; 0x8002ba <uart_head>
     cf8:	44 c0       	rjmp	.+136    	; 0xd82 <__vector_18+0x1ce>
     cfa:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <uart_head>
     cfe:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <uart_head+0x1>
     d02:	2f 5f       	subi	r18, 0xFF	; 255
     d04:	3f 4f       	sbci	r19, 0xFF	; 255
     d06:	2f 77       	andi	r18, 0x7F	; 127
     d08:	30 78       	andi	r19, 0x80	; 128
     d0a:	33 23       	and	r19, r19
     d0c:	34 f4       	brge	.+12     	; 0xd1a <__vector_18+0x166>
     d0e:	21 50       	subi	r18, 0x01	; 1
     d10:	31 09       	sbc	r19, r1
     d12:	20 68       	ori	r18, 0x80	; 128
     d14:	3f 6f       	ori	r19, 0xFF	; 255
     d16:	2f 5f       	subi	r18, 0xFF	; 255
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	40 91 b8 02 	lds	r20, 0x02B8	; 0x8002b8 <uart_tail>
     d1e:	50 91 b9 02 	lds	r21, 0x02B9	; 0x8002b9 <uart_tail+0x1>
     d22:	24 17       	cp	r18, r20
     d24:	35 07       	cpc	r19, r21
     d26:	59 f0       	breq	.+22     	; 0xd3e <__vector_18+0x18a>
     d28:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <uart_head>
     d2c:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <uart_head+0x1>
     d30:	e4 54       	subi	r30, 0x44	; 68
     d32:	fd 4f       	sbci	r31, 0xFD	; 253
     d34:	90 83       	st	Z, r25
     d36:	30 93 bb 02 	sts	0x02BB, r19	; 0x8002bb <uart_head+0x1>
     d3a:	20 93 ba 02 	sts	0x02BA, r18	; 0x8002ba <uart_head>
     d3e:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <uart_head>
     d42:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <uart_head+0x1>
     d46:	2f 5f       	subi	r18, 0xFF	; 255
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	2f 77       	andi	r18, 0x7F	; 127
     d4c:	30 78       	andi	r19, 0x80	; 128
     d4e:	33 23       	and	r19, r19
     d50:	34 f4       	brge	.+12     	; 0xd5e <__vector_18+0x1aa>
     d52:	21 50       	subi	r18, 0x01	; 1
     d54:	31 09       	sbc	r19, r1
     d56:	20 68       	ori	r18, 0x80	; 128
     d58:	3f 6f       	ori	r19, 0xFF	; 255
     d5a:	2f 5f       	subi	r18, 0xFF	; 255
     d5c:	3f 4f       	sbci	r19, 0xFF	; 255
     d5e:	40 91 b8 02 	lds	r20, 0x02B8	; 0x8002b8 <uart_tail>
     d62:	50 91 b9 02 	lds	r21, 0x02B9	; 0x8002b9 <uart_tail+0x1>
     d66:	24 17       	cp	r18, r20
     d68:	35 07       	cpc	r19, r21
     d6a:	59 f0       	breq	.+22     	; 0xd82 <__vector_18+0x1ce>
     d6c:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <uart_head>
     d70:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <uart_head+0x1>
     d74:	e4 54       	subi	r30, 0x44	; 68
     d76:	fd 4f       	sbci	r31, 0xFD	; 253
     d78:	80 83       	st	Z, r24
     d7a:	30 93 bb 02 	sts	0x02BB, r19	; 0x8002bb <uart_head+0x1>
     d7e:	20 93 ba 02 	sts	0x02BA, r18	; 0x8002ba <uart_head>
     d82:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <__data_end>
     d86:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <first_byte_of_potential_command>
     d8a:	2a c0       	rjmp	.+84     	; 0xde0 <__vector_18+0x22c>
     d8c:	83 35       	cpi	r24, 0x53	; 83
     d8e:	31 f4       	brne	.+12     	; 0xd9c <__vector_18+0x1e8>
     d90:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <first_byte_of_potential_command>
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__data_end>
     d9a:	22 c0       	rjmp	.+68     	; 0xde0 <__vector_18+0x22c>
     d9c:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <uart_head>
     da0:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <uart_head+0x1>
     da4:	2f 5f       	subi	r18, 0xFF	; 255
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	2f 77       	andi	r18, 0x7F	; 127
     daa:	30 78       	andi	r19, 0x80	; 128
     dac:	33 23       	and	r19, r19
     dae:	34 f4       	brge	.+12     	; 0xdbc <__vector_18+0x208>
     db0:	21 50       	subi	r18, 0x01	; 1
     db2:	31 09       	sbc	r19, r1
     db4:	20 68       	ori	r18, 0x80	; 128
     db6:	3f 6f       	ori	r19, 0xFF	; 255
     db8:	2f 5f       	subi	r18, 0xFF	; 255
     dba:	3f 4f       	sbci	r19, 0xFF	; 255
     dbc:	40 91 b8 02 	lds	r20, 0x02B8	; 0x8002b8 <uart_tail>
     dc0:	50 91 b9 02 	lds	r21, 0x02B9	; 0x8002b9 <uart_tail+0x1>
     dc4:	24 17       	cp	r18, r20
     dc6:	35 07       	cpc	r19, r21
     dc8:	59 f0       	breq	.+22     	; 0xde0 <__vector_18+0x22c>
     dca:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <uart_head>
     dce:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <uart_head+0x1>
     dd2:	e4 54       	subi	r30, 0x44	; 68
     dd4:	fd 4f       	sbci	r31, 0xFD	; 253
     dd6:	80 83       	st	Z, r24
     dd8:	30 93 bb 02 	sts	0x02BB, r19	; 0x8002bb <uart_head+0x1>
     ddc:	20 93 ba 02 	sts	0x02BA, r18	; 0x8002ba <uart_head>
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <isBlocked>:
     e02:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <blocked>
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	08 95       	ret

00000e0a <uart_buffer_empty>:
     e0a:	40 91 ba 02 	lds	r20, 0x02BA	; 0x8002ba <uart_head>
     e0e:	50 91 bb 02 	lds	r21, 0x02BB	; 0x8002bb <uart_head+0x1>
     e12:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <uart_tail>
     e16:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <uart_tail+0x1>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	42 17       	cp	r20, r18
     e1e:	53 07       	cpc	r21, r19
     e20:	09 f0       	breq	.+2      	; 0xe24 <uart_buffer_empty+0x1a>
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	08 95       	ret

00000e28 <uart_buffer_read_char>:

int uart_buffer_read_char(char *c) {
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) return 0;
     e2e:	0e 94 05 07 	call	0xe0a	; 0xe0a <uart_buffer_empty>
     e32:	89 2b       	or	r24, r25
     e34:	e1 f4       	brne	.+56     	; 0xe6e <uart_buffer_read_char+0x46>
	*c = uart_buffer[uart_tail];
     e36:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <uart_tail>
     e3a:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <uart_tail+0x1>
     e3e:	e4 54       	subi	r30, 0x44	; 68
     e40:	fd 4f       	sbci	r31, 0xFD	; 253
     e42:	80 81       	ld	r24, Z
     e44:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
     e46:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <uart_tail>
     e4a:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <uart_tail+0x1>
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	8f 77       	andi	r24, 0x7F	; 127
     e52:	90 78       	andi	r25, 0x80	; 128
     e54:	99 23       	and	r25, r25
     e56:	24 f4       	brge	.+8      	; 0xe60 <uart_buffer_read_char+0x38>
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	9f 6f       	ori	r25, 0xFF	; 255
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <uart_tail+0x1>
     e64:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <uart_tail>
	return 1;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <uart_buffer_read_char+0x4a>
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}

int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) return 0;
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <SerialRecebeChars>:

void SerialRecebeChars(int sizeS, char* string) {
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	1f 92       	push	r1
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	6c 01       	movw	r12, r24
     e94:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
     e96:	e1 2c       	mov	r14, r1
     e98:	f1 2c       	mov	r15, r1
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
     e9a:	00 e0       	ldi	r16, 0x00	; 0
     e9c:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100;

	while (received < sizeS && timeout_count < timeout_limit) {
     e9e:	19 c0       	rjmp	.+50     	; 0xed2 <SerialRecebeChars+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
     ea0:	ce 01       	movw	r24, r28
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	0e 94 14 07 	call	0xe28	; 0xe28 <uart_buffer_read_char>
     ea8:	89 2b       	or	r24, r25
     eaa:	51 f0       	breq	.+20     	; 0xec0 <SerialRecebeChars+0x48>
			string[received++] = c;
     eac:	f5 01       	movw	r30, r10
     eae:	e0 0f       	add	r30, r16
     eb0:	f1 1f       	adc	r31, r17
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	80 83       	st	Z, r24
     eb6:	0f 5f       	subi	r16, 0xFF	; 255
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0;
     eba:	e1 2c       	mov	r14, r1
     ebc:	f1 2c       	mov	r15, r1
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <SerialRecebeChars+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ec0:	8f e3       	ldi	r24, 0x3F	; 63
     ec2:	9c e9       	ldi	r25, 0x9C	; 156
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <SerialRecebeChars+0x4c>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <SerialRecebeChars+0x52>
     eca:	00 00       	nop
			} else {
			_delay_ms(10);
			timeout_count++;
     ecc:	9f ef       	ldi	r25, 0xFF	; 255
     ece:	e9 1a       	sub	r14, r25
     ed0:	f9 0a       	sbc	r15, r25
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100;

	while (received < sizeS && timeout_count < timeout_limit) {
     ed2:	0c 15       	cp	r16, r12
     ed4:	1d 05       	cpc	r17, r13
     ed6:	24 f4       	brge	.+8      	; 0xee0 <SerialRecebeChars+0x68>
     ed8:	84 e6       	ldi	r24, 0x64	; 100
     eda:	e8 16       	cp	r14, r24
     edc:	f1 04       	cpc	r15, r1
     ede:	04 f3       	brlt	.-64     	; 0xea0 <SerialRecebeChars+0x28>
			} else {
			_delay_ms(10);
			timeout_count++;
		}
	}
	string[received] = '\0';
     ee0:	f5 01       	movw	r30, r10
     ee2:	e0 0f       	add	r30, r16
     ee4:	f1 1f       	adc	r31, r17
     ee6:	10 82       	st	Z, r1
}
     ee8:	0f 90       	pop	r0
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	bf 90       	pop	r11
     efc:	af 90       	pop	r10
     efe:	08 95       	ret

00000f00 <prepara_teclado>:
#define COL4 PD2    // Coluna 4 no PD2

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
     f00:	84 b1       	in	r24, 0x04	; 4
     f02:	83 60       	ori	r24, 0x03	; 3
     f04:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
     f06:	8a b1       	in	r24, 0x0a	; 10
     f08:	80 6c       	ori	r24, 0xC0	; 192
     f0a:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4)); // PD5, PD4, PD3 e PD2 como entradas
     f0c:	8a b1       	in	r24, 0x0a	; 10
     f0e:	83 7c       	andi	r24, 0xC3	; 195
     f10:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);   // Habilitar resistores de Pull-up
     f12:	8b b1       	in	r24, 0x0b	; 11
     f14:	8c 63       	ori	r24, 0x3C	; 60
     f16:	8b b9       	out	0x0b, r24	; 11
     f18:	08 95       	ret

00000f1a <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <atraso_debounce+0x6>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
     f24:	1a 82       	std	Y+2, r1	; 0x02
     f26:	19 82       	std	Y+1, r1	; 0x01
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <atraso_debounce+0x1a>
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	88 3e       	cpi	r24, 0xE8	; 232
     f3a:	93 40       	sbci	r25, 0x03	; 3
     f3c:	b0 f3       	brcs	.-20     	; 0xf2a <atraso_debounce+0x10>
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
     f50:	c0 e0       	ldi	r28, 0x00	; 0
     f52:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
     f54:	12 c0       	rjmp	.+36     	; 0xf7a <debounce+0x32>
        atraso_debounce();
     f56:	0e 94 8d 07 	call	0xf1a	; 0xf1a <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
     f5a:	29 b1       	in	r18, 0x09	; 9
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	01 2e       	mov	r0, r17
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <debounce+0x20>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <debounce+0x1c>
     f6c:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
     f6e:	d8 13       	cpse	r29, r24
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <debounce+0x2e>
            counter++;
     f72:	cf 5f       	subi	r28, 0xFF	; 255
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <debounce+0x30>
        } else {
            counter = 0;
     f76:	c0 e0       	ldi	r28, 0x00	; 0
     f78:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
     f7a:	c7 30       	cpi	r28, 0x07	; 7
     f7c:	61 f7       	brne	.-40     	; 0xf56 <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
     f7e:	8d 2f       	mov	r24, r29
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	08 95       	ret

00000f88 <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
     f88:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
     f8a:	85 b1       	in	r24, 0x05	; 5
     f8c:	83 60       	ori	r24, 0x03	; 3
     f8e:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
     f90:	8b b1       	in	r24, 0x0b	; 11
     f92:	80 6c       	ori	r24, 0xC0	; 192
     f94:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
     f96:	85 b1       	in	r24, 0x05	; 5
     f98:	8d 7f       	andi	r24, 0xFD	; 253
     f9a:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
     f9c:	85 e0       	ldi	r24, 0x05	; 5
     f9e:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
     fa2:	88 23       	and	r24, r24
     fa4:	11 f0       	breq	.+4      	; 0xfaa <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
     fa6:	c0 e0       	ldi	r28, 0x00	; 0
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
     faa:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
     fac:	84 e0       	ldi	r24, 0x04	; 4
     fae:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
     fb2:	81 11       	cpse	r24, r1
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <varredura+0x30>
     fb6:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
     fbe:	81 11       	cpse	r24, r1
     fc0:	01 c0       	rjmp	.+2      	; 0xfc4 <varredura+0x3c>
     fc2:	c3 e3       	ldi	r28, 0x33	; 51
	if (!debounce(COL4 - 0)) tecla = 'A'; 
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
     fca:	81 11       	cpse	r24, r1
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <varredura+0x48>
     fce:	c1 e4       	ldi	r28, 0x41	; 65
    PORTB |= (1 << LIN1); // Desativa LIN1
     fd0:	85 b1       	in	r24, 0x05	; 5
     fd2:	82 60       	ori	r24, 0x02	; 2
     fd4:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
     fd6:	85 b1       	in	r24, 0x05	; 5
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
     fdc:	85 e0       	ldi	r24, 0x05	; 5
     fde:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
     fe2:	81 11       	cpse	r24, r1
     fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <varredura+0x60>
     fe6:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
     fe8:	84 e0       	ldi	r24, 0x04	; 4
     fea:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
     fee:	81 11       	cpse	r24, r1
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <varredura+0x6c>
     ff2:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
     ffa:	81 11       	cpse	r24, r1
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <varredura+0x78>
     ffe:	c6 e3       	ldi	r28, 0x36	; 54
	if (!debounce(COL4 - 0)) tecla = 'B'; 
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
    1006:	81 11       	cpse	r24, r1
    1008:	01 c0       	rjmp	.+2      	; 0x100c <varredura+0x84>
    100a:	c2 e4       	ldi	r28, 0x42	; 66
    PORTB |= (1 << LIN2); // Desativa LIN2
    100c:	85 b1       	in	r24, 0x05	; 5
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
    1012:	8b b1       	in	r24, 0x0b	; 11
    1014:	8f 77       	andi	r24, 0x7F	; 127
    1016:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
    101e:	81 11       	cpse	r24, r1
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <varredura+0x9c>
    1022:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
    1024:	84 e0       	ldi	r24, 0x04	; 4
    1026:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
    102a:	81 11       	cpse	r24, r1
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <varredura+0xa8>
    102e:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
    1030:	83 e0       	ldi	r24, 0x03	; 3
    1032:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
    1036:	81 11       	cpse	r24, r1
    1038:	01 c0       	rjmp	.+2      	; 0x103c <varredura+0xb4>
    103a:	c9 e3       	ldi	r28, 0x39	; 57
	if (!debounce(COL4 - 0)) tecla = 'C'; 
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
    1042:	81 11       	cpse	r24, r1
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <varredura+0xc0>
    1046:	c3 e4       	ldi	r28, 0x43	; 67
    PORTD |= (1 << LIN3); // Desativa LIN3
    1048:	8b b1       	in	r24, 0x0b	; 11
    104a:	80 68       	ori	r24, 0x80	; 128
    104c:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
    104e:	8b b1       	in	r24, 0x0b	; 11
    1050:	8f 7b       	andi	r24, 0xBF	; 191
    1052:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
    1054:	85 e0       	ldi	r24, 0x05	; 5
    1056:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
    105a:	81 11       	cpse	r24, r1
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <varredura+0xd8>
    105e:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
    1060:	84 e0       	ldi	r24, 0x04	; 4
    1062:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
    1066:	81 11       	cpse	r24, r1
    1068:	01 c0       	rjmp	.+2      	; 0x106c <varredura+0xe4>
    106a:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
    1072:	81 11       	cpse	r24, r1
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <varredura+0xf0>
    1076:	c3 e2       	ldi	r28, 0x23	; 35
	if (!debounce(COL4 - 0)) tecla = 'D'; 
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	0e 94 a4 07 	call	0xf48	; 0xf48 <debounce>
    107e:	81 11       	cpse	r24, r1
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <varredura+0xfc>
    1082:	c4 e4       	ldi	r28, 0x44	; 68
    PORTD |= (1 << LIN4); // Desativa LIN4
    1084:	8b b1       	in	r24, 0x0b	; 11
    1086:	80 64       	ori	r24, 0x40	; 64
    1088:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
    108a:	8c 2f       	mov	r24, r28
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    1090:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    1092:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    1094:	85 e0       	ldi	r24, 0x05	; 5
    1096:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    1098:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    109c:	81 ef       	ldi	r24, 0xF1	; 241
    109e:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    10a6:	a9 9b       	sbis	0x15, 1	; 21
    10a8:	fe cf       	rjmp	.-4      	; 0x10a6 <delay1ms+0x16>
		TCNT0 = 241;
    10aa:	91 ef       	ldi	r25, 0xF1	; 241
    10ac:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    10ae:	92 e0       	ldi	r25, 0x02	; 2
    10b0:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    10b2:	2f 5f       	subi	r18, 0xFF	; 255
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	24 17       	cp	r18, r20
    10b8:	35 07       	cpc	r19, r21
    10ba:	ac f3       	brlt	.-22     	; 0x10a6 <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    10bc:	15 bc       	out	0x25, r1	; 37
    10be:	08 95       	ret

000010c0 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    10c0:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    10c2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    10c8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    10cc:	85 ef       	ldi	r24, 0xF5	; 245
    10ce:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	09 c0       	rjmp	.+18     	; 0x10e8 <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    10d6:	a9 9b       	sbis	0x15, 1	; 21
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <delay1us+0x16>
		TCNT0 = 245;
    10da:	95 ef       	ldi	r25, 0xF5	; 245
    10dc:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    10de:	95 b3       	in	r25, 0x15	; 21
    10e0:	92 60       	ori	r25, 0x02	; 2
    10e2:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    10e4:	2f 5f       	subi	r18, 0xFF	; 255
    10e6:	3f 4f       	sbci	r19, 0xFF	; 255
    10e8:	24 17       	cp	r18, r20
    10ea:	35 07       	cpc	r19, r21
    10ec:	a4 f3       	brlt	.-24     	; 0x10d6 <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    10ee:	15 bc       	out	0x25, r1	; 37
    10f0:	08 95       	ret

000010f2 <__tablejump2__>:
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	05 90       	lpm	r0, Z+
    10f8:	f4 91       	lpm	r31, Z
    10fa:	e0 2d       	mov	r30, r0
    10fc:	09 94       	ijmp

000010fe <strcat>:
    10fe:	fb 01       	movw	r30, r22
    1100:	dc 01       	movw	r26, r24
    1102:	0d 90       	ld	r0, X+
    1104:	00 20       	and	r0, r0
    1106:	e9 f7       	brne	.-6      	; 0x1102 <strcat+0x4>
    1108:	11 97       	sbiw	r26, 0x01	; 1
    110a:	01 90       	ld	r0, Z+
    110c:	0d 92       	st	X+, r0
    110e:	00 20       	and	r0, r0
    1110:	e1 f7       	brne	.-8      	; 0x110a <strcat+0xc>
    1112:	08 95       	ret

00001114 <strcpy>:
    1114:	fb 01       	movw	r30, r22
    1116:	dc 01       	movw	r26, r24
    1118:	01 90       	ld	r0, Z+
    111a:	0d 92       	st	X+, r0
    111c:	00 20       	and	r0, r0
    111e:	e1 f7       	brne	.-8      	; 0x1118 <strcpy+0x4>
    1120:	08 95       	ret

00001122 <strncat>:
    1122:	fb 01       	movw	r30, r22
    1124:	dc 01       	movw	r26, r24
    1126:	0d 90       	ld	r0, X+
    1128:	00 20       	and	r0, r0
    112a:	e9 f7       	brne	.-6      	; 0x1126 <strncat+0x4>
    112c:	11 97       	sbiw	r26, 0x01	; 1
    112e:	41 50       	subi	r20, 0x01	; 1
    1130:	50 40       	sbci	r21, 0x00	; 0
    1132:	28 f0       	brcs	.+10     	; 0x113e <strncat+0x1c>
    1134:	01 90       	ld	r0, Z+
    1136:	00 20       	and	r0, r0
    1138:	0d 92       	st	X+, r0
    113a:	c9 f7       	brne	.-14     	; 0x112e <strncat+0xc>
    113c:	08 95       	ret
    113e:	1c 92       	st	X, r1
    1140:	08 95       	ret

00001142 <strncpy>:
    1142:	fb 01       	movw	r30, r22
    1144:	dc 01       	movw	r26, r24
    1146:	41 50       	subi	r20, 0x01	; 1
    1148:	50 40       	sbci	r21, 0x00	; 0
    114a:	48 f0       	brcs	.+18     	; 0x115e <strncpy+0x1c>
    114c:	01 90       	ld	r0, Z+
    114e:	0d 92       	st	X+, r0
    1150:	00 20       	and	r0, r0
    1152:	c9 f7       	brne	.-14     	; 0x1146 <strncpy+0x4>
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <strncpy+0x16>
    1156:	1d 92       	st	X+, r1
    1158:	41 50       	subi	r20, 0x01	; 1
    115a:	50 40       	sbci	r21, 0x00	; 0
    115c:	e0 f7       	brcc	.-8      	; 0x1156 <strncpy+0x14>
    115e:	08 95       	ret

00001160 <strstr>:
    1160:	fb 01       	movw	r30, r22
    1162:	51 91       	ld	r21, Z+
    1164:	55 23       	and	r21, r21
    1166:	a9 f0       	breq	.+42     	; 0x1192 <strstr+0x32>
    1168:	bf 01       	movw	r22, r30
    116a:	dc 01       	movw	r26, r24
    116c:	4d 91       	ld	r20, X+
    116e:	45 17       	cp	r20, r21
    1170:	41 11       	cpse	r20, r1
    1172:	e1 f7       	brne	.-8      	; 0x116c <strstr+0xc>
    1174:	59 f4       	brne	.+22     	; 0x118c <strstr+0x2c>
    1176:	cd 01       	movw	r24, r26
    1178:	01 90       	ld	r0, Z+
    117a:	00 20       	and	r0, r0
    117c:	49 f0       	breq	.+18     	; 0x1190 <strstr+0x30>
    117e:	4d 91       	ld	r20, X+
    1180:	40 15       	cp	r20, r0
    1182:	41 11       	cpse	r20, r1
    1184:	c9 f3       	breq	.-14     	; 0x1178 <strstr+0x18>
    1186:	fb 01       	movw	r30, r22
    1188:	41 11       	cpse	r20, r1
    118a:	ef cf       	rjmp	.-34     	; 0x116a <strstr+0xa>
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	08 95       	ret

00001194 <_exit>:
    1194:	f8 94       	cli

00001196 <__stop_program>:
    1196:	ff cf       	rjmp	.-2      	; 0x1196 <__stop_program>
