
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001aa  00800100  00000f64  00000ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  008002aa  008002aa  000011a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000241a  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e93  00000000  00000000  000037d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011f2  00000000  00000000  00004669  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  0000585c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000775  00000000  00000000  00005cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000129b  00000000  00000000  0000646d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00007708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3a       	cpi	r26, 0xAA	; 170
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	aa ea       	ldi	r26, 0xAA	; 170
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <main>
  9e:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mensagem_Inicial>:
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){

		LCD_texto_correndo(0, " Banco UFRGS ", 300, 0);
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	4c e2       	ldi	r20, 0x2C	; 44
  aa:	68 e0       	ldi	r22, 0x08	; 8
  ac:	71 e0       	ldi	r23, 0x01	; 1
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_texto_correndo>
		LCD_Escrever_Linha(1, 0, "Digite cartao: ");
  b4:	46 e1       	ldi	r20, 0x16	; 22
  b6:	51 e0       	ldi	r21, 0x01	; 1
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
  c0:	08 95       	ret

000000c2 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	9c 2f       	mov	r25, r28
  cc:	92 95       	swap	r25
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	89 2b       	or	r24, r25
  d2:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
  e6:	84 e6       	ldi	r24, 0x64	; 100
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 5e 07 	call	0xebc	; 0xebc <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	cf 70       	andi	r28, 0x0F	; 15
  f4:	c8 2b       	or	r28, r24
  f6:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 13a:	08 95       	ret

0000013c <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 148:	08 95       	ret

0000014a <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	while(*texto) {
 150:	23 c0       	rjmp	.+70     	; 0x198 <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
 152:	98 b1       	in	r25, 0x08	; 8
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	89 2b       	or	r24, r25
 15c:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	80 62       	ori	r24, 0x20	; 32
 162:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 164:	88 b1       	in	r24, 0x08	; 8
 166:	80 61       	ori	r24, 0x10	; 16
 168:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 16a:	88 b1       	in	r24, 0x08	; 8
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
 170:	88 ec       	ldi	r24, 0xC8	; 200
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 5e 07 	call	0xebc	; 0xebc <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
 178:	98 b1       	in	r25, 0x08	; 8
 17a:	89 91       	ld	r24, Y+
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	89 2b       	or	r24, r25
 182:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 184:	88 b1       	in	r24, 0x08	; 8
 186:	80 61       	ori	r24, 0x10	; 16
 188:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	da cf       	rjmp	.-76     	; 0x152 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
 1aa:	81 11       	cpse	r24, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <LCD_Escrever_Linha+0x1a>
 1ae:	60 31       	cpi	r22, 0x10	; 16
 1b0:	30 f4       	brcc	.+12     	; 0x1be <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
 1b2:	86 2f       	mov	r24, r22
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
 1c2:	60 31       	cpi	r22, 0x10	; 16
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
 1c6:	86 2f       	mov	r24, r22
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	80 6c       	ori	r24, 0xC0	; 192
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <LCD_texto_correndo>:

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
 1e2:	6f 92       	push	r6
 1e4:	7f 92       	push	r7
 1e6:	8f 92       	push	r8
 1e8:	9f 92       	push	r9
 1ea:	af 92       	push	r10
 1ec:	bf 92       	push	r11
 1ee:	cf 92       	push	r12
 1f0:	df 92       	push	r13
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	61 97       	sbiw	r28, 0x11	; 17
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	78 2e       	mov	r7, r24
 210:	4a 01       	movw	r8, r20
 212:	62 2e       	mov	r6, r18
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 214:	cd b6       	in	r12, 0x3d	; 61
 216:	de b6       	in	r13, 0x3e	; 62
	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
}

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
 218:	ad b6       	in	r10, 0x3d	; 61
 21a:	be b6       	in	r11, 0x3e	; 62
    uint8_t tamanho = strlen(texto);
 21c:	fb 01       	movw	r30, r22
 21e:	01 90       	ld	r0, Z+
 220:	00 20       	and	r0, r0
 222:	e9 f7       	brne	.-6      	; 0x21e <LCD_texto_correndo+0x3c>
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	e6 1b       	sub	r30, r22
 228:	f7 0b       	sbc	r31, r23
 22a:	0e 2f       	mov	r16, r30
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
 22c:	e1 31       	cpi	r30, 0x11	; 17
 22e:	28 f4       	brcc	.+10     	; 0x23a <LCD_texto_correndo+0x58>
        LCD_Escrever_Linha(linha, 0, texto);
 230:	ab 01       	movw	r20, r22
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
        return;
 238:	42 c0       	rjmp	.+132    	; 0x2be <LCD_texto_correndo+0xdc>
    }
    
    // Adiciona espaços no final para melhor visualização
    char texto_extendido[tamanho + 17];
 23a:	ff 27       	eor	r31, r31
 23c:	71 96       	adiw	r30, 0x11	; 17
 23e:	8d b7       	in	r24, 0x3d	; 61
 240:	9e b7       	in	r25, 0x3e	; 62
 242:	8e 1b       	sub	r24, r30
 244:	9f 0b       	sbc	r25, r31
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	9e bf       	out	0x3e, r25	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	8d bf       	out	0x3d, r24	; 61
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	7c 01       	movw	r14, r24
    strcpy(texto_extendido, texto);
 254:	0e 94 80 07 	call	0xf00	; 0xf00 <strcpy>
    strcat(texto_extendido, "                "); // 16 espaços
 258:	d7 01       	movw	r26, r14
 25a:	0d 90       	ld	r0, X+
 25c:	00 20       	and	r0, r0
 25e:	e9 f7       	brne	.-6      	; 0x25a <LCD_texto_correndo+0x78>
 260:	11 97       	sbiw	r26, 0x01	; 1
 262:	81 e1       	ldi	r24, 0x11	; 17
 264:	e6 e2       	ldi	r30, 0x26	; 38
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	01 90       	ld	r0, Z+
 26a:	0d 92       	st	X+, r0
 26c:	8a 95       	dec	r24
 26e:	e1 f7       	brne	.-8      	; 0x268 <LCD_texto_correndo+0x86>
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	1b c0       	rjmp	.+54     	; 0x2aa <LCD_texto_correndo+0xc8>
            // Copia 16 caracteres começando na posição i
            strncpy(buffer, &texto_extendido[i], 16);
 274:	40 e1       	ldi	r20, 0x10	; 16
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	b7 01       	movw	r22, r14
 27a:	61 0f       	add	r22, r17
 27c:	71 1d       	adc	r23, r1
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	0e 94 87 07 	call	0xf0e	; 0xf0e <strncpy>
            buffer[16] = '\0';
 286:	19 8a       	std	Y+17, r1	; 0x11
            
            LCD_Escrever_Linha(linha, 0, buffer);
 288:	ae 01       	movw	r20, r28
 28a:	4f 5f       	subi	r20, 0xFF	; 255
 28c:	5f 4f       	sbci	r21, 0xFF	; 255
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	87 2d       	mov	r24, r7
 292:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
            delay1ms(velocidade_ms);
 296:	c4 01       	movw	r24, r8
 298:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
 29c:	0e 94 c2 06 	call	0xd84	; 0xd84 <varredura>
 2a0:	89 2b       	or	r24, r25
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <LCD_texto_correndo+0xc6>
 2a4:	66 20       	and	r6, r6
 2a6:	59 f0       	breq	.+22     	; 0x2be <LCD_texto_correndo+0xdc>
    char texto_extendido[tamanho + 17];
    strcpy(texto_extendido, texto);
    strcat(texto_extendido, "                "); // 16 espaços
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
 2a8:	1f 5f       	subi	r17, 0xFF	; 255
 2aa:	01 17       	cp	r16, r17
 2ac:	18 f7       	brcc	.-58     	; 0x274 <LCD_texto_correndo+0x92>
            delay1ms(velocidade_ms);
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 2ae:	61 10       	cpse	r6, r1
 2b0:	df cf       	rjmp	.-66     	; 0x270 <LCD_texto_correndo+0x8e>
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	be be       	out	0x3e, r11	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	ad be       	out	0x3d, r10	; 61
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <LCD_texto_correndo+0xe6>
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
        LCD_Escrever_Linha(linha, 0, texto);
        return;
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	be be       	out	0x3e, r11	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	ad be       	out	0x3d, r10	; 61
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de be       	out	0x3e, r13	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd be       	out	0x3d, r12	; 61
 2d2:	61 96       	adiw	r28, 0x11	; 17
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	df 90       	pop	r13
 2ec:	cf 90       	pop	r12
 2ee:	bf 90       	pop	r11
 2f0:	af 90       	pop	r10
 2f2:	9f 90       	pop	r9
 2f4:	8f 90       	pop	r8
 2f6:	7f 90       	pop	r7
 2f8:	6f 90       	pop	r6
 2fa:	08 95       	ret

000002fc <verifica_comandos_servidor>:
#include "serial.h" // Certifique-se de ter a implementaÃ§Ã£o da serial separada aqui, se nÃ£o, inclua diretamente

volatile int terminal_travado = 0; // 1 = fora de operaÃ§Ã£o

// Verifica comandos recebidos do servidor e atualiza estado do terminal
void verifica_comandos_servidor() {
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <verifica_comandos_servidor+0x6>
 302:	1f 92       	push	r1
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
	char comando[3];
	if (SerialRecebeCharsNonBlocking(2, comando) == 2) {
 308:	be 01       	movw	r22, r28
 30a:	6f 5f       	subi	r22, 0xFF	; 255
 30c:	7f 4f       	sbci	r23, 0xFF	; 255
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 31 06 	call	0xc62	; 0xc62 <SerialRecebeCharsNonBlocking>
 316:	02 97       	sbiw	r24, 0x02	; 2
 318:	09 f0       	breq	.+2      	; 0x31c <verifica_comandos_servidor+0x20>
 31a:	44 c0       	rjmp	.+136    	; 0x3a4 <verifica_comandos_servidor+0xa8>
		comando[2] = '\0';
 31c:	1b 82       	std	Y+3, r1	; 0x03

		if (strcmp(comando, "ST") == 0) {
 31e:	67 e3       	ldi	r22, 0x37	; 55
 320:	71 e0       	ldi	r23, 0x01	; 1
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	0e 94 77 07 	call	0xeee	; 0xeee <strcmp>
 32a:	89 2b       	or	r24, r25
 32c:	c9 f4       	brne	.+50     	; 0x360 <verifica_comandos_servidor+0x64>
			terminal_travado = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <__data_end+0x1>
 336:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <__data_end>
			SerialEnviaString("CT");
 33a:	8a e3       	ldi	r24, 0x3A	; 58
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 70 05 	call	0xae0	; 0xae0 <SerialEnviaString>
			LCD_limpar();
 342:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "    FORA  DE");
 346:	4d e3       	ldi	r20, 0x3D	; 61
 348:	51 e0       	ldi	r21, 0x01	; 1
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "    OPERACAO");
 352:	4a e4       	ldi	r20, 0x4A	; 74
 354:	51 e0       	ldi	r21, 0x01	; 1
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 35e:	22 c0       	rjmp	.+68     	; 0x3a4 <verifica_comandos_servidor+0xa8>
		}
		else if (strcmp(comando, "SL") == 0) {
 360:	67 e5       	ldi	r22, 0x57	; 87
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	0e 94 77 07 	call	0xeee	; 0xeee <strcmp>
 36c:	89 2b       	or	r24, r25
 36e:	d1 f4       	brne	.+52     	; 0x3a4 <verifica_comandos_servidor+0xa8>
			terminal_travado = 0;
 370:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <__data_end+0x1>
 374:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <__data_end>
			SerialEnviaString("CL");
 378:	8a e5       	ldi	r24, 0x5A	; 90
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 70 05 	call	0xae0	; 0xae0 <SerialEnviaString>
			LCD_limpar();
 380:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "     CAIXA");
 384:	4d e5       	ldi	r20, 0x5D	; 93
 386:	51 e0       	ldi	r21, 0x01	; 1
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "   LIBERADO!");
 390:	48 e6       	ldi	r20, 0x68	; 104
 392:	51 e0       	ldi	r21, 0x01	; 1
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			delay1ms(1500);
 39c:	8c ed       	ldi	r24, 0xDC	; 220
 39e:	95 e0       	ldi	r25, 0x05	; 5
 3a0:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
		}
	}
}
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <ler_codigo_aluno>:

void ler_codigo_aluno(char* codigo) {
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	00 d0       	rcall	.+0      	; 0x3be <ler_codigo_aluno+0xe>
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
 3c4:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
 3c8:	45 e7       	ldi	r20, 0x75	; 117
 3ca:	51 e0       	ldi	r21, 0x01	; 1
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
 3d4:	44 e8       	ldi	r20, 0x84	; 132
 3d6:	51 e0       	ldi	r21, 0x01	; 1
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
		}
	}
}

void ler_codigo_aluno(char* codigo) {
	int pos = 0;
 3e0:	00 e0       	ldi	r16, 0x00	; 0
 3e2:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 3e4:	21 c0       	rjmp	.+66     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		verifica_comandos_servidor();
 3e6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <verifica_comandos_servidor>
		if (terminal_travado) return;
 3ea:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 3ee:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 3f2:	89 2b       	or	r24, r25
 3f4:	f1 f4       	brne	.+60     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>

		tecla = varredura();
 3f6:	0e 94 c2 06 	call	0xd84	; 0xd84 <varredura>
		if (tecla >= '0' && tecla <= '9') {
 3fa:	90 ed       	ldi	r25, 0xD0	; 208
 3fc:	98 0f       	add	r25, r24
 3fe:	9a 30       	cpi	r25, 0x0A	; 10
 400:	98 f4       	brcc	.+38     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			codigo[pos] = tecla;
 402:	f7 01       	movw	r30, r14
 404:	e0 0f       	add	r30, r16
 406:	f1 1f       	adc	r31, r17
 408:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
 40a:	89 83       	std	Y+1, r24	; 0x01
 40c:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
 40e:	ae 01       	movw	r20, r28
 410:	4f 5f       	subi	r20, 0xFF	; 255
 412:	5f 4f       	sbci	r21, 0xFF	; 255
 414:	60 2f       	mov	r22, r16
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 41c:	0f 5f       	subi	r16, 0xFF	; 255
 41e:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
 420:	88 ec       	ldi	r24, 0xC8	; 200
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 428:	06 30       	cpi	r16, 0x06	; 6
 42a:	11 05       	cpc	r17, r1
 42c:	e4 f2       	brlt	.-72     	; 0x3e6 <ler_codigo_aluno+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	codigo[6] = '\0';
 42e:	f7 01       	movw	r30, r14
 430:	16 82       	std	Z+6, r1	; 0x06
}
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	08 95       	ret

00000444 <ler_senha>:

void ler_senha(char* senha) {
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	00 d0       	rcall	.+0      	; 0x452 <ler_senha+0xe>
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
 456:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
 458:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite senha:");
 45c:	4b e8       	ldi	r20, 0x8B	; 139
 45e:	51 e0       	ldi	r21, 0x01	; 1
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
 468:	44 e8       	ldi	r20, 0x84	; 132
 46a:	51 e0       	ldi	r21, 0x01	; 1
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	}
	codigo[6] = '\0';
}

void ler_senha(char* senha) {
	int pos = 0;
 474:	00 e0       	ldi	r16, 0x00	; 0
 476:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 478:	22 c0       	rjmp	.+68     	; 0x4be <ler_senha+0x7a>
		verifica_comandos_servidor();
 47a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <verifica_comandos_servidor>
		if (terminal_travado) return;
 47e:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 482:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 486:	89 2b       	or	r24, r25
 488:	f9 f4       	brne	.+62     	; 0x4c8 <ler_senha+0x84>

		tecla = varredura();
 48a:	0e 94 c2 06 	call	0xd84	; 0xd84 <varredura>
		if (tecla >= '0' && tecla <= '9') {
 48e:	90 ed       	ldi	r25, 0xD0	; 208
 490:	98 0f       	add	r25, r24
 492:	9a 30       	cpi	r25, 0x0A	; 10
 494:	a0 f4       	brcc	.+40     	; 0x4be <ler_senha+0x7a>
			senha[pos] = tecla;
 496:	f7 01       	movw	r30, r14
 498:	e0 0f       	add	r30, r16
 49a:	f1 1f       	adc	r31, r17
 49c:	80 83       	st	Z, r24
			char temp[2] = { '*', '\0' };
 49e:	8a e2       	ldi	r24, 0x2A	; 42
 4a0:	89 83       	std	Y+1, r24	; 0x01
 4a2:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
 4a4:	ae 01       	movw	r20, r28
 4a6:	4f 5f       	subi	r20, 0xFF	; 255
 4a8:	5f 4f       	sbci	r21, 0xFF	; 255
 4aa:	60 2f       	mov	r22, r16
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 4b2:	0f 5f       	subi	r16, 0xFF	; 255
 4b4:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
 4b6:	88 ec       	ldi	r24, 0xC8	; 200
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 4be:	06 30       	cpi	r16, 0x06	; 6
 4c0:	11 05       	cpc	r17, r1
 4c2:	dc f2       	brlt	.-74     	; 0x47a <ler_senha+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	senha[6] = '\0';
 4c4:	f7 01       	movw	r30, r14
 4c6:	16 82       	std	Z+6, r1	; 0x06
}
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	ff 90       	pop	r15
 4d6:	ef 90       	pop	r14
 4d8:	08 95       	ret

000004da <validar_codigo_aluno>:


// Valida cÃ³digo com o servidor via serial
int validar_codigo_aluno(const char* codigo, const char* senha) {
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	a1 97       	sbiw	r28, 0x21	; 33
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	cd bf       	out	0x3d, r28	; 61
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
 4ee:	dc 01       	movw	r26, r24
 4f0:	0d 90       	ld	r0, X+
 4f2:	00 20       	and	r0, r0
 4f4:	e9 f7       	brne	.-6      	; 0x4f0 <validar_codigo_aluno+0x16>
 4f6:	11 97       	sbiw	r26, 0x01	; 1
 4f8:	a8 1b       	sub	r26, r24
 4fa:	b9 0b       	sbc	r27, r25
 4fc:	16 97       	sbiw	r26, 0x06	; 6
 4fe:	09 f0       	breq	.+2      	; 0x502 <validar_codigo_aluno+0x28>
 500:	53 c0       	rjmp	.+166    	; 0x5a8 <validar_codigo_aluno+0xce>
 502:	db 01       	movw	r26, r22
 504:	0d 90       	ld	r0, X+
 506:	00 20       	and	r0, r0
 508:	e9 f7       	brne	.-6      	; 0x504 <validar_codigo_aluno+0x2a>
 50a:	11 97       	sbiw	r26, 0x01	; 1
 50c:	a6 1b       	sub	r26, r22
 50e:	b7 0b       	sbc	r27, r23
 510:	16 97       	sbiw	r26, 0x06	; 6
 512:	09 f0       	breq	.+2      	; 0x516 <validar_codigo_aluno+0x3c>
 514:	4c c0       	rjmp	.+152    	; 0x5ae <validar_codigo_aluno+0xd4>
 516:	fc 01       	movw	r30, r24

	char mensagem[14];
	mensagem[0] = 'C';
 518:	83 e4       	ldi	r24, 0x43	; 67
 51a:	89 83       	std	Y+1, r24	; 0x01
	mensagem[1] = 'E';
 51c:	85 e4       	ldi	r24, 0x45	; 69
 51e:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(&mensagem[2], codigo, 6);
 520:	86 e0       	ldi	r24, 0x06	; 6
 522:	de 01       	movw	r26, r28
 524:	13 96       	adiw	r26, 0x03	; 3
 526:	01 90       	ld	r0, Z+
 528:	0d 92       	st	X+, r0
 52a:	8a 95       	dec	r24
 52c:	e1 f7       	brne	.-8      	; 0x526 <validar_codigo_aluno+0x4c>
	memcpy(&mensagem[8], senha, 6);
 52e:	86 e0       	ldi	r24, 0x06	; 6
 530:	fb 01       	movw	r30, r22
 532:	de 01       	movw	r26, r28
 534:	19 96       	adiw	r26, 0x09	; 9
 536:	01 90       	ld	r0, Z+
 538:	0d 92       	st	X+, r0
 53a:	8a 95       	dec	r24
 53c:	e1 f7       	brne	.-8      	; 0x536 <validar_codigo_aluno+0x5c>

	SerialEnviaChars(14, mensagem);
 53e:	be 01       	movw	r22, r28
 540:	6f 5f       	subi	r22, 0xFF	; 255
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8e e0       	ldi	r24, 0x0E	; 14
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 53 05 	call	0xaa6	; 0xaa6 <SerialEnviaChars>

	char resposta[19];
	SerialRecebeChars(18, resposta);
 54c:	be 01       	movw	r22, r28
 54e:	61 5f       	subi	r22, 0xF1	; 241
 550:	7f 4f       	sbci	r23, 0xFF	; 255
 552:	82 e1       	ldi	r24, 0x12	; 18
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 ed 05 	call	0xbda	; 0xbda <SerialRecebeChars>
	resposta[18] = '\0';
 55a:	19 a2       	std	Y+33, r1	; 0x21

	LCD_limpar();
 55c:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Resp Servidor:");
 560:	49 e9       	ldi	r20, 0x99	; 153
 562:	51 e0       	ldi	r21, 0x01	; 1
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, resposta);
 56c:	ae 01       	movw	r20, r28
 56e:	41 5f       	subi	r20, 0xF1	; 241
 570:	5f 4f       	sbci	r21, 0xFF	; 255
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	delay1ms(2000);
 57a:	80 ed       	ldi	r24, 0xD0	; 208
 57c:	97 e0       	ldi	r25, 0x07	; 7
 57e:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
	LCD_limpar();
 582:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
 586:	8f 85       	ldd	r24, Y+15	; 0x0f
 588:	83 35       	cpi	r24, 0x53	; 83
 58a:	a1 f4       	brne	.+40     	; 0x5b4 <validar_codigo_aluno+0xda>
 58c:	88 89       	ldd	r24, Y+16	; 0x10
 58e:	85 34       	cpi	r24, 0x45	; 69
 590:	a1 f4       	brne	.+40     	; 0x5ba <validar_codigo_aluno+0xe0>
		if (strstr(resposta, "Nao autorizado") != NULL) {
 592:	68 ea       	ldi	r22, 0xA8	; 168
 594:	71 e0       	ldi	r23, 0x01	; 1
 596:	ce 01       	movw	r24, r28
 598:	0f 96       	adiw	r24, 0x0f	; 15
 59a:	0e 94 96 07 	call	0xf2c	; 0xf2c <strstr>
 59e:	89 2b       	or	r24, r25
 5a0:	79 f0       	breq	.+30     	; 0x5c0 <validar_codigo_aluno+0xe6>
			return 0;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e c0       	rjmp	.+28     	; 0x5c4 <validar_codigo_aluno+0xea>
}


// Valida cÃ³digo com o servidor via serial
int validar_codigo_aluno(const char* codigo, const char* senha) {
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0b c0       	rjmp	.+22     	; 0x5c4 <validar_codigo_aluno+0xea>
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <validar_codigo_aluno+0xea>
			return 0;
			} else {
			return 1;
		}
	}
	return 0;
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <validar_codigo_aluno+0xea>
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <validar_codigo_aluno+0xea>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
		if (strstr(resposta, "Nao autorizado") != NULL) {
			return 0;
			} else {
			return 1;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
 5c4:	a1 96       	adiw	r28, 0x21	; 33
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	f8 94       	cli
 5ca:	de bf       	out	0x3e, r29	; 62
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	cd bf       	out	0x3d, r28	; 61
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <main>:

int main(void) {
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	66 97       	sbiw	r28, 0x16	; 22
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
 5ea:	0e 94 7e 06 	call	0xcfc	; 0xcfc <prepara_teclado>
	LCD_iniciar();
 5ee:	0e 94 88 00 	call	0x110	; 0x110 <LCD_iniciar>
	initUART();
 5f2:	0e 94 44 05 	call	0xa88	; 0xa88 <initUART>

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
 5f6:	88 e0       	ldi	r24, 0x08	; 8
 5f8:	e0 e0       	ldi	r30, 0x00	; 0
 5fa:	f1 e0       	ldi	r31, 0x01	; 1
 5fc:	de 01       	movw	r26, r28
 5fe:	1f 96       	adiw	r26, 0x0f	; 15
 600:	01 90       	ld	r0, Z+
 602:	0d 92       	st	X+, r0
 604:	8a 95       	dec	r24
 606:	e1 f7       	brne	.-8      	; 0x600 <main+0x2a>
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	while (1) {
		verifica_comandos_servidor();
 608:	0e 94 7e 01 	call	0x2fc	; 0x2fc <verifica_comandos_servidor>

		if (terminal_travado) {
 60c:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 610:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 614:	89 2b       	or	r24, r25
 616:	29 f0       	breq	.+10     	; 0x622 <main+0x4c>
			delay1ms(500);
 618:	84 ef       	ldi	r24, 0xF4	; 244
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
			continue;
 620:	f3 cf       	rjmp	.-26     	; 0x608 <main+0x32>
		}

		LCD_limpar();
 622:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
		mensagem_Inicial();
 626:	0e 94 53 00 	call	0xa6	; 0xa6 <mensagem_Inicial>

		while (varredura() == 0) {
 62a:	08 c0       	rjmp	.+16     	; 0x63c <main+0x66>
			verifica_comandos_servidor();
 62c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <verifica_comandos_servidor>
			if (terminal_travado) break;
 630:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 634:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 638:	89 2b       	or	r24, r25
 63a:	21 f4       	brne	.+8      	; 0x644 <main+0x6e>
		}

		LCD_limpar();
		mensagem_Inicial();

		while (varredura() == 0) {
 63c:	0e 94 c2 06 	call	0xd84	; 0xd84 <varredura>
 640:	88 23       	and	r24, r24
 642:	a1 f3       	breq	.-24     	; 0x62c <main+0x56>
			verifica_comandos_servidor();
			if (terminal_travado) break;
		}
		if (terminal_travado) continue;
 644:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 648:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 64c:	89 2b       	or	r24, r25
 64e:	e1 f6       	brne	.-72     	; 0x608 <main+0x32>

		ler_codigo_aluno(codigo_aluno);
 650:	ce 01       	movw	r24, r28
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ler_codigo_aluno>
		if (terminal_travado) continue; 
 658:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 65c:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 660:	89 2b       	or	r24, r25
 662:	91 f6       	brne	.-92     	; 0x608 <main+0x32>
		ler_senha(senha_aluno);
 664:	ce 01       	movw	r24, r28
 666:	08 96       	adiw	r24, 0x08	; 8
 668:	0e 94 22 02 	call	0x444	; 0x444 <ler_senha>
		if (terminal_travado) continue; 
 66c:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 670:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 674:	89 2b       	or	r24, r25
 676:	41 f6       	brne	.-112    	; 0x608 <main+0x32>

		if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
 678:	be 01       	movw	r22, r28
 67a:	68 5f       	subi	r22, 0xF8	; 248
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	ce 01       	movw	r24, r28
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	0e 94 6d 02 	call	0x4da	; 0x4da <validar_codigo_aluno>
 686:	89 2b       	or	r24, r25
 688:	09 f4       	brne	.+2      	; 0x68c <main+0xb6>
 68a:	e6 c0       	rjmp	.+460    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			LCD_limpar();
 68c:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Codigo valido!");
 690:	47 eb       	ldi	r20, 0xB7	; 183
 692:	51 e0       	ldi	r21, 0x01	; 1
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Processando...");
 69c:	46 ec       	ldi	r20, 0xC6	; 198
 69e:	51 e0       	ldi	r21, 0x01	; 1
 6a0:	60 e0       	ldi	r22, 0x00	; 0
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			delay1ms(2000);
 6a8:	80 ed       	ldi	r24, 0xD0	; 208
 6aa:	97 e0       	ldi	r25, 0x07	; 7
 6ac:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>

			int menu_ativo = 1;
 6b0:	cc 24       	eor	r12, r12
 6b2:	c3 94       	inc	r12
 6b4:	d1 2c       	mov	r13, r1
			indice_menu = 0;
 6b6:	e1 2c       	mov	r14, r1
 6b8:	f1 2c       	mov	r15, r1

			while (menu_ativo) {
 6ba:	c9 c0       	rjmp	.+402    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
				verifica_comandos_servidor();
 6bc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <verifica_comandos_servidor>
				if (terminal_travado) break;
 6c0:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 6c4:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 6c8:	89 2b       	or	r24, r25
 6ca:	09 f0       	breq	.+2      	; 0x6ce <main+0xf8>
 6cc:	9d cf       	rjmp	.-198    	; 0x608 <main+0x32>

				LCD_limpar();
 6ce:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
 6d2:	f7 01       	movw	r30, r14
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	8c 0f       	add	r24, r28
 6de:	9d 1f       	adc	r25, r29
 6e0:	e8 0f       	add	r30, r24
 6e2:	f9 1f       	adc	r31, r25
 6e4:	46 85       	ldd	r20, Z+14	; 0x0e
 6e6:	57 85       	ldd	r21, Z+15	; 0x0f
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				if (indice_menu + 1 < total_opcoes) {
 6f0:	57 01       	movw	r10, r14
 6f2:	9f ef       	ldi	r25, 0xFF	; 255
 6f4:	a9 1a       	sub	r10, r25
 6f6:	b9 0a       	sbc	r11, r25
 6f8:	84 e0       	ldi	r24, 0x04	; 4
 6fa:	a8 16       	cp	r10, r24
 6fc:	b1 04       	cpc	r11, r1
 6fe:	84 f4       	brge	.+32     	; 0x720 <main+0x14a>
					LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
 700:	f5 01       	movw	r30, r10
 702:	ee 0f       	add	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	8c 0f       	add	r24, r28
 70c:	9d 1f       	adc	r25, r29
 70e:	e8 0f       	add	r30, r24
 710:	f9 1f       	adc	r31, r25
 712:	46 85       	ldd	r20, Z+14	; 0x0e
 714:	57 85       	ldd	r21, Z+15	; 0x0f
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 71e:	0f c0       	rjmp	.+30     	; 0x73e <main+0x168>
					} else {
					LCD_Escrever_Linha(1, 0, " ");
 720:	45 e3       	ldi	r20, 0x35	; 53
 722:	51 e0       	ldi	r21, 0x01	; 1
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 72c:	08 c0       	rjmp	.+16     	; 0x73e <main+0x168>
				}

				while ((tecla = varredura()) == 0) {
					verifica_comandos_servidor();
 72e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <verifica_comandos_servidor>
					if (terminal_travado) break;
 732:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 736:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 73a:	89 2b       	or	r24, r25
 73c:	29 f4       	brne	.+10     	; 0x748 <main+0x172>
					LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
					} else {
					LCD_Escrever_Linha(1, 0, " ");
				}

				while ((tecla = varredura()) == 0) {
 73e:	0e 94 c2 06 	call	0xd84	; 0xd84 <varredura>
 742:	18 2f       	mov	r17, r24
 744:	88 23       	and	r24, r24
 746:	99 f3       	breq	.-26     	; 0x72e <main+0x158>
					verifica_comandos_servidor();
					if (terminal_travado) break;
				}
				if (terminal_travado) break;
 748:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 74c:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 750:	89 2b       	or	r24, r25
 752:	09 f0       	breq	.+2      	; 0x756 <main+0x180>
 754:	59 cf       	rjmp	.-334    	; 0x608 <main+0x32>

				delay1ms(300);
 756:	8c e2       	ldi	r24, 0x2C	; 44
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>

				if (tecla == 'B' && indice_menu < total_opcoes - 2) {
 75e:	12 34       	cpi	r17, 0x42	; 66
 760:	29 f4       	brne	.+10     	; 0x76c <main+0x196>
 762:	92 e0       	ldi	r25, 0x02	; 2
 764:	e9 16       	cp	r14, r25
 766:	f1 04       	cpc	r15, r1
 768:	0c f4       	brge	.+2      	; 0x76c <main+0x196>
 76a:	70 c0       	rjmp	.+224    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
					indice_menu++;
					} else if (tecla == 'A' && indice_menu > 0) {
 76c:	11 34       	cpi	r17, 0x41	; 65
 76e:	39 f4       	brne	.+14     	; 0x77e <main+0x1a8>
 770:	1e 14       	cp	r1, r14
 772:	1f 04       	cpc	r1, r15
 774:	24 f4       	brge	.+8      	; 0x77e <main+0x1a8>
					indice_menu--;
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	e8 1a       	sub	r14, r24
 77a:	f1 08       	sbc	r15, r1
 77c:	68 c0       	rjmp	.+208    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
					} else if (tecla == '*') {
 77e:	1a 32       	cpi	r17, 0x2A	; 42
 780:	79 f4       	brne	.+30     	; 0x7a0 <main+0x1ca>
					LCD_limpar();
 782:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
					LCD_Escrever_Linha(0, 0, "Voltando...");
 786:	45 ed       	ldi	r20, 0xD5	; 213
 788:	51 e0       	ldi	r21, 0x01	; 1
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
					delay1ms(1000);
 792:	88 ee       	ldi	r24, 0xE8	; 232
 794:	93 e0       	ldi	r25, 0x03	; 3
 796:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
					menu_ativo = 0;
 79a:	c1 2c       	mov	r12, r1
 79c:	d1 2c       	mov	r13, r1
 79e:	57 c0       	rjmp	.+174    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
					} else if (tecla == opcoes[indice_menu][0]) {
 7a0:	f7 01       	movw	r30, r14
 7a2:	ee 0f       	add	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	8c 0f       	add	r24, r28
 7ac:	9d 1f       	adc	r25, r29
 7ae:	e8 0f       	add	r30, r24
 7b0:	f9 1f       	adc	r31, r25
 7b2:	06 84       	ldd	r0, Z+14	; 0x0e
 7b4:	f7 85       	ldd	r31, Z+15	; 0x0f
 7b6:	e0 2d       	mov	r30, r0
 7b8:	80 81       	ld	r24, Z
 7ba:	18 13       	cpse	r17, r24
 7bc:	48 c0       	rjmp	.+144    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
					switch (tecla) {
 7be:	12 33       	cpi	r17, 0x32	; 50
 7c0:	61 f0       	breq	.+24     	; 0x7da <main+0x204>
 7c2:	18 f4       	brcc	.+6      	; 0x7ca <main+0x1f4>
 7c4:	11 33       	cpi	r17, 0x31	; 49
 7c6:	31 f0       	breq	.+12     	; 0x7d4 <main+0x1fe>
 7c8:	42 c0       	rjmp	.+132    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7ca:	13 33       	cpi	r17, 0x33	; 51
 7cc:	c9 f0       	breq	.+50     	; 0x800 <__DATA_REGION_LENGTH__>
 7ce:	14 33       	cpi	r17, 0x34	; 52
 7d0:	51 f1       	breq	.+84     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7d2:	3d c0       	rjmp	.+122    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
						case '1':
						realizar_saque();
 7d4:	0e 94 a0 04 	call	0x940	; 0x940 <realizar_saque>
						break;
 7d8:	3a c0       	rjmp	.+116    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
						case '2':
						LCD_limpar();
 7da:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Deposito");
 7de:	4e e1       	ldi	r20, 0x1E	; 30
 7e0:	52 e0       	ldi	r21, 0x02	; 2
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 7ea:	41 ee       	ldi	r20, 0xE1	; 225
 7ec:	51 e0       	ldi	r21, 0x01	; 1
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 7f6:	80 ed       	ldi	r24, 0xD0	; 208
 7f8:	97 e0       	ldi	r25, 0x07	; 7
 7fa:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
						break;
 7fe:	27 c0       	rjmp	.+78     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
						case '3':
						LCD_limpar();
 800:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Pagamento");
 804:	49 e2       	ldi	r20, 0x29	; 41
 806:	52 e0       	ldi	r21, 0x02	; 2
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 810:	41 ee       	ldi	r20, 0xE1	; 225
 812:	51 e0       	ldi	r21, 0x01	; 1
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 81c:	80 ed       	ldi	r24, 0xD0	; 208
 81e:	97 e0       	ldi	r25, 0x07	; 7
 820:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
						break;
 824:	14 c0       	rjmp	.+40     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
						case '4':
						LCD_limpar();
 826:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Saldo");
 82a:	45 e3       	ldi	r20, 0x35	; 53
 82c:	52 e0       	ldi	r21, 0x02	; 2
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 836:	41 ee       	ldi	r20, 0xE1	; 225
 838:	51 e0       	ldi	r21, 0x01	; 1
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 842:	80 ed       	ldi	r24, 0xD0	; 208
 844:	97 e0       	ldi	r25, 0x07	; 7
 846:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
						break;
 84a:	01 c0       	rjmp	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
				if (terminal_travado) break;

				delay1ms(300);

				if (tecla == 'B' && indice_menu < total_opcoes - 2) {
					indice_menu++;
 84c:	75 01       	movw	r14, r10
			delay1ms(2000);

			int menu_ativo = 1;
			indice_menu = 0;

			while (menu_ativo) {
 84e:	c1 14       	cp	r12, r1
 850:	d1 04       	cpc	r13, r1
 852:	09 f0       	breq	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 854:	33 cf       	rjmp	.-410    	; 0x6bc <main+0xe6>
 856:	d8 ce       	rjmp	.-592    	; 0x608 <main+0x32>
						break;
					}
				}
			}
			} else {
			LCD_limpar();
 858:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Conta invalida!");
 85c:	44 ef       	ldi	r20, 0xF4	; 244
 85e:	51 e0       	ldi	r21, 0x01	; 1
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Tente novamente");
 868:	44 e0       	ldi	r20, 0x04	; 4
 86a:	52 e0       	ldi	r21, 0x02	; 2
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			delay1ms(2000);
 874:	80 ed       	ldi	r24, 0xD0	; 208
 876:	97 e0       	ldi	r25, 0x07	; 7
 878:	0e 94 46 07 	call	0xe8c	; 0xe8c <delay1ms>
 87c:	c5 ce       	rjmp	.-630    	; 0x608 <main+0x32>

0000087e <enviar_mensagem_saque>:
		}
	}
}

// Função para enviar mensagem de saque para o servidor
void enviar_mensagem_saque(const char* valor) {
 87e:	cf 92       	push	r12
 880:	df 92       	push	r13
 882:	ef 92       	push	r14
 884:	ff 92       	push	r15
 886:	0f 93       	push	r16
 888:	1f 93       	push	r17
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
 892:	bc 01       	movw	r22, r24
	// Copia o valor para a mensagem
	strncpy(&mensagem[3], valor, tamanho_valor);
	
	// Envia a mensagem via serial
	SerialEnviaChars(tamanho_mensagem, mensagem);
}
 894:	ed b6       	in	r14, 0x3d	; 61
 896:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de saque para o servidor
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
 898:	fc 01       	movw	r30, r24
 89a:	01 90       	ld	r0, Z+
 89c:	00 20       	and	r0, r0
 89e:	e9 f7       	brne	.-6      	; 0x89a <enviar_mensagem_saque+0x1c>
 8a0:	31 97       	sbiw	r30, 0x01	; 1
 8a2:	af 01       	movw	r20, r30
 8a4:	48 1b       	sub	r20, r24
 8a6:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3; // 'C' + 'S' + n + valor
 8a8:	6a 01       	movw	r12, r20
 8aa:	83 e0       	ldi	r24, 0x03	; 3
 8ac:	c8 0e       	add	r12, r24
 8ae:	d1 1c       	adc	r13, r1
	
	char mensagem[tamanho_mensagem];
 8b0:	ed b7       	in	r30, 0x3d	; 61
 8b2:	fe b7       	in	r31, 0x3e	; 62
 8b4:	ec 19       	sub	r30, r12
 8b6:	fd 09       	sbc	r31, r13
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	f8 94       	cli
 8bc:	fe bf       	out	0x3e, r31	; 62
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	ed bf       	out	0x3d, r30	; 61
 8c2:	0d b7       	in	r16, 0x3d	; 61
 8c4:	1e b7       	in	r17, 0x3e	; 62
 8c6:	0f 5f       	subi	r16, 0xFF	; 255
 8c8:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// Monta a mensagem conforme o protocolo
	mensagem[0] = 'C'; // Comando
 8ca:	83 e4       	ldi	r24, 0x43	; 67
 8cc:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S'; // Subcomando (Saque)
 8ce:	83 e5       	ldi	r24, 0x53	; 83
 8d0:	f8 01       	movw	r30, r16
 8d2:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor; // Tamanho do valor
 8d4:	42 83       	std	Z+2, r20	; 0x02
	
	// Copia o valor para a mensagem
	strncpy(&mensagem[3], valor, tamanho_valor);
 8d6:	8d b7       	in	r24, 0x3d	; 61
 8d8:	9e b7       	in	r25, 0x3e	; 62
 8da:	04 96       	adiw	r24, 0x04	; 4
 8dc:	0e 94 87 07 	call	0xf0e	; 0xf0e <strncpy>
	
	// Envia a mensagem via serial
	SerialEnviaChars(tamanho_mensagem, mensagem);
 8e0:	b8 01       	movw	r22, r16
 8e2:	c6 01       	movw	r24, r12
 8e4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <SerialEnviaChars>
}
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	f8 94       	cli
 8ec:	fe be       	out	0x3e, r15	; 62
 8ee:	0f be       	out	0x3f, r0	; 63
 8f0:	ed be       	out	0x3d, r14	; 61
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	1f 91       	pop	r17
 8f8:	0f 91       	pop	r16
 8fa:	ff 90       	pop	r15
 8fc:	ef 90       	pop	r14
 8fe:	df 90       	pop	r13
 900:	cf 90       	pop	r12
 902:	08 95       	ret

00000904 <receber_resposta_servidor>:

// Função para receber resposta do servidor
char receber_resposta_servidor(void) {
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	00 d0       	rcall	.+0      	; 0x90a <receber_resposta_servidor+0x6>
 90a:	1f 92       	push	r1
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
	char resposta[3];
	
	// Aguarda a resposta do servidor (3 bytes)
	SerialRecebeChars(3, resposta);
 910:	be 01       	movw	r22, r28
 912:	6f 5f       	subi	r22, 0xFF	; 255
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	83 e0       	ldi	r24, 0x03	; 3
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 ed 05 	call	0xbda	; 0xbda <SerialRecebeChars>
	
	// Verifica se é uma resposta de saque
	if(resposta[0] == 'S' && resposta[1] == 'S') {
 91e:	89 81       	ldd	r24, Y+1	; 0x01
 920:	83 35       	cpi	r24, 0x53	; 83
 922:	29 f4       	brne	.+10     	; 0x92e <receber_resposta_servidor+0x2a>
 924:	8a 81       	ldd	r24, Y+2	; 0x02
 926:	83 35       	cpi	r24, 0x53	; 83
 928:	21 f4       	brne	.+8      	; 0x932 <receber_resposta_servidor+0x2e>
		return resposta[2]; // Retorna 'O' ou 'I'
 92a:	8b 81       	ldd	r24, Y+3	; 0x03
 92c:	03 c0       	rjmp	.+6      	; 0x934 <receber_resposta_servidor+0x30>
	}
	
	return 'E'; // Erro
 92e:	85 e4       	ldi	r24, 0x45	; 69
 930:	01 c0       	rjmp	.+2      	; 0x934 <receber_resposta_servidor+0x30>
 932:	85 e4       	ldi	r24, 0x45	; 69
 934:	0f 90       	pop	r0
 936:	0f 90       	pop	r0
 938:	0f 90       	pop	r0
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	08 95       	ret

00000940 <realizar_saque>:
#include "LCD.h"
#include "teclado.h"
#include <util/delay.h>

// Função para realizar um saque
void realizar_saque(void) {
 940:	0f 93       	push	r16
 942:	1f 93       	push	r17
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62
 94c:	2a 97       	sbiw	r28, 0x0a	; 10
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	f8 94       	cli
 952:	de bf       	out	0x3e, r29	; 62
 954:	0f be       	out	0x3f, r0	; 63
 956:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
 958:	fe 01       	movw	r30, r28
 95a:	31 96       	adiw	r30, 0x01	; 1
 95c:	89 e0       	ldi	r24, 0x09	; 9
 95e:	df 01       	movw	r26, r30
 960:	1d 92       	st	X+, r1
 962:	8a 95       	dec	r24
 964:	e9 f7       	brne	.-6      	; 0x960 <realizar_saque+0x20>
	int pos = 0;
	char tecla;
	
	// Solicita o valor do saque ao usuário
	LCD_limpar();
 966:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
 96a:	4b e3       	ldi	r20, 0x3B	; 59
 96c:	52 e0       	ldi	r21, 0x02	; 2
 96e:	60 e0       	ldi	r22, 0x00	; 0
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
 976:	4b e4       	ldi	r20, 0x4B	; 75
 978:	52 e0       	ldi	r21, 0x02	; 2
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
#include <util/delay.h>

// Função para realizar um saque
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
 982:	00 e0       	ldi	r16, 0x00	; 0
 984:	10 e0       	ldi	r17, 0x00	; 0
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");
	
	while(1) {
		tecla = varredura();
 986:	0e 94 c2 06 	call	0xd84	; 0xd84 <varredura>
 98a:	8a 87       	std	Y+10, r24	; 0x0a
		
		// Se for dígito e ainda houver espaço
		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE-1)) {
 98c:	90 ed       	ldi	r25, 0xD0	; 208
 98e:	98 0f       	add	r25, r24
 990:	9a 30       	cpi	r25, 0x0A	; 10
 992:	d8 f4       	brcc	.+54     	; 0x9ca <realizar_saque+0x8a>
 994:	08 30       	cpi	r16, 0x08	; 8
 996:	11 05       	cpc	r17, r1
 998:	c4 f4       	brge	.+48     	; 0x9ca <realizar_saque+0x8a>
			valor_saque[pos] = tecla;
 99a:	e1 e0       	ldi	r30, 0x01	; 1
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	ec 0f       	add	r30, r28
 9a0:	fd 1f       	adc	r31, r29
 9a2:	e0 0f       	add	r30, r16
 9a4:	f1 1f       	adc	r31, r17
 9a6:	80 83       	st	Z, r24
			LCD_Escrever_Linha(1, 2+pos, &tecla);
 9a8:	62 e0       	ldi	r22, 0x02	; 2
 9aa:	60 0f       	add	r22, r16
 9ac:	ae 01       	movw	r20, r28
 9ae:	46 5f       	subi	r20, 0xF6	; 246
 9b0:	5f 4f       	sbci	r21, 0xFF	; 255
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 9b8:	0f 5f       	subi	r16, 0xFF	; 255
 9ba:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9bc:	8f e4       	ldi	r24, 0x4F	; 79
 9be:	93 ec       	ldi	r25, 0xC3	; 195
 9c0:	01 97       	sbiw	r24, 0x01	; 1
 9c2:	f1 f7       	brne	.-4      	; 0x9c0 <realizar_saque+0x80>
 9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <realizar_saque+0x86>
 9c6:	00 00       	nop
 9c8:	de cf       	rjmp	.-68     	; 0x986 <realizar_saque+0x46>
			_delay_ms(200); // Debounce
		}
		// Tecla enter (confirmar)
		else if(tecla == '#' && pos > 0) {
 9ca:	83 32       	cpi	r24, 0x23	; 35
 9cc:	c1 f5       	brne	.+112    	; 0xa3e <realizar_saque+0xfe>
 9ce:	10 16       	cp	r1, r16
 9d0:	11 06       	cpc	r1, r17
 9d2:	ac f5       	brge	.+106    	; 0xa3e <realizar_saque+0xfe>
			valor_saque[pos] = '\0'; // Finaliza a string
 9d4:	e1 e0       	ldi	r30, 0x01	; 1
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	ec 0f       	add	r30, r28
 9da:	fd 1f       	adc	r31, r29
 9dc:	e0 0f       	add	r30, r16
 9de:	f1 1f       	adc	r31, r17
 9e0:	10 82       	st	Z, r1
			
			// Envia a mensagem de saque para o servidor
			enviar_mensagem_saque(valor_saque);
 9e2:	ce 01       	movw	r24, r28
 9e4:	01 96       	adiw	r24, 0x01	; 1
 9e6:	0e 94 3f 04 	call	0x87e	; 0x87e <enviar_mensagem_saque>
			
			// Aguarda resposta do servidor
			char resposta = receber_resposta_servidor();
 9ea:	0e 94 82 04 	call	0x904	; 0x904 <receber_resposta_servidor>
 9ee:	18 2f       	mov	r17, r24
			
			LCD_limpar();
 9f0:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			if(resposta == 'O') { // OK
 9f4:	1f 34       	cpi	r17, 0x4F	; 79
 9f6:	69 f4       	brne	.+26     	; 0xa12 <realizar_saque+0xd2>
				LCD_Escrever_Linha(0, 0, "Saque realizado!");
 9f8:	4e e4       	ldi	r20, 0x4E	; 78
 9fa:	52 e0       	ldi	r21, 0x02	; 2
 9fc:	60 e0       	ldi	r22, 0x00	; 0
 9fe:	80 e0       	ldi	r24, 0x00	; 0
 a00:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Retire o dinheiro");
 a04:	4f e5       	ldi	r20, 0x5F	; 95
 a06:	52 e0       	ldi	r21, 0x02	; 2
 a08:	60 e0       	ldi	r22, 0x00	; 0
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 a10:	0c c0       	rjmp	.+24     	; 0xa2a <realizar_saque+0xea>
				} else { // Saldo Insuficiente
				LCD_Escrever_Linha(0, 0, "Saldo insuficiente");
 a12:	41 e7       	ldi	r20, 0x71	; 113
 a14:	52 e0       	ldi	r21, 0x02	; 2
 a16:	60 e0       	ldi	r22, 0x00	; 0
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente outro valor");
 a1e:	44 e8       	ldi	r20, 0x84	; 132
 a20:	52 e0       	ldi	r21, 0x02	; 2
 a22:	60 e0       	ldi	r22, 0x00	; 0
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 a2a:	9f eb       	ldi	r25, 0xBF	; 191
 a2c:	a7 e2       	ldi	r26, 0x27	; 39
 a2e:	b9 e0       	ldi	r27, 0x09	; 9
 a30:	91 50       	subi	r25, 0x01	; 1
 a32:	a0 40       	sbci	r26, 0x00	; 0
 a34:	b0 40       	sbci	r27, 0x00	; 0
 a36:	e1 f7       	brne	.-8      	; 0xa30 <realizar_saque+0xf0>
 a38:	00 c0       	rjmp	.+0      	; 0xa3a <realizar_saque+0xfa>
 a3a:	00 00       	nop
 a3c:	1a c0       	rjmp	.+52     	; 0xa72 <realizar_saque+0x132>
			}
			_delay_ms(3000);
			break;
		}
		// Tecla cancelar
		else if(tecla == '*') {
 a3e:	8a 32       	cpi	r24, 0x2A	; 42
 a40:	09 f0       	breq	.+2      	; 0xa44 <realizar_saque+0x104>
 a42:	a1 cf       	rjmp	.-190    	; 0x986 <realizar_saque+0x46>
			LCD_limpar();
 a44:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
 a48:	46 e9       	ldi	r20, 0x96	; 150
 a4a:	52 e0       	ldi	r21, 0x02	; 2
 a4c:	60 e0       	ldi	r22, 0x00	; 0
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
 a54:	4f e9       	ldi	r20, 0x9F	; 159
 a56:	52 e0       	ldi	r21, 0x02	; 2
 a58:	60 e0       	ldi	r22, 0x00	; 0
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 a60:	2f e7       	ldi	r18, 0x7F	; 127
 a62:	8a e1       	ldi	r24, 0x1A	; 26
 a64:	96 e0       	ldi	r25, 0x06	; 6
 a66:	21 50       	subi	r18, 0x01	; 1
 a68:	80 40       	sbci	r24, 0x00	; 0
 a6a:	90 40       	sbci	r25, 0x00	; 0
 a6c:	e1 f7       	brne	.-8      	; 0xa66 <realizar_saque+0x126>
 a6e:	00 c0       	rjmp	.+0      	; 0xa70 <realizar_saque+0x130>
 a70:	00 00       	nop
			_delay_ms(2000);
			break;
		}
	}
}
 a72:	2a 96       	adiw	r28, 0x0a	; 10
 a74:	0f b6       	in	r0, 0x3f	; 63
 a76:	f8 94       	cli
 a78:	de bf       	out	0x3e, r29	; 62
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	cd bf       	out	0x3d, r28	; 61
 a7e:	df 91       	pop	r29
 a80:	cf 91       	pop	r28
 a82:	1f 91       	pop	r17
 a84:	0f 91       	pop	r16
 a86:	08 95       	ret

00000a88 <initUART>:
volatile int uart_tail = 0; // posição do próximo byte para leitura na função SerialRecebeChars

// Inicializa a UART com 19200 bps, 8N1
void initUART(void) {
	// Baud rate = 19200, UBRR = 51 para F_CPU = 16MHz
	UBRR0H = (51 >> 8);
 a88:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 51;
 a8c:	83 e3       	ldi	r24, 0x33	; 51
 a8e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0A = 0; // Padrão
 a92:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

	// Ativa transmissor e receptor e interrupção RX completa
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 a96:	88 e9       	ldi	r24, 0x98	; 152
 a98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, sem paridade, 1 stop bit (8N1)
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 a9c:	86 e0       	ldi	r24, 0x06	; 6
 a9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

	sei(); // habilita interrupções globais
 aa2:	78 94       	sei
 aa4:	08 95       	ret

00000aa6 <SerialEnviaChars>:
}

// Envia uma string de tamanho definido
void SerialEnviaChars(int sizeS, char* string) {
 aa6:	ac 01       	movw	r20, r24
	for (int i = 0; i < sizeS; i++) {
 aa8:	20 e0       	ldi	r18, 0x00	; 0
 aaa:	30 e0       	ldi	r19, 0x00	; 0
 aac:	0c c0       	rjmp	.+24     	; 0xac6 <SerialEnviaChars+0x20>
		while (!(UCSR0A & (1 << UDRE0))); // Espera registrador livre
 aae:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 ab2:	95 ff       	sbrs	r25, 5
 ab4:	fc cf       	rjmp	.-8      	; 0xaae <SerialEnviaChars+0x8>
		UDR0 = string[i];
 ab6:	fb 01       	movw	r30, r22
 ab8:	e2 0f       	add	r30, r18
 aba:	f3 1f       	adc	r31, r19
 abc:	90 81       	ld	r25, Z
 abe:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	sei(); // habilita interrupções globais
}

// Envia uma string de tamanho definido
void SerialEnviaChars(int sizeS, char* string) {
	for (int i = 0; i < sizeS; i++) {
 ac2:	2f 5f       	subi	r18, 0xFF	; 255
 ac4:	3f 4f       	sbci	r19, 0xFF	; 255
 ac6:	24 17       	cp	r18, r20
 ac8:	35 07       	cpc	r19, r21
 aca:	8c f3       	brlt	.-30     	; 0xaae <SerialEnviaChars+0x8>
		while (!(UCSR0A & (1 << UDRE0))); // Espera registrador livre
		UDR0 = string[i];
	}

	// Espera a transmissão do último byte
	while (!(UCSR0A & (1 << TXC0)));
 acc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 ad0:	86 ff       	sbrs	r24, 6
 ad2:	fc cf       	rjmp	.-8      	; 0xacc <SerialEnviaChars+0x26>
	UCSR0A |= (1 << TXC0); // Limpa flag TXC
 ad4:	e0 ec       	ldi	r30, 0xC0	; 192
 ad6:	f0 e0       	ldi	r31, 0x00	; 0
 ad8:	80 81       	ld	r24, Z
 ada:	80 64       	ori	r24, 0x40	; 64
 adc:	80 83       	st	Z, r24
 ade:	08 95       	ret

00000ae0 <SerialEnviaString>:
}

// Envia string null-terminated (mais comum)
void SerialEnviaString(char* str) {
	SerialEnviaChars(strlen(str), str);
 ae0:	fc 01       	movw	r30, r24
 ae2:	01 90       	ld	r0, Z+
 ae4:	00 20       	and	r0, r0
 ae6:	e9 f7       	brne	.-6      	; 0xae2 <SerialEnviaString+0x2>
 ae8:	31 97       	sbiw	r30, 0x01	; 1
 aea:	bc 01       	movw	r22, r24
 aec:	9f 01       	movw	r18, r30
 aee:	28 1b       	sub	r18, r24
 af0:	39 0b       	sbc	r19, r25
 af2:	c9 01       	movw	r24, r18
 af4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <SerialEnviaChars>
 af8:	08 95       	ret

00000afa <__vector_18>:
}

// Buffer circular auxiliar para receber dados na ISR
ISR(USART_RX_vect) {
 afa:	1f 92       	push	r1
 afc:	0f 92       	push	r0
 afe:	0f b6       	in	r0, 0x3f	; 63
 b00:	0f 92       	push	r0
 b02:	11 24       	eor	r1, r1
 b04:	2f 93       	push	r18
 b06:	3f 93       	push	r19
 b08:	4f 93       	push	r20
 b0a:	8f 93       	push	r24
 b0c:	9f 93       	push	r25
 b0e:	ef 93       	push	r30
 b10:	ff 93       	push	r31
	char received = UDR0;
 b12:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	int next_head = (uart_head + 1) % UART_BUFFER_SIZE;
 b16:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <uart_head>
 b1a:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <uart_head+0x1>
 b1e:	01 96       	adiw	r24, 0x01	; 1
 b20:	8f 77       	andi	r24, 0x7F	; 127
 b22:	90 78       	andi	r25, 0x80	; 128
 b24:	99 23       	and	r25, r25
 b26:	24 f4       	brge	.+8      	; 0xb30 <__vector_18+0x36>
 b28:	01 97       	sbiw	r24, 0x01	; 1
 b2a:	80 68       	ori	r24, 0x80	; 128
 b2c:	9f 6f       	ori	r25, 0xFF	; 255
 b2e:	01 96       	adiw	r24, 0x01	; 1
	if (next_head != uart_tail) { // evita overflow
 b30:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <uart_tail>
 b34:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <uart_tail+0x1>
 b38:	82 17       	cp	r24, r18
 b3a:	93 07       	cpc	r25, r19
 b3c:	59 f0       	breq	.+22     	; 0xb54 <__vector_18+0x5a>
		uart_buffer[uart_head] = received;
 b3e:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <uart_head>
 b42:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <uart_head+0x1>
 b46:	e0 55       	subi	r30, 0x50	; 80
 b48:	fd 4f       	sbci	r31, 0xFD	; 253
 b4a:	40 83       	st	Z, r20
		uart_head = next_head;
 b4c:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <uart_head+0x1>
 b50:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <uart_head>
	}
}
 b54:	ff 91       	pop	r31
 b56:	ef 91       	pop	r30
 b58:	9f 91       	pop	r25
 b5a:	8f 91       	pop	r24
 b5c:	4f 91       	pop	r20
 b5e:	3f 91       	pop	r19
 b60:	2f 91       	pop	r18
 b62:	0f 90       	pop	r0
 b64:	0f be       	out	0x3f, r0	; 63
 b66:	0f 90       	pop	r0
 b68:	1f 90       	pop	r1
 b6a:	18 95       	reti

00000b6c <uart_buffer_empty>:

// Função auxiliar para verificar se buffer está vazio
int uart_buffer_empty() {
	return (uart_head == uart_tail);
 b6c:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <uart_head>
 b70:	50 91 af 02 	lds	r21, 0x02AF	; 0x8002af <uart_head+0x1>
 b74:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <uart_tail>
 b78:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <uart_tail+0x1>
 b7c:	81 e0       	ldi	r24, 0x01	; 1
 b7e:	42 17       	cp	r20, r18
 b80:	53 07       	cpc	r21, r19
 b82:	09 f0       	breq	.+2      	; 0xb86 <uart_buffer_empty+0x1a>
 b84:	80 e0       	ldi	r24, 0x00	; 0
}
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	08 95       	ret

00000b8a <uart_buffer_read_char>:

// Função auxiliar para ler um byte do buffer
int uart_buffer_read_char(char *c) {
 b8a:	cf 93       	push	r28
 b8c:	df 93       	push	r29
 b8e:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) {
 b90:	0e 94 b6 05 	call	0xb6c	; 0xb6c <uart_buffer_empty>
 b94:	89 2b       	or	r24, r25
 b96:	e1 f4       	brne	.+56     	; 0xbd0 <uart_buffer_read_char+0x46>
		return 0; // nada para ler
	}
	*c = uart_buffer[uart_tail];
 b98:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <uart_tail>
 b9c:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <uart_tail+0x1>
 ba0:	e0 55       	subi	r30, 0x50	; 80
 ba2:	fd 4f       	sbci	r31, 0xFD	; 253
 ba4:	80 81       	ld	r24, Z
 ba6:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
 ba8:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <uart_tail>
 bac:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <uart_tail+0x1>
 bb0:	01 96       	adiw	r24, 0x01	; 1
 bb2:	8f 77       	andi	r24, 0x7F	; 127
 bb4:	90 78       	andi	r25, 0x80	; 128
 bb6:	99 23       	and	r25, r25
 bb8:	24 f4       	brge	.+8      	; 0xbc2 <uart_buffer_read_char+0x38>
 bba:	01 97       	sbiw	r24, 0x01	; 1
 bbc:	80 68       	ori	r24, 0x80	; 128
 bbe:	9f 6f       	ori	r25, 0xFF	; 255
 bc0:	01 96       	adiw	r24, 0x01	; 1
 bc2:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <uart_tail+0x1>
 bc6:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <uart_tail>
	return 1;
 bca:	81 e0       	ldi	r24, 0x01	; 1
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <uart_buffer_read_char+0x4a>
}

// Função auxiliar para ler um byte do buffer
int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) {
		return 0; // nada para ler
 bd0:	80 e0       	ldi	r24, 0x00	; 0
 bd2:	90 e0       	ldi	r25, 0x00	; 0
	}
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
 bd4:	df 91       	pop	r29
 bd6:	cf 91       	pop	r28
 bd8:	08 95       	ret

00000bda <SerialRecebeChars>:

// Recebe exatamente `sizeS` caracteres e termina com \0, com timeout (~1s)
// Timeout é em número de loops com delay curto (aprox. 10ms por loop)
void SerialRecebeChars(int sizeS, char* string) {
 bda:	af 92       	push	r10
 bdc:	bf 92       	push	r11
 bde:	cf 92       	push	r12
 be0:	df 92       	push	r13
 be2:	ef 92       	push	r14
 be4:	ff 92       	push	r15
 be6:	0f 93       	push	r16
 be8:	1f 93       	push	r17
 bea:	cf 93       	push	r28
 bec:	df 93       	push	r29
 bee:	1f 92       	push	r1
 bf0:	cd b7       	in	r28, 0x3d	; 61
 bf2:	de b7       	in	r29, 0x3e	; 62
 bf4:	6c 01       	movw	r12, r24
 bf6:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
 bf8:	e1 2c       	mov	r14, r1
 bfa:	f1 2c       	mov	r15, r1
}

// Recebe exatamente `sizeS` caracteres e termina com \0, com timeout (~1s)
// Timeout é em número de loops com delay curto (aprox. 10ms por loop)
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
 bfc:	00 e0       	ldi	r16, 0x00	; 0
 bfe:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100; // ~1 segundo timeout (100 * 10ms)

	while (received < sizeS && timeout_count < timeout_limit) {
 c00:	19 c0       	rjmp	.+50     	; 0xc34 <SerialRecebeChars+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
 c02:	ce 01       	movw	r24, r28
 c04:	01 96       	adiw	r24, 0x01	; 1
 c06:	0e 94 c5 05 	call	0xb8a	; 0xb8a <uart_buffer_read_char>
 c0a:	89 2b       	or	r24, r25
 c0c:	51 f0       	breq	.+20     	; 0xc22 <SerialRecebeChars+0x48>
			string[received++] = c;
 c0e:	f5 01       	movw	r30, r10
 c10:	e0 0f       	add	r30, r16
 c12:	f1 1f       	adc	r31, r17
 c14:	89 81       	ldd	r24, Y+1	; 0x01
 c16:	80 83       	st	Z, r24
 c18:	0f 5f       	subi	r16, 0xFF	; 255
 c1a:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0; // reinicia timeout ao receber caractere
 c1c:	e1 2c       	mov	r14, r1
 c1e:	f1 2c       	mov	r15, r1
 c20:	09 c0       	rjmp	.+18     	; 0xc34 <SerialRecebeChars+0x5a>
 c22:	8f e3       	ldi	r24, 0x3F	; 63
 c24:	9c e9       	ldi	r25, 0x9C	; 156
 c26:	01 97       	sbiw	r24, 0x01	; 1
 c28:	f1 f7       	brne	.-4      	; 0xc26 <SerialRecebeChars+0x4c>
 c2a:	00 c0       	rjmp	.+0      	; 0xc2c <SerialRecebeChars+0x52>
 c2c:	00 00       	nop
			} else {
			_delay_ms(10);
			timeout_count++;
 c2e:	9f ef       	ldi	r25, 0xFF	; 255
 c30:	e9 1a       	sub	r14, r25
 c32:	f9 0a       	sbc	r15, r25
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100; // ~1 segundo timeout (100 * 10ms)

	while (received < sizeS && timeout_count < timeout_limit) {
 c34:	0c 15       	cp	r16, r12
 c36:	1d 05       	cpc	r17, r13
 c38:	24 f4       	brge	.+8      	; 0xc42 <SerialRecebeChars+0x68>
 c3a:	84 e6       	ldi	r24, 0x64	; 100
 c3c:	e8 16       	cp	r14, r24
 c3e:	f1 04       	cpc	r15, r1
 c40:	04 f3       	brlt	.-64     	; 0xc02 <SerialRecebeChars+0x28>
			} else {
			_delay_ms(10);
			timeout_count++;
		}
	}
	string[received] = '\0';
 c42:	f5 01       	movw	r30, r10
 c44:	e0 0f       	add	r30, r16
 c46:	f1 1f       	adc	r31, r17
 c48:	10 82       	st	Z, r1
}
 c4a:	0f 90       	pop	r0
 c4c:	df 91       	pop	r29
 c4e:	cf 91       	pop	r28
 c50:	1f 91       	pop	r17
 c52:	0f 91       	pop	r16
 c54:	ff 90       	pop	r15
 c56:	ef 90       	pop	r14
 c58:	df 90       	pop	r13
 c5a:	cf 90       	pop	r12
 c5c:	bf 90       	pop	r11
 c5e:	af 90       	pop	r10
 c60:	08 95       	ret

00000c62 <SerialRecebeCharsNonBlocking>:

// Recebe até `sizeS` caracteres, retorna o número de bytes realmente lidos, com timeout (~500ms)
int SerialRecebeCharsNonBlocking(int sizeS, char* string) {
 c62:	af 92       	push	r10
 c64:	bf 92       	push	r11
 c66:	cf 92       	push	r12
 c68:	df 92       	push	r13
 c6a:	ef 92       	push	r14
 c6c:	ff 92       	push	r15
 c6e:	0f 93       	push	r16
 c70:	1f 93       	push	r17
 c72:	cf 93       	push	r28
 c74:	df 93       	push	r29
 c76:	1f 92       	push	r1
 c78:	cd b7       	in	r28, 0x3d	; 61
 c7a:	de b7       	in	r29, 0x3e	; 62
 c7c:	6c 01       	movw	r12, r24
 c7e:	5b 01       	movw	r10, r22
	int bytes_recebidos = 0;
	int timeout_count = 0;
 c80:	e1 2c       	mov	r14, r1
 c82:	f1 2c       	mov	r15, r1
	string[received] = '\0';
}

// Recebe até `sizeS` caracteres, retorna o número de bytes realmente lidos, com timeout (~500ms)
int SerialRecebeCharsNonBlocking(int sizeS, char* string) {
	int bytes_recebidos = 0;
 c84:	00 e0       	ldi	r16, 0x00	; 0
 c86:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 50; // ~500ms (50 * 10ms)

	while (bytes_recebidos < sizeS && timeout_count < timeout_limit) {
 c88:	19 c0       	rjmp	.+50     	; 0xcbc <SerialRecebeCharsNonBlocking+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
 c8a:	ce 01       	movw	r24, r28
 c8c:	01 96       	adiw	r24, 0x01	; 1
 c8e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <uart_buffer_read_char>
 c92:	89 2b       	or	r24, r25
 c94:	51 f0       	breq	.+20     	; 0xcaa <SerialRecebeCharsNonBlocking+0x48>
			string[bytes_recebidos++] = c;
 c96:	d5 01       	movw	r26, r10
 c98:	a0 0f       	add	r26, r16
 c9a:	b1 1f       	adc	r27, r17
 c9c:	89 81       	ldd	r24, Y+1	; 0x01
 c9e:	8c 93       	st	X, r24
 ca0:	0f 5f       	subi	r16, 0xFF	; 255
 ca2:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0;
 ca4:	e1 2c       	mov	r14, r1
 ca6:	f1 2c       	mov	r15, r1
 ca8:	09 c0       	rjmp	.+18     	; 0xcbc <SerialRecebeCharsNonBlocking+0x5a>
 caa:	8f e3       	ldi	r24, 0x3F	; 63
 cac:	9c e9       	ldi	r25, 0x9C	; 156
 cae:	01 97       	sbiw	r24, 0x01	; 1
 cb0:	f1 f7       	brne	.-4      	; 0xcae <SerialRecebeCharsNonBlocking+0x4c>
 cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <SerialRecebeCharsNonBlocking+0x52>
 cb4:	00 00       	nop
			} else {
			_delay_ms(10);
			timeout_count++;
 cb6:	9f ef       	ldi	r25, 0xFF	; 255
 cb8:	e9 1a       	sub	r14, r25
 cba:	f9 0a       	sbc	r15, r25
int SerialRecebeCharsNonBlocking(int sizeS, char* string) {
	int bytes_recebidos = 0;
	int timeout_count = 0;
	const int timeout_limit = 50; // ~500ms (50 * 10ms)

	while (bytes_recebidos < sizeS && timeout_count < timeout_limit) {
 cbc:	0c 15       	cp	r16, r12
 cbe:	1d 05       	cpc	r17, r13
 cc0:	24 f4       	brge	.+8      	; 0xcca <SerialRecebeCharsNonBlocking+0x68>
 cc2:	82 e3       	ldi	r24, 0x32	; 50
 cc4:	e8 16       	cp	r14, r24
 cc6:	f1 04       	cpc	r15, r1
 cc8:	04 f3       	brlt	.-64     	; 0xc8a <SerialRecebeCharsNonBlocking+0x28>
			_delay_ms(10);
			timeout_count++;
		}
	}

	if (bytes_recebidos < sizeS) {
 cca:	0c 15       	cp	r16, r12
 ccc:	1d 05       	cpc	r17, r13
 cce:	2c f4       	brge	.+10     	; 0xcda <SerialRecebeCharsNonBlocking+0x78>
		string[bytes_recebidos] = '\0';
 cd0:	f5 01       	movw	r30, r10
 cd2:	e0 0f       	add	r30, r16
 cd4:	f1 1f       	adc	r31, r17
 cd6:	10 82       	st	Z, r1
 cd8:	04 c0       	rjmp	.+8      	; 0xce2 <SerialRecebeCharsNonBlocking+0x80>
		} else {
		string[sizeS] = '\0';
 cda:	f5 01       	movw	r30, r10
 cdc:	ec 0d       	add	r30, r12
 cde:	fd 1d       	adc	r31, r13
 ce0:	10 82       	st	Z, r1
	}

	return bytes_recebidos;
}
 ce2:	c8 01       	movw	r24, r16
 ce4:	0f 90       	pop	r0
 ce6:	df 91       	pop	r29
 ce8:	cf 91       	pop	r28
 cea:	1f 91       	pop	r17
 cec:	0f 91       	pop	r16
 cee:	ff 90       	pop	r15
 cf0:	ef 90       	pop	r14
 cf2:	df 90       	pop	r13
 cf4:	cf 90       	pop	r12
 cf6:	bf 90       	pop	r11
 cf8:	af 90       	pop	r10
 cfa:	08 95       	ret

00000cfc <prepara_teclado>:
#define COL4 PD2    // Coluna 4 no PD2

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
 cfc:	84 b1       	in	r24, 0x04	; 4
 cfe:	83 60       	ori	r24, 0x03	; 3
 d00:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
 d02:	8a b1       	in	r24, 0x0a	; 10
 d04:	80 6c       	ori	r24, 0xC0	; 192
 d06:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4)); // PD5, PD4, PD3 e PD2 como entradas
 d08:	8a b1       	in	r24, 0x0a	; 10
 d0a:	83 7c       	andi	r24, 0xC3	; 195
 d0c:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);   // Habilitar resistores de Pull-up
 d0e:	8b b1       	in	r24, 0x0b	; 11
 d10:	8c 63       	ori	r24, 0x3C	; 60
 d12:	8b b9       	out	0x0b, r24	; 11
 d14:	08 95       	ret

00000d16 <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
 d16:	cf 93       	push	r28
 d18:	df 93       	push	r29
 d1a:	00 d0       	rcall	.+0      	; 0xd1c <atraso_debounce+0x6>
 d1c:	cd b7       	in	r28, 0x3d	; 61
 d1e:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
 d20:	1a 82       	std	Y+2, r1	; 0x02
 d22:	19 82       	std	Y+1, r1	; 0x01
 d24:	05 c0       	rjmp	.+10     	; 0xd30 <atraso_debounce+0x1a>
 d26:	89 81       	ldd	r24, Y+1	; 0x01
 d28:	9a 81       	ldd	r25, Y+2	; 0x02
 d2a:	01 96       	adiw	r24, 0x01	; 1
 d2c:	9a 83       	std	Y+2, r25	; 0x02
 d2e:	89 83       	std	Y+1, r24	; 0x01
 d30:	89 81       	ldd	r24, Y+1	; 0x01
 d32:	9a 81       	ldd	r25, Y+2	; 0x02
 d34:	88 3e       	cpi	r24, 0xE8	; 232
 d36:	93 40       	sbci	r25, 0x03	; 3
 d38:	b0 f3       	brcs	.-20     	; 0xd26 <atraso_debounce+0x10>
}
 d3a:	0f 90       	pop	r0
 d3c:	0f 90       	pop	r0
 d3e:	df 91       	pop	r29
 d40:	cf 91       	pop	r28
 d42:	08 95       	ret

00000d44 <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
 d44:	1f 93       	push	r17
 d46:	cf 93       	push	r28
 d48:	df 93       	push	r29
 d4a:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
 d4c:	c0 e0       	ldi	r28, 0x00	; 0
 d4e:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 d50:	12 c0       	rjmp	.+36     	; 0xd76 <debounce+0x32>
        atraso_debounce();
 d52:	0e 94 8b 06 	call	0xd16	; 0xd16 <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
 d56:	29 b1       	in	r18, 0x09	; 9
 d58:	81 e0       	ldi	r24, 0x01	; 1
 d5a:	90 e0       	ldi	r25, 0x00	; 0
 d5c:	01 2e       	mov	r0, r17
 d5e:	02 c0       	rjmp	.+4      	; 0xd64 <debounce+0x20>
 d60:	88 0f       	add	r24, r24
 d62:	99 1f       	adc	r25, r25
 d64:	0a 94       	dec	r0
 d66:	e2 f7       	brpl	.-8      	; 0xd60 <debounce+0x1c>
 d68:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
 d6a:	d8 13       	cpse	r29, r24
 d6c:	02 c0       	rjmp	.+4      	; 0xd72 <debounce+0x2e>
            counter++;
 d6e:	cf 5f       	subi	r28, 0xFF	; 255
 d70:	01 c0       	rjmp	.+2      	; 0xd74 <debounce+0x30>
        } else {
            counter = 0;
 d72:	c0 e0       	ldi	r28, 0x00	; 0
 d74:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 d76:	c7 30       	cpi	r28, 0x07	; 7
 d78:	61 f7       	brne	.-40     	; 0xd52 <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
 d7a:	8d 2f       	mov	r24, r29
 d7c:	df 91       	pop	r29
 d7e:	cf 91       	pop	r28
 d80:	1f 91       	pop	r17
 d82:	08 95       	ret

00000d84 <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
 d84:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
 d86:	85 b1       	in	r24, 0x05	; 5
 d88:	83 60       	ori	r24, 0x03	; 3
 d8a:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
 d8c:	8b b1       	in	r24, 0x0b	; 11
 d8e:	80 6c       	ori	r24, 0xC0	; 192
 d90:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
 d92:	85 b1       	in	r24, 0x05	; 5
 d94:	8d 7f       	andi	r24, 0xFD	; 253
 d96:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 d98:	85 e0       	ldi	r24, 0x05	; 5
 d9a:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 d9e:	88 23       	and	r24, r24
 da0:	11 f0       	breq	.+4      	; 0xda6 <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
 da2:	c0 e0       	ldi	r28, 0x00	; 0
 da4:	01 c0       	rjmp	.+2      	; 0xda8 <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 da6:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
 da8:	84 e0       	ldi	r24, 0x04	; 4
 daa:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 dae:	81 11       	cpse	r24, r1
 db0:	01 c0       	rjmp	.+2      	; 0xdb4 <varredura+0x30>
 db2:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
 db4:	83 e0       	ldi	r24, 0x03	; 3
 db6:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 dba:	81 11       	cpse	r24, r1
 dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <varredura+0x3c>
 dbe:	c3 e3       	ldi	r28, 0x33	; 51
	if (!debounce(COL4 - 0)) tecla = 'A'; 
 dc0:	82 e0       	ldi	r24, 0x02	; 2
 dc2:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 dc6:	81 11       	cpse	r24, r1
 dc8:	01 c0       	rjmp	.+2      	; 0xdcc <varredura+0x48>
 dca:	c1 e4       	ldi	r28, 0x41	; 65
    PORTB |= (1 << LIN1); // Desativa LIN1
 dcc:	85 b1       	in	r24, 0x05	; 5
 dce:	82 60       	ori	r24, 0x02	; 2
 dd0:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
 dd2:	85 b1       	in	r24, 0x05	; 5
 dd4:	8e 7f       	andi	r24, 0xFE	; 254
 dd6:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
 dd8:	85 e0       	ldi	r24, 0x05	; 5
 dda:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 dde:	81 11       	cpse	r24, r1
 de0:	01 c0       	rjmp	.+2      	; 0xde4 <varredura+0x60>
 de2:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
 de4:	84 e0       	ldi	r24, 0x04	; 4
 de6:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 dea:	81 11       	cpse	r24, r1
 dec:	01 c0       	rjmp	.+2      	; 0xdf0 <varredura+0x6c>
 dee:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
 df0:	83 e0       	ldi	r24, 0x03	; 3
 df2:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 df6:	81 11       	cpse	r24, r1
 df8:	01 c0       	rjmp	.+2      	; 0xdfc <varredura+0x78>
 dfa:	c6 e3       	ldi	r28, 0x36	; 54
	if (!debounce(COL4 - 0)) tecla = 'B'; 
 dfc:	82 e0       	ldi	r24, 0x02	; 2
 dfe:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 e02:	81 11       	cpse	r24, r1
 e04:	01 c0       	rjmp	.+2      	; 0xe08 <varredura+0x84>
 e06:	c2 e4       	ldi	r28, 0x42	; 66
    PORTB |= (1 << LIN2); // Desativa LIN2
 e08:	85 b1       	in	r24, 0x05	; 5
 e0a:	81 60       	ori	r24, 0x01	; 1
 e0c:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
 e0e:	8b b1       	in	r24, 0x0b	; 11
 e10:	8f 77       	andi	r24, 0x7F	; 127
 e12:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
 e14:	85 e0       	ldi	r24, 0x05	; 5
 e16:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 e1a:	81 11       	cpse	r24, r1
 e1c:	01 c0       	rjmp	.+2      	; 0xe20 <varredura+0x9c>
 e1e:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
 e20:	84 e0       	ldi	r24, 0x04	; 4
 e22:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 e26:	81 11       	cpse	r24, r1
 e28:	01 c0       	rjmp	.+2      	; 0xe2c <varredura+0xa8>
 e2a:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
 e2c:	83 e0       	ldi	r24, 0x03	; 3
 e2e:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 e32:	81 11       	cpse	r24, r1
 e34:	01 c0       	rjmp	.+2      	; 0xe38 <varredura+0xb4>
 e36:	c9 e3       	ldi	r28, 0x39	; 57
	if (!debounce(COL4 - 0)) tecla = 'C'; 
 e38:	82 e0       	ldi	r24, 0x02	; 2
 e3a:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 e3e:	81 11       	cpse	r24, r1
 e40:	01 c0       	rjmp	.+2      	; 0xe44 <varredura+0xc0>
 e42:	c3 e4       	ldi	r28, 0x43	; 67
    PORTD |= (1 << LIN3); // Desativa LIN3
 e44:	8b b1       	in	r24, 0x0b	; 11
 e46:	80 68       	ori	r24, 0x80	; 128
 e48:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
 e4a:	8b b1       	in	r24, 0x0b	; 11
 e4c:	8f 7b       	andi	r24, 0xBF	; 191
 e4e:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
 e50:	85 e0       	ldi	r24, 0x05	; 5
 e52:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 e56:	81 11       	cpse	r24, r1
 e58:	01 c0       	rjmp	.+2      	; 0xe5c <varredura+0xd8>
 e5a:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
 e5c:	84 e0       	ldi	r24, 0x04	; 4
 e5e:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 e62:	81 11       	cpse	r24, r1
 e64:	01 c0       	rjmp	.+2      	; 0xe68 <varredura+0xe4>
 e66:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
 e68:	83 e0       	ldi	r24, 0x03	; 3
 e6a:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 e6e:	81 11       	cpse	r24, r1
 e70:	01 c0       	rjmp	.+2      	; 0xe74 <varredura+0xf0>
 e72:	c3 e2       	ldi	r28, 0x23	; 35
	if (!debounce(COL4 - 0)) tecla = 'D'; 
 e74:	82 e0       	ldi	r24, 0x02	; 2
 e76:	0e 94 a2 06 	call	0xd44	; 0xd44 <debounce>
 e7a:	81 11       	cpse	r24, r1
 e7c:	01 c0       	rjmp	.+2      	; 0xe80 <varredura+0xfc>
 e7e:	c4 e4       	ldi	r28, 0x44	; 68
    PORTD |= (1 << LIN4); // Desativa LIN4
 e80:	8b b1       	in	r24, 0x0b	; 11
 e82:	80 64       	ori	r24, 0x40	; 64
 e84:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
 e86:	8c 2f       	mov	r24, r28
 e88:	cf 91       	pop	r28
 e8a:	08 95       	ret

00000e8c <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
 e8c:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
 e8e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
 e90:	85 e0       	ldi	r24, 0x05	; 5
 e92:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 e94:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
 e98:	81 ef       	ldi	r24, 0xF1	; 241
 e9a:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
 e9c:	20 e0       	ldi	r18, 0x00	; 0
 e9e:	30 e0       	ldi	r19, 0x00	; 0
 ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 ea2:	a9 9b       	sbis	0x15, 1	; 21
 ea4:	fe cf       	rjmp	.-4      	; 0xea2 <delay1ms+0x16>
		TCNT0 = 241;
 ea6:	91 ef       	ldi	r25, 0xF1	; 241
 ea8:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
 eaa:	92 e0       	ldi	r25, 0x02	; 2
 eac:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
 eae:	2f 5f       	subi	r18, 0xFF	; 255
 eb0:	3f 4f       	sbci	r19, 0xFF	; 255
 eb2:	24 17       	cp	r18, r20
 eb4:	35 07       	cpc	r19, r21
 eb6:	ac f3       	brlt	.-22     	; 0xea2 <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 eb8:	15 bc       	out	0x25, r1	; 37
 eba:	08 95       	ret

00000ebc <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
 ebc:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
 ebe:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
 ec0:	81 e0       	ldi	r24, 0x01	; 1
 ec2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 ec4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
 ec8:	85 ef       	ldi	r24, 0xF5	; 245
 eca:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
 ecc:	20 e0       	ldi	r18, 0x00	; 0
 ece:	30 e0       	ldi	r19, 0x00	; 0
 ed0:	09 c0       	rjmp	.+18     	; 0xee4 <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 ed2:	a9 9b       	sbis	0x15, 1	; 21
 ed4:	fe cf       	rjmp	.-4      	; 0xed2 <delay1us+0x16>
		TCNT0 = 245;
 ed6:	95 ef       	ldi	r25, 0xF5	; 245
 ed8:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
 eda:	95 b3       	in	r25, 0x15	; 21
 edc:	92 60       	ori	r25, 0x02	; 2
 ede:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
 ee0:	2f 5f       	subi	r18, 0xFF	; 255
 ee2:	3f 4f       	sbci	r19, 0xFF	; 255
 ee4:	24 17       	cp	r18, r20
 ee6:	35 07       	cpc	r19, r21
 ee8:	a4 f3       	brlt	.-24     	; 0xed2 <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 eea:	15 bc       	out	0x25, r1	; 37
 eec:	08 95       	ret

00000eee <strcmp>:
 eee:	fb 01       	movw	r30, r22
 ef0:	dc 01       	movw	r26, r24
 ef2:	8d 91       	ld	r24, X+
 ef4:	01 90       	ld	r0, Z+
 ef6:	80 19       	sub	r24, r0
 ef8:	01 10       	cpse	r0, r1
 efa:	d9 f3       	breq	.-10     	; 0xef2 <strcmp+0x4>
 efc:	99 0b       	sbc	r25, r25
 efe:	08 95       	ret

00000f00 <strcpy>:
 f00:	fb 01       	movw	r30, r22
 f02:	dc 01       	movw	r26, r24
 f04:	01 90       	ld	r0, Z+
 f06:	0d 92       	st	X+, r0
 f08:	00 20       	and	r0, r0
 f0a:	e1 f7       	brne	.-8      	; 0xf04 <strcpy+0x4>
 f0c:	08 95       	ret

00000f0e <strncpy>:
 f0e:	fb 01       	movw	r30, r22
 f10:	dc 01       	movw	r26, r24
 f12:	41 50       	subi	r20, 0x01	; 1
 f14:	50 40       	sbci	r21, 0x00	; 0
 f16:	48 f0       	brcs	.+18     	; 0xf2a <strncpy+0x1c>
 f18:	01 90       	ld	r0, Z+
 f1a:	0d 92       	st	X+, r0
 f1c:	00 20       	and	r0, r0
 f1e:	c9 f7       	brne	.-14     	; 0xf12 <strncpy+0x4>
 f20:	01 c0       	rjmp	.+2      	; 0xf24 <strncpy+0x16>
 f22:	1d 92       	st	X+, r1
 f24:	41 50       	subi	r20, 0x01	; 1
 f26:	50 40       	sbci	r21, 0x00	; 0
 f28:	e0 f7       	brcc	.-8      	; 0xf22 <strncpy+0x14>
 f2a:	08 95       	ret

00000f2c <strstr>:
 f2c:	fb 01       	movw	r30, r22
 f2e:	51 91       	ld	r21, Z+
 f30:	55 23       	and	r21, r21
 f32:	a9 f0       	breq	.+42     	; 0xf5e <strstr+0x32>
 f34:	bf 01       	movw	r22, r30
 f36:	dc 01       	movw	r26, r24
 f38:	4d 91       	ld	r20, X+
 f3a:	45 17       	cp	r20, r21
 f3c:	41 11       	cpse	r20, r1
 f3e:	e1 f7       	brne	.-8      	; 0xf38 <strstr+0xc>
 f40:	59 f4       	brne	.+22     	; 0xf58 <strstr+0x2c>
 f42:	cd 01       	movw	r24, r26
 f44:	01 90       	ld	r0, Z+
 f46:	00 20       	and	r0, r0
 f48:	49 f0       	breq	.+18     	; 0xf5c <strstr+0x30>
 f4a:	4d 91       	ld	r20, X+
 f4c:	40 15       	cp	r20, r0
 f4e:	41 11       	cpse	r20, r1
 f50:	c9 f3       	breq	.-14     	; 0xf44 <strstr+0x18>
 f52:	fb 01       	movw	r30, r22
 f54:	41 11       	cpse	r20, r1
 f56:	ef cf       	rjmp	.-34     	; 0xf36 <strstr+0xa>
 f58:	81 e0       	ldi	r24, 0x01	; 1
 f5a:	90 e0       	ldi	r25, 0x00	; 0
 f5c:	01 97       	sbiw	r24, 0x01	; 1
 f5e:	08 95       	ret

00000f60 <_exit>:
 f60:	f8 94       	cli

00000f62 <__stop_program>:
 f62:	ff cf       	rjmp	.-2      	; 0xf62 <__stop_program>
