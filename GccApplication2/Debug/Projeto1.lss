
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001dc  00800100  00001592  00001626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  008002dc  008002dc  00001802  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000325e  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd2  00000000  00000000  00004cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000189f  00000000  00000000  00005cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  0000754c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a10  00000000  00000000  00007b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017f9  00000000  00000000  0000853c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00009d35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_11>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__vector_18>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	1e 03       	fmul	r17, r22
      6a:	32 03       	mulsu	r19, r18
      6c:	3d 03       	fmul	r19, r21
      6e:	48 03       	fmul	r20, r16
      70:	7b 03       	fmul	r23, r19
      72:	3f 04       	cpc	r3, r15
      74:	45 04       	cpc	r4, r5
      76:	5b 04       	cpc	r5, r11

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	12 e0       	ldi	r17, 0x02	; 2
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e2 e9       	ldi	r30, 0x92	; 146
      8c:	f5 e1       	ldi	r31, 0x15	; 21
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	ac 3d       	cpi	r26, 0xDC	; 220
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	23 e0       	ldi	r18, 0x03	; 3
      9c:	ac ed       	ldi	r26, 0xDC	; 220
      9e:	b2 e0       	ldi	r27, 0x02	; 2
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a4 37       	cpi	r26, 0x74	; 116
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
      ae:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <mensagem_Inicial>:
*/
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){
		LCD_limpar();
      b6:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0,0,"DIGITE QUALQUER");
      ba:	48 e0       	ldi	r20, 0x08	; 8
      bc:	51 e0       	ldi	r21, 0x01	; 1
      be:	60 e0       	ldi	r22, 0x00	; 0
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 5, "TECLA");
      c6:	48 e1       	ldi	r20, 0x18	; 24
      c8:	51 e0       	ldi	r21, 0x01	; 1
      ca:	65 e0       	ldi	r22, 0x05	; 5
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
      d2:	08 95       	ret

000000d4 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      d4:	cf 93       	push	r28
      d6:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      d8:	88 b1       	in	r24, 0x08	; 8
      da:	80 7f       	andi	r24, 0xF0	; 240
      dc:	9c 2f       	mov	r25, r28
      de:	92 95       	swap	r25
      e0:	9f 70       	andi	r25, 0x0F	; 15
      e2:	89 2b       	or	r24, r25
      e4:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
      e6:	88 b1       	in	r24, 0x08	; 8
      e8:	8f 7d       	andi	r24, 0xDF	; 223
      ea:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
      ec:	88 b1       	in	r24, 0x08	; 8
      ee:	80 61       	ori	r24, 0x10	; 16
      f0:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
      f2:	88 b1       	in	r24, 0x08	; 8
      f4:	8f 7e       	andi	r24, 0xEF	; 239
      f6:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
      f8:	84 e6       	ldi	r24, 0x64	; 100
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 42 0a 	call	0x1484	; 0x1484 <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
     100:	88 b1       	in	r24, 0x08	; 8
     102:	80 7f       	andi	r24, 0xF0	; 240
     104:	cf 70       	andi	r28, 0x0F	; 15
     106:	c8 2b       	or	r28, r24
     108:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     10a:	88 b1       	in	r24, 0x08	; 8
     10c:	80 61       	ori	r24, 0x10	; 16
     10e:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     110:	88 b1       	in	r24, 0x08	; 8
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
}
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     126:	8a e0       	ldi	r24, 0x0A	; 10
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     134:	88 e2       	ldi	r24, 0x28	; 40
     136:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     13a:	8c e0       	ldi	r24, 0x0C	; 12
     13c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     140:	86 e0       	ldi	r24, 0x06	; 6
     142:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     14c:	08 95       	ret

0000014e <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     154:	80 e8       	ldi	r24, 0x80	; 128
     156:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     15a:	08 95       	ret

0000015c <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	ec 01       	movw	r28, r24
	while(*texto) {
     162:	23 c0       	rjmp	.+70     	; 0x1aa <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     164:	98 b1       	in	r25, 0x08	; 8
     166:	90 7f       	andi	r25, 0xF0	; 240
     168:	82 95       	swap	r24
     16a:	8f 70       	andi	r24, 0x0F	; 15
     16c:	89 2b       	or	r24, r25
     16e:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     170:	88 b1       	in	r24, 0x08	; 8
     172:	80 62       	ori	r24, 0x20	; 32
     174:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     176:	88 b1       	in	r24, 0x08	; 8
     178:	80 61       	ori	r24, 0x10	; 16
     17a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     17c:	88 b1       	in	r24, 0x08	; 8
     17e:	8f 7e       	andi	r24, 0xEF	; 239
     180:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     182:	88 ec       	ldi	r24, 0xC8	; 200
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 42 0a 	call	0x1484	; 0x1484 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     18a:	98 b1       	in	r25, 0x08	; 8
     18c:	89 91       	ld	r24, Y+
     18e:	90 7f       	andi	r25, 0xF0	; 240
     190:	8f 70       	andi	r24, 0x0F	; 15
     192:	89 2b       	or	r24, r25
     194:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     196:	88 b1       	in	r24, 0x08	; 8
     198:	80 61       	ori	r24, 0x10	; 16
     19a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	8f 7e       	andi	r24, 0xEF	; 239
     1a0:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1aa:	88 81       	ld	r24, Y
     1ac:	81 11       	cpse	r24, r1
     1ae:	da cf       	rjmp	.-76     	; 0x164 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1bc:	81 11       	cpse	r24, r1
     1be:	08 c0       	rjmp	.+16     	; 0x1d0 <LCD_Escrever_Linha+0x1a>
     1c0:	60 31       	cpi	r22, 0x10	; 16
     1c2:	30 f4       	brcc	.+12     	; 0x1d0 <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1c4:	86 2f       	mov	r24, r22
     1c6:	8f 70       	andi	r24, 0x0F	; 15
     1c8:	80 68       	ori	r24, 0x80	; 128
     1ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	39 f4       	brne	.+14     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
     1d4:	60 31       	cpi	r22, 0x10	; 16
     1d6:	28 f4       	brcc	.+10     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1d8:	86 2f       	mov	r24, r22
     1da:	8f 70       	andi	r24, 0x0F	; 15
     1dc:	80 6c       	ori	r24, 0xC0	; 192
     1de:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     1e2:	ce 01       	movw	r24, r28
     1e4:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     1e8:	80 e8       	ldi	r24, 0x80	; 128
     1ea:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <ler_codigo_aluno>:
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	00 d0       	rcall	.+0      	; 0x202 <ler_codigo_aluno+0xe>
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	7c 01       	movw	r14, r24
     208:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     20c:	4e e1       	ldi	r20, 0x1E	; 30
     20e:	51 e0       	ldi	r21, 0x01	; 1
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     218:	4d e2       	ldi	r20, 0x2D	; 45
     21a:	51 e0       	ldi	r21, 0x01	; 1
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	10 e0       	ldi	r17, 0x00	; 0
     228:	1d c0       	rjmp	.+58     	; 0x264 <ler_codigo_aluno+0x70>
     22a:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     22e:	89 2b       	or	r24, r25
     230:	f1 f4       	brne	.+60     	; 0x26e <ler_codigo_aluno+0x7a>
     232:	0e 94 86 09 	call	0x130c	; 0x130c <varredura>
     236:	90 ed       	ldi	r25, 0xD0	; 208
     238:	98 0f       	add	r25, r24
     23a:	9a 30       	cpi	r25, 0x0A	; 10
     23c:	98 f4       	brcc	.+38     	; 0x264 <ler_codigo_aluno+0x70>
     23e:	f7 01       	movw	r30, r14
     240:	e0 0f       	add	r30, r16
     242:	f1 1f       	adc	r31, r17
     244:	80 83       	st	Z, r24
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	1a 82       	std	Y+2, r1	; 0x02
     24a:	ae 01       	movw	r20, r28
     24c:	4f 5f       	subi	r20, 0xFF	; 255
     24e:	5f 4f       	sbci	r21, 0xFF	; 255
     250:	60 2f       	mov	r22, r16
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     258:	0f 5f       	subi	r16, 0xFF	; 255
     25a:	1f 4f       	sbci	r17, 0xFF	; 255
     25c:	88 ec       	ldi	r24, 0xC8	; 200
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     264:	06 30       	cpi	r16, 0x06	; 6
     266:	11 05       	cpc	r17, r1
     268:	04 f3       	brlt	.-64     	; 0x22a <ler_codigo_aluno+0x36>
     26a:	f7 01       	movw	r30, r14
     26c:	16 82       	std	Z+6, r1	; 0x06
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	08 95       	ret

00000280 <ler_senha>:
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <ler_senha+0xe>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	7c 01       	movw	r14, r24
     294:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     298:	44 e3       	ldi	r20, 0x34	; 52
     29a:	51 e0       	ldi	r21, 0x01	; 1
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     2a4:	4d e2       	ldi	r20, 0x2D	; 45
     2a6:	51 e0       	ldi	r21, 0x01	; 1
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	10 e0       	ldi	r17, 0x00	; 0
     2b4:	1e c0       	rjmp	.+60     	; 0x2f2 <ler_senha+0x72>
     2b6:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     2ba:	89 2b       	or	r24, r25
     2bc:	f9 f4       	brne	.+62     	; 0x2fc <ler_senha+0x7c>
     2be:	0e 94 86 09 	call	0x130c	; 0x130c <varredura>
     2c2:	90 ed       	ldi	r25, 0xD0	; 208
     2c4:	98 0f       	add	r25, r24
     2c6:	9a 30       	cpi	r25, 0x0A	; 10
     2c8:	a0 f4       	brcc	.+40     	; 0x2f2 <ler_senha+0x72>
     2ca:	f7 01       	movw	r30, r14
     2cc:	e0 0f       	add	r30, r16
     2ce:	f1 1f       	adc	r31, r17
     2d0:	80 83       	st	Z, r24
     2d2:	8a e2       	ldi	r24, 0x2A	; 42
     2d4:	89 83       	std	Y+1, r24	; 0x01
     2d6:	1a 82       	std	Y+2, r1	; 0x02
     2d8:	ae 01       	movw	r20, r28
     2da:	4f 5f       	subi	r20, 0xFF	; 255
     2dc:	5f 4f       	sbci	r21, 0xFF	; 255
     2de:	60 2f       	mov	r22, r16
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     2e6:	0f 5f       	subi	r16, 0xFF	; 255
     2e8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ea:	88 ec       	ldi	r24, 0xC8	; 200
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     2f2:	06 30       	cpi	r16, 0x06	; 6
     2f4:	11 05       	cpc	r17, r1
     2f6:	fc f2       	brlt	.-66     	; 0x2b6 <ler_senha+0x36>
     2f8:	f7 01       	movw	r30, r14
     2fa:	16 82       	std	Z+6, r1	; 0x06
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	08 95       	ret

0000030e <validar_codigo_aluno>:
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	ae 97       	sbiw	r28, 0x2e	; 46
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	dc 01       	movw	r26, r24
     324:	0d 90       	ld	r0, X+
     326:	00 20       	and	r0, r0
     328:	e9 f7       	brne	.-6      	; 0x324 <validar_codigo_aluno+0x16>
     32a:	11 97       	sbiw	r26, 0x01	; 1
     32c:	a8 1b       	sub	r26, r24
     32e:	b9 0b       	sbc	r27, r25
     330:	16 97       	sbiw	r26, 0x06	; 6
     332:	09 f0       	breq	.+2      	; 0x336 <validar_codigo_aluno+0x28>
     334:	50 c0       	rjmp	.+160    	; 0x3d6 <validar_codigo_aluno+0xc8>
     336:	db 01       	movw	r26, r22
     338:	0d 90       	ld	r0, X+
     33a:	00 20       	and	r0, r0
     33c:	e9 f7       	brne	.-6      	; 0x338 <validar_codigo_aluno+0x2a>
     33e:	11 97       	sbiw	r26, 0x01	; 1
     340:	a6 1b       	sub	r26, r22
     342:	b7 0b       	sbc	r27, r23
     344:	16 97       	sbiw	r26, 0x06	; 6
     346:	09 f0       	breq	.+2      	; 0x34a <validar_codigo_aluno+0x3c>
     348:	49 c0       	rjmp	.+146    	; 0x3dc <validar_codigo_aluno+0xce>
     34a:	fc 01       	movw	r30, r24
     34c:	83 e4       	ldi	r24, 0x43	; 67
     34e:	89 83       	std	Y+1, r24	; 0x01
     350:	85 e4       	ldi	r24, 0x45	; 69
     352:	8a 83       	std	Y+2, r24	; 0x02
     354:	86 e0       	ldi	r24, 0x06	; 6
     356:	de 01       	movw	r26, r28
     358:	13 96       	adiw	r26, 0x03	; 3
     35a:	01 90       	ld	r0, Z+
     35c:	0d 92       	st	X+, r0
     35e:	8a 95       	dec	r24
     360:	e1 f7       	brne	.-8      	; 0x35a <validar_codigo_aluno+0x4c>
     362:	86 e0       	ldi	r24, 0x06	; 6
     364:	fb 01       	movw	r30, r22
     366:	de 01       	movw	r26, r28
     368:	19 96       	adiw	r26, 0x09	; 9
     36a:	01 90       	ld	r0, Z+
     36c:	0d 92       	st	X+, r0
     36e:	8a 95       	dec	r24
     370:	e1 f7       	brne	.-8      	; 0x36a <validar_codigo_aluno+0x5c>
     372:	be 01       	movw	r22, r28
     374:	6f 5f       	subi	r22, 0xFF	; 255
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	8e e0       	ldi	r24, 0x0E	; 14
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 66 07 	call	0xecc	; 0xecc <SerialEnviaChars>
     380:	be 01       	movw	r22, r28
     382:	61 5f       	subi	r22, 0xF1	; 241
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	80 e2       	ldi	r24, 0x20	; 32
     388:	fb 01       	movw	r30, r22
     38a:	11 92       	st	Z+, r1
     38c:	8a 95       	dec	r24
     38e:	e9 f7       	brne	.-6      	; 0x38a <validar_codigo_aluno+0x7c>
     390:	8f e1       	ldi	r24, 0x1F	; 31
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 fe 08 	call	0x11fc	; 0x11fc <SerialRecebeChars>
     398:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     39c:	42 e4       	ldi	r20, 0x42	; 66
     39e:	51 e0       	ldi	r21, 0x01	; 1
     3a0:	64 e0       	ldi	r22, 0x04	; 4
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     3a8:	80 ed       	ldi	r24, 0xD0	; 208
     3aa:	97 e0       	ldi	r25, 0x07	; 7
     3ac:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     3b0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     3b4:	8f 85       	ldd	r24, Y+15	; 0x0f
     3b6:	83 35       	cpi	r24, 0x53	; 83
     3b8:	a1 f4       	brne	.+40     	; 0x3e2 <validar_codigo_aluno+0xd4>
     3ba:	88 89       	ldd	r24, Y+16	; 0x10
     3bc:	85 34       	cpi	r24, 0x45	; 69
     3be:	a1 f4       	brne	.+40     	; 0x3e8 <validar_codigo_aluno+0xda>
     3c0:	6d e4       	ldi	r22, 0x4D	; 77
     3c2:	71 e0       	ldi	r23, 0x01	; 1
     3c4:	ce 01       	movw	r24, r28
     3c6:	0f 96       	adiw	r24, 0x0f	; 15
     3c8:	0e 94 ad 0a 	call	0x155a	; 0x155a <strstr>
     3cc:	89 2b       	or	r24, r25
     3ce:	79 f0       	breq	.+30     	; 0x3ee <validar_codigo_aluno+0xe0>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e c0       	rjmp	.+28     	; 0x3f2 <validar_codigo_aluno+0xe4>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0b c0       	rjmp	.+22     	; 0x3f2 <validar_codigo_aluno+0xe4>
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <validar_codigo_aluno+0xe4>
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <validar_codigo_aluno+0xe4>
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <validar_codigo_aluno+0xe4>
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	ae 96       	adiw	r28, 0x2e	; 46
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <configurar_timer>:
void resetar_timeout();

// Configuração do Timer para interrupção periódica
void configurar_timer() {
	// Configurar o pino do LED como saída
	DDRB |= (1 << LED_PIN);
     404:	84 b1       	in	r24, 0x04	; 4
     406:	80 61       	ori	r24, 0x10	; 16
     408:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << LED_PIN); // Inicia com LED desligado
     40a:	85 b1       	in	r24, 0x05	; 5
     40c:	8f 7e       	andi	r24, 0xEF	; 239
     40e:	85 b9       	out	0x05, r24	; 5
	
	// Configurar o Timer1 para gerar interrupção a cada 1ms
	TCCR1A = 0; // Modo normal
     410:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // CTC mode, prescaler 64
     414:	8b e0       	ldi	r24, 0x0B	; 11
     416:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz/64/250 = 1ms)
     41a:	8a ef       	ldi	r24, 0xFA	; 250
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     422:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A); // Habilitar interrupção por comparação
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     42c:	08 95       	ret

0000042e <enviar_confirmacao_operacional>:
		PORTB &= ~(1 << LED_PIN); // Desliga LED
	}
}

// Função para enviar a mensagem de confirmação operacional
void enviar_confirmacao_operacional() {
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <enviar_confirmacao_operacional+0x6>
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
	char confirmacao[2];
	confirmacao[0]='C';
     438:	83 e4       	ldi	r24, 0x43	; 67
     43a:	89 83       	std	Y+1, r24	; 0x01
	confirmacao[1]='O';
     43c:	8f e4       	ldi	r24, 0x4F	; 79
     43e:	8a 83       	std	Y+2, r24	; 0x02
	SerialEnviaChars(2, confirmacao);
     440:	be 01       	movw	r22, r28
     442:	6f 5f       	subi	r22, 0xFF	; 255
     444:	7f 4f       	sbci	r23, 0xFF	; 255
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 66 07 	call	0xecc	; 0xecc <SerialEnviaChars>
}
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <__vector_11>:
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // CTC mode, prescaler 64
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz/64/250 = 1ms)
	TIMSK1 = (1 << OCIE1A); // Habilitar interrupção por comparação
}

ISR(TIMER1_COMPA_vect) {
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	2f 93       	push	r18
     464:	3f 93       	push	r19
     466:	4f 93       	push	r20
     468:	5f 93       	push	r21
     46a:	6f 93       	push	r22
     46c:	7f 93       	push	r23
     46e:	8f 93       	push	r24
     470:	9f 93       	push	r25
     472:	af 93       	push	r26
     474:	bf 93       	push	r27
     476:	ef 93       	push	r30
     478:	ff 93       	push	r31
	timer_count++;
     47a:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <timer_count>
     47e:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <timer_count+0x1>
     482:	a0 91 e0 02 	lds	r26, 0x02E0	; 0x8002e0 <timer_count+0x2>
     486:	b0 91 e1 02 	lds	r27, 0x02E1	; 0x8002e1 <timer_count+0x3>
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	a1 1d       	adc	r26, r1
     48e:	b1 1d       	adc	r27, r1
     490:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <timer_count>
     494:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <timer_count+0x1>
     498:	a0 93 e0 02 	sts	0x02E0, r26	; 0x8002e0 <timer_count+0x2>
     49c:	b0 93 e1 02 	sts	0x02E1, r27	; 0x8002e1 <timer_count+0x3>
	
	// Verifica se está no período de alerta (últimos 12 segundos)
	if (timer_count >= TIMEOUT_ALERTA && timer_count < TIMEOUT_TOTAL) {
     4a0:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <timer_count>
     4a4:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <timer_count+0x1>
     4a8:	a0 91 e0 02 	lds	r26, 0x02E0	; 0x8002e0 <timer_count+0x2>
     4ac:	b0 91 e1 02 	lds	r27, 0x02E1	; 0x8002e1 <timer_count+0x3>
     4b0:	80 35       	cpi	r24, 0x50	; 80
     4b2:	96 44       	sbci	r25, 0x46	; 70
     4b4:	a1 05       	cpc	r26, r1
     4b6:	b1 05       	cpc	r27, r1
     4b8:	a0 f1       	brcs	.+104    	; 0x522 <__vector_11+0xca>
     4ba:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <timer_count>
     4be:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <timer_count+0x1>
     4c2:	a0 91 e0 02 	lds	r26, 0x02E0	; 0x8002e0 <timer_count+0x2>
     4c6:	b0 91 e1 02 	lds	r27, 0x02E1	; 0x8002e1 <timer_count+0x3>
     4ca:	80 33       	cpi	r24, 0x30	; 48
     4cc:	95 47       	sbci	r25, 0x75	; 117
     4ce:	a1 05       	cpc	r26, r1
     4d0:	b1 05       	cpc	r27, r1
     4d2:	38 f5       	brcc	.+78     	; 0x522 <__vector_11+0xca>
		alerta_led = 1;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <alerta_led>
		
		// Piscar o LED a cada 250ms (2 vezes por segundo)
		if (timer_count % INTERVALO_PISCA == 0) {
     4da:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <timer_count>
     4de:	70 91 df 02 	lds	r23, 0x02DF	; 0x8002df <timer_count+0x1>
     4e2:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <timer_count+0x2>
     4e6:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <timer_count+0x3>
     4ea:	2a ef       	ldi	r18, 0xFA	; 250
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodsi4>
     4f6:	67 2b       	or	r22, r23
     4f8:	68 2b       	or	r22, r24
     4fa:	69 2b       	or	r22, r25
     4fc:	91 f4       	brne	.+36     	; 0x522 <__vector_11+0xca>
			led_state = !led_state;
     4fe:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <__data_end>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	91 11       	cpse	r25, r1
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <__data_end>
			if (led_state) {
     50c:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
     510:	88 23       	and	r24, r24
     512:	21 f0       	breq	.+8      	; 0x51c <__vector_11+0xc4>
				PORTB |= (1 << LED_PIN);  // Liga LED
     514:	85 b1       	in	r24, 0x05	; 5
     516:	80 61       	ori	r24, 0x10	; 16
     518:	85 b9       	out	0x05, r24	; 5
     51a:	03 c0       	rjmp	.+6      	; 0x522 <__vector_11+0xca>
				} else {
				PORTB &= ~(1 << LED_PIN); // Desliga LED
     51c:	85 b1       	in	r24, 0x05	; 5
     51e:	8f 7e       	andi	r24, 0xEF	; 239
     520:	85 b9       	out	0x05, r24	; 5
			}
		}
	}
	
	// Timeout completo (30 segundos)
	if (timer_count >= TIMEOUT_TOTAL) {
     522:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <timer_count>
     526:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <timer_count+0x1>
     52a:	a0 91 e0 02 	lds	r26, 0x02E0	; 0x8002e0 <timer_count+0x2>
     52e:	b0 91 e1 02 	lds	r27, 0x02E1	; 0x8002e1 <timer_count+0x3>
     532:	80 33       	cpi	r24, 0x30	; 48
     534:	95 47       	sbci	r25, 0x75	; 117
     536:	a1 05       	cpc	r26, r1
     538:	b1 05       	cpc	r27, r1
     53a:	88 f0       	brcs	.+34     	; 0x55e <__vector_11+0x106>
		enviar_confirmacao_operacional();
     53c:	0e 94 17 02 	call	0x42e	; 0x42e <enviar_confirmacao_operacional>
		finalizar_sessao();
     540:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <finalizar_sessao>
		timer_count = 0;
     544:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <timer_count>
     548:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <timer_count+0x1>
     54c:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <timer_count+0x2>
     550:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <timer_count+0x3>
		alerta_led = 0;
     554:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <alerta_led>
		PORTB &= ~(1 << LED_PIN); // Desliga LED
     558:	85 b1       	in	r24, 0x05	; 5
     55a:	8f 7e       	andi	r24, 0xEF	; 239
     55c:	85 b9       	out	0x05, r24	; 5
	}
}
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <resetar_timeout>:
	SerialEnviaChars(2, confirmacao);
}

// Função para resetar o contador de timeout
void resetar_timeout() {
	timer_count = 0;
     580:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <timer_count>
     584:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <timer_count+0x1>
     588:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <timer_count+0x2>
     58c:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <timer_count+0x3>
	alerta_led = 0;
     590:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <alerta_led>
	PORTB &= ~(1 << LED_PIN); // Desliga LED
     594:	85 b1       	in	r24, 0x05	; 5
     596:	8f 7e       	andi	r24, 0xEF	; 239
     598:	85 b9       	out	0x05, r24	; 5
     59a:	08 95       	ret

0000059c <aguardar_desbloqueio>:
}

void aguardar_desbloqueio() {
	LCD_limpar();
     59c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
     5a0:	4c e5       	ldi	r20, 0x5C	; 92
     5a2:	51 e0       	ldi	r21, 0x01	; 1
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
     5ac:	49 e6       	ldi	r20, 0x69	; 105
     5ae:	51 e0       	ldi	r21, 0x01	; 1
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	while (isBlocked()) {
     5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <aguardar_desbloqueio+0x26>
		delay1ms(200);
     5ba:	88 ec       	ldi	r24, 0xC8	; 200
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>

void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
	while (isBlocked()) {
     5c2:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     5c6:	89 2b       	or	r24, r25
     5c8:	c1 f7       	brne	.-16     	; 0x5ba <aguardar_desbloqueio+0x1e>
		delay1ms(200);
	}
	LCD_limpar();
     5ca:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     5ce:	08 95       	ret

000005d0 <main>:
}

int main(void) {
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	66 97       	sbiw	r28, 0x16	; 22
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     5e4:	0e 94 42 09 	call	0x1284	; 0x1284 <prepara_teclado>
	LCD_iniciar();
     5e8:	0e 94 91 00 	call	0x122	; 0x122 <LCD_iniciar>
	initUART();
     5ec:	0e 94 57 07 	call	0xeae	; 0xeae <initUART>
	configurar_timer();
     5f0:	0e 94 02 02 	call	0x404	; 0x404 <configurar_timer>
	sei(); // Habilitar interrupções globais
     5f4:	78 94       	sei

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
     5f6:	88 e0       	ldi	r24, 0x08	; 8
     5f8:	e0 e0       	ldi	r30, 0x00	; 0
     5fa:	f1 e0       	ldi	r31, 0x01	; 1
     5fc:	de 01       	movw	r26, r28
     5fe:	1f 96       	adiw	r26, 0x0f	; 15
     600:	01 90       	ld	r0, Z+
     602:	0d 92       	st	X+, r0
     604:	8a 95       	dec	r24
     606:	e1 f7       	brne	.-8      	; 0x600 <main+0x30>
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     608:	00 e0       	ldi	r16, 0x00	; 0
		"2-Pagamento",
		"3-Saldo",
		"4-Sair"
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
     60a:	e1 2c       	mov	r14, r1
     60c:	f1 2c       	mov	r15, r1
     60e:	07 c0       	rjmp	.+14     	; 0x61e <main+0x4e>
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     610:	01 e0       	ldi	r16, 0x01	; 1
     612:	05 c0       	rjmp	.+10     	; 0x61e <main+0x4e>
			break;

			case ESTADO_CODIGO:
			resetar_timeout();
			ler_codigo_aluno(codigo_aluno);
			if (!isBlocked()) estado = ESTADO_SENHA;
     614:	02 e0       	ldi	r16, 0x02	; 2
     616:	03 c0       	rjmp	.+6      	; 0x61e <main+0x4e>
			break;

			case ESTADO_SENHA:
			resetar_timeout();
			ler_senha(senha_aluno);
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     618:	03 e0       	ldi	r16, 0x03	; 3
     61a:	01 c0       	rjmp	.+2      	; 0x61e <main+0x4e>
						estado = ESTADO_TELA_INICIAL;
						break; // Sai do loop while para mudar de estado
						} else {
						// Lida com a seleção das opções 1, 2, 3, 4
						switch (tecla) {
							case '1': estado = ESTADO_SAQUE; break;
     61c:	05 e0       	ldi	r16, 0x05	; 5
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		if (isBlocked()) {
     61e:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     622:	89 2b       	or	r24, r25
     624:	21 f0       	breq	.+8      	; 0x62e <main+0x5e>
			aguardar_desbloqueio();
     626:	0e 94 ce 02 	call	0x59c	; 0x59c <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     62a:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     62c:	f8 cf       	rjmp	.-16     	; 0x61e <main+0x4e>
		}

		switch (estado) {
     62e:	80 2f       	mov	r24, r16
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	fc 01       	movw	r30, r24
     634:	ec 5c       	subi	r30, 0xCC	; 204
     636:	ff 4f       	sbci	r31, 0xFF	; 255
     638:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			resetar_timeout();
     63c:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
			LCD_limpar();
     640:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			mensagem_Inicial();
     644:	0e 94 5b 00 	call	0xb6	; 0xb6 <mensagem_Inicial>
			while (varredura() == 0) {
     648:	04 c0       	rjmp	.+8      	; 0x652 <main+0x82>
				if (isBlocked()) break;
     64a:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     64e:	89 2b       	or	r24, r25
     650:	21 f4       	brne	.+8      	; 0x65a <main+0x8a>
		switch (estado) {
			case ESTADO_TELA_INICIAL:
			resetar_timeout();
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     652:	0e 94 86 09 	call	0x130c	; 0x130c <varredura>
     656:	88 23       	and	r24, r24
     658:	c1 f3       	breq	.-16     	; 0x64a <main+0x7a>
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     65a:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     65e:	89 2b       	or	r24, r25
     660:	b9 f2       	breq	.-82     	; 0x610 <main+0x40>
     662:	dd cf       	rjmp	.-70     	; 0x61e <main+0x4e>
			break;

			case ESTADO_CODIGO:
			resetar_timeout();
     664:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
			ler_codigo_aluno(codigo_aluno);
     668:	ce 01       	movw	r24, r28
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ler_codigo_aluno>
			if (!isBlocked()) estado = ESTADO_SENHA;
     670:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     674:	89 2b       	or	r24, r25
     676:	71 f2       	breq	.-100    	; 0x614 <main+0x44>
     678:	d2 cf       	rjmp	.-92     	; 0x61e <main+0x4e>
			break;

			case ESTADO_SENHA:
			resetar_timeout();
     67a:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
			ler_senha(senha_aluno);
     67e:	ce 01       	movw	r24, r28
     680:	08 96       	adiw	r24, 0x08	; 8
     682:	0e 94 40 01 	call	0x280	; 0x280 <ler_senha>
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     686:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     68a:	89 2b       	or	r24, r25
     68c:	29 f2       	breq	.-118    	; 0x618 <main+0x48>
     68e:	c7 cf       	rjmp	.-114    	; 0x61e <main+0x4e>
			break;

			case ESTADO_VALIDACAO:
			resetar_timeout();
     690:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
     694:	be 01       	movw	r22, r28
     696:	68 5f       	subi	r22, 0xF8	; 248
     698:	7f 4f       	sbci	r23, 0xFF	; 255
     69a:	ce 01       	movw	r24, r28
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	0e 94 87 01 	call	0x30e	; 0x30e <validar_codigo_aluno>
     6a2:	89 2b       	or	r24, r25
     6a4:	a1 f0       	breq	.+40     	; 0x6ce <main+0xfe>
				LCD_limpar();
     6a6:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "BEM VINDO(A)!");
     6aa:	46 e7       	ldi	r20, 0x76	; 118
     6ac:	51 e0       	ldi	r21, 0x01	; 1
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "PROCESSANDO...");
     6b6:	44 e8       	ldi	r20, 0x84	; 132
     6b8:	51 e0       	ldi	r21, 0x01	; 1
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     6c2:	80 ed       	ldi	r24, 0xD0	; 208
     6c4:	97 e0       	ldi	r25, 0x07	; 7
     6c6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
				estado = ESTADO_MENU;
     6ca:	04 e0       	ldi	r16, 0x04	; 4
     6cc:	a8 cf       	rjmp	.-176    	; 0x61e <main+0x4e>
				} else {
				LCD_limpar();
     6ce:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "CONTA INVALIDA!");
     6d2:	43 e9       	ldi	r20, 0x93	; 147
     6d4:	51 e0       	ldi	r21, 0x01	; 1
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "TENTE NOVAMENTE");
     6de:	43 ea       	ldi	r20, 0xA3	; 163
     6e0:	51 e0       	ldi	r21, 0x01	; 1
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     6ea:	80 ed       	ldi	r24, 0xD0	; 208
     6ec:	97 e0       	ldi	r25, 0x07	; 7
     6ee:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     6f2:	00 e0       	ldi	r16, 0x00	; 0
     6f4:	94 cf       	rjmp	.-216    	; 0x61e <main+0x4e>
			}
			break;

			case ESTADO_MENU:
			resetar_timeout();
     6f6:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
			// Exibe as opções iniciais do menu
			LCD_limpar();
     6fa:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     6fe:	f7 01       	movw	r30, r14
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	8c 0f       	add	r24, r28
     70a:	9d 1f       	adc	r25, r29
     70c:	e8 0f       	add	r30, r24
     70e:	f9 1f       	adc	r31, r25
     710:	46 85       	ldd	r20, Z+14	; 0x0e
     712:	57 85       	ldd	r21, Z+15	; 0x0f
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes) {
     71c:	c7 01       	movw	r24, r14
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	84 30       	cpi	r24, 0x04	; 4
     722:	91 05       	cpc	r25, r1
     724:	7c f4       	brge	.+30     	; 0x744 <main+0x174>
				LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	e1 e0       	ldi	r30, 0x01	; 1
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	ec 0f       	add	r30, r28
     730:	fd 1f       	adc	r31, r29
     732:	e8 0f       	add	r30, r24
     734:	f9 1f       	adc	r31, r25
     736:	46 85       	ldd	r20, Z+14	; 0x0e
     738:	57 85       	ldd	r21, Z+15	; 0x0f
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     742:	06 c0       	rjmp	.+12     	; 0x750 <main+0x180>
				} else {
				LCD_Escrever_Linha(1, 0, " ");
     744:	43 eb       	ldi	r20, 0xB3	; 179
     746:	51 e0       	ldi	r21, 0x01	; 1
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			}

			while (1) { // Permanece neste loop até uma seleção ou saída válida
				if (isBlocked()) break;
     750:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     754:	89 2b       	or	r24, r25
     756:	09 f0       	breq	.+2      	; 0x75a <main+0x18a>
     758:	62 cf       	rjmp	.-316    	; 0x61e <main+0x4e>

				tecla = varredura();
     75a:	0e 94 86 09 	call	0x130c	; 0x130c <varredura>
     75e:	18 2f       	mov	r17, r24
				if (tecla != 0) {
     760:	88 23       	and	r24, r24
     762:	b1 f3       	breq	.-20     	; 0x750 <main+0x180>
					delay1ms(300); // Debounce delay
     764:	8c e2       	ldi	r24, 0x2C	; 44
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>

					if (tecla == 'B') { // Rolar para baixo
     76c:	12 34       	cpi	r17, 0x42	; 66
     76e:	c1 f5       	brne	.+112    	; 0x7e0 <main+0x210>
						if (indice_menu < total_opcoes - 2) { // Garante que não ultrapasse os limites para a segunda linha
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	e9 16       	cp	r14, r25
     774:	f1 04       	cpc	r15, r1
     776:	64 f7       	brge	.-40     	; 0x750 <main+0x180>
							indice_menu++;
     778:	67 01       	movw	r12, r14
     77a:	8f ef       	ldi	r24, 0xFF	; 255
     77c:	c8 1a       	sub	r12, r24
     77e:	d8 0a       	sbc	r13, r24
							LCD_limpar();
     780:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     784:	f6 01       	movw	r30, r12
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	8c 0f       	add	r24, r28
     790:	9d 1f       	adc	r25, r29
     792:	e8 0f       	add	r30, r24
     794:	f9 1f       	adc	r31, r25
     796:	46 85       	ldd	r20, Z+14	; 0x0e
     798:	57 85       	ldd	r21, Z+15	; 0x0f
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
							if (indice_menu + 1 < total_opcoes) {
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	e9 0e       	add	r14, r25
     7a6:	f1 1c       	adc	r15, r1
     7a8:	84 e0       	ldi	r24, 0x04	; 4
     7aa:	e8 16       	cp	r14, r24
     7ac:	f1 04       	cpc	r15, r1
     7ae:	84 f4       	brge	.+32     	; 0x7d0 <main+0x200>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     7b0:	ee 0c       	add	r14, r14
     7b2:	ff 1c       	adc	r15, r15
     7b4:	e1 e0       	ldi	r30, 0x01	; 1
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	ec 0f       	add	r30, r28
     7ba:	fd 1f       	adc	r31, r29
     7bc:	ee 0d       	add	r30, r14
     7be:	ff 1d       	adc	r31, r15
     7c0:	46 85       	ldd	r20, Z+14	; 0x0e
     7c2:	57 85       	ldd	r21, Z+15	; 0x0f
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				if (tecla != 0) {
					delay1ms(300); // Debounce delay

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) { // Garante que não ultrapasse os limites para a segunda linha
							indice_menu++;
     7cc:	76 01       	movw	r14, r12
     7ce:	c0 cf       	rjmp	.-128    	; 0x750 <main+0x180>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							if (indice_menu + 1 < total_opcoes) {
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
     7d0:	43 eb       	ldi	r20, 0xB3	; 179
     7d2:	51 e0       	ldi	r21, 0x01	; 1
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				if (tecla != 0) {
					delay1ms(300); // Debounce delay

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) { // Garante que não ultrapasse os limites para a segunda linha
							indice_menu++;
     7dc:	76 01       	movw	r14, r12
     7de:	b8 cf       	rjmp	.-144    	; 0x750 <main+0x180>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
     7e0:	11 34       	cpi	r17, 0x41	; 65
     7e2:	49 f5       	brne	.+82     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
						if (indice_menu > 0) {
     7e4:	1e 14       	cp	r1, r14
     7e6:	1f 04       	cpc	r1, r15
     7e8:	0c f0       	brlt	.+2      	; 0x7ec <main+0x21c>
     7ea:	b2 cf       	rjmp	.-156    	; 0x750 <main+0x180>
							indice_menu--;
     7ec:	67 01       	movw	r12, r14
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	c9 1a       	sub	r12, r25
     7f2:	d1 08       	sbc	r13, r1
							LCD_limpar();
     7f4:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     7f8:	f6 01       	movw	r30, r12
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	8c 0f       	add	r24, r28
     804:	9d 1f       	adc	r25, r29
     806:	e8 0f       	add	r30, r24
     808:	f9 1f       	adc	r31, r25
     80a:	46 85       	ldd	r20, Z+14	; 0x0e
     80c:	57 85       	ldd	r21, Z+15	; 0x0f
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     816:	ee 0c       	add	r14, r14
     818:	ff 1c       	adc	r15, r15
     81a:	e1 e0       	ldi	r30, 0x01	; 1
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	ec 0f       	add	r30, r28
     820:	fd 1f       	adc	r31, r29
     822:	ee 0d       	add	r30, r14
     824:	ff 1d       	adc	r31, r15
     826:	46 85       	ldd	r20, Z+14	; 0x0e
     828:	57 85       	ldd	r21, Z+15	; 0x0f
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
						if (indice_menu > 0) {
							indice_menu--;
     832:	76 01       	movw	r14, r12
     834:	8d cf       	rjmp	.-230    	; 0x750 <main+0x180>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
						}
						} else if (tecla == '*') {
     836:	1a 32       	cpi	r17, 0x2A	; 42
     838:	71 f4       	brne	.+28     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
						LCD_limpar();
     83a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "VOLTANDO...");
     83e:	45 eb       	ldi	r20, 0xB5	; 181
     840:	51 e0       	ldi	r21, 0x01	; 1
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
						delay1ms(1000);
     84a:	88 ee       	ldi	r24, 0xE8	; 232
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
						estado = ESTADO_TELA_INICIAL;
     852:	00 e0       	ldi	r16, 0x00	; 0
						break; // Sai do loop while para mudar de estado
     854:	e4 ce       	rjmp	.-568    	; 0x61e <main+0x4e>
						} else {
						// Lida com a seleção das opções 1, 2, 3, 4
						switch (tecla) {
     856:	12 33       	cpi	r17, 0x32	; 50
     858:	51 f0       	breq	.+20     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     85a:	20 f4       	brcc	.+8      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
     85c:	11 33       	cpi	r17, 0x31	; 49
     85e:	09 f4       	brne	.+2      	; 0x862 <__DATA_REGION_LENGTH__+0x62>
     860:	dd ce       	rjmp	.-582    	; 0x61c <main+0x4c>
     862:	dd ce       	rjmp	.-582    	; 0x61e <main+0x4e>
     864:	13 33       	cpi	r17, 0x33	; 51
     866:	29 f0       	breq	.+10     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     868:	14 33       	cpi	r17, 0x34	; 52
     86a:	29 f0       	breq	.+10     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     86c:	d8 ce       	rjmp	.-592    	; 0x61e <main+0x4e>
							case '1': estado = ESTADO_SAQUE; break;
							case '2': estado = ESTADO_PAGAMENTO; break;
     86e:	06 e0       	ldi	r16, 0x06	; 6
     870:	d6 ce       	rjmp	.-596    	; 0x61e <main+0x4e>
							case '3': estado = ESTADO_SALDO; break;
     872:	07 e0       	ldi	r16, 0x07	; 7
     874:	d4 ce       	rjmp	.-600    	; 0x61e <main+0x4e>
							case '4':
							finalizar_sessao();
     876:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <finalizar_sessao>
							estado = ESTADO_TELA_INICIAL;
     87a:	00 e0       	ldi	r16, 0x00	; 0
							break;
     87c:	d0 ce       	rjmp	.-608    	; 0x61e <main+0x4e>
				}
			}
			break; // Sai do switch case para ESTADO_MENU

			case ESTADO_SAQUE:
			resetar_timeout();
     87e:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
			realizar_saque();
     882:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <realizar_saque>
			estado = ESTADO_MENU;
     886:	04 e0       	ldi	r16, 0x04	; 4
			break;
     888:	ca ce       	rjmp	.-620    	; 0x61e <main+0x4e>

			case ESTADO_PAGAMENTO:
			resetar_timeout();
     88a:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
			LCD_limpar();
     88e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Pagamento");
     892:	4e ed       	ldi	r20, 0xDE	; 222
     894:	51 e0       	ldi	r21, 0x01	; 1
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
     89e:	41 ec       	ldi	r20, 0xC1	; 193
     8a0:	51 e0       	ldi	r21, 0x01	; 1
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     8aa:	80 ed       	ldi	r24, 0xD0	; 208
     8ac:	97 e0       	ldi	r25, 0x07	; 7
     8ae:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
			estado = ESTADO_MENU;
     8b2:	04 e0       	ldi	r16, 0x04	; 4
			break;
     8b4:	b4 ce       	rjmp	.-664    	; 0x61e <main+0x4e>

			case ESTADO_SALDO:
			resetar_timeout();
     8b6:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
			consultar_saldo();
     8ba:	0e 94 db 05 	call	0xbb6	; 0xbb6 <consultar_saldo>
			estado = ESTADO_MENU;
     8be:	04 e0       	ldi	r16, 0x04	; 4
			break;
     8c0:	ae ce       	rjmp	.-676    	; 0x61e <main+0x4e>

000008c2 <enviar_mensagem_saque>:
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	bc 01       	movw	r22, r24
     8d8:	ed b6       	in	r14, 0x3d	; 61
     8da:	fe b6       	in	r15, 0x3e	; 62
     8dc:	fc 01       	movw	r30, r24
     8de:	01 90       	ld	r0, Z+
     8e0:	00 20       	and	r0, r0
     8e2:	e9 f7       	brne	.-6      	; 0x8de <enviar_mensagem_saque+0x1c>
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	af 01       	movw	r20, r30
     8e8:	48 1b       	sub	r20, r24
     8ea:	59 0b       	sbc	r21, r25
     8ec:	6a 01       	movw	r12, r20
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	c8 0e       	add	r12, r24
     8f2:	d1 1c       	adc	r13, r1
     8f4:	ed b7       	in	r30, 0x3d	; 61
     8f6:	fe b7       	in	r31, 0x3e	; 62
     8f8:	ec 19       	sub	r30, r12
     8fa:	fd 09       	sbc	r31, r13
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	fe bf       	out	0x3e, r31	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	ed bf       	out	0x3d, r30	; 61
     906:	0d b7       	in	r16, 0x3d	; 61
     908:	1e b7       	in	r17, 0x3e	; 62
     90a:	0f 5f       	subi	r16, 0xFF	; 255
     90c:	1f 4f       	sbci	r17, 0xFF	; 255
     90e:	83 e4       	ldi	r24, 0x43	; 67
     910:	81 83       	std	Z+1, r24	; 0x01
     912:	83 e5       	ldi	r24, 0x53	; 83
     914:	f8 01       	movw	r30, r16
     916:	81 83       	std	Z+1, r24	; 0x01
     918:	42 83       	std	Z+2, r20	; 0x02
     91a:	8d b7       	in	r24, 0x3d	; 61
     91c:	9e b7       	in	r25, 0x3e	; 62
     91e:	04 96       	adiw	r24, 0x04	; 4
     920:	0e 94 9e 0a 	call	0x153c	; 0x153c <strncpy>
     924:	b8 01       	movw	r22, r16
     926:	c6 01       	movw	r24, r12
     928:	0e 94 66 07 	call	0xecc	; 0xecc <SerialEnviaChars>
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	fe be       	out	0x3e, r15	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	ed be       	out	0x3d, r14	; 61
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	08 95       	ret

00000948 <receber_resposta_servidor>:
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	00 d0       	rcall	.+0      	; 0x94e <receber_resposta_servidor+0x6>
     94e:	00 d0       	rcall	.+0      	; 0x950 <receber_resposta_servidor+0x8>
     950:	1f 92       	push	r1
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	be 01       	movw	r22, r28
     958:	6f 5f       	subi	r22, 0xFF	; 255
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 fe 08 	call	0x11fc	; 0x11fc <SerialRecebeChars>
     964:	1c 82       	std	Y+4, r1	; 0x04
     966:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     96a:	ae 01       	movw	r20, r28
     96c:	4f 5f       	subi	r20, 0xFF	; 255
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     978:	80 ed       	ldi	r24, 0xD0	; 208
     97a:	97 e0       	ldi	r25, 0x07	; 7
     97c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	83 35       	cpi	r24, 0x53	; 83
     984:	29 f4       	brne	.+10     	; 0x990 <receber_resposta_servidor+0x48>
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	83 35       	cpi	r24, 0x53	; 83
     98a:	21 f4       	brne	.+8      	; 0x994 <receber_resposta_servidor+0x4c>
     98c:	8b 81       	ldd	r24, Y+3	; 0x03
     98e:	03 c0       	rjmp	.+6      	; 0x996 <receber_resposta_servidor+0x4e>
     990:	85 e4       	ldi	r24, 0x45	; 69
     992:	01 c0       	rjmp	.+2      	; 0x996 <receber_resposta_servidor+0x4e>
     994:	85 e4       	ldi	r24, 0x45	; 69
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <realizar_saque>:
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	29 97       	sbiw	r28, 0x09	; 9
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	fe 01       	movw	r30, r28
     9c0:	31 96       	adiw	r30, 0x01	; 1
     9c2:	87 e0       	ldi	r24, 0x07	; 7
     9c4:	df 01       	movw	r26, r30
     9c6:	1d 92       	st	X+, r1
     9c8:	8a 95       	dec	r24
     9ca:	e9 f7       	brne	.-6      	; 0x9c6 <realizar_saque+0x20>
     9cc:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     9d0:	47 ef       	ldi	r20, 0xF7	; 247
     9d2:	51 e0       	ldi	r21, 0x01	; 1
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     9dc:	47 e0       	ldi	r20, 0x07	; 7
     9de:	52 e0       	ldi	r21, 0x02	; 2
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     9e8:	00 e0       	ldi	r16, 0x00	; 0
     9ea:	10 e0       	ldi	r17, 0x00	; 0
     9ec:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     9f0:	89 2b       	or	r24, r25
     9f2:	99 f0       	breq	.+38     	; 0xa1a <realizar_saque+0x74>
     9f4:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     9f8:	4a e0       	ldi	r20, 0x0A	; 10
     9fa:	52 e0       	ldi	r21, 0x02	; 2
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     a04:	47 e1       	ldi	r20, 0x17	; 23
     a06:	52 e0       	ldi	r21, 0x02	; 2
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     a10:	88 ec       	ldi	r24, 0xC8	; 200
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     a18:	c3 c0       	rjmp	.+390    	; 0xba0 <realizar_saque+0x1fa>
     a1a:	0e 94 86 09 	call	0x130c	; 0x130c <varredura>
     a1e:	90 ed       	ldi	r25, 0xD0	; 208
     a20:	98 0f       	add	r25, r24
     a22:	9a 30       	cpi	r25, 0x0A	; 10
     a24:	d8 f4       	brcc	.+54     	; 0xa5c <realizar_saque+0xb6>
     a26:	06 30       	cpi	r16, 0x06	; 6
     a28:	11 05       	cpc	r17, r1
     a2a:	c4 f4       	brge	.+48     	; 0xa5c <realizar_saque+0xb6>
     a2c:	e1 e0       	ldi	r30, 0x01	; 1
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	ec 0f       	add	r30, r28
     a32:	fd 1f       	adc	r31, r29
     a34:	e0 0f       	add	r30, r16
     a36:	f1 1f       	adc	r31, r17
     a38:	80 83       	st	Z, r24
     a3a:	88 87       	std	Y+8, r24	; 0x08
     a3c:	19 86       	std	Y+9, r1	; 0x09
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	60 0f       	add	r22, r16
     a42:	ae 01       	movw	r20, r28
     a44:	48 5f       	subi	r20, 0xF8	; 248
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     a4e:	0f 5f       	subi	r16, 0xFF	; 255
     a50:	1f 4f       	sbci	r17, 0xFF	; 255
     a52:	88 ec       	ldi	r24, 0xC8	; 200
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     a5a:	c8 cf       	rjmp	.-112    	; 0x9ec <realizar_saque+0x46>
     a5c:	83 32       	cpi	r24, 0x23	; 35
     a5e:	09 f0       	breq	.+2      	; 0xa62 <realizar_saque+0xbc>
     a60:	8a c0       	rjmp	.+276    	; 0xb76 <realizar_saque+0x1d0>
     a62:	10 16       	cp	r1, r16
     a64:	11 06       	cpc	r1, r17
     a66:	0c f0       	brlt	.+2      	; 0xa6a <realizar_saque+0xc4>
     a68:	86 c0       	rjmp	.+268    	; 0xb76 <realizar_saque+0x1d0>
     a6a:	e1 e0       	ldi	r30, 0x01	; 1
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	ec 0f       	add	r30, r28
     a70:	fd 1f       	adc	r31, r29
     a72:	e0 0f       	add	r30, r16
     a74:	f1 1f       	adc	r31, r17
     a76:	10 82       	st	Z, r1
     a78:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     a7c:	89 2b       	or	r24, r25
     a7e:	99 f0       	breq	.+38     	; 0xaa6 <realizar_saque+0x100>
     a80:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     a84:	4a e0       	ldi	r20, 0x0A	; 10
     a86:	52 e0       	ldi	r21, 0x02	; 2
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     a90:	47 e1       	ldi	r20, 0x17	; 23
     a92:	52 e0       	ldi	r21, 0x02	; 2
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     a9c:	88 ec       	ldi	r24, 0xC8	; 200
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     aa4:	7d c0       	rjmp	.+250    	; 0xba0 <realizar_saque+0x1fa>
     aa6:	06 30       	cpi	r16, 0x06	; 6
     aa8:	11 05       	cpc	r17, r1
     aaa:	2c f1       	brlt	.+74     	; 0xaf6 <realizar_saque+0x150>
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	81 33       	cpi	r24, 0x31	; 49
     ab0:	11 f5       	brne	.+68     	; 0xaf6 <realizar_saque+0x150>
     ab2:	8a 81       	ldd	r24, Y+2	; 0x02
     ab4:	82 33       	cpi	r24, 0x32	; 50
     ab6:	f8 f0       	brcs	.+62     	; 0xaf6 <realizar_saque+0x150>
     ab8:	8b 81       	ldd	r24, Y+3	; 0x03
     aba:	80 33       	cpi	r24, 0x30	; 48
     abc:	e0 f0       	brcs	.+56     	; 0xaf6 <realizar_saque+0x150>
     abe:	8c 81       	ldd	r24, Y+4	; 0x04
     ac0:	80 33       	cpi	r24, 0x30	; 48
     ac2:	c8 f0       	brcs	.+50     	; 0xaf6 <realizar_saque+0x150>
     ac4:	8d 81       	ldd	r24, Y+5	; 0x05
     ac6:	80 33       	cpi	r24, 0x30	; 48
     ac8:	b0 f0       	brcs	.+44     	; 0xaf6 <realizar_saque+0x150>
     aca:	8e 81       	ldd	r24, Y+6	; 0x06
     acc:	80 33       	cpi	r24, 0x30	; 48
     ace:	98 f0       	brcs	.+38     	; 0xaf6 <realizar_saque+0x150>
     ad0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     ad4:	45 e2       	ldi	r20, 0x25	; 37
     ad6:	52 e0       	ldi	r21, 0x02	; 2
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     ae0:	43 e3       	ldi	r20, 0x33	; 51
     ae2:	52 e0       	ldi	r21, 0x02	; 2
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     aec:	80 ed       	ldi	r24, 0xD0	; 208
     aee:	97 e0       	ldi	r25, 0x07	; 7
     af0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     af4:	55 c0       	rjmp	.+170    	; 0xba0 <realizar_saque+0x1fa>
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	0e 94 61 04 	call	0x8c2	; 0x8c2 <enviar_mensagem_saque>
     afe:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     b02:	89 2b       	or	r24, r25
     b04:	99 f0       	breq	.+38     	; 0xb2c <realizar_saque+0x186>
     b06:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     b0a:	4a e0       	ldi	r20, 0x0A	; 10
     b0c:	52 e0       	ldi	r21, 0x02	; 2
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     b16:	47 e1       	ldi	r20, 0x17	; 23
     b18:	52 e0       	ldi	r21, 0x02	; 2
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     b22:	80 ed       	ldi	r24, 0xD0	; 208
     b24:	97 e0       	ldi	r25, 0x07	; 7
     b26:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     b2a:	3a c0       	rjmp	.+116    	; 0xba0 <realizar_saque+0x1fa>
     b2c:	0e 94 a4 04 	call	0x948	; 0x948 <receber_resposta_servidor>
     b30:	18 2f       	mov	r17, r24
     b32:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     b36:	1f 34       	cpi	r17, 0x4F	; 79
     b38:	69 f4       	brne	.+26     	; 0xb54 <realizar_saque+0x1ae>
     b3a:	46 ed       	ldi	r20, 0xD6	; 214
     b3c:	51 e0       	ldi	r21, 0x01	; 1
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     b46:	4e e3       	ldi	r20, 0x3E	; 62
     b48:	52 e0       	ldi	r21, 0x02	; 2
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     b52:	0c c0       	rjmp	.+24     	; 0xb6c <realizar_saque+0x1c6>
     b54:	4a ee       	ldi	r20, 0xEA	; 234
     b56:	51 e0       	ldi	r21, 0x01	; 1
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     b60:	49 e4       	ldi	r20, 0x49	; 73
     b62:	52 e0       	ldi	r21, 0x02	; 2
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     b6c:	88 eb       	ldi	r24, 0xB8	; 184
     b6e:	9b e0       	ldi	r25, 0x0B	; 11
     b70:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     b74:	15 c0       	rjmp	.+42     	; 0xba0 <realizar_saque+0x1fa>
     b76:	8a 32       	cpi	r24, 0x2A	; 42
     b78:	09 f0       	breq	.+2      	; 0xb7c <realizar_saque+0x1d6>
     b7a:	38 cf       	rjmp	.-400    	; 0x9ec <realizar_saque+0x46>
     b7c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     b80:	46 e5       	ldi	r20, 0x56	; 86
     b82:	52 e0       	ldi	r21, 0x02	; 2
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     b8c:	4f e5       	ldi	r20, 0x5F	; 95
     b8e:	52 e0       	ldi	r21, 0x02	; 2
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     b98:	80 ed       	ldi	r24, 0xD0	; 208
     b9a:	97 e0       	ldi	r25, 0x07	; 7
     b9c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     ba0:	29 96       	adiw	r28, 0x09	; 9
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	08 95       	ret

00000bb6 <consultar_saldo>:
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	a9 97       	sbiw	r28, 0x29	; 41
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	83 e4       	ldi	r24, 0x43	; 67
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	86 e5       	ldi	r24, 0x56	; 86
     bd8:	8a 83       	std	Y+2, r24	; 0x02
     bda:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     bde:	89 2b       	or	r24, r25
     be0:	99 f0       	breq	.+38     	; 0xc08 <consultar_saldo+0x52>
     be2:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     be6:	4a e0       	ldi	r20, 0x0A	; 10
     be8:	52 e0       	ldi	r21, 0x02	; 2
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     bf2:	47 e1       	ldi	r20, 0x17	; 23
     bf4:	52 e0       	ldi	r21, 0x02	; 2
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     bfe:	80 ed       	ldi	r24, 0xD0	; 208
     c00:	97 e0       	ldi	r25, 0x07	; 7
     c02:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     c06:	d1 c0       	rjmp	.+418    	; 0xdaa <consultar_saldo+0x1f4>
     c08:	be 01       	movw	r22, r28
     c0a:	6f 5f       	subi	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 66 07 	call	0xecc	; 0xecc <SerialEnviaChars>
     c16:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     c1a:	89 2b       	or	r24, r25
     c1c:	99 f0       	breq	.+38     	; 0xc44 <consultar_saldo+0x8e>
     c1e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     c22:	4a e0       	ldi	r20, 0x0A	; 10
     c24:	52 e0       	ldi	r21, 0x02	; 2
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     c2e:	47 e1       	ldi	r20, 0x17	; 23
     c30:	52 e0       	ldi	r21, 0x02	; 2
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     c3a:	80 ed       	ldi	r24, 0xD0	; 208
     c3c:	97 e0       	ldi	r25, 0x07	; 7
     c3e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     c42:	b3 c0       	rjmp	.+358    	; 0xdaa <consultar_saldo+0x1f4>
     c44:	be 01       	movw	r22, r28
     c46:	6d 5f       	subi	r22, 0xFD	; 253
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <SerialRecebeChars>
     c52:	1e 82       	std	Y+6, r1	; 0x06
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	83 35       	cpi	r24, 0x53	; 83
     c58:	09 f0       	breq	.+2      	; 0xc5c <consultar_saldo+0xa6>
     c5a:	95 c0       	rjmp	.+298    	; 0xd86 <consultar_saldo+0x1d0>
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	86 35       	cpi	r24, 0x56	; 86
     c60:	09 f0       	breq	.+2      	; 0xc64 <consultar_saldo+0xae>
     c62:	91 c0       	rjmp	.+290    	; 0xd86 <consultar_saldo+0x1d0>
     c64:	0d 81       	ldd	r16, Y+5	; 0x05
     c66:	fe 01       	movw	r30, r28
     c68:	7a 96       	adiw	r30, 0x1a	; 26
     c6a:	80 e1       	ldi	r24, 0x10	; 16
     c6c:	df 01       	movw	r26, r30
     c6e:	1d 92       	st	X+, r1
     c70:	8a 95       	dec	r24
     c72:	e9 f7       	brne	.-6      	; 0xc6e <consultar_saldo+0xb8>
     c74:	00 31       	cpi	r16, 0x10	; 16
     c76:	08 f0       	brcs	.+2      	; 0xc7a <consultar_saldo+0xc4>
     c78:	0f e0       	ldi	r16, 0x0F	; 15
     c7a:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     c7e:	89 2b       	or	r24, r25
     c80:	99 f0       	breq	.+38     	; 0xca8 <consultar_saldo+0xf2>
     c82:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     c86:	4a e0       	ldi	r20, 0x0A	; 10
     c88:	52 e0       	ldi	r21, 0x02	; 2
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     c92:	47 e1       	ldi	r20, 0x17	; 23
     c94:	52 e0       	ldi	r21, 0x02	; 2
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     c9e:	80 ed       	ldi	r24, 0xD0	; 208
     ca0:	97 e0       	ldi	r25, 0x07	; 7
     ca2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     ca6:	81 c0       	rjmp	.+258    	; 0xdaa <consultar_saldo+0x1f4>
     ca8:	10 e0       	ldi	r17, 0x00	; 0
     caa:	7e 01       	movw	r14, r28
     cac:	ba e1       	ldi	r27, 0x1A	; 26
     cae:	eb 0e       	add	r14, r27
     cb0:	f1 1c       	adc	r15, r1
     cb2:	b7 01       	movw	r22, r14
     cb4:	c8 01       	movw	r24, r16
     cb6:	0e 94 fe 08 	call	0x11fc	; 0x11fc <SerialRecebeChars>
     cba:	f7 01       	movw	r30, r14
     cbc:	e0 0f       	add	r30, r16
     cbe:	f1 1f       	adc	r31, r17
     cc0:	10 82       	st	Z, r1
     cc2:	f7 01       	movw	r30, r14
     cc4:	01 90       	ld	r0, Z+
     cc6:	00 20       	and	r0, r0
     cc8:	e9 f7       	brne	.-6      	; 0xcc4 <consultar_saldo+0x10e>
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	ee 19       	sub	r30, r14
     cce:	ff 09       	sbc	r31, r15
     cd0:	e2 30       	cpi	r30, 0x02	; 2
     cd2:	f1 05       	cpc	r31, r1
     cd4:	44 f1       	brlt	.+80     	; 0xd26 <consultar_saldo+0x170>
     cd6:	7e 01       	movw	r14, r28
     cd8:	86 e0       	ldi	r24, 0x06	; 6
     cda:	e8 0e       	add	r14, r24
     cdc:	f1 1c       	adc	r15, r1
     cde:	82 e5       	ldi	r24, 0x52	; 82
     ce0:	94 e2       	ldi	r25, 0x24	; 36
     ce2:	9f 83       	std	Y+7, r25	; 0x07
     ce4:	8e 83       	std	Y+6, r24	; 0x06
     ce6:	d7 01       	movw	r26, r14
     ce8:	12 96       	adiw	r26, 0x02	; 2
     cea:	1c 92       	st	X, r1
     cec:	8f 01       	movw	r16, r30
     cee:	02 50       	subi	r16, 0x02	; 2
     cf0:	11 09       	sbc	r17, r1
     cf2:	a8 01       	movw	r20, r16
     cf4:	be 01       	movw	r22, r28
     cf6:	66 5e       	subi	r22, 0xE6	; 230
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	c7 01       	movw	r24, r14
     cfc:	0e 94 8e 0a 	call	0x151c	; 0x151c <strncat>
     d00:	f7 01       	movw	r30, r14
     d02:	01 90       	ld	r0, Z+
     d04:	00 20       	and	r0, r0
     d06:	e9 f7       	brne	.-6      	; 0xd02 <consultar_saldo+0x14c>
     d08:	31 97       	sbiw	r30, 0x01	; 1
     d0a:	8e e2       	ldi	r24, 0x2E	; 46
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	80 83       	st	Z, r24
     d12:	6a e1       	ldi	r22, 0x1A	; 26
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	6c 0f       	add	r22, r28
     d18:	7d 1f       	adc	r23, r29
     d1a:	60 0f       	add	r22, r16
     d1c:	71 1f       	adc	r23, r17
     d1e:	c7 01       	movw	r24, r14
     d20:	0e 94 83 0a 	call	0x1506	; 0x1506 <strcat>
     d24:	1c c0       	rjmp	.+56     	; 0xd5e <consultar_saldo+0x1a8>
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	89 f4       	brne	.+34     	; 0xd4c <consultar_saldo+0x196>
     d2a:	86 e0       	ldi	r24, 0x06	; 6
     d2c:	e9 e6       	ldi	r30, 0x69	; 105
     d2e:	f2 e0       	ldi	r31, 0x02	; 2
     d30:	de 01       	movw	r26, r28
     d32:	16 96       	adiw	r26, 0x06	; 6
     d34:	01 90       	ld	r0, Z+
     d36:	0d 92       	st	X+, r0
     d38:	8a 95       	dec	r24
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <consultar_saldo+0x17e>
     d3c:	be 01       	movw	r22, r28
     d3e:	66 5e       	subi	r22, 0xE6	; 230
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	ce 01       	movw	r24, r28
     d44:	06 96       	adiw	r24, 0x06	; 6
     d46:	0e 94 83 0a 	call	0x1506	; 0x1506 <strcat>
     d4a:	09 c0       	rjmp	.+18     	; 0xd5e <consultar_saldo+0x1a8>
     d4c:	87 e0       	ldi	r24, 0x07	; 7
     d4e:	ef e6       	ldi	r30, 0x6F	; 111
     d50:	f2 e0       	ldi	r31, 0x02	; 2
     d52:	de 01       	movw	r26, r28
     d54:	16 96       	adiw	r26, 0x06	; 6
     d56:	01 90       	ld	r0, Z+
     d58:	0d 92       	st	X+, r0
     d5a:	8a 95       	dec	r24
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <consultar_saldo+0x1a0>
     d5e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     d62:	46 e7       	ldi	r20, 0x76	; 118
     d64:	52 e0       	ldi	r21, 0x02	; 2
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     d6e:	ae 01       	movw	r20, r28
     d70:	4a 5f       	subi	r20, 0xFA	; 250
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     d7c:	88 eb       	ldi	r24, 0xB8	; 184
     d7e:	9b e0       	ldi	r25, 0x0B	; 11
     d80:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     d84:	12 c0       	rjmp	.+36     	; 0xdaa <consultar_saldo+0x1f4>
     d86:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     d8a:	43 e8       	ldi	r20, 0x83	; 131
     d8c:	52 e0       	ldi	r21, 0x02	; 2
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     d96:	41 e9       	ldi	r20, 0x91	; 145
     d98:	52 e0       	ldi	r21, 0x02	; 2
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     da2:	88 eb       	ldi	r24, 0xB8	; 184
     da4:	9b e0       	ldi	r25, 0x0B	; 11
     da6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     daa:	a9 96       	adiw	r28, 0x29	; 41
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	08 95       	ret

00000dc4 <finalizar_sessao>:
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	00 d0       	rcall	.+0      	; 0xdca <finalizar_sessao+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <finalizar_sessao+0x8>
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	83 e4       	ldi	r24, 0x43	; 67
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	86 e4       	ldi	r24, 0x46	; 70
     dd8:	8a 83       	std	Y+2, r24	; 0x02
     dda:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     dde:	89 2b       	or	r24, r25
     de0:	99 f0       	breq	.+38     	; 0xe08 <finalizar_sessao+0x44>
     de2:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     de6:	48 e9       	ldi	r20, 0x98	; 152
     de8:	52 e0       	ldi	r21, 0x02	; 2
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     df2:	43 ea       	ldi	r20, 0xA3	; 163
     df4:	52 e0       	ldi	r21, 0x02	; 2
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     dfe:	80 ed       	ldi	r24, 0xD0	; 208
     e00:	97 e0       	ldi	r25, 0x07	; 7
     e02:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     e06:	4b c0       	rjmp	.+150    	; 0xe9e <finalizar_sessao+0xda>
     e08:	be 01       	movw	r22, r28
     e0a:	6f 5f       	subi	r22, 0xFF	; 255
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 66 07 	call	0xecc	; 0xecc <SerialEnviaChars>
     e16:	0e 94 c3 08 	call	0x1186	; 0x1186 <isBlocked>
     e1a:	89 2b       	or	r24, r25
     e1c:	99 f0       	breq	.+38     	; 0xe44 <finalizar_sessao+0x80>
     e1e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     e22:	48 e9       	ldi	r20, 0x98	; 152
     e24:	52 e0       	ldi	r21, 0x02	; 2
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     e2e:	43 ea       	ldi	r20, 0xA3	; 163
     e30:	52 e0       	ldi	r21, 0x02	; 2
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     e3a:	80 ed       	ldi	r24, 0xD0	; 208
     e3c:	97 e0       	ldi	r25, 0x07	; 7
     e3e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     e42:	2d c0       	rjmp	.+90     	; 0xe9e <finalizar_sessao+0xda>
     e44:	be 01       	movw	r22, r28
     e46:	6d 5f       	subi	r22, 0xFD	; 253
     e48:	7f 4f       	sbci	r23, 0xFF	; 255
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <SerialRecebeChars>
     e52:	1d 82       	std	Y+5, r1	; 0x05
     e54:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	83 35       	cpi	r24, 0x53	; 83
     e5c:	81 f4       	brne	.+32     	; 0xe7e <finalizar_sessao+0xba>
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	86 34       	cpi	r24, 0x46	; 70
     e62:	69 f4       	brne	.+26     	; 0xe7e <finalizar_sessao+0xba>
     e64:	4f ea       	ldi	r20, 0xAF	; 175
     e66:	52 e0       	ldi	r21, 0x02	; 2
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     e70:	46 eb       	ldi	r20, 0xB6	; 182
     e72:	52 e0       	ldi	r21, 0x02	; 2
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     e7c:	0c c0       	rjmp	.+24     	; 0xe96 <finalizar_sessao+0xd2>
     e7e:	42 ec       	ldi	r20, 0xC2	; 194
     e80:	52 e0       	ldi	r21, 0x02	; 2
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     e8a:	44 ed       	ldi	r20, 0xD4	; 212
     e8c:	52 e0       	ldi	r21, 0x02	; 2
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     e96:	80 ed       	ldi	r24, 0xD0	; 208
     e98:	97 e0       	ldi	r25, 0x07	; 7
     e9a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <initUART>:
	if (uart_head >= uart_tail) {
		return uart_head - uart_tail;
		} else {
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}
     eae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     eb2:	83 e3       	ldi	r24, 0x33	; 51
     eb4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     eb8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ebc:	88 e9       	ldi	r24, 0x98	; 152
     ebe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     ec2:	86 e0       	ldi	r24, 0x06	; 6
     ec4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     ec8:	78 94       	sei
     eca:	08 95       	ret

00000ecc <SerialEnviaChars>:
     ecc:	ef 92       	push	r14
     ece:	ff 92       	push	r15
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	8c 01       	movw	r16, r24
     eda:	7b 01       	movw	r14, r22
     edc:	c0 e0       	ldi	r28, 0x00	; 0
     ede:	d0 e0       	ldi	r29, 0x00	; 0
     ee0:	0f c0       	rjmp	.+30     	; 0xf00 <SerialEnviaChars+0x34>
     ee2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ee6:	85 ff       	sbrs	r24, 5
     ee8:	fc cf       	rjmp	.-8      	; 0xee2 <SerialEnviaChars+0x16>
     eea:	f7 01       	movw	r30, r14
     eec:	ec 0f       	add	r30, r28
     eee:	fd 1f       	adc	r31, r29
     ef0:	80 81       	ld	r24, Z
     ef2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ef6:	84 e1       	ldi	r24, 0x14	; 20
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 2a 0a 	call	0x1454	; 0x1454 <delay1ms>
     efe:	21 96       	adiw	r28, 0x01	; 1
     f00:	c0 17       	cp	r28, r16
     f02:	d1 07       	cpc	r29, r17
     f04:	74 f3       	brlt	.-36     	; 0xee2 <SerialEnviaChars+0x16>
     f06:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     f0a:	86 ff       	sbrs	r24, 6
     f0c:	fc cf       	rjmp	.-8      	; 0xf06 <SerialEnviaChars+0x3a>
     f0e:	e0 ec       	ldi	r30, 0xC0	; 192
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 64       	ori	r24, 0x40	; 64
     f16:	80 83       	st	Z, r24
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	08 95       	ret

00000f26 <__vector_18>:
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
     f40:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f44:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <sh_bytes_count>
     f48:	9f ef       	ldi	r25, 0xFF	; 255
     f4a:	9e 0f       	add	r25, r30
     f4c:	95 30       	cpi	r25, 0x05	; 5
     f4e:	08 f5       	brcc	.+66     	; 0xf92 <__vector_18+0x6c>
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	9e 0f       	add	r25, r30
     f54:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <sh_bytes_count>
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	ea 51       	subi	r30, 0x1A	; 26
     f5c:	fd 4f       	sbci	r31, 0xFD	; 253
     f5e:	80 83       	st	Z, r24
     f60:	96 30       	cpi	r25, 0x06	; 6
     f62:	09 f0       	breq	.+2      	; 0xf66 <__vector_18+0x40>
     f64:	03 c1       	rjmp	.+518    	; 0x116c <__vector_18+0x246>
     f66:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <sh_command_bytes_received+0x4>
     f6a:	89 50       	subi	r24, 0x09	; 9
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	8b 30       	cpi	r24, 0x0B	; 11
     f70:	08 f4       	brcc	.+2      	; 0xf74 <__vector_18+0x4e>
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <blocked>
     f78:	e1 ef       	ldi	r30, 0xF1	; 241
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	83 e4       	ldi	r24, 0x43	; 67
     f7e:	80 83       	st	Z, r24
     f80:	88 e4       	ldi	r24, 0x48	; 72
     f82:	81 83       	std	Z+1, r24	; 0x01
     f84:	12 82       	std	Z+2, r1	; 0x02
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <serial_response_pending>
     f8c:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <sh_bytes_count>
     f90:	ed c0       	rjmp	.+474    	; 0x116c <__vector_18+0x246>
     f92:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <waiting_for_second_byte>
     f96:	99 23       	and	r25, r25
     f98:	09 f4       	brne	.+2      	; 0xf9c <__vector_18+0x76>
     f9a:	be c0       	rjmp	.+380    	; 0x1118 <__vector_18+0x1f2>
     f9c:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <first_byte_of_potential_command>
     fa0:	93 35       	cpi	r25, 0x53	; 83
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <__vector_18+0x80>
     fa4:	70 c0       	rjmp	.+224    	; 0x1086 <__vector_18+0x160>
     fa6:	84 35       	cpi	r24, 0x54	; 84
     fa8:	69 f4       	brne	.+26     	; 0xfc4 <__vector_18+0x9e>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <blocked>
     fb0:	e1 ef       	ldi	r30, 0xF1	; 241
     fb2:	f2 e0       	ldi	r31, 0x02	; 2
     fb4:	93 e4       	ldi	r25, 0x43	; 67
     fb6:	90 83       	st	Z, r25
     fb8:	94 e5       	ldi	r25, 0x54	; 84
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	12 82       	std	Z+2, r1	; 0x02
     fbe:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <serial_response_pending>
     fc2:	a5 c0       	rjmp	.+330    	; 0x110e <__vector_18+0x1e8>
     fc4:	8c 34       	cpi	r24, 0x4C	; 76
     fc6:	69 f4       	brne	.+26     	; 0xfe2 <__vector_18+0xbc>
     fc8:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <blocked>
     fcc:	e1 ef       	ldi	r30, 0xF1	; 241
     fce:	f2 e0       	ldi	r31, 0x02	; 2
     fd0:	83 e4       	ldi	r24, 0x43	; 67
     fd2:	80 83       	st	Z, r24
     fd4:	8c e4       	ldi	r24, 0x4C	; 76
     fd6:	81 83       	std	Z+1, r24	; 0x01
     fd8:	12 82       	std	Z+2, r1	; 0x02
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <serial_response_pending>
     fe0:	96 c0       	rjmp	.+300    	; 0x110e <__vector_18+0x1e8>
     fe2:	88 34       	cpi	r24, 0x48	; 72
     fe4:	51 f4       	brne	.+20     	; 0xffa <__vector_18+0xd4>
     fe6:	e6 ee       	ldi	r30, 0xE6	; 230
     fe8:	f2 e0       	ldi	r31, 0x02	; 2
     fea:	83 e5       	ldi	r24, 0x53	; 83
     fec:	80 83       	st	Z, r24
     fee:	88 e4       	ldi	r24, 0x48	; 72
     ff0:	81 83       	std	Z+1, r24	; 0x01
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <sh_bytes_count>
     ff8:	8a c0       	rjmp	.+276    	; 0x110e <__vector_18+0x1e8>
     ffa:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <uart_head>
     ffe:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <uart_head+0x1>
    1002:	2f 5f       	subi	r18, 0xFF	; 255
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	2f 77       	andi	r18, 0x7F	; 127
    1008:	30 78       	andi	r19, 0x80	; 128
    100a:	33 23       	and	r19, r19
    100c:	34 f4       	brge	.+12     	; 0x101a <__vector_18+0xf4>
    100e:	21 50       	subi	r18, 0x01	; 1
    1010:	31 09       	sbc	r19, r1
    1012:	20 68       	ori	r18, 0x80	; 128
    1014:	3f 6f       	ori	r19, 0xFF	; 255
    1016:	2f 5f       	subi	r18, 0xFF	; 255
    1018:	3f 4f       	sbci	r19, 0xFF	; 255
    101a:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <uart_tail>
    101e:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <uart_tail+0x1>
    1022:	24 17       	cp	r18, r20
    1024:	35 07       	cpc	r19, r21
    1026:	59 f0       	breq	.+22     	; 0x103e <__vector_18+0x118>
    1028:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <uart_head>
    102c:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <uart_head+0x1>
    1030:	ec 50       	subi	r30, 0x0C	; 12
    1032:	fd 4f       	sbci	r31, 0xFD	; 253
    1034:	90 83       	st	Z, r25
    1036:	30 93 f0 02 	sts	0x02F0, r19	; 0x8002f0 <uart_head+0x1>
    103a:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <uart_head>
    103e:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <uart_head>
    1042:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <uart_head+0x1>
    1046:	2f 5f       	subi	r18, 0xFF	; 255
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	2f 77       	andi	r18, 0x7F	; 127
    104c:	30 78       	andi	r19, 0x80	; 128
    104e:	33 23       	and	r19, r19
    1050:	34 f4       	brge	.+12     	; 0x105e <__vector_18+0x138>
    1052:	21 50       	subi	r18, 0x01	; 1
    1054:	31 09       	sbc	r19, r1
    1056:	20 68       	ori	r18, 0x80	; 128
    1058:	3f 6f       	ori	r19, 0xFF	; 255
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <uart_tail>
    1062:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <uart_tail+0x1>
    1066:	24 17       	cp	r18, r20
    1068:	35 07       	cpc	r19, r21
    106a:	09 f4       	brne	.+2      	; 0x106e <__vector_18+0x148>
    106c:	50 c0       	rjmp	.+160    	; 0x110e <__vector_18+0x1e8>
    106e:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <uart_head>
    1072:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <uart_head+0x1>
    1076:	ec 50       	subi	r30, 0x0C	; 12
    1078:	fd 4f       	sbci	r31, 0xFD	; 253
    107a:	80 83       	st	Z, r24
    107c:	30 93 f0 02 	sts	0x02F0, r19	; 0x8002f0 <uart_head+0x1>
    1080:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <uart_head>
    1084:	44 c0       	rjmp	.+136    	; 0x110e <__vector_18+0x1e8>
    1086:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <uart_head>
    108a:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <uart_head+0x1>
    108e:	2f 5f       	subi	r18, 0xFF	; 255
    1090:	3f 4f       	sbci	r19, 0xFF	; 255
    1092:	2f 77       	andi	r18, 0x7F	; 127
    1094:	30 78       	andi	r19, 0x80	; 128
    1096:	33 23       	and	r19, r19
    1098:	34 f4       	brge	.+12     	; 0x10a6 <__vector_18+0x180>
    109a:	21 50       	subi	r18, 0x01	; 1
    109c:	31 09       	sbc	r19, r1
    109e:	20 68       	ori	r18, 0x80	; 128
    10a0:	3f 6f       	ori	r19, 0xFF	; 255
    10a2:	2f 5f       	subi	r18, 0xFF	; 255
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <uart_tail>
    10aa:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <uart_tail+0x1>
    10ae:	24 17       	cp	r18, r20
    10b0:	35 07       	cpc	r19, r21
    10b2:	59 f0       	breq	.+22     	; 0x10ca <__vector_18+0x1a4>
    10b4:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <uart_head>
    10b8:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <uart_head+0x1>
    10bc:	ec 50       	subi	r30, 0x0C	; 12
    10be:	fd 4f       	sbci	r31, 0xFD	; 253
    10c0:	90 83       	st	Z, r25
    10c2:	30 93 f0 02 	sts	0x02F0, r19	; 0x8002f0 <uart_head+0x1>
    10c6:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <uart_head>
    10ca:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <uart_head>
    10ce:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <uart_head+0x1>
    10d2:	2f 5f       	subi	r18, 0xFF	; 255
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	2f 77       	andi	r18, 0x7F	; 127
    10d8:	30 78       	andi	r19, 0x80	; 128
    10da:	33 23       	and	r19, r19
    10dc:	34 f4       	brge	.+12     	; 0x10ea <__vector_18+0x1c4>
    10de:	21 50       	subi	r18, 0x01	; 1
    10e0:	31 09       	sbc	r19, r1
    10e2:	20 68       	ori	r18, 0x80	; 128
    10e4:	3f 6f       	ori	r19, 0xFF	; 255
    10e6:	2f 5f       	subi	r18, 0xFF	; 255
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <uart_tail>
    10ee:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <uart_tail+0x1>
    10f2:	24 17       	cp	r18, r20
    10f4:	35 07       	cpc	r19, r21
    10f6:	59 f0       	breq	.+22     	; 0x110e <__vector_18+0x1e8>
    10f8:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <uart_head>
    10fc:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <uart_head+0x1>
    1100:	ec 50       	subi	r30, 0x0C	; 12
    1102:	fd 4f       	sbci	r31, 0xFD	; 253
    1104:	80 83       	st	Z, r24
    1106:	30 93 f0 02 	sts	0x02F0, r19	; 0x8002f0 <uart_head+0x1>
    110a:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <uart_head>
    110e:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <waiting_for_second_byte>
    1112:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <first_byte_of_potential_command>
    1116:	2a c0       	rjmp	.+84     	; 0x116c <__vector_18+0x246>
    1118:	83 35       	cpi	r24, 0x53	; 83
    111a:	31 f4       	brne	.+12     	; 0x1128 <__vector_18+0x202>
    111c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <first_byte_of_potential_command>
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <waiting_for_second_byte>
    1126:	22 c0       	rjmp	.+68     	; 0x116c <__vector_18+0x246>
    1128:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <uart_head>
    112c:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <uart_head+0x1>
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	2f 77       	andi	r18, 0x7F	; 127
    1136:	30 78       	andi	r19, 0x80	; 128
    1138:	33 23       	and	r19, r19
    113a:	34 f4       	brge	.+12     	; 0x1148 <__vector_18+0x222>
    113c:	21 50       	subi	r18, 0x01	; 1
    113e:	31 09       	sbc	r19, r1
    1140:	20 68       	ori	r18, 0x80	; 128
    1142:	3f 6f       	ori	r19, 0xFF	; 255
    1144:	2f 5f       	subi	r18, 0xFF	; 255
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <uart_tail>
    114c:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <uart_tail+0x1>
    1150:	24 17       	cp	r18, r20
    1152:	35 07       	cpc	r19, r21
    1154:	59 f0       	breq	.+22     	; 0x116c <__vector_18+0x246>
    1156:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <uart_head>
    115a:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <uart_head+0x1>
    115e:	ec 50       	subi	r30, 0x0C	; 12
    1160:	fd 4f       	sbci	r31, 0xFD	; 253
    1162:	80 83       	st	Z, r24
    1164:	30 93 f0 02 	sts	0x02F0, r19	; 0x8002f0 <uart_head+0x1>
    1168:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <uart_head>
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <isBlocked>:
    1186:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <blocked>
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	08 95       	ret

0000118e <uart_buffer_empty>:
    118e:	40 91 ef 02 	lds	r20, 0x02EF	; 0x8002ef <uart_head>
    1192:	50 91 f0 02 	lds	r21, 0x02F0	; 0x8002f0 <uart_head+0x1>
    1196:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <uart_tail>
    119a:	30 91 ee 02 	lds	r19, 0x02EE	; 0x8002ee <uart_tail+0x1>
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	42 17       	cp	r20, r18
    11a2:	53 07       	cpc	r21, r19
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <uart_buffer_empty+0x1a>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	08 95       	ret

000011ac <uart_buffer_read_char>:

int uart_buffer_read_char(char *c) {
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) return 0;
    11b2:	0e 94 c7 08 	call	0x118e	; 0x118e <uart_buffer_empty>
    11b6:	89 2b       	or	r24, r25
    11b8:	e1 f4       	brne	.+56     	; 0x11f2 <uart_buffer_read_char+0x46>
	*c = uart_buffer[uart_tail];
    11ba:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <uart_tail>
    11be:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <uart_tail+0x1>
    11c2:	ec 50       	subi	r30, 0x0C	; 12
    11c4:	fd 4f       	sbci	r31, 0xFD	; 253
    11c6:	80 81       	ld	r24, Z
    11c8:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
    11ca:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <uart_tail>
    11ce:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <uart_tail+0x1>
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	8f 77       	andi	r24, 0x7F	; 127
    11d6:	90 78       	andi	r25, 0x80	; 128
    11d8:	99 23       	and	r25, r25
    11da:	24 f4       	brge	.+8      	; 0x11e4 <uart_buffer_read_char+0x38>
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	80 68       	ori	r24, 0x80	; 128
    11e0:	9f 6f       	ori	r25, 0xFF	; 255
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <uart_tail+0x1>
    11e8:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <uart_tail>
	return 1;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <uart_buffer_read_char+0x4a>
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}

int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) return 0;
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <SerialRecebeChars>:

void SerialRecebeChars(int sizeS, char* string) {
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	1f 92       	push	r1
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	6c 01       	movw	r12, r24
    1218:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
    121a:	e1 2c       	mov	r14, r1
    121c:	f1 2c       	mov	r15, r1
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
    121e:	00 e0       	ldi	r16, 0x00	; 0
    1220:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100; // 100 * 10ms = 1 second timeout

	while (received < sizeS && timeout_count < timeout_limit) {
    1222:	19 c0       	rjmp	.+50     	; 0x1256 <SerialRecebeChars+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	0e 94 d6 08 	call	0x11ac	; 0x11ac <uart_buffer_read_char>
    122c:	89 2b       	or	r24, r25
    122e:	51 f0       	breq	.+20     	; 0x1244 <SerialRecebeChars+0x48>
			string[received++] = c;
    1230:	f5 01       	movw	r30, r10
    1232:	e0 0f       	add	r30, r16
    1234:	f1 1f       	adc	r31, r17
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	80 83       	st	Z, r24
    123a:	0f 5f       	subi	r16, 0xFF	; 255
    123c:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0; // Reset timeout on successful read
    123e:	e1 2c       	mov	r14, r1
    1240:	f1 2c       	mov	r15, r1
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <SerialRecebeChars+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1244:	83 ec       	ldi	r24, 0xC3	; 195
    1246:	99 e0       	ldi	r25, 0x09	; 9
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <SerialRecebeChars+0x4c>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <SerialRecebeChars+0x52>
    124e:	00 00       	nop
			} else {
			_delay_ms(10); // Wait for data
			timeout_count++;
    1250:	9f ef       	ldi	r25, 0xFF	; 255
    1252:	e9 1a       	sub	r14, r25
    1254:	f9 0a       	sbc	r15, r25
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100; // 100 * 10ms = 1 second timeout

	while (received < sizeS && timeout_count < timeout_limit) {
    1256:	0c 15       	cp	r16, r12
    1258:	1d 05       	cpc	r17, r13
    125a:	24 f4       	brge	.+8      	; 0x1264 <SerialRecebeChars+0x68>
    125c:	84 e6       	ldi	r24, 0x64	; 100
    125e:	e8 16       	cp	r14, r24
    1260:	f1 04       	cpc	r15, r1
    1262:	04 f3       	brlt	.-64     	; 0x1224 <SerialRecebeChars+0x28>
			} else {
			_delay_ms(10); // Wait for data
			timeout_count++;
		}
	}
	string[received] = '\0'; // Null-terminate the received string
    1264:	f5 01       	movw	r30, r10
    1266:	e0 0f       	add	r30, r16
    1268:	f1 1f       	adc	r31, r17
    126a:	10 82       	st	Z, r1
}
    126c:	0f 90       	pop	r0
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	bf 90       	pop	r11
    1280:	af 90       	pop	r10
    1282:	08 95       	ret

00001284 <prepara_teclado>:
    1284:	84 b1       	in	r24, 0x04	; 4
    1286:	83 60       	ori	r24, 0x03	; 3
    1288:	84 b9       	out	0x04, r24	; 4
    128a:	8a b1       	in	r24, 0x0a	; 10
    128c:	80 6c       	ori	r24, 0xC0	; 192
    128e:	8a b9       	out	0x0a, r24	; 10
    1290:	8a b1       	in	r24, 0x0a	; 10
    1292:	83 7c       	andi	r24, 0xC3	; 195
    1294:	8a b9       	out	0x0a, r24	; 10
    1296:	8b b1       	in	r24, 0x0b	; 11
    1298:	8c 63       	ori	r24, 0x3C	; 60
    129a:	8b b9       	out	0x0b, r24	; 11
    129c:	08 95       	ret

0000129e <atraso_debounce>:
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <atraso_debounce+0x6>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	1a 82       	std	Y+2, r1	; 0x02
    12aa:	19 82       	std	Y+1, r1	; 0x01
    12ac:	05 c0       	rjmp	.+10     	; 0x12b8 <atraso_debounce+0x1a>
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	88 3e       	cpi	r24, 0xE8	; 232
    12be:	93 40       	sbci	r25, 0x03	; 3
    12c0:	b0 f3       	brcs	.-20     	; 0x12ae <atraso_debounce+0x10>
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <debounce>:
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	18 2f       	mov	r17, r24
    12d4:	c0 e0       	ldi	r28, 0x00	; 0
    12d6:	d0 e0       	ldi	r29, 0x00	; 0
    12d8:	12 c0       	rjmp	.+36     	; 0x12fe <debounce+0x32>
    12da:	0e 94 4f 09 	call	0x129e	; 0x129e <atraso_debounce>
    12de:	29 b1       	in	r18, 0x09	; 9
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	01 2e       	mov	r0, r17
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <debounce+0x20>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <debounce+0x1c>
    12f0:	82 23       	and	r24, r18
    12f2:	d8 13       	cpse	r29, r24
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <debounce+0x2e>
    12f6:	cf 5f       	subi	r28, 0xFF	; 255
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <debounce+0x30>
    12fa:	c0 e0       	ldi	r28, 0x00	; 0
    12fc:	d8 2f       	mov	r29, r24
    12fe:	c7 30       	cpi	r28, 0x07	; 7
    1300:	61 f7       	brne	.-40     	; 0x12da <debounce+0xe>
    1302:	8d 2f       	mov	r24, r29
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	08 95       	ret

0000130c <varredura>:
    130c:	cf 93       	push	r28
    130e:	85 b1       	in	r24, 0x05	; 5
    1310:	83 60       	ori	r24, 0x03	; 3
    1312:	85 b9       	out	0x05, r24	; 5
    1314:	8b b1       	in	r24, 0x0b	; 11
    1316:	80 6c       	ori	r24, 0xC0	; 192
    1318:	8b b9       	out	0x0b, r24	; 11
    131a:	85 b1       	in	r24, 0x05	; 5
    131c:	8d 7f       	andi	r24, 0xFD	; 253
    131e:	85 b9       	out	0x05, r24	; 5
    1320:	85 e0       	ldi	r24, 0x05	; 5
    1322:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    1326:	81 11       	cpse	r24, r1
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <varredura+0x26>
    132a:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    132e:	c1 e3       	ldi	r28, 0x31	; 49
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <varredura+0x28>
    1332:	c0 e0       	ldi	r28, 0x00	; 0
    1334:	84 e0       	ldi	r24, 0x04	; 4
    1336:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    133a:	81 11       	cpse	r24, r1
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <varredura+0x38>
    133e:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    1342:	c2 e3       	ldi	r28, 0x32	; 50
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    134a:	81 11       	cpse	r24, r1
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <varredura+0x48>
    134e:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    1352:	c3 e3       	ldi	r28, 0x33	; 51
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    135a:	81 11       	cpse	r24, r1
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <varredura+0x58>
    135e:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    1362:	c1 e4       	ldi	r28, 0x41	; 65
    1364:	85 b1       	in	r24, 0x05	; 5
    1366:	82 60       	ori	r24, 0x02	; 2
    1368:	85 b9       	out	0x05, r24	; 5
    136a:	85 b1       	in	r24, 0x05	; 5
    136c:	8e 7f       	andi	r24, 0xFE	; 254
    136e:	85 b9       	out	0x05, r24	; 5
    1370:	85 e0       	ldi	r24, 0x05	; 5
    1372:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    1376:	81 11       	cpse	r24, r1
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <varredura+0x74>
    137a:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    137e:	c4 e3       	ldi	r28, 0x34	; 52
    1380:	84 e0       	ldi	r24, 0x04	; 4
    1382:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    1386:	81 11       	cpse	r24, r1
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <varredura+0x84>
    138a:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    138e:	c5 e3       	ldi	r28, 0x35	; 53
    1390:	83 e0       	ldi	r24, 0x03	; 3
    1392:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    1396:	81 11       	cpse	r24, r1
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <varredura+0x94>
    139a:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    139e:	c6 e3       	ldi	r28, 0x36	; 54
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    13a6:	81 11       	cpse	r24, r1
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <varredura+0xa4>
    13aa:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    13ae:	c2 e4       	ldi	r28, 0x42	; 66
    13b0:	85 b1       	in	r24, 0x05	; 5
    13b2:	81 60       	ori	r24, 0x01	; 1
    13b4:	85 b9       	out	0x05, r24	; 5
    13b6:	8b b1       	in	r24, 0x0b	; 11
    13b8:	8f 77       	andi	r24, 0x7F	; 127
    13ba:	8b b9       	out	0x0b, r24	; 11
    13bc:	85 e0       	ldi	r24, 0x05	; 5
    13be:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    13c2:	81 11       	cpse	r24, r1
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <varredura+0xc0>
    13c6:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    13ca:	c7 e3       	ldi	r28, 0x37	; 55
    13cc:	84 e0       	ldi	r24, 0x04	; 4
    13ce:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    13d2:	81 11       	cpse	r24, r1
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <varredura+0xd0>
    13d6:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    13da:	c8 e3       	ldi	r28, 0x38	; 56
    13dc:	83 e0       	ldi	r24, 0x03	; 3
    13de:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    13e2:	81 11       	cpse	r24, r1
    13e4:	03 c0       	rjmp	.+6      	; 0x13ec <varredura+0xe0>
    13e6:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    13ea:	c9 e3       	ldi	r28, 0x39	; 57
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    13f2:	81 11       	cpse	r24, r1
    13f4:	03 c0       	rjmp	.+6      	; 0x13fc <varredura+0xf0>
    13f6:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    13fa:	c3 e4       	ldi	r28, 0x43	; 67
    13fc:	8b b1       	in	r24, 0x0b	; 11
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	8b b9       	out	0x0b, r24	; 11
    1402:	8b b1       	in	r24, 0x0b	; 11
    1404:	8f 7b       	andi	r24, 0xBF	; 191
    1406:	8b b9       	out	0x0b, r24	; 11
    1408:	85 e0       	ldi	r24, 0x05	; 5
    140a:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    140e:	81 11       	cpse	r24, r1
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <varredura+0x10c>
    1412:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    1416:	ca e2       	ldi	r28, 0x2A	; 42
    1418:	84 e0       	ldi	r24, 0x04	; 4
    141a:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    141e:	81 11       	cpse	r24, r1
    1420:	03 c0       	rjmp	.+6      	; 0x1428 <varredura+0x11c>
    1422:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    1426:	c0 e3       	ldi	r28, 0x30	; 48
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    142e:	81 11       	cpse	r24, r1
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <varredura+0x12c>
    1432:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    1436:	c3 e2       	ldi	r28, 0x23	; 35
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	0e 94 66 09 	call	0x12cc	; 0x12cc <debounce>
    143e:	81 11       	cpse	r24, r1
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <varredura+0x13c>
    1442:	0e 94 c0 02 	call	0x580	; 0x580 <resetar_timeout>
    1446:	c4 e4       	ldi	r28, 0x44	; 68
    1448:	8b b1       	in	r24, 0x0b	; 11
    144a:	80 64       	ori	r24, 0x40	; 64
    144c:	8b b9       	out	0x0b, r24	; 11
    144e:	8c 2f       	mov	r24, r28
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    1454:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    1456:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    1458:	85 e0       	ldi	r24, 0x05	; 5
    145a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    145c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    1460:	81 ef       	ldi	r24, 0xF1	; 241
    1462:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	08 c0       	rjmp	.+16     	; 0x147a <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    146a:	a9 9b       	sbis	0x15, 1	; 21
    146c:	fe cf       	rjmp	.-4      	; 0x146a <delay1ms+0x16>
		TCNT0 = 241;
    146e:	91 ef       	ldi	r25, 0xF1	; 241
    1470:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    1476:	2f 5f       	subi	r18, 0xFF	; 255
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	24 17       	cp	r18, r20
    147c:	35 07       	cpc	r19, r21
    147e:	ac f3       	brlt	.-22     	; 0x146a <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    1480:	15 bc       	out	0x25, r1	; 37
    1482:	08 95       	ret

00001484 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    1484:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    1486:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    148c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    1490:	85 ef       	ldi	r24, 0xF5	; 245
    1492:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    149a:	a9 9b       	sbis	0x15, 1	; 21
    149c:	fe cf       	rjmp	.-4      	; 0x149a <delay1us+0x16>
		TCNT0 = 245;
    149e:	95 ef       	ldi	r25, 0xF5	; 245
    14a0:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    14a2:	95 b3       	in	r25, 0x15	; 21
    14a4:	92 60       	ori	r25, 0x02	; 2
    14a6:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    14a8:	2f 5f       	subi	r18, 0xFF	; 255
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	24 17       	cp	r18, r20
    14ae:	35 07       	cpc	r19, r21
    14b0:	a4 f3       	brlt	.-24     	; 0x149a <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    14b2:	15 bc       	out	0x25, r1	; 37
    14b4:	08 95       	ret

000014b6 <__udivmodsi4>:
    14b6:	a1 e2       	ldi	r26, 0x21	; 33
    14b8:	1a 2e       	mov	r1, r26
    14ba:	aa 1b       	sub	r26, r26
    14bc:	bb 1b       	sub	r27, r27
    14be:	fd 01       	movw	r30, r26
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <__udivmodsi4_ep>

000014c2 <__udivmodsi4_loop>:
    14c2:	aa 1f       	adc	r26, r26
    14c4:	bb 1f       	adc	r27, r27
    14c6:	ee 1f       	adc	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	a2 17       	cp	r26, r18
    14cc:	b3 07       	cpc	r27, r19
    14ce:	e4 07       	cpc	r30, r20
    14d0:	f5 07       	cpc	r31, r21
    14d2:	20 f0       	brcs	.+8      	; 0x14dc <__udivmodsi4_ep>
    14d4:	a2 1b       	sub	r26, r18
    14d6:	b3 0b       	sbc	r27, r19
    14d8:	e4 0b       	sbc	r30, r20
    14da:	f5 0b       	sbc	r31, r21

000014dc <__udivmodsi4_ep>:
    14dc:	66 1f       	adc	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	1a 94       	dec	r1
    14e6:	69 f7       	brne	.-38     	; 0x14c2 <__udivmodsi4_loop>
    14e8:	60 95       	com	r22
    14ea:	70 95       	com	r23
    14ec:	80 95       	com	r24
    14ee:	90 95       	com	r25
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
    14f4:	bd 01       	movw	r22, r26
    14f6:	cf 01       	movw	r24, r30
    14f8:	08 95       	ret

000014fa <__tablejump2__>:
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	05 90       	lpm	r0, Z+
    1500:	f4 91       	lpm	r31, Z
    1502:	e0 2d       	mov	r30, r0
    1504:	09 94       	ijmp

00001506 <strcat>:
    1506:	fb 01       	movw	r30, r22
    1508:	dc 01       	movw	r26, r24
    150a:	0d 90       	ld	r0, X+
    150c:	00 20       	and	r0, r0
    150e:	e9 f7       	brne	.-6      	; 0x150a <strcat+0x4>
    1510:	11 97       	sbiw	r26, 0x01	; 1
    1512:	01 90       	ld	r0, Z+
    1514:	0d 92       	st	X+, r0
    1516:	00 20       	and	r0, r0
    1518:	e1 f7       	brne	.-8      	; 0x1512 <strcat+0xc>
    151a:	08 95       	ret

0000151c <strncat>:
    151c:	fb 01       	movw	r30, r22
    151e:	dc 01       	movw	r26, r24
    1520:	0d 90       	ld	r0, X+
    1522:	00 20       	and	r0, r0
    1524:	e9 f7       	brne	.-6      	; 0x1520 <strncat+0x4>
    1526:	11 97       	sbiw	r26, 0x01	; 1
    1528:	41 50       	subi	r20, 0x01	; 1
    152a:	50 40       	sbci	r21, 0x00	; 0
    152c:	28 f0       	brcs	.+10     	; 0x1538 <strncat+0x1c>
    152e:	01 90       	ld	r0, Z+
    1530:	00 20       	and	r0, r0
    1532:	0d 92       	st	X+, r0
    1534:	c9 f7       	brne	.-14     	; 0x1528 <strncat+0xc>
    1536:	08 95       	ret
    1538:	1c 92       	st	X, r1
    153a:	08 95       	ret

0000153c <strncpy>:
    153c:	fb 01       	movw	r30, r22
    153e:	dc 01       	movw	r26, r24
    1540:	41 50       	subi	r20, 0x01	; 1
    1542:	50 40       	sbci	r21, 0x00	; 0
    1544:	48 f0       	brcs	.+18     	; 0x1558 <strncpy+0x1c>
    1546:	01 90       	ld	r0, Z+
    1548:	0d 92       	st	X+, r0
    154a:	00 20       	and	r0, r0
    154c:	c9 f7       	brne	.-14     	; 0x1540 <strncpy+0x4>
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <strncpy+0x16>
    1550:	1d 92       	st	X+, r1
    1552:	41 50       	subi	r20, 0x01	; 1
    1554:	50 40       	sbci	r21, 0x00	; 0
    1556:	e0 f7       	brcc	.-8      	; 0x1550 <strncpy+0x14>
    1558:	08 95       	ret

0000155a <strstr>:
    155a:	fb 01       	movw	r30, r22
    155c:	51 91       	ld	r21, Z+
    155e:	55 23       	and	r21, r21
    1560:	a9 f0       	breq	.+42     	; 0x158c <strstr+0x32>
    1562:	bf 01       	movw	r22, r30
    1564:	dc 01       	movw	r26, r24
    1566:	4d 91       	ld	r20, X+
    1568:	45 17       	cp	r20, r21
    156a:	41 11       	cpse	r20, r1
    156c:	e1 f7       	brne	.-8      	; 0x1566 <strstr+0xc>
    156e:	59 f4       	brne	.+22     	; 0x1586 <strstr+0x2c>
    1570:	cd 01       	movw	r24, r26
    1572:	01 90       	ld	r0, Z+
    1574:	00 20       	and	r0, r0
    1576:	49 f0       	breq	.+18     	; 0x158a <strstr+0x30>
    1578:	4d 91       	ld	r20, X+
    157a:	40 15       	cp	r20, r0
    157c:	41 11       	cpse	r20, r1
    157e:	c9 f3       	breq	.-14     	; 0x1572 <strstr+0x18>
    1580:	fb 01       	movw	r30, r22
    1582:	41 11       	cpse	r20, r1
    1584:	ef cf       	rjmp	.-34     	; 0x1564 <strstr+0xa>
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	08 95       	ret

0000158e <_exit>:
    158e:	f8 94       	cli

00001590 <__stop_program>:
    1590:	ff cf       	rjmp	.-2      	; 0x1590 <__stop_program>
