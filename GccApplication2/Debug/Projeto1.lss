
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025e  00800100  00001dcc  00001e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009f  0080035e  0080035e  000020be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f9f  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001024  00000000  00000000  00006327  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001df4  00000000  00000000  0000734b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  00009140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b29  00000000  00000000  000098a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dd0  00000000  00000000  0000a3c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000c199  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_11>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_18>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	7b 03       	fmul	r23, r19
      6a:	8f 03       	fmulsu	r16, r23
      6c:	9c 03       	fmulsu	r17, r20
      6e:	a9 03       	fmulsu	r18, r17
      70:	dc 03       	fmulsu	r21, r20
      72:	86 04       	cpc	r8, r6
      74:	91 04       	cpc	r9, r1
      76:	9c 04       	cpc	r9, r12

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	13 e0       	ldi	r17, 0x03	; 3
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	ec ec       	ldi	r30, 0xCC	; 204
      8c:	fd e1       	ldi	r31, 0x1D	; 29
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	ae 35       	cpi	r26, 0x5E	; 94
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	23 e0       	ldi	r18, 0x03	; 3
      9c:	ae e5       	ldi	r26, 0x5E	; 94
      9e:	b3 e0       	ldi	r27, 0x03	; 3
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	ad 3f       	cpi	r26, 0xFD	; 253
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 31 03 	call	0x662	; 0x662 <main>
      ae:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <mensagem_Inicial>:
*/
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){
		LCD_limpar();
      b6:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0,1,"DIGITE QUALQUER");
      ba:	48 e0       	ldi	r20, 0x08	; 8
      bc:	51 e0       	ldi	r21, 0x01	; 1
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1,5, "TECLA");
      c6:	48 e1       	ldi	r20, 0x18	; 24
      c8:	51 e0       	ldi	r21, 0x01	; 1
      ca:	65 e0       	ldi	r22, 0x05	; 5
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
      d2:	08 95       	ret

000000d4 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      d4:	cf 93       	push	r28
      d6:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      d8:	88 b1       	in	r24, 0x08	; 8
      da:	80 7f       	andi	r24, 0xF0	; 240
      dc:	9c 2f       	mov	r25, r28
      de:	92 95       	swap	r25
      e0:	9f 70       	andi	r25, 0x0F	; 15
      e2:	89 2b       	or	r24, r25
      e4:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
      e6:	88 b1       	in	r24, 0x08	; 8
      e8:	8f 7d       	andi	r24, 0xDF	; 223
      ea:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
      ec:	88 b1       	in	r24, 0x08	; 8
      ee:	80 61       	ori	r24, 0x10	; 16
      f0:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
      f2:	88 b1       	in	r24, 0x08	; 8
      f4:	8f 7e       	andi	r24, 0xEF	; 239
      f6:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
      f8:	84 e6       	ldi	r24, 0x64	; 100
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
     100:	88 b1       	in	r24, 0x08	; 8
     102:	80 7f       	andi	r24, 0xF0	; 240
     104:	cf 70       	andi	r28, 0x0F	; 15
     106:	c8 2b       	or	r28, r24
     108:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     10a:	88 b1       	in	r24, 0x08	; 8
     10c:	80 61       	ori	r24, 0x10	; 16
     10e:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     110:	88 b1       	in	r24, 0x08	; 8
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
}
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     126:	8a e0       	ldi	r24, 0x0A	; 10
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     134:	88 e2       	ldi	r24, 0x28	; 40
     136:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     13a:	8c e0       	ldi	r24, 0x0C	; 12
     13c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     140:	86 e0       	ldi	r24, 0x06	; 6
     142:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     14c:	08 95       	ret

0000014e <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     154:	80 e8       	ldi	r24, 0x80	; 128
     156:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     15a:	08 95       	ret

0000015c <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	ec 01       	movw	r28, r24
	while(*texto) {
     162:	23 c0       	rjmp	.+70     	; 0x1aa <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     164:	98 b1       	in	r25, 0x08	; 8
     166:	90 7f       	andi	r25, 0xF0	; 240
     168:	82 95       	swap	r24
     16a:	8f 70       	andi	r24, 0x0F	; 15
     16c:	89 2b       	or	r24, r25
     16e:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     170:	88 b1       	in	r24, 0x08	; 8
     172:	80 62       	ori	r24, 0x20	; 32
     174:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     176:	88 b1       	in	r24, 0x08	; 8
     178:	80 61       	ori	r24, 0x10	; 16
     17a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     17c:	88 b1       	in	r24, 0x08	; 8
     17e:	8f 7e       	andi	r24, 0xEF	; 239
     180:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     182:	88 ec       	ldi	r24, 0xC8	; 200
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     18a:	98 b1       	in	r25, 0x08	; 8
     18c:	89 91       	ld	r24, Y+
     18e:	90 7f       	andi	r25, 0xF0	; 240
     190:	8f 70       	andi	r24, 0x0F	; 15
     192:	89 2b       	or	r24, r25
     194:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     196:	88 b1       	in	r24, 0x08	; 8
     198:	80 61       	ori	r24, 0x10	; 16
     19a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	8f 7e       	andi	r24, 0xEF	; 239
     1a0:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1aa:	88 81       	ld	r24, Y
     1ac:	81 11       	cpse	r24, r1
     1ae:	da cf       	rjmp	.-76     	; 0x164 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1bc:	81 11       	cpse	r24, r1
     1be:	08 c0       	rjmp	.+16     	; 0x1d0 <LCD_Escrever_Linha+0x1a>
     1c0:	60 31       	cpi	r22, 0x10	; 16
     1c2:	30 f4       	brcc	.+12     	; 0x1d0 <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1c4:	86 2f       	mov	r24, r22
     1c6:	8f 70       	andi	r24, 0x0F	; 15
     1c8:	80 68       	ori	r24, 0x80	; 128
     1ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	39 f4       	brne	.+14     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
     1d4:	60 31       	cpi	r22, 0x10	; 16
     1d6:	28 f4       	brcc	.+10     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1d8:	86 2f       	mov	r24, r22
     1da:	8f 70       	andi	r24, 0x0F	; 15
     1dc:	80 6c       	ori	r24, 0xC0	; 192
     1de:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     1e2:	ce 01       	movw	r24, r28
     1e4:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     1e8:	80 e8       	ldi	r24, 0x80	; 128
     1ea:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <ler_codigo_aluno>:

// Variável global para armazenar a senha validada
static char senha_validada[7] = {0};

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	00 d0       	rcall	.+0      	; 0x202 <ler_codigo_aluno+0xe>
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	7c 01       	movw	r14, r24
    int pos = 0;
    char tecla;

    LCD_limpar();
     208:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
     20c:	4e e1       	ldi	r20, 0x1E	; 30
     20e:	51 e0       	ldi	r21, 0x01	; 1
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
    LCD_Escrever_Linha(1, 0, "______");
     218:	4d e2       	ldi	r20, 0x2D	; 45
     21a:	51 e0       	ldi	r21, 0x01	; 1
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
// Variável global para armazenar a senha validada
static char senha_validada[7] = {0};

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
    int pos = 0;
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	10 e0       	ldi	r17, 0x00	; 0

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     228:	1d c0       	rjmp	.+58     	; 0x264 <ler_codigo_aluno+0x70>
        if (isBlocked()) return;
     22a:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     22e:	81 11       	cpse	r24, r1
     230:	1e c0       	rjmp	.+60     	; 0x26e <ler_codigo_aluno+0x7a>
        tecla = varredura();
     232:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <varredura>
        if (tecla >= '0' && tecla <= '9') {
     236:	90 ed       	ldi	r25, 0xD0	; 208
     238:	98 0f       	add	r25, r24
     23a:	9a 30       	cpi	r25, 0x0A	; 10
     23c:	98 f4       	brcc	.+38     	; 0x264 <ler_codigo_aluno+0x70>
            codigo[pos] = tecla;
     23e:	f7 01       	movw	r30, r14
     240:	e0 0f       	add	r30, r16
     242:	f1 1f       	adc	r31, r17
     244:	80 83       	st	Z, r24
            char temp[2] = { tecla, '\0' };
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Escrever_Linha(1, pos, temp);
     24a:	ae 01       	movw	r20, r28
     24c:	4f 5f       	subi	r20, 0xFF	; 255
     24e:	5f 4f       	sbci	r21, 0xFF	; 255
     250:	60 2f       	mov	r22, r16
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
            pos++;
     258:	0f 5f       	subi	r16, 0xFF	; 255
     25a:	1f 4f       	sbci	r17, 0xFF	; 255
            delay1ms(200);
     25c:	88 ec       	ldi	r24, 0xC8	; 200
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     264:	06 30       	cpi	r16, 0x06	; 6
     266:	11 05       	cpc	r17, r1
     268:	04 f3       	brlt	.-64     	; 0x22a <ler_codigo_aluno+0x36>
            LCD_Escrever_Linha(1, pos, temp);
            pos++;
            delay1ms(200);
        }
    }
    codigo[6] = '\0';
     26a:	f7 01       	movw	r30, r14
     26c:	16 82       	std	Z+6, r1	; 0x06
}
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	08 95       	ret

00000280 <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <ler_senha+0xe>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	7c 01       	movw	r14, r24
    int pos = 0;
    char tecla;

    LCD_limpar();
     294:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
    LCD_Escrever_Linha(0, 0, "Digite senha:");
     298:	44 e3       	ldi	r20, 0x34	; 52
     29a:	51 e0       	ldi	r21, 0x01	; 1
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
    LCD_Escrever_Linha(1, 0, "______");
     2a4:	4d e2       	ldi	r20, 0x2D	; 45
     2a6:	51 e0       	ldi	r21, 0x01	; 1
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
    codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
    int pos = 0;
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	10 e0       	ldi	r17, 0x00	; 0

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite senha:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     2b4:	1e c0       	rjmp	.+60     	; 0x2f2 <ler_senha+0x72>
        if (isBlocked()) return;
     2b6:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     2ba:	81 11       	cpse	r24, r1
     2bc:	1f c0       	rjmp	.+62     	; 0x2fc <ler_senha+0x7c>
        tecla = varredura();
     2be:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <varredura>
        if (tecla >= '0' && tecla <= '9') {
     2c2:	90 ed       	ldi	r25, 0xD0	; 208
     2c4:	98 0f       	add	r25, r24
     2c6:	9a 30       	cpi	r25, 0x0A	; 10
     2c8:	a0 f4       	brcc	.+40     	; 0x2f2 <ler_senha+0x72>
            senha[pos] = tecla;
     2ca:	f7 01       	movw	r30, r14
     2cc:	e0 0f       	add	r30, r16
     2ce:	f1 1f       	adc	r31, r17
     2d0:	80 83       	st	Z, r24
            char temp[2] = { '*', '\0' };
     2d2:	8a e2       	ldi	r24, 0x2A	; 42
     2d4:	89 83       	std	Y+1, r24	; 0x01
     2d6:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Escrever_Linha(1, pos, temp);
     2d8:	ae 01       	movw	r20, r28
     2da:	4f 5f       	subi	r20, 0xFF	; 255
     2dc:	5f 4f       	sbci	r21, 0xFF	; 255
     2de:	60 2f       	mov	r22, r16
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
            pos++;
     2e6:	0f 5f       	subi	r16, 0xFF	; 255
     2e8:	1f 4f       	sbci	r17, 0xFF	; 255
            delay1ms(200);
     2ea:	88 ec       	ldi	r24, 0xC8	; 200
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite senha:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     2f2:	06 30       	cpi	r16, 0x06	; 6
     2f4:	11 05       	cpc	r17, r1
     2f6:	fc f2       	brlt	.-66     	; 0x2b6 <ler_senha+0x36>
            LCD_Escrever_Linha(1, pos, temp);
            pos++;
            delay1ms(200);
        }
    }
    senha[6] = '\0';
     2f8:	f7 01       	movw	r30, r14
     2fa:	16 82       	std	Z+6, r1	; 0x06
}
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	08 95       	ret

0000030e <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	ae 97       	sbiw	r28, 0x2e	; 46
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
    if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     32a:	dc 01       	movw	r26, r24
     32c:	0d 90       	ld	r0, X+
     32e:	00 20       	and	r0, r0
     330:	e9 f7       	brne	.-6      	; 0x32c <validar_codigo_aluno+0x1e>
     332:	11 97       	sbiw	r26, 0x01	; 1
     334:	a8 1b       	sub	r26, r24
     336:	b9 0b       	sbc	r27, r25
     338:	16 97       	sbiw	r26, 0x06	; 6
     33a:	09 f0       	breq	.+2      	; 0x33e <validar_codigo_aluno+0x30>
     33c:	6b c0       	rjmp	.+214    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     33e:	db 01       	movw	r26, r22
     340:	0d 90       	ld	r0, X+
     342:	00 20       	and	r0, r0
     344:	e9 f7       	brne	.-6      	; 0x340 <validar_codigo_aluno+0x32>
     346:	11 97       	sbiw	r26, 0x01	; 1
     348:	a6 1b       	sub	r26, r22
     34a:	b7 0b       	sbc	r27, r23
     34c:	16 97       	sbiw	r26, 0x06	; 6
     34e:	09 f0       	breq	.+2      	; 0x352 <validar_codigo_aluno+0x44>
     350:	64 c0       	rjmp	.+200    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     352:	7b 01       	movw	r14, r22
     354:	8c 01       	movw	r16, r24

    // Armazena a senha antes de validar 
    strncpy(senha_validada, senha, 6);
     356:	46 e0       	ldi	r20, 0x06	; 6
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	8e e5       	ldi	r24, 0x5E	; 94
     35c:	93 e0       	ldi	r25, 0x03	; 3
     35e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <strncpy>
    senha_validada[6] = '\0';
     362:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <__data_end+0x6>

    char mensagem[14];
    mensagem[0] = 'C';
     366:	83 e4       	ldi	r24, 0x43	; 67
     368:	89 83       	std	Y+1, r24	; 0x01
    mensagem[1] = 'E';
     36a:	85 e4       	ldi	r24, 0x45	; 69
     36c:	8a 83       	std	Y+2, r24	; 0x02
    memcpy(&mensagem[2], codigo, 6);
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	f8 01       	movw	r30, r16
     372:	de 01       	movw	r26, r28
     374:	13 96       	adiw	r26, 0x03	; 3
     376:	01 90       	ld	r0, Z+
     378:	0d 92       	st	X+, r0
     37a:	8a 95       	dec	r24
     37c:	e1 f7       	brne	.-8      	; 0x376 <validar_codigo_aluno+0x68>
    memcpy(&mensagem[8], senha, 6);
     37e:	86 e0       	ldi	r24, 0x06	; 6
     380:	f7 01       	movw	r30, r14
     382:	de 01       	movw	r26, r28
     384:	19 96       	adiw	r26, 0x09	; 9
     386:	01 90       	ld	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	8a 95       	dec	r24
     38c:	e1 f7       	brne	.-8      	; 0x386 <validar_codigo_aluno+0x78>

    SerialEnviaChars(14, mensagem);
     38e:	be 01       	movw	r22, r28
     390:	6f 5f       	subi	r22, 0xFF	; 255
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	8e e0       	ldi	r24, 0x0E	; 14
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 28 0b 	call	0x1650	; 0x1650 <SerialEnviaChars>

    char resposta[32];
    memset(resposta, 0, sizeof(resposta));
     39c:	be 01       	movw	r22, r28
     39e:	61 5f       	subi	r22, 0xF1	; 241
     3a0:	7f 4f       	sbci	r23, 0xFF	; 255
     3a2:	80 e2       	ldi	r24, 0x20	; 32
     3a4:	db 01       	movw	r26, r22
     3a6:	1d 92       	st	X+, r1
     3a8:	8a 95       	dec	r24
     3aa:	e9 f7       	brne	.-6      	; 0x3a6 <validar_codigo_aluno+0x98>

    SerialRecebeChars(31, resposta);
     3ac:	8f e1       	ldi	r24, 0x1F	; 31
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 c6 0c 	call	0x198c	; 0x198c <SerialRecebeChars>

    LCD_limpar();
     3b4:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
    LCD_Escrever_Linha(0, 3, "Aguarde...");
     3b8:	42 e4       	ldi	r20, 0x42	; 66
     3ba:	51 e0       	ldi	r21, 0x01	; 1
     3bc:	63 e0       	ldi	r22, 0x03	; 3
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
    delay1ms(1000);
     3c4:	88 ee       	ldi	r24, 0xE8	; 232
     3c6:	93 e0       	ldi	r25, 0x03	; 3
     3c8:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
    LCD_limpar();
     3cc:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>

    if (resposta[0] == 'S' && resposta[1] == 'E') {
     3d0:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d2:	83 35       	cpi	r24, 0x53	; 83
     3d4:	a9 f4       	brne	.+42     	; 0x400 <__EEPROM_REGION_LENGTH__>
     3d6:	88 89       	ldd	r24, Y+16	; 0x10
     3d8:	85 34       	cpi	r24, 0x45	; 69
     3da:	91 f4       	brne	.+36     	; 0x400 <__EEPROM_REGION_LENGTH__>
        if (strstr(resposta, "Nao autorizado") != NULL) {
     3dc:	6d e4       	ldi	r22, 0x4D	; 77
     3de:	71 e0       	ldi	r23, 0x01	; 1
     3e0:	ce 01       	movw	r24, r28
     3e2:	0f 96       	adiw	r24, 0x0f	; 15
     3e4:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <strstr>
     3e8:	89 2b       	or	r24, r25
     3ea:	d1 f0       	breq	.+52     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
            // Se não for autorizado, limpa a senha armazenada
            memset(senha_validada, 0, sizeof(senha_validada));
     3ec:	87 e0       	ldi	r24, 0x07	; 7
     3ee:	ee e5       	ldi	r30, 0x5E	; 94
     3f0:	f3 e0       	ldi	r31, 0x03	; 3
     3f2:	df 01       	movw	r26, r30
     3f4:	1d 92       	st	X+, r1
     3f6:	8a 95       	dec	r24
     3f8:	e9 f7       	brne	.-6      	; 0x3f4 <validar_codigo_aluno+0xe6>
            return 0;
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	12 c0       	rjmp	.+36     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
            return 1;
        }
    }
    
    // Se chegou aqui, houve algum erro, limpa a senha
    memset(senha_validada, 0, sizeof(senha_validada));
     400:	87 e0       	ldi	r24, 0x07	; 7
     402:	ee e5       	ldi	r30, 0x5E	; 94
     404:	f3 e0       	ldi	r31, 0x03	; 3
     406:	df 01       	movw	r26, r30
     408:	1d 92       	st	X+, r1
     40a:	8a 95       	dec	r24
     40c:	e9 f7       	brne	.-6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
    return 0;
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	08 c0       	rjmp	.+16     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
    }
    senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
    if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	05 c0       	rjmp	.+10     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
        if (strstr(resposta, "Nao autorizado") != NULL) {
            // Se não for autorizado, limpa a senha armazenada
            memset(senha_validada, 0, sizeof(senha_validada));
            return 0;
        } else {
            return 1;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
    }
    
    // Se chegou aqui, houve algum erro, limpa a senha
    memset(senha_validada, 0, sizeof(senha_validada));
    return 0;
}
     424:	ae 96       	adiw	r28, 0x2e	; 46
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	08 95       	ret

0000043e <get_current_password>:

// Função para recuperar a senha validada
const char* get_current_password() {
    return senha_validada;
}
     43e:	8e e5       	ldi	r24, 0x5E	; 94
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	08 95       	ret

00000444 <configurar_timer>:
void configurar_timer();
void resetar_timeout();
void aguardar_desbloqueio();

void configurar_timer() {
	DDRB |= (1 << LED_PIN); // Configura pino do LED como saída
     444:	84 b1       	in	r24, 0x04	; 4
     446:	80 61       	ori	r24, 0x10	; 16
     448:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << LED_PIN); // Inicia com LED desligado
     44a:	85 b1       	in	r24, 0x05	; 5
     44c:	8f 7e       	andi	r24, 0xEF	; 239
     44e:	85 b9       	out	0x05, r24	; 5

	TCCR1A = 0; // Modo normal
     450:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // Modo CTC, prescaler 64
     454:	8b e0       	ldi	r24, 0x0B	; 11
     456:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz / 64 / 250 = 1ms)
     45a:	8a ef       	ldi	r24, 0xFA	; 250
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     462:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     466:	08 95       	ret

00000468 <desabilitar_timer_timeout>:
	TIMSK1 |= (1 << OCIE1A); // Habilita interrupção por comparação
	resetar_timeout(); // Sempre reseta o timeout ao habilitar
}

void desabilitar_timer_timeout() {
	TIMSK1 &= ~(1 << OCIE1A); // Desabilita interrupção por comparação
     468:	ef e6       	ldi	r30, 0x6F	; 111
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	8d 7f       	andi	r24, 0xFD	; 253
     470:	80 83       	st	Z, r24
	PORTB &= ~(1 << LED_PIN); // Garante que o LED esteja desligado
     472:	85 b1       	in	r24, 0x05	; 5
     474:	8f 7e       	andi	r24, 0xEF	; 239
     476:	85 b9       	out	0x05, r24	; 5
	alerta_led = 0; // Desliga o alerta
     478:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <alerta_led>
	timer_count = 0;
     47c:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <timer_count>
     480:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <timer_count+0x1>
     484:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <timer_count+0x2>
     488:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <timer_count+0x3>
     48c:	08 95       	ret

0000048e <enviar_confirmacao_operacional>:
		setBlocked(1); // Bloqueia sistema por timeout
	}
}

// Envia mensagem de confirmação operacional "CO"
void enviar_confirmacao_operacional() {
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	00 d0       	rcall	.+0      	; 0x494 <enviar_confirmacao_operacional+0x6>
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
	char confirmacao[2];
	confirmacao[0] = 'C';
     498:	83 e4       	ldi	r24, 0x43	; 67
     49a:	89 83       	std	Y+1, r24	; 0x01
	confirmacao[1] = 'O';
     49c:	8f e4       	ldi	r24, 0x4F	; 79
     49e:	8a 83       	std	Y+2, r24	; 0x02
	SerialEnviaChars(2, confirmacao); // Envia "CO" [cite: 56]
     4a0:	be 01       	movw	r22, r28
     4a2:	6f 5f       	subi	r22, 0xFF	; 255
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 28 0b 	call	0x1650	; 0x1650 <SerialEnviaChars>
}
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <__vector_11>:
	PORTB &= ~(1 << LED_PIN); // Garante que o LED esteja desligado
	alerta_led = 0; // Desliga o alerta
	timer_count = 0;
}

ISR(TIMER1_COMPA_vect) {
     4b8:	1f 92       	push	r1
     4ba:	0f 92       	push	r0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	2f 93       	push	r18
     4c4:	3f 93       	push	r19
     4c6:	4f 93       	push	r20
     4c8:	5f 93       	push	r21
     4ca:	6f 93       	push	r22
     4cc:	7f 93       	push	r23
     4ce:	8f 93       	push	r24
     4d0:	9f 93       	push	r25
     4d2:	af 93       	push	r26
     4d4:	bf 93       	push	r27
     4d6:	ef 93       	push	r30
     4d8:	ff 93       	push	r31
	timer_count++;
     4da:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <timer_count>
     4de:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <timer_count+0x1>
     4e2:	a0 91 69 03 	lds	r26, 0x0369	; 0x800369 <timer_count+0x2>
     4e6:	b0 91 6a 03 	lds	r27, 0x036A	; 0x80036a <timer_count+0x3>
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	a1 1d       	adc	r26, r1
     4ee:	b1 1d       	adc	r27, r1
     4f0:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <timer_count>
     4f4:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <timer_count+0x1>
     4f8:	a0 93 69 03 	sts	0x0369, r26	; 0x800369 <timer_count+0x2>
     4fc:	b0 93 6a 03 	sts	0x036A, r27	; 0x80036a <timer_count+0x3>

	// Verifica período de alerta
	if (timer_count >= TIMEOUT_ALERTA && timer_count < TIMEOUT_TOTAL) {
     500:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <timer_count>
     504:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <timer_count+0x1>
     508:	a0 91 69 03 	lds	r26, 0x0369	; 0x800369 <timer_count+0x2>
     50c:	b0 91 6a 03 	lds	r27, 0x036A	; 0x80036a <timer_count+0x3>
     510:	80 35       	cpi	r24, 0x50	; 80
     512:	96 44       	sbci	r25, 0x46	; 70
     514:	a1 05       	cpc	r26, r1
     516:	b1 05       	cpc	r27, r1
     518:	a0 f1       	brcs	.+104    	; 0x582 <__vector_11+0xca>
     51a:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <timer_count>
     51e:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <timer_count+0x1>
     522:	a0 91 69 03 	lds	r26, 0x0369	; 0x800369 <timer_count+0x2>
     526:	b0 91 6a 03 	lds	r27, 0x036A	; 0x80036a <timer_count+0x3>
     52a:	80 33       	cpi	r24, 0x30	; 48
     52c:	95 47       	sbci	r25, 0x75	; 117
     52e:	a1 05       	cpc	r26, r1
     530:	b1 05       	cpc	r27, r1
     532:	38 f5       	brcc	.+78     	; 0x582 <__vector_11+0xca>
		alerta_led = 1;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <alerta_led>

		// Pisca o LED 2 vezes por segundo [cite: 19]
		if (timer_count % INTERVALO_PISCA == 0) {
     53a:	60 91 67 03 	lds	r22, 0x0367	; 0x800367 <timer_count>
     53e:	70 91 68 03 	lds	r23, 0x0368	; 0x800368 <timer_count+0x1>
     542:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <timer_count+0x2>
     546:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <timer_count+0x3>
     54a:	2a ef       	ldi	r18, 0xFA	; 250
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__udivmodsi4>
     556:	67 2b       	or	r22, r23
     558:	68 2b       	or	r22, r24
     55a:	69 2b       	or	r22, r25
     55c:	91 f4       	brne	.+36     	; 0x582 <__vector_11+0xca>
			led_state = !led_state;
     55e:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <led_state>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	91 11       	cpse	r25, r1
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <led_state>
			if (led_state) {
     56c:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <led_state>
     570:	88 23       	and	r24, r24
     572:	21 f0       	breq	.+8      	; 0x57c <__vector_11+0xc4>
				PORTB |= (1 << LED_PIN); // Liga LED
     574:	85 b1       	in	r24, 0x05	; 5
     576:	80 61       	ori	r24, 0x10	; 16
     578:	85 b9       	out	0x05, r24	; 5
     57a:	03 c0       	rjmp	.+6      	; 0x582 <__vector_11+0xca>
				} else {
				PORTB &= ~(1 << LED_PIN); // Desliga LED
     57c:	85 b1       	in	r24, 0x05	; 5
     57e:	8f 7e       	andi	r24, 0xEF	; 239
     580:	85 b9       	out	0x05, r24	; 5
			}
		}
	}

	// Timeout completo (30 segundos) [cite: 17]
	if (timer_count >= TIMEOUT_TOTAL) {
     582:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <timer_count>
     586:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <timer_count+0x1>
     58a:	a0 91 69 03 	lds	r26, 0x0369	; 0x800369 <timer_count+0x2>
     58e:	b0 91 6a 03 	lds	r27, 0x036A	; 0x80036a <timer_count+0x3>
     592:	80 33       	cpi	r24, 0x30	; 48
     594:	95 47       	sbci	r25, 0x75	; 117
     596:	a1 05       	cpc	r26, r1
     598:	b1 05       	cpc	r27, r1
     59a:	a0 f0       	brcs	.+40     	; 0x5c4 <__vector_11+0x10c>
		enviar_confirmacao_operacional(); // Envia "CO"
     59c:	0e 94 47 02 	call	0x48e	; 0x48e <enviar_confirmacao_operacional>
		finalizar_sessao(); // Encerra a sessão [cite: 18]
     5a0:	0e 94 b1 0a 	call	0x1562	; 0x1562 <finalizar_sessao>
		timer_count = 0; // Reseta contador
     5a4:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <timer_count>
     5a8:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <timer_count+0x1>
     5ac:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <timer_count+0x2>
     5b0:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <timer_count+0x3>
		alerta_led = 0; // Desliga alerta
     5b4:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <alerta_led>
		PORTB &= ~(1 << LED_PIN); // Desliga LED
     5b8:	85 b1       	in	r24, 0x05	; 5
     5ba:	8f 7e       	andi	r24, 0xEF	; 239
     5bc:	85 b9       	out	0x05, r24	; 5
		setBlocked(1); // Bloqueia sistema por timeout
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	0e 94 16 0b 	call	0x162c	; 0x162c <setBlocked>
	}
}
     5c4:	ff 91       	pop	r31
     5c6:	ef 91       	pop	r30
     5c8:	bf 91       	pop	r27
     5ca:	af 91       	pop	r26
     5cc:	9f 91       	pop	r25
     5ce:	8f 91       	pop	r24
     5d0:	7f 91       	pop	r23
     5d2:	6f 91       	pop	r22
     5d4:	5f 91       	pop	r21
     5d6:	4f 91       	pop	r20
     5d8:	3f 91       	pop	r19
     5da:	2f 91       	pop	r18
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	0f 90       	pop	r0
     5e2:	1f 90       	pop	r1
     5e4:	18 95       	reti

000005e6 <resetar_timeout>:
	SerialEnviaChars(2, confirmacao); // Envia "CO" [cite: 56]
}

// Reseta contador de timeout e estado do LED
void resetar_timeout() {
	timer_count = 0;
     5e6:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <timer_count>
     5ea:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <timer_count+0x1>
     5ee:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <timer_count+0x2>
     5f2:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <timer_count+0x3>
	alerta_led = 0;
     5f6:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <alerta_led>
	PORTB &= ~(1 << LED_PIN); // Desliga LED
     5fa:	85 b1       	in	r24, 0x05	; 5
     5fc:	8f 7e       	andi	r24, 0xEF	; 239
     5fe:	85 b9       	out	0x05, r24	; 5
     600:	08 95       	ret

00000602 <habilitar_timer_timeout>:
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // Modo CTC, prescaler 64
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz / 64 / 250 = 1ms)
}

void habilitar_timer_timeout() {
	TIMSK1 |= (1 << OCIE1A); // Habilita interrupção por comparação
     602:	ef e6       	ldi	r30, 0x6F	; 111
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	80 83       	st	Z, r24
	resetar_timeout(); // Sempre reseta o timeout ao habilitar
     60c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
     610:	08 95       	ret

00000612 <aguardar_desbloqueio>:
	PORTB &= ~(1 << LED_PIN); // Desliga LED
}

// Aguarda o desbloqueio do terminal
void aguardar_desbloqueio() {
	LCD_limpar();
     612:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 4, "FORA  DE"); // Exibe "FORA DE OPERAÇÃO" [cite: 10]
     616:	4c e5       	ldi	r20, 0x5C	; 92
     618:	51 e0       	ldi	r21, 0x01	; 1
     61a:	64 e0       	ldi	r22, 0x04	; 4
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 4, "OPERACAO");
     622:	45 e6       	ldi	r20, 0x65	; 101
     624:	51 e0       	ldi	r21, 0x01	; 1
     626:	64 e0       	ldi	r22, 0x04	; 4
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	while (isBlocked()) { // Espera sistema ser desbloqueado
     62e:	12 c0       	rjmp	.+36     	; 0x654 <aguardar_desbloqueio+0x42>
		if (serial_response_pending) {
     630:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <serial_response_pending>
     634:	88 23       	and	r24, r24
     636:	51 f0       	breq	.+20     	; 0x64c <aguardar_desbloqueio+0x3a>
			SerialEnviaChars(2, serial_response_char);
     638:	6a e7       	ldi	r22, 0x7A	; 122
     63a:	73 e0       	ldi	r23, 0x03	; 3
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 28 0b 	call	0x1650	; 0x1650 <SerialEnviaChars>
			serial_response_pending = 0; // Limpa a flag
     644:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <serial_response_pending>
			resetar_timeout(); // Reseta timeout após interação serial (desbloqueio)
     648:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
		}
		delay1ms(200); // Pequeno atraso
     64c:	88 ec       	ldi	r24, 0xC8	; 200
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
// Aguarda o desbloqueio do terminal
void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 4, "FORA  DE"); // Exibe "FORA DE OPERAÇÃO" [cite: 10]
	LCD_Escrever_Linha(1, 4, "OPERACAO");
	while (isBlocked()) { // Espera sistema ser desbloqueado
     654:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     658:	81 11       	cpse	r24, r1
     65a:	ea cf       	rjmp	.-44     	; 0x630 <aguardar_desbloqueio+0x1e>
			serial_response_pending = 0; // Limpa a flag
			resetar_timeout(); // Reseta timeout após interação serial (desbloqueio)
		}
		delay1ms(200); // Pequeno atraso
	}
	LCD_limpar(); // Limpa LCD após desbloqueio
     65c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     660:	08 95       	ret

00000662 <main>:
}

int main(void) {
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	66 97       	sbiw	r28, 0x16	; 22
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     676:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <prepara_teclado>
	LCD_iniciar();
     67a:	0e 94 91 00 	call	0x122	; 0x122 <LCD_iniciar>
	initUART();
     67e:	0e 94 19 0b 	call	0x1632	; 0x1632 <initUART>
	configurar_timer(); // Apenas configura, não habilita a interrupção ainda
     682:	0e 94 22 02 	call	0x444	; 0x444 <configurar_timer>
	sei(); // Habilita interrupções globais
     686:	78 94       	sei

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
     688:	88 e0       	ldi	r24, 0x08	; 8
     68a:	e0 e0       	ldi	r30, 0x00	; 0
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	de 01       	movw	r26, r28
     690:	1f 96       	adiw	r26, 0x0f	; 15
     692:	01 90       	ld	r0, Z+
     694:	0d 92       	st	X+, r0
     696:	8a 95       	dec	r24
     698:	e1 f7       	brne	.-8      	; 0x692 <main+0x30>
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     69a:	00 e0       	ldi	r16, 0x00	; 0
     69c:	0d c0       	rjmp	.+26     	; 0x6b8 <main+0x56>
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break; // Sai se for bloqueado
			}
			if (!isBlocked()) {
				estado = ESTADO_CODIGO;
     69e:	01 e0       	ldi	r16, 0x01	; 1
     6a0:	0b c0       	rjmp	.+22     	; 0x6b8 <main+0x56>
			ler_codigo_aluno(codigo_aluno); // O cliente deve digitar seu código de aluno (6 dígitos) [cite: 5]
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_SENHA;
     6a2:	02 e0       	ldi	r16, 0x02	; 2
     6a4:	09 c0       	rjmp	.+18     	; 0x6b8 <main+0x56>
			ler_senha(senha_aluno);
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_VALIDACAO;
     6a6:	03 e0       	ldi	r16, 0x03	; 3
     6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <main+0x56>
						delay1ms(1000);
						estado = ESTADO_TELA_INICIAL;
						break;
						} else {
						switch (tecla) {
							case '1': estado = ESTADO_SAQUE; break;
     6aa:	05 e0       	ldi	r16, 0x05	; 5
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <main+0x56>
			realizar_saque(); // Saque (máximo de R$1200,00) [cite: 23]
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6ae:	04 e0       	ldi	r16, 0x04	; 4
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <main+0x56>
			realizar_pagamento(); // Payment option [cite: 23]
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6b2:	04 e0       	ldi	r16, 0x04	; 4
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <main+0x56>
			consultar_saldo();
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6b6:	04 e0       	ldi	r16, 0x04	; 4

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		// Gerencia respostas da ISR e bloqueio (crítico)
		if (serial_response_pending) {
     6b8:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <serial_response_pending>
     6bc:	88 23       	and	r24, r24
     6be:	51 f0       	breq	.+20     	; 0x6d4 <main+0x72>
			SerialEnviaChars(2, serial_response_char);
     6c0:	6a e7       	ldi	r22, 0x7A	; 122
     6c2:	73 e0       	ldi	r23, 0x03	; 3
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 28 0b 	call	0x1650	; 0x1650 <SerialEnviaChars>
			serial_response_pending = 0; // Limpa a flag após envio
     6cc:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <serial_response_pending>
			resetar_timeout(); // Reseta timeout após interação serial (útil se o timer estiver ativo)
     6d0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
		}

		// Sistema bloqueado por comando ST, SH ou timeout
		if (isBlocked()) {
     6d4:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     6d8:	88 23       	and	r24, r24
     6da:	31 f0       	breq	.+12     	; 0x6e8 <main+0x86>
			desabilitar_timer_timeout(); // Garante que o timer esteja desabilitado
     6dc:	0e 94 34 02 	call	0x468	; 0x468 <desabilitar_timer_timeout>
			aguardar_desbloqueio();
     6e0:	0e 94 09 03 	call	0x612	; 0x612 <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     6e4:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     6e6:	e8 cf       	rjmp	.-48     	; 0x6b8 <main+0x56>
		}
		
		switch (estado) {
     6e8:	80 2f       	mov	r24, r16
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	fc 01       	movw	r30, r24
     6ee:	ec 5c       	subi	r30, 0xCC	; 204
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			desabilitar_timer_timeout(); // Desabilita o timer na tela inicial
     6f6:	0e 94 34 02 	call	0x468	; 0x468 <desabilitar_timer_timeout>
			LCD_limpar();
     6fa:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			mensagem_Inicial();
     6fe:	0e 94 5b 00 	call	0xb6	; 0xb6 <mensagem_Inicial>
			while (varredura() == 0) {
     702:	04 c0       	rjmp	.+8      	; 0x70c <main+0xaa>
				if (isBlocked()) break; // Sai se for bloqueado
     704:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     708:	81 11       	cpse	r24, r1
     70a:	04 c0       	rjmp	.+8      	; 0x714 <main+0xb2>
		switch (estado) {
			case ESTADO_TELA_INICIAL:
			desabilitar_timer_timeout(); // Desabilita o timer na tela inicial
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     70c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <varredura>
     710:	88 23       	and	r24, r24
     712:	c1 f3       	breq	.-16     	; 0x704 <main+0xa2>
				if (isBlocked()) break; // Sai se for bloqueado
			}
			if (!isBlocked()) {
     714:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     718:	88 23       	and	r24, r24
     71a:	09 f2       	breq	.-126    	; 0x69e <main+0x3c>
     71c:	cd cf       	rjmp	.-102    	; 0x6b8 <main+0x56>
				estado = ESTADO_CODIGO;
			}
			break;

			case ESTADO_CODIGO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     71e:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			ler_codigo_aluno(codigo_aluno); // O cliente deve digitar seu código de aluno (6 dígitos) [cite: 5]
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ler_codigo_aluno>
			if (isBlocked()) {
     72a:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     72e:	88 23       	and	r24, r24
     730:	09 f4       	brne	.+2      	; 0x734 <main+0xd2>
     732:	b7 cf       	rjmp	.-146    	; 0x6a2 <main+0x40>
				estado = ESTADO_TELA_INICIAL;
     734:	00 e0       	ldi	r16, 0x00	; 0
     736:	c0 cf       	rjmp	.-128    	; 0x6b8 <main+0x56>
			}
			estado = ESTADO_SENHA;
			break;

			case ESTADO_SENHA:
			habilitar_timer_timeout(); // Habilita o timer aqui
     738:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			ler_senha(senha_aluno);
     73c:	ce 01       	movw	r24, r28
     73e:	08 96       	adiw	r24, 0x08	; 8
     740:	0e 94 40 01 	call	0x280	; 0x280 <ler_senha>
			if (isBlocked()) {
     744:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     748:	88 23       	and	r24, r24
     74a:	09 f4       	brne	.+2      	; 0x74e <main+0xec>
     74c:	ac cf       	rjmp	.-168    	; 0x6a6 <main+0x44>
				estado = ESTADO_TELA_INICIAL;
     74e:	00 e0       	ldi	r16, 0x00	; 0
     750:	b3 cf       	rjmp	.-154    	; 0x6b8 <main+0x56>
			}
			estado = ESTADO_VALIDACAO;
			break;

			case ESTADO_VALIDACAO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     752:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) { // O código será validado pelo servidor [cite: 5]
     756:	be 01       	movw	r22, r28
     758:	68 5f       	subi	r22, 0xF8	; 248
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	ce 01       	movw	r24, r28
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	0e 94 87 01 	call	0x30e	; 0x30e <validar_codigo_aluno>
     764:	89 2b       	or	r24, r25
     766:	a1 f0       	breq	.+40     	; 0x790 <main+0x12e>
				LCD_limpar();
     768:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "BEM VINDO(A)!");
     76c:	4e e6       	ldi	r20, 0x6E	; 110
     76e:	51 e0       	ldi	r21, 0x01	; 1
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "PROCESSANDO...");
     778:	4c e7       	ldi	r20, 0x7C	; 124
     77a:	51 e0       	ldi	r21, 0x01	; 1
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     784:	80 ed       	ldi	r24, 0xD0	; 208
     786:	97 e0       	ldi	r25, 0x07	; 7
     788:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
				estado = ESTADO_MENU; // Após validado o cliente deve-se indicar as opções permitidas [cite: 12]
     78c:	04 e0       	ldi	r16, 0x04	; 4
     78e:	94 cf       	rjmp	.-216    	; 0x6b8 <main+0x56>
				} else {
				LCD_limpar();
     790:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "CONTA INVALIDA!"); // Se o código não for válido o dispositivo exibe informação de conta inválida [cite: 6]
     794:	4b e8       	ldi	r20, 0x8B	; 139
     796:	51 e0       	ldi	r21, 0x01	; 1
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "TENTE NOVAMENTE");
     7a0:	4b e9       	ldi	r20, 0x9B	; 155
     7a2:	51 e0       	ldi	r21, 0x01	; 1
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     7ac:	80 ed       	ldi	r24, 0xD0	; 208
     7ae:	97 e0       	ldi	r25, 0x07	; 7
     7b0:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
				estado = ESTADO_TELA_INICIAL; // E volta à tela inicial [cite: 6]
     7b4:	00 e0       	ldi	r16, 0x00	; 0
     7b6:	80 cf       	rjmp	.-256    	; 0x6b8 <main+0x56>
			}
			break;

			case ESTADO_MENU:
			habilitar_timer_timeout(); // Habilita o timer aqui
     7b8:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			LCD_limpar();
     7bc:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			indice_menu = 0;
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     7c0:	4b ea       	ldi	r20, 0xAB	; 171
     7c2:	51 e0       	ldi	r21, 0x01	; 1
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes) {
				LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     7cc:	43 eb       	ldi	r20, 0xB3	; 179
     7ce:	51 e0       	ldi	r21, 0x01	; 1
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			break;

			case ESTADO_MENU:
			habilitar_timer_timeout(); // Habilita o timer aqui
			LCD_limpar();
			indice_menu = 0;
     7d8:	e1 2c       	mov	r14, r1
     7da:	f1 2c       	mov	r15, r1
				} else {
				LCD_Escrever_Linha(1, 0, " ");
			}

			while (1) {
				if (isBlocked()) break;
     7dc:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     7e0:	81 11       	cpse	r24, r1
     7e2:	6a cf       	rjmp	.-300    	; 0x6b8 <main+0x56>

				tecla = varredura();
     7e4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <varredura>
     7e8:	18 2f       	mov	r17, r24
				if (tecla != 0) {
     7ea:	88 23       	and	r24, r24
     7ec:	b9 f3       	breq	.-18     	; 0x7dc <main+0x17a>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
     7ee:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
					delay1ms(300); // Debounce
     7f2:	8c e2       	ldi	r24, 0x2C	; 44
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>

					if (tecla == 'B') { // Rolar para baixo
     7fa:	12 34       	cpi	r17, 0x42	; 66
     7fc:	c1 f5       	brne	.+112    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
						if (indice_menu < total_opcoes - 2) {
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	e8 16       	cp	r14, r24
     802:	f1 04       	cpc	r15, r1
     804:	5c f7       	brge	.-42     	; 0x7dc <main+0x17a>
							indice_menu++;
     806:	67 01       	movw	r12, r14
     808:	9f ef       	ldi	r25, 0xFF	; 255
     80a:	c9 1a       	sub	r12, r25
     80c:	d9 0a       	sbc	r13, r25
							LCD_limpar();
     80e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     812:	f6 01       	movw	r30, r12
     814:	ee 0f       	add	r30, r30
     816:	ff 1f       	adc	r31, r31
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	8c 0f       	add	r24, r28
     81e:	9d 1f       	adc	r25, r29
     820:	e8 0f       	add	r30, r24
     822:	f9 1f       	adc	r31, r25
     824:	46 85       	ldd	r20, Z+14	; 0x0e
     826:	57 85       	ldd	r21, Z+15	; 0x0f
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
							if (indice_menu + 1 < total_opcoes) {
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	e9 0e       	add	r14, r25
     834:	f1 1c       	adc	r15, r1
     836:	84 e0       	ldi	r24, 0x04	; 4
     838:	e8 16       	cp	r14, r24
     83a:	f1 04       	cpc	r15, r1
     83c:	84 f4       	brge	.+32     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     83e:	ee 0c       	add	r14, r14
     840:	ff 1c       	adc	r15, r15
     842:	e1 e0       	ldi	r30, 0x01	; 1
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	ec 0f       	add	r30, r28
     848:	fd 1f       	adc	r31, r29
     84a:	ee 0d       	add	r30, r14
     84c:	ff 1d       	adc	r31, r15
     84e:	46 85       	ldd	r20, Z+14	; 0x0e
     850:	57 85       	ldd	r21, Z+15	; 0x0f
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
					delay1ms(300); // Debounce

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) {
							indice_menu++;
     85a:	76 01       	movw	r14, r12
     85c:	bf cf       	rjmp	.-130    	; 0x7dc <main+0x17a>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							if (indice_menu + 1 < total_opcoes) {
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
     85e:	4f eb       	ldi	r20, 0xBF	; 191
     860:	51 e0       	ldi	r21, 0x01	; 1
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
					delay1ms(300); // Debounce

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) {
							indice_menu++;
     86a:	76 01       	movw	r14, r12
     86c:	b7 cf       	rjmp	.-146    	; 0x7dc <main+0x17a>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
     86e:	11 34       	cpi	r17, 0x41	; 65
     870:	49 f5       	brne	.+82     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
						if (indice_menu > 0) {
     872:	1e 14       	cp	r1, r14
     874:	1f 04       	cpc	r1, r15
     876:	0c f0       	brlt	.+2      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     878:	b1 cf       	rjmp	.-158    	; 0x7dc <main+0x17a>
							indice_menu--;
     87a:	67 01       	movw	r12, r14
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	c9 1a       	sub	r12, r25
     880:	d1 08       	sbc	r13, r1
							LCD_limpar();
     882:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     886:	f6 01       	movw	r30, r12
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	8c 0f       	add	r24, r28
     892:	9d 1f       	adc	r25, r29
     894:	e8 0f       	add	r30, r24
     896:	f9 1f       	adc	r31, r25
     898:	46 85       	ldd	r20, Z+14	; 0x0e
     89a:	57 85       	ldd	r21, Z+15	; 0x0f
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     8a4:	ee 0c       	add	r14, r14
     8a6:	ff 1c       	adc	r15, r15
     8a8:	e1 e0       	ldi	r30, 0x01	; 1
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	ec 0f       	add	r30, r28
     8ae:	fd 1f       	adc	r31, r29
     8b0:	ee 0d       	add	r30, r14
     8b2:	ff 1d       	adc	r31, r15
     8b4:	46 85       	ldd	r20, Z+14	; 0x0e
     8b6:	57 85       	ldd	r21, Z+15	; 0x0f
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
						if (indice_menu > 0) {
							indice_menu--;
     8c0:	76 01       	movw	r14, r12
     8c2:	8c cf       	rjmp	.-232    	; 0x7dc <main+0x17a>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
						}
						} else if (tecla == '*') { // Voltar para tela inicial
     8c4:	1a 32       	cpi	r17, 0x2A	; 42
     8c6:	71 f4       	brne	.+28     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
						LCD_limpar();
     8c8:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "VOLTANDO...");
     8cc:	41 ec       	ldi	r20, 0xC1	; 193
     8ce:	51 e0       	ldi	r21, 0x01	; 1
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
						delay1ms(1000);
     8d8:	88 ee       	ldi	r24, 0xE8	; 232
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
						estado = ESTADO_TELA_INICIAL;
     8e0:	00 e0       	ldi	r16, 0x00	; 0
						break;
     8e2:	ea ce       	rjmp	.-556    	; 0x6b8 <main+0x56>
						} else {
						switch (tecla) {
     8e4:	12 33       	cpi	r17, 0x32	; 50
     8e6:	51 f0       	breq	.+20     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
     8e8:	20 f4       	brcc	.+8      	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
     8ea:	11 33       	cpi	r17, 0x31	; 49
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     8ee:	dd ce       	rjmp	.-582    	; 0x6aa <main+0x48>
     8f0:	e3 ce       	rjmp	.-570    	; 0x6b8 <main+0x56>
     8f2:	13 33       	cpi	r17, 0x33	; 51
     8f4:	29 f0       	breq	.+10     	; 0x900 <__stack+0x1>
     8f6:	14 33       	cpi	r17, 0x34	; 52
     8f8:	29 f0       	breq	.+10     	; 0x904 <__stack+0x5>
     8fa:	de ce       	rjmp	.-580    	; 0x6b8 <main+0x56>
							case '1': estado = ESTADO_SAQUE; break;
							case '2': estado = ESTADO_PAGAMENTO; break; // Modified to go to ESTADO_PAGAMENTO
     8fc:	06 e0       	ldi	r16, 0x06	; 6
     8fe:	dc ce       	rjmp	.-584    	; 0x6b8 <main+0x56>
							case '3': estado = ESTADO_SALDO; break;
     900:	07 e0       	ldi	r16, 0x07	; 7
     902:	da ce       	rjmp	.-588    	; 0x6b8 <main+0x56>
							case '4': // Sair
							finalizar_sessao();
     904:	0e 94 b1 0a 	call	0x1562	; 0x1562 <finalizar_sessao>
							estado = ESTADO_TELA_INICIAL;
     908:	00 e0       	ldi	r16, 0x00	; 0
							break;
     90a:	d6 ce       	rjmp	.-596    	; 0x6b8 <main+0x56>
				}
			}
			break;

			case ESTADO_SAQUE:
			habilitar_timer_timeout(); // Habilita o timer aqui
     90c:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			realizar_saque(); // Saque (máximo de R$1200,00) [cite: 23]
     910:	0e 94 0a 06 	call	0xc14	; 0xc14 <realizar_saque>
			if (isBlocked()) {
     914:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     918:	88 23       	and	r24, r24
     91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0x1f>
     91c:	c8 ce       	rjmp	.-624    	; 0x6ae <main+0x4c>
				estado = ESTADO_TELA_INICIAL;
     91e:	00 e0       	ldi	r16, 0x00	; 0
     920:	cb ce       	rjmp	.-618    	; 0x6b8 <main+0x56>
			}
			estado = ESTADO_MENU;
			break;

			case ESTADO_PAGAMENTO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     922:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			realizar_pagamento(); // Payment option [cite: 23]
     926:	0e 94 02 09 	call	0x1204	; 0x1204 <realizar_pagamento>
			if (isBlocked()) {
     92a:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     92e:	88 23       	and	r24, r24
     930:	09 f4       	brne	.+2      	; 0x934 <__stack+0x35>
     932:	bf ce       	rjmp	.-642    	; 0x6b2 <main+0x50>
				estado = ESTADO_TELA_INICIAL;
     934:	00 e0       	ldi	r16, 0x00	; 0
     936:	c0 ce       	rjmp	.-640    	; 0x6b8 <main+0x56>
			}
			estado = ESTADO_MENU;
			break;

			case ESTADO_SALDO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     938:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			consultar_saldo();
     93c:	0e 94 39 07 	call	0xe72	; 0xe72 <consultar_saldo>
			if (isBlocked()) {
     940:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     944:	88 23       	and	r24, r24
     946:	09 f4       	brne	.+2      	; 0x94a <__stack+0x4b>
     948:	b6 ce       	rjmp	.-660    	; 0x6b6 <main+0x54>
				estado = ESTADO_TELA_INICIAL;
     94a:	00 e0       	ldi	r16, 0x00	; 0
     94c:	b5 ce       	rjmp	.-662    	; 0x6b8 <main+0x56>

0000094e <confirmar_senha>:
#include "LCD.h"
#include "teclado.h"
#include "serial.h"
#include "timers.h"

uint8_t confirmar_senha(const char* senha_atual) {
     94e:	cf 92       	push	r12
     950:	df 92       	push	r13
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	27 97       	sbiw	r28, 0x07	; 7
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	6c 01       	movw	r12, r24
	char senha_confirmacao[7] = {0};
     96e:	fe 01       	movw	r30, r28
     970:	31 96       	adiw	r30, 0x01	; 1
     972:	87 e0       	ldi	r24, 0x07	; 7
     974:	df 01       	movw	r26, r30
     976:	1d 92       	st	X+, r1
     978:	8a 95       	dec	r24
     97a:	e9 f7       	brne	.-6      	; 0x976 <confirmar_senha+0x28>
	int pos = 0;
	char tecla;

	LCD_limpar();
     97c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Confirme a senha:");
     980:	4c ed       	ldi	r20, 0xDC	; 220
     982:	51 e0       	ldi	r21, 0x01	; 1
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     98c:	4d e2       	ldi	r20, 0x2D	; 45
     98e:	51 e0       	ldi	r21, 0x01	; 1
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
#include "serial.h"
#include "timers.h"

uint8_t confirmar_senha(const char* senha_atual) {
	char senha_confirmacao[7] = {0};
	int pos = 0;
     998:	e1 2c       	mov	r14, r1
     99a:	f1 2c       	mov	r15, r1
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Confirme a senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while(1) {
		if (isBlocked()) {
     99c:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     9a0:	18 2f       	mov	r17, r24
     9a2:	88 23       	and	r24, r24
     9a4:	a1 f0       	breq	.+40     	; 0x9ce <confirmar_senha+0x80>
			LCD_limpar();
     9a6:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     9aa:	4e ee       	ldi	r20, 0xEE	; 238
     9ac:	51 e0       	ldi	r21, 0x01	; 1
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     9b6:	4b ef       	ldi	r20, 0xFB	; 251
     9b8:	51 e0       	ldi	r21, 0x01	; 1
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     9c2:	80 ed       	ldi	r24, 0xD0	; 208
     9c4:	97 e0       	ldi	r25, 0x07	; 7
     9c6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return 0;
     9ca:	10 e0       	ldi	r17, 0x00	; 0
     9cc:	71 c0       	rjmp	.+226    	; 0xab0 <confirmar_senha+0x162>
		}

		tecla = varredura();
     9ce:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < 6) {
     9d2:	90 ed       	ldi	r25, 0xD0	; 208
     9d4:	98 0f       	add	r25, r24
     9d6:	9a 30       	cpi	r25, 0x0A	; 10
     9d8:	c8 f4       	brcc	.+50     	; 0xa0c <confirmar_senha+0xbe>
     9da:	b6 e0       	ldi	r27, 0x06	; 6
     9dc:	eb 16       	cp	r14, r27
     9de:	f1 04       	cpc	r15, r1
     9e0:	ac f4       	brge	.+42     	; 0xa0c <confirmar_senha+0xbe>
			senha_confirmacao[pos] = tecla;
     9e2:	e1 e0       	ldi	r30, 0x01	; 1
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	ec 0f       	add	r30, r28
     9e8:	fd 1f       	adc	r31, r29
     9ea:	ee 0d       	add	r30, r14
     9ec:	ff 1d       	adc	r31, r15
     9ee:	80 83       	st	Z, r24
			LCD_Escrever_Linha(1, pos, "*"); // Display exibe * no lugar dos caracteres digitados [cite: 14]
     9f0:	49 e0       	ldi	r20, 0x09	; 9
     9f2:	52 e0       	ldi	r21, 0x02	; 2
     9f4:	6e 2d       	mov	r22, r14
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	e8 1a       	sub	r14, r24
     a00:	f8 0a       	sbc	r15, r24
			delay1ms(200);
     a02:	88 ec       	ldi	r24, 0xC8	; 200
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
     a0a:	c8 cf       	rjmp	.-112    	; 0x99c <confirmar_senha+0x4e>
			} else if(tecla == '#') {
     a0c:	83 32       	cpi	r24, 0x23	; 35
     a0e:	c9 f5       	brne	.+114    	; 0xa82 <confirmar_senha+0x134>
			senha_confirmacao[pos] = '\0';
     a10:	e1 e0       	ldi	r30, 0x01	; 1
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	ec 0f       	add	r30, r28
     a16:	fd 1f       	adc	r31, r29
     a18:	ee 0d       	add	r30, r14
     a1a:	ff 1d       	adc	r31, r15
     a1c:	10 82       	st	Z, r1
			
			if(strcmp(senha_confirmacao, senha_atual) == 0) {
     a1e:	b6 01       	movw	r22, r12
     a20:	ce 01       	movw	r24, r28
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <strcmp>
     a28:	89 2b       	or	r24, r25
     a2a:	09 f4       	brne	.+2      	; 0xa2e <confirmar_senha+0xe0>
     a2c:	40 c0       	rjmp	.+128    	; 0xaae <confirmar_senha+0x160>
				return 1;
				} else {
				LCD_limpar();
     a2e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Senha incorreta!");
     a32:	4b e0       	ldi	r20, 0x0B	; 11
     a34:	52 e0       	ldi	r21, 0x02	; 2
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente novamente");
     a3e:	4c e1       	ldi	r20, 0x1C	; 28
     a40:	52 e0       	ldi	r21, 0x02	; 2
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     a4a:	80 ed       	ldi	r24, 0xD0	; 208
     a4c:	97 e0       	ldi	r25, 0x07	; 7
     a4e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
				
				LCD_limpar();
     a52:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Confirme a senha:");
     a56:	4c ed       	ldi	r20, 0xDC	; 220
     a58:	51 e0       	ldi	r21, 0x01	; 1
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "______");
     a62:	4d e2       	ldi	r20, 0x2D	; 45
     a64:	51 e0       	ldi	r21, 0x01	; 1
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				pos = 0;
				memset(senha_confirmacao, 0, sizeof(senha_confirmacao));
     a6e:	fe 01       	movw	r30, r28
     a70:	31 96       	adiw	r30, 0x01	; 1
     a72:	87 e0       	ldi	r24, 0x07	; 7
     a74:	df 01       	movw	r26, r30
     a76:	1d 92       	st	X+, r1
     a78:	8a 95       	dec	r24
     a7a:	e9 f7       	brne	.-6      	; 0xa76 <confirmar_senha+0x128>
				delay1ms(2000);
				
				LCD_limpar();
				LCD_Escrever_Linha(0, 0, "Confirme a senha:");
				LCD_Escrever_Linha(1, 0, "______");
				pos = 0;
     a7c:	e1 2c       	mov	r14, r1
     a7e:	f1 2c       	mov	r15, r1
     a80:	8d cf       	rjmp	.-230    	; 0x99c <confirmar_senha+0x4e>
				memset(senha_confirmacao, 0, sizeof(senha_confirmacao));
			}
			} else if(tecla == '*') {
     a82:	8a 32       	cpi	r24, 0x2A	; 42
     a84:	09 f0       	breq	.+2      	; 0xa88 <confirmar_senha+0x13a>
     a86:	8a cf       	rjmp	.-236    	; 0x99c <confirmar_senha+0x4e>
			LCD_limpar();
     a88:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
     a8c:	4c e2       	ldi	r20, 0x2C	; 44
     a8e:	52 e0       	ldi	r21, 0x02	; 2
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
     a98:	45 e3       	ldi	r20, 0x35	; 53
     a9a:	52 e0       	ldi	r21, 0x02	; 2
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     aa4:	80 ed       	ldi	r24, 0xD0	; 208
     aa6:	97 e0       	ldi	r25, 0x07	; 7
     aa8:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return 0;
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <confirmar_senha+0x162>
			delay1ms(200);
			} else if(tecla == '#') {
			senha_confirmacao[pos] = '\0';
			
			if(strcmp(senha_confirmacao, senha_atual) == 0) {
				return 1;
     aae:	11 e0       	ldi	r17, 0x01	; 1
			LCD_Escrever_Linha(1, 0, "cancelada");
			delay1ms(2000);
			return 0;
		}
	}
}
     ab0:	81 2f       	mov	r24, r17
     ab2:	27 96       	adiw	r28, 0x07	; 7
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	08 95       	ret

00000ace <perguntar_comprovante>:

// Pergunta sobre comprovante
void perguntar_comprovante() {
	LCD_limpar();
     ace:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Deseja comprovante?");
     ad2:	4f e3       	ldi	r20, 0x3F	; 63
     ad4:	52 e0       	ldi	r21, 0x02	; 2
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "1-Sim 2-Nao");
     ade:	43 e5       	ldi	r20, 0x53	; 83
     ae0:	52 e0       	ldi	r21, 0x02	; 2
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>

	while(1) {
		if (isBlocked()) {
     aea:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     aee:	88 23       	and	r24, r24
     af0:	99 f0       	breq	.+38     	; 0xb18 <perguntar_comprovante+0x4a>
			LCD_limpar();
     af2:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     af6:	4e ee       	ldi	r20, 0xEE	; 238
     af8:	51 e0       	ldi	r21, 0x01	; 1
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     b02:	4b ef       	ldi	r20, 0xFB	; 251
     b04:	51 e0       	ldi	r21, 0x01	; 1
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     b0e:	80 ed       	ldi	r24, 0xD0	; 208
     b10:	97 e0       	ldi	r25, 0x07	; 7
     b12:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return;
     b16:	08 95       	ret
		}

		char tecla = varredura();
     b18:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <varredura>
		if(tecla == '1') {
     b1c:	81 33       	cpi	r24, 0x31	; 49
     b1e:	99 f4       	brne	.+38     	; 0xb46 <perguntar_comprovante+0x78>
			LCD_limpar();
     b20:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Comprovante em");
     b24:	4f e5       	ldi	r20, 0x5F	; 95
     b26:	52 e0       	ldi	r21, 0x02	; 2
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "desenvolvimento");
     b30:	4e e6       	ldi	r20, 0x6E	; 110
     b32:	52 e0       	ldi	r21, 0x02	; 2
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     b3c:	80 ed       	ldi	r24, 0xD0	; 208
     b3e:	97 e0       	ldi	r25, 0x07	; 7
     b40:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return;
     b44:	08 95       	ret
			} else if(tecla == '2') {
     b46:	82 33       	cpi	r24, 0x32	; 50
     b48:	81 f6       	brne	.-96     	; 0xaea <perguntar_comprovante+0x1c>
     b4a:	08 95       	ret

00000b4c <enviar_mensagem_saque>:
		}
	}
}

// Envia mensagem de saque
void enviar_mensagem_saque(const char* valor) {
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	bc 01       	movw	r22, r24
	mensagem[0] = 'C';
	mensagem[1] = 'S';
	mensagem[2] = (char)tamanho_valor; // Número de bytes que seguem [cite: 47]
	memcpy(&mensagem[3], valor, tamanho_valor);
	SerialEnviaChars(3 + tamanho_valor, mensagem);
}
     b62:	ed b6       	in	r14, 0x3d	; 61
     b64:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Envia mensagem de saque
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
     b66:	fc 01       	movw	r30, r24
     b68:	01 90       	ld	r0, Z+
     b6a:	00 20       	and	r0, r0
     b6c:	e9 f7       	brne	.-6      	; 0xb68 <enviar_mensagem_saque+0x1c>
     b6e:	31 97       	sbiw	r30, 0x01	; 1
     b70:	af 01       	movw	r20, r30
     b72:	48 1b       	sub	r20, r24
     b74:	59 0b       	sbc	r21, r25

	// A mensagem deve conter 'C', 'S', n (tamanho do valor), e o valor [cite: 46]
	// O valor é enviado como uma string de dígitos. Ex: R$50,00 é "5000" [cite: 46]
	char mensagem[3 + tamanho_valor]; // 2 bytes de cabeçalho + 1 byte de tamanho + N bytes do valor
     b76:	6a 01       	movw	r12, r20
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	c8 0e       	add	r12, r24
     b7c:	d1 1c       	adc	r13, r1
     b7e:	ed b7       	in	r30, 0x3d	; 61
     b80:	fe b7       	in	r31, 0x3e	; 62
     b82:	ec 19       	sub	r30, r12
     b84:	fd 09       	sbc	r31, r13
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	fe bf       	out	0x3e, r31	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	ed bf       	out	0x3d, r30	; 61
     b90:	0d b7       	in	r16, 0x3d	; 61
     b92:	1e b7       	in	r17, 0x3e	; 62
     b94:	0f 5f       	subi	r16, 0xFF	; 255
     b96:	1f 4f       	sbci	r17, 0xFF	; 255
	mensagem[0] = 'C';
     b98:	83 e4       	ldi	r24, 0x43	; 67
     b9a:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S';
     b9c:	83 e5       	ldi	r24, 0x53	; 83
     b9e:	f8 01       	movw	r30, r16
     ba0:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor; // Número de bytes que seguem [cite: 47]
     ba2:	42 83       	std	Z+2, r20	; 0x02
	memcpy(&mensagem[3], valor, tamanho_valor);
     ba4:	8d b7       	in	r24, 0x3d	; 61
     ba6:	9e b7       	in	r25, 0x3e	; 62
     ba8:	04 96       	adiw	r24, 0x04	; 4
     baa:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <memcpy>
	SerialEnviaChars(3 + tamanho_valor, mensagem);
     bae:	b8 01       	movw	r22, r16
     bb0:	c6 01       	movw	r24, r12
     bb2:	0e 94 28 0b 	call	0x1650	; 0x1650 <SerialEnviaChars>
}
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	fe be       	out	0x3e, r15	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	ed be       	out	0x3d, r14	; 61
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
     bd0:	08 95       	ret

00000bd2 <receber_resposta_saque>:

// Recebe resposta do servidor para saque
char receber_resposta_saque(void) {
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <receber_resposta_saque+0x6>
     bd8:	00 d0       	rcall	.+0      	; 0xbda <receber_resposta_saque+0x8>
     bda:	1f 92       	push	r1
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
	char resposta[5]; // SS + 1 byte de status (O/I) + '\0'
	SerialRecebeChars(3, resposta); // Espera 3 bytes: 'S', 'S', Status (O/I) [cite: 46]
     be0:	be 01       	movw	r22, r28
     be2:	6f 5f       	subi	r22, 0xFF	; 255
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 c6 0c 	call	0x198c	; 0x198c <SerialRecebeChars>
	if(resposta[0] == 'S' && resposta[1] == 'S') {
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	83 35       	cpi	r24, 0x53	; 83
     bf2:	29 f4       	brne	.+10     	; 0xbfe <receber_resposta_saque+0x2c>
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	83 35       	cpi	r24, 0x53	; 83
     bf8:	21 f4       	brne	.+8      	; 0xc02 <receber_resposta_saque+0x30>
		return resposta[2]; // Retorna 'O' (OK) ou 'I' (Saldo Insuficiente) [cite: 46]
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	03 c0       	rjmp	.+6      	; 0xc04 <receber_resposta_saque+0x32>
	}
	return 'E'; // Erro
     bfe:	85 e4       	ldi	r24, 0x45	; 69
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <receber_resposta_saque+0x32>
     c02:	85 e4       	ldi	r24, 0x45	; 69
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <realizar_saque>:
		}
	}
}

// Realiza um saque (máximo de R$1200,00) [cite: 23]
void realizar_saque(void) {
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	29 97       	sbiw	r28, 0x09	; 9
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
     c2c:	fe 01       	movw	r30, r28
     c2e:	31 96       	adiw	r30, 0x01	; 1
     c30:	87 e0       	ldi	r24, 0x07	; 7
     c32:	df 01       	movw	r26, r30
     c34:	1d 92       	st	X+, r1
     c36:	8a 95       	dec	r24
     c38:	e9 f7       	brne	.-6      	; 0xc34 <realizar_saque+0x20>
	int pos = 0;
	char tecla;

	LCD_limpar();
     c3a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
     c3e:	4e e7       	ldi	r20, 0x7E	; 126
     c40:	52 e0       	ldi	r21, 0x02	; 2
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
     c4a:	4e e8       	ldi	r20, 0x8E	; 142
     c4c:	52 e0       	ldi	r21, 0x02	; 2
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
}

// Realiza um saque (máximo de R$1200,00) [cite: 23]
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
     c56:	00 e0       	ldi	r16, 0x00	; 0
     c58:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		// Verifica bloqueio durante a entrada do valor
		if (isBlocked()) {
     c5a:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     c5e:	88 23       	and	r24, r24
     c60:	99 f0       	breq	.+38     	; 0xc88 <realizar_saque+0x74>
			LCD_limpar();
     c62:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     c66:	4e ee       	ldi	r20, 0xEE	; 238
     c68:	51 e0       	ldi	r21, 0x01	; 1
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     c72:	4b ef       	ldi	r20, 0xFB	; 251
     c74:	51 e0       	ldi	r21, 0x01	; 1
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     c7e:	80 ed       	ldi	r24, 0xD0	; 208
     c80:	97 e0       	ldi	r25, 0x07	; 7
     c82:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return;
     c86:	ea c0       	rjmp	.+468    	; 0xe5c <realizar_saque+0x248>
		}

		tecla = varredura();
     c88:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     c8c:	90 ed       	ldi	r25, 0xD0	; 208
     c8e:	98 0f       	add	r25, r24
     c90:	9a 30       	cpi	r25, 0x0A	; 10
     c92:	d8 f4       	brcc	.+54     	; 0xcca <realizar_saque+0xb6>
     c94:	06 30       	cpi	r16, 0x06	; 6
     c96:	11 05       	cpc	r17, r1
     c98:	c4 f4       	brge	.+48     	; 0xcca <realizar_saque+0xb6>
			valor_saque[pos] = tecla;
     c9a:	e1 e0       	ldi	r30, 0x01	; 1
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	ec 0f       	add	r30, r28
     ca0:	fd 1f       	adc	r31, r29
     ca2:	e0 0f       	add	r30, r16
     ca4:	f1 1f       	adc	r31, r17
     ca6:	80 83       	st	Z, r24
			char str[2] = {tecla, '\0'};
     ca8:	88 87       	std	Y+8, r24	; 0x08
     caa:	19 86       	std	Y+9, r1	; 0x09
			LCD_Escrever_Linha(1, 2 + pos, str);
     cac:	62 e0       	ldi	r22, 0x02	; 2
     cae:	60 0f       	add	r22, r16
     cb0:	ae 01       	movw	r20, r28
     cb2:	48 5f       	subi	r20, 0xF8	; 248
     cb4:	5f 4f       	sbci	r21, 0xFF	; 255
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     cbc:	0f 5f       	subi	r16, 0xFF	; 255
     cbe:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     cc0:	88 ec       	ldi	r24, 0xC8	; 200
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return;
		}

		tecla = varredura();

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     cc8:	c8 cf       	rjmp	.-112    	; 0xc5a <realizar_saque+0x46>
			valor_saque[pos] = tecla;
			char str[2] = {tecla, '\0'};
			LCD_Escrever_Linha(1, 2 + pos, str);
			pos++;
			delay1ms(200);
			} else if(tecla == '#' && pos > 0) {
     cca:	83 32       	cpi	r24, 0x23	; 35
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <realizar_saque+0xbc>
     cce:	b1 c0       	rjmp	.+354    	; 0xe32 <realizar_saque+0x21e>
     cd0:	10 16       	cp	r1, r16
     cd2:	11 06       	cpc	r1, r17
     cd4:	0c f0       	brlt	.+2      	; 0xcd8 <realizar_saque+0xc4>
     cd6:	ad c0       	rjmp	.+346    	; 0xe32 <realizar_saque+0x21e>
			valor_saque[pos] = '\0';
     cd8:	e1 e0       	ldi	r30, 0x01	; 1
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	ec 0f       	add	r30, r28
     cde:	fd 1f       	adc	r31, r29
     ce0:	e0 0f       	add	r30, r16
     ce2:	f1 1f       	adc	r31, r17
     ce4:	10 82       	st	Z, r1

			// Verifica bloqueio antes de enviar a mensagem
			if (isBlocked()) {
     ce6:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     cea:	88 23       	and	r24, r24
     cec:	99 f0       	breq	.+38     	; 0xd14 <realizar_saque+0x100>
				LCD_limpar();
     cee:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     cf2:	4e ee       	ldi	r20, 0xEE	; 238
     cf4:	51 e0       	ldi	r21, 0x01	; 1
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     cfe:	4b ef       	ldi	r20, 0xFB	; 251
     d00:	51 e0       	ldi	r21, 0x01	; 1
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     d0a:	80 ed       	ldi	r24, 0xD0	; 208
     d0c:	97 e0       	ldi	r25, 0x07	; 7
     d0e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
				return;
     d12:	a4 c0       	rjmp	.+328    	; 0xe5c <realizar_saque+0x248>
			}
			
			long valor_numerico = atol(valor_saque);
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <atol>
			if (valor_numerico > 120000L) { // Limite de R$1200,00 (valor_numerico * 100 para ter 2 casas decimais)
     d1c:	61 3c       	cpi	r22, 0xC1	; 193
     d1e:	74 4d       	sbci	r23, 0xD4	; 212
     d20:	81 40       	sbci	r24, 0x01	; 1
     d22:	91 05       	cpc	r25, r1
     d24:	54 f1       	brlt	.+84     	; 0xd7a <realizar_saque+0x166>
				LCD_limpar();
     d26:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Limite máximo");
     d2a:	41 e9       	ldi	r20, 0x91	; 145
     d2c:	52 e0       	ldi	r21, 0x02	; 2
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "R$ 1200,00");
     d36:	4f e9       	ldi	r20, 0x9F	; 159
     d38:	52 e0       	ldi	r21, 0x02	; 2
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     d42:	80 ed       	ldi	r24, 0xD0	; 208
     d44:	97 e0       	ldi	r25, 0x07	; 7
     d46:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
				
				LCD_limpar();
     d4a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Valor do saque:");
     d4e:	4e e7       	ldi	r20, 0x7E	; 126
     d50:	52 e0       	ldi	r21, 0x02	; 2
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "R$");
     d5a:	4e e8       	ldi	r20, 0x8E	; 142
     d5c:	52 e0       	ldi	r21, 0x02	; 2
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				pos = 0;
				memset(valor_saque, 0, sizeof(valor_saque));
     d66:	fe 01       	movw	r30, r28
     d68:	31 96       	adiw	r30, 0x01	; 1
     d6a:	87 e0       	ldi	r24, 0x07	; 7
     d6c:	df 01       	movw	r26, r30
     d6e:	1d 92       	st	X+, r1
     d70:	8a 95       	dec	r24
     d72:	e9 f7       	brne	.-6      	; 0xd6e <realizar_saque+0x15a>
				delay1ms(2000);
				
				LCD_limpar();
				LCD_Escrever_Linha(0, 0, "Valor do saque:");
				LCD_Escrever_Linha(1, 0, "R$");
				pos = 0;
     d74:	00 e0       	ldi	r16, 0x00	; 0
     d76:	10 e0       	ldi	r17, 0x00	; 0
				memset(valor_saque, 0, sizeof(valor_saque));
				continue;
     d78:	70 cf       	rjmp	.-288    	; 0xc5a <realizar_saque+0x46>
			}
			
			// Confirmação de senha antes de prosseguir
			if(!confirmar_senha(get_current_password())) {
     d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <get_current_password>
     d7e:	0e 94 a7 04 	call	0x94e	; 0x94e <confirmar_senha>
     d82:	88 23       	and	r24, r24
     d84:	09 f4       	brne	.+2      	; 0xd88 <realizar_saque+0x174>
     d86:	6a c0       	rjmp	.+212    	; 0xe5c <realizar_saque+0x248>
				break; // Sai se a senha não for confirmada
			}
			
			enviar_mensagem_saque(valor_saque); // Cada operação solicitada deve ser enviada ao aplicativo externo [cite: 12]
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <enviar_mensagem_saque>
			
			// Verifica bloqueio antes de receber resposta
			if (isBlocked()) {
     d90:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     d94:	88 23       	and	r24, r24
     d96:	99 f0       	breq	.+38     	; 0xdbe <realizar_saque+0x1aa>
				LCD_limpar();
     d98:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     d9c:	4e ee       	ldi	r20, 0xEE	; 238
     d9e:	51 e0       	ldi	r21, 0x01	; 1
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     da8:	4b ef       	ldi	r20, 0xFB	; 251
     daa:	51 e0       	ldi	r21, 0x01	; 1
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     db4:	80 ed       	ldi	r24, 0xD0	; 208
     db6:	97 e0       	ldi	r25, 0x07	; 7
     db8:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
				return;
     dbc:	4f c0       	rjmp	.+158    	; 0xe5c <realizar_saque+0x248>
			}
			
			char resposta = receber_resposta_saque(); // O aplicativo externo retorna se foi aceita ou não e os resultados da operação pedida [cite: 12]
     dbe:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <receber_resposta_saque>
     dc2:	18 2f       	mov	r17, r24

			LCD_limpar();
     dc4:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			if(resposta == 'O') { // 'O' para OK [cite: 46]
     dc8:	1f 34       	cpi	r17, 0x4F	; 79
     dca:	99 f4       	brne	.+38     	; 0xdf2 <realizar_saque+0x1de>
				LCD_Escrever_Linha(0, 0, "Saque");
     dcc:	4d ea       	ldi	r20, 0xAD	; 173
     dce:	51 e0       	ldi	r21, 0x01	; 1
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Realizado!");
     dd8:	4a ea       	ldi	r20, 0xAA	; 170
     dda:	52 e0       	ldi	r21, 0x02	; 2
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     de4:	80 ed       	ldi	r24, 0xD0	; 208
     de6:	97 e0       	ldi	r25, 0x07	; 7
     de8:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
				perguntar_comprovante(); // Permite ao cliente a opção de emitir comprovante [cite: 15]
     dec:	0e 94 67 05 	call	0xace	; 0xace <perguntar_comprovante>
     df0:	1b c0       	rjmp	.+54     	; 0xe28 <realizar_saque+0x214>
				} else if (resposta == 'I') { // 'I' para Saldo Insuficiente [cite: 46]
     df2:	19 34       	cpi	r17, 0x49	; 73
     df4:	69 f4       	brne	.+26     	; 0xe10 <realizar_saque+0x1fc>
				LCD_Escrever_Linha(0, 0, "Saldo");
     df6:	4f ec       	ldi	r20, 0xCF	; 207
     df8:	51 e0       	ldi	r21, 0x01	; 1
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "insuficiente");
     e02:	45 eb       	ldi	r20, 0xB5	; 181
     e04:	52 e0       	ldi	r21, 0x02	; 2
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
     e0e:	0c c0       	rjmp	.+24     	; 0xe28 <realizar_saque+0x214>
				} else {
				LCD_Escrever_Linha(0, 0, "Erro na");
     e10:	42 ec       	ldi	r20, 0xC2	; 194
     e12:	52 e0       	ldi	r21, 0x02	; 2
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "operacao");
     e1c:	4a ec       	ldi	r20, 0xCA	; 202
     e1e:	52 e0       	ldi	r21, 0x02	; 2
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			}
			delay1ms(3000);
     e28:	88 eb       	ldi	r24, 0xB8	; 184
     e2a:	9b e0       	ldi	r25, 0x0B	; 11
     e2c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			break;
     e30:	15 c0       	rjmp	.+42     	; 0xe5c <realizar_saque+0x248>
			} else if(tecla == '*') {
     e32:	8a 32       	cpi	r24, 0x2A	; 42
     e34:	09 f0       	breq	.+2      	; 0xe38 <realizar_saque+0x224>
     e36:	11 cf       	rjmp	.-478    	; 0xc5a <realizar_saque+0x46>
			LCD_limpar();
     e38:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
     e3c:	4c e2       	ldi	r20, 0x2C	; 44
     e3e:	52 e0       	ldi	r21, 0x02	; 2
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
     e48:	45 e3       	ldi	r20, 0x35	; 53
     e4a:	52 e0       	ldi	r21, 0x02	; 2
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     e54:	80 ed       	ldi	r24, 0xD0	; 208
     e56:	97 e0       	ldi	r25, 0x07	; 7
     e58:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			break;
		}
	}
}
     e5c:	29 96       	adiw	r28, 0x09	; 9
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	08 95       	ret

00000e72 <consultar_saldo>:
	}
	return 'E'; // Erro
}

// Consulta saldo
void consultar_saldo(void) {
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	a9 97       	sbiw	r28, 0x29	; 41
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
	// Primeiro verifica a senha
	if(!confirmar_senha(get_current_password())) { // Exige confirmação de senha [cite: 13]
     e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <get_current_password>
     e92:	0e 94 a7 04 	call	0x94e	; 0x94e <confirmar_senha>
     e96:	81 11       	cpse	r24, r1
     e98:	13 c0       	rjmp	.+38     	; 0xec0 <consultar_saldo+0x4e>
		LCD_limpar();
     e9a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Operacao");
     e9e:	4c e2       	ldi	r20, 0x2C	; 44
     ea0:	52 e0       	ldi	r21, 0x02	; 2
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "cancelada");
     eaa:	45 e3       	ldi	r20, 0x35	; 53
     eac:	52 e0       	ldi	r21, 0x02	; 2
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(2000);
     eb6:	80 ed       	ldi	r24, 0xD0	; 208
     eb8:	97 e0       	ldi	r25, 0x07	; 7
     eba:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
		return;
     ebe:	ee c0       	rjmp	.+476    	; 0x109c <consultar_saldo+0x22a>
	}

	char mensagem[2] = { 'C', 'V' }; // Mensagem para solicitar verificação de saldo [cite: 48]
     ec0:	83 e4       	ldi	r24, 0x43	; 67
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	86 e5       	ldi	r24, 0x56	; 86
     ec6:	8a 83       	std	Y+2, r24	; 0x02
	if (isBlocked()) {
     ec8:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     ecc:	88 23       	and	r24, r24
     ece:	99 f0       	breq	.+38     	; 0xef6 <consultar_saldo+0x84>
		LCD_limpar();
     ed0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     ed4:	4e ee       	ldi	r20, 0xEE	; 238
     ed6:	51 e0       	ldi	r21, 0x01	; 1
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     ee0:	4b ef       	ldi	r20, 0xFB	; 251
     ee2:	51 e0       	ldi	r21, 0x01	; 1
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(2000);
     eec:	80 ed       	ldi	r24, 0xD0	; 208
     eee:	97 e0       	ldi	r25, 0x07	; 7
     ef0:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
		return;
     ef4:	d3 c0       	rjmp	.+422    	; 0x109c <consultar_saldo+0x22a>
	}
	SerialEnviaChars(2, mensagem);
     ef6:	be 01       	movw	r22, r28
     ef8:	6f 5f       	subi	r22, 0xFF	; 255
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 28 0b 	call	0x1650	; 0x1650 <SerialEnviaChars>

	char resposta_header[3];
	if (isBlocked()) {
     f04:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     f08:	88 23       	and	r24, r24
     f0a:	99 f0       	breq	.+38     	; 0xf32 <consultar_saldo+0xc0>
		LCD_limpar();
     f0c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     f10:	4e ee       	ldi	r20, 0xEE	; 238
     f12:	51 e0       	ldi	r21, 0x01	; 1
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     f1c:	4b ef       	ldi	r20, 0xFB	; 251
     f1e:	51 e0       	ldi	r21, 0x01	; 1
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(2000);
     f28:	80 ed       	ldi	r24, 0xD0	; 208
     f2a:	97 e0       	ldi	r25, 0x07	; 7
     f2c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
		return;
     f30:	b5 c0       	rjmp	.+362    	; 0x109c <consultar_saldo+0x22a>
	}
	SerialRecebeChars(3, resposta_header); // Espera 'S', 'V', e o número de bytes do saldo [cite: 48]
     f32:	be 01       	movw	r22, r28
     f34:	6d 5f       	subi	r22, 0xFD	; 253
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 c6 0c 	call	0x198c	; 0x198c <SerialRecebeChars>
	resposta_header[3] = '\0';
     f40:	1e 82       	std	Y+6, r1	; 0x06

	if (resposta_header[0] == 'S' && resposta_header[1] == 'V') {
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	83 35       	cpi	r24, 0x53	; 83
     f46:	09 f0       	breq	.+2      	; 0xf4a <consultar_saldo+0xd8>
     f48:	97 c0       	rjmp	.+302    	; 0x1078 <consultar_saldo+0x206>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	86 35       	cpi	r24, 0x56	; 86
     f4e:	09 f0       	breq	.+2      	; 0xf52 <consultar_saldo+0xe0>
     f50:	93 c0       	rjmp	.+294    	; 0x1078 <consultar_saldo+0x206>
		unsigned char num_bytes_saldo = resposta_header[2]; // Tamanho do saldo [cite: 48]
     f52:	0d 81       	ldd	r16, Y+5	; 0x05

		char saldo_bruto[16]; // Buffer para o saldo sem formatação
		memset(saldo_bruto, 0, sizeof(saldo_bruto));
     f54:	fe 01       	movw	r30, r28
     f56:	7a 96       	adiw	r30, 0x1a	; 26
     f58:	80 e1       	ldi	r24, 0x10	; 16
     f5a:	df 01       	movw	r26, r30
     f5c:	1d 92       	st	X+, r1
     f5e:	8a 95       	dec	r24
     f60:	e9 f7       	brne	.-6      	; 0xf5c <consultar_saldo+0xea>

		if (num_bytes_saldo >= sizeof(saldo_bruto)) {
     f62:	00 31       	cpi	r16, 0x10	; 16
     f64:	08 f0       	brcs	.+2      	; 0xf68 <consultar_saldo+0xf6>
			num_bytes_saldo = sizeof(saldo_bruto) - 1; // Previne overflow
     f66:	0f e0       	ldi	r16, 0x0F	; 15
		}

		if (isBlocked()) {
     f68:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
     f6c:	88 23       	and	r24, r24
     f6e:	99 f0       	breq	.+38     	; 0xf96 <consultar_saldo+0x124>
			LCD_limpar();
     f70:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     f74:	4e ee       	ldi	r20, 0xEE	; 238
     f76:	51 e0       	ldi	r21, 0x01	; 1
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     f80:	4b ef       	ldi	r20, 0xFB	; 251
     f82:	51 e0       	ldi	r21, 0x01	; 1
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     f8c:	80 ed       	ldi	r24, 0xD0	; 208
     f8e:	97 e0       	ldi	r25, 0x07	; 7
     f90:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
     f94:	83 c0       	rjmp	.+262    	; 0x109c <consultar_saldo+0x22a>
			return;
		}
		SerialRecebeChars(num_bytes_saldo, saldo_bruto); // Recebe o saldo [cite: 48]
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	7e 01       	movw	r14, r28
     f9a:	ba e1       	ldi	r27, 0x1A	; 26
     f9c:	eb 0e       	add	r14, r27
     f9e:	f1 1c       	adc	r15, r1
     fa0:	b7 01       	movw	r22, r14
     fa2:	c8 01       	movw	r24, r16
     fa4:	0e 94 c6 0c 	call	0x198c	; 0x198c <SerialRecebeChars>
		saldo_bruto[num_bytes_saldo] = '\0';
     fa8:	f7 01       	movw	r30, r14
     faa:	e0 0f       	add	r30, r16
     fac:	f1 1f       	adc	r31, r17
     fae:	10 82       	st	Z, r1

		char saldo_formatado[20];
		int len_bruto = strlen(saldo_bruto);
     fb0:	f7 01       	movw	r30, r14
     fb2:	01 90       	ld	r0, Z+
     fb4:	00 20       	and	r0, r0
     fb6:	e9 f7       	brne	.-6      	; 0xfb2 <consultar_saldo+0x140>
     fb8:	31 97       	sbiw	r30, 0x01	; 1
     fba:	ee 19       	sub	r30, r14
     fbc:	ff 09       	sbc	r31, r15
		if (len_bruto >= 2) {
     fbe:	e2 30       	cpi	r30, 0x02	; 2
     fc0:	f1 05       	cpc	r31, r1
     fc2:	44 f1       	brlt	.+80     	; 0x1014 <consultar_saldo+0x1a2>
			strcpy(saldo_formatado, "R$");
     fc4:	7e 01       	movw	r14, r28
     fc6:	86 e0       	ldi	r24, 0x06	; 6
     fc8:	e8 0e       	add	r14, r24
     fca:	f1 1c       	adc	r15, r1
     fcc:	82 e5       	ldi	r24, 0x52	; 82
     fce:	94 e2       	ldi	r25, 0x24	; 36
     fd0:	9f 83       	std	Y+7, r25	; 0x07
     fd2:	8e 83       	std	Y+6, r24	; 0x06
     fd4:	d7 01       	movw	r26, r14
     fd6:	12 96       	adiw	r26, 0x02	; 2
     fd8:	1c 92       	st	X, r1
			strncat(saldo_formatado, saldo_bruto, len_bruto - 2);
     fda:	8f 01       	movw	r16, r30
     fdc:	02 50       	subi	r16, 0x02	; 2
     fde:	11 09       	sbc	r17, r1
     fe0:	a8 01       	movw	r20, r16
     fe2:	be 01       	movw	r22, r28
     fe4:	66 5e       	subi	r22, 0xE6	; 230
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	c7 01       	movw	r24, r14
     fea:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <strncat>
			strcat(saldo_formatado, ".");
     fee:	f7 01       	movw	r30, r14
     ff0:	01 90       	ld	r0, Z+
     ff2:	00 20       	and	r0, r0
     ff4:	e9 f7       	brne	.-6      	; 0xff0 <consultar_saldo+0x17e>
     ff6:	31 97       	sbiw	r30, 0x01	; 1
     ff8:	8e e2       	ldi	r24, 0x2E	; 46
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24
			strcat(saldo_formatado, &saldo_bruto[len_bruto - 2]);
    1000:	6a e1       	ldi	r22, 0x1A	; 26
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	6c 0f       	add	r22, r28
    1006:	7d 1f       	adc	r23, r29
    1008:	60 0f       	add	r22, r16
    100a:	71 1f       	adc	r23, r17
    100c:	c7 01       	movw	r24, r14
    100e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <strcat>
    1012:	1c c0       	rjmp	.+56     	; 0x104c <consultar_saldo+0x1da>
			} else if (len_bruto == 1) {
    1014:	31 97       	sbiw	r30, 0x01	; 1
    1016:	89 f4       	brne	.+34     	; 0x103a <consultar_saldo+0x1c8>
			strcpy(saldo_formatado, "R$0.0");
    1018:	86 e0       	ldi	r24, 0x06	; 6
    101a:	e3 ed       	ldi	r30, 0xD3	; 211
    101c:	f2 e0       	ldi	r31, 0x02	; 2
    101e:	de 01       	movw	r26, r28
    1020:	16 96       	adiw	r26, 0x06	; 6
    1022:	01 90       	ld	r0, Z+
    1024:	0d 92       	st	X+, r0
    1026:	8a 95       	dec	r24
    1028:	e1 f7       	brne	.-8      	; 0x1022 <consultar_saldo+0x1b0>
			strcat(saldo_formatado, saldo_bruto);
    102a:	be 01       	movw	r22, r28
    102c:	66 5e       	subi	r22, 0xE6	; 230
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	ce 01       	movw	r24, r28
    1032:	06 96       	adiw	r24, 0x06	; 6
    1034:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <strcat>
    1038:	09 c0       	rjmp	.+18     	; 0x104c <consultar_saldo+0x1da>
			} else {
			strcpy(saldo_formatado, "R$0.00");
    103a:	87 e0       	ldi	r24, 0x07	; 7
    103c:	e9 ed       	ldi	r30, 0xD9	; 217
    103e:	f2 e0       	ldi	r31, 0x02	; 2
    1040:	de 01       	movw	r26, r28
    1042:	16 96       	adiw	r26, 0x06	; 6
    1044:	01 90       	ld	r0, Z+
    1046:	0d 92       	st	X+, r0
    1048:	8a 95       	dec	r24
    104a:	e1 f7       	brne	.-8      	; 0x1044 <consultar_saldo+0x1d2>
		}

		LCD_limpar();
    104c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Saldo atual:");
    1050:	40 ee       	ldi	r20, 0xE0	; 224
    1052:	52 e0       	ldi	r21, 0x02	; 2
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, saldo_formatado); // Exibe o saldo [cite: 48]
    105c:	ae 01       	movw	r20, r28
    105e:	4a 5f       	subi	r20, 0xFA	; 250
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(3000);
    106a:	88 eb       	ldi	r24, 0xB8	; 184
    106c:	9b e0       	ldi	r25, 0x0B	; 11
    106e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
		
		perguntar_comprovante(); // Permite ao cliente a opção de emitir comprovante [cite: 15]
    1072:	0e 94 67 05 	call	0xace	; 0xace <perguntar_comprovante>
		return;
	}
	SerialRecebeChars(3, resposta_header); // Espera 'S', 'V', e o número de bytes do saldo [cite: 48]
	resposta_header[3] = '\0';

	if (resposta_header[0] == 'S' && resposta_header[1] == 'V') {
    1076:	12 c0       	rjmp	.+36     	; 0x109c <consultar_saldo+0x22a>
		LCD_Escrever_Linha(1, 0, saldo_formatado); // Exibe o saldo [cite: 48]
		delay1ms(3000);
		
		perguntar_comprovante(); // Permite ao cliente a opção de emitir comprovante [cite: 15]
		} else {
		LCD_limpar();
    1078:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Erro ao obter");
    107c:	4d ee       	ldi	r20, 0xED	; 237
    107e:	52 e0       	ldi	r21, 0x02	; 2
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "saldo!");
    1088:	4b ef       	ldi	r20, 0xFB	; 251
    108a:	52 e0       	ldi	r21, 0x02	; 2
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(3000);
    1094:	88 eb       	ldi	r24, 0xB8	; 184
    1096:	9b e0       	ldi	r25, 0x0B	; 11
    1098:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
	}
}
    109c:	a9 96       	adiw	r28, 0x29	; 41
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	08 95       	ret

000010b6 <enviar_mensagem_pagamento>:
		}
	}
}

// Envia mensagem de pagamento
void enviar_mensagem_pagamento(const char* banco, const char* convenio, const char* valor) {
    10b6:	2f 92       	push	r2
    10b8:	3f 92       	push	r3
    10ba:	4f 92       	push	r4
    10bc:	5f 92       	push	r5
    10be:	6f 92       	push	r6
    10c0:	7f 92       	push	r7
    10c2:	8f 92       	push	r8
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	fc 01       	movw	r30, r24
    10e0:	4b 01       	movw	r8, r22
    10e2:	3a 01       	movw	r6, r20
	memcpy(&mensagem[current_pos], convenio, tamanho_convenio);
	current_pos += tamanho_convenio;
	memcpy(&mensagem[current_pos], valor, tamanho_valor);

	SerialEnviaChars(3 + total_bytes_dados, mensagem);
}
    10e4:	2d b6       	in	r2, 0x3d	; 61
    10e6:	3e b6       	in	r3, 0x3e	; 62
	}
}

// Envia mensagem de pagamento
void enviar_mensagem_pagamento(const char* banco, const char* convenio, const char* valor) {
	int tamanho_banco = strlen(banco);
    10e8:	dc 01       	movw	r26, r24
    10ea:	0d 90       	ld	r0, X+
    10ec:	00 20       	and	r0, r0
    10ee:	e9 f7       	brne	.-6      	; 0x10ea <enviar_mensagem_pagamento+0x34>
    10f0:	11 97       	sbiw	r26, 0x01	; 1
    10f2:	8d 01       	movw	r16, r26
    10f4:	08 1b       	sub	r16, r24
    10f6:	19 0b       	sbc	r17, r25
	int tamanho_convenio = strlen(convenio);
    10f8:	db 01       	movw	r26, r22
    10fa:	0d 90       	ld	r0, X+
    10fc:	00 20       	and	r0, r0
    10fe:	e9 f7       	brne	.-6      	; 0x10fa <enviar_mensagem_pagamento+0x44>
    1100:	11 97       	sbiw	r26, 0x01	; 1
    1102:	7d 01       	movw	r14, r26
    1104:	e6 1a       	sub	r14, r22
    1106:	f7 0a       	sbc	r15, r23
	int tamanho_valor = strlen(valor);
    1108:	da 01       	movw	r26, r20
    110a:	0d 90       	ld	r0, X+
    110c:	00 20       	and	r0, r0
    110e:	e9 f7       	brne	.-6      	; 0x110a <enviar_mensagem_pagamento+0x54>
    1110:	11 97       	sbiw	r26, 0x01	; 1
    1112:	6d 01       	movw	r12, r26
    1114:	c4 1a       	sub	r12, r20
    1116:	d5 0a       	sbc	r13, r21

	// Mensagem: 'C', 'P', n (total de bytes), banco, convenio, valor [cite: 52]
	int total_bytes_dados = tamanho_banco + tamanho_convenio + tamanho_valor;
    1118:	98 01       	movw	r18, r16
    111a:	2e 0d       	add	r18, r14
    111c:	3f 1d       	adc	r19, r15
    111e:	2c 0d       	add	r18, r12
    1120:	3d 1d       	adc	r19, r13
	char mensagem[3 + total_bytes_dados]; // 2 bytes de cabeçalho + 1 byte de tamanho + N bytes dos dados
    1122:	29 01       	movw	r4, r18
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	48 0e       	add	r4, r24
    1128:	51 1c       	adc	r5, r1
    112a:	ad b7       	in	r26, 0x3d	; 61
    112c:	be b7       	in	r27, 0x3e	; 62
    112e:	a4 19       	sub	r26, r4
    1130:	b5 09       	sbc	r27, r5
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	be bf       	out	0x3e, r27	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	ad bf       	out	0x3d, r26	; 61
    113c:	8d b7       	in	r24, 0x3d	; 61
    113e:	9e b7       	in	r25, 0x3e	; 62
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	5c 01       	movw	r10, r24
	
	mensagem[0] = 'C';
    1144:	83 e4       	ldi	r24, 0x43	; 67
    1146:	11 96       	adiw	r26, 0x01	; 1
    1148:	8c 93       	st	X, r24
	mensagem[1] = 'P';
    114a:	80 e5       	ldi	r24, 0x50	; 80
    114c:	d5 01       	movw	r26, r10
    114e:	11 96       	adiw	r26, 0x01	; 1
    1150:	8c 93       	st	X, r24
    1152:	11 97       	sbiw	r26, 0x01	; 1
	mensagem[2] = (char)total_bytes_dados; // Número de bytes que seguem [cite: 52]
    1154:	12 96       	adiw	r26, 0x02	; 2
    1156:	2c 93       	st	X, r18

	// Copia os dados
	int current_pos = 3;
	memcpy(&mensagem[current_pos], banco, tamanho_banco);
    1158:	8d b7       	in	r24, 0x3d	; 61
    115a:	9e b7       	in	r25, 0x3e	; 62
    115c:	04 96       	adiw	r24, 0x04	; 4
    115e:	a8 01       	movw	r20, r16
    1160:	bf 01       	movw	r22, r30
    1162:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <memcpy>
	current_pos += tamanho_banco;
    1166:	0d 5f       	subi	r16, 0xFD	; 253
    1168:	1f 4f       	sbci	r17, 0xFF	; 255
	memcpy(&mensagem[current_pos], convenio, tamanho_convenio);
    116a:	a7 01       	movw	r20, r14
    116c:	b4 01       	movw	r22, r8
    116e:	c5 01       	movw	r24, r10
    1170:	80 0f       	add	r24, r16
    1172:	91 1f       	adc	r25, r17
    1174:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <memcpy>
	current_pos += tamanho_convenio;
    1178:	c7 01       	movw	r24, r14
    117a:	80 0f       	add	r24, r16
    117c:	91 1f       	adc	r25, r17
	memcpy(&mensagem[current_pos], valor, tamanho_valor);
    117e:	a6 01       	movw	r20, r12
    1180:	b3 01       	movw	r22, r6
    1182:	8a 0d       	add	r24, r10
    1184:	9b 1d       	adc	r25, r11
    1186:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <memcpy>

	SerialEnviaChars(3 + total_bytes_dados, mensagem);
    118a:	b5 01       	movw	r22, r10
    118c:	c2 01       	movw	r24, r4
    118e:	0e 94 28 0b 	call	0x1650	; 0x1650 <SerialEnviaChars>
}
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	3e be       	out	0x3e, r3	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	2d be       	out	0x3d, r2	; 61
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	9f 90       	pop	r9
    11b2:	8f 90       	pop	r8
    11b4:	7f 90       	pop	r7
    11b6:	6f 90       	pop	r6
    11b8:	5f 90       	pop	r5
    11ba:	4f 90       	pop	r4
    11bc:	3f 90       	pop	r3
    11be:	2f 90       	pop	r2
    11c0:	08 95       	ret

000011c2 <receber_resposta_pagamento>:

// Recebe resposta do servidor para pagamento
char receber_resposta_pagamento(void) {
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <receber_resposta_pagamento+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <receber_resposta_pagamento+0x8>
    11ca:	1f 92       	push	r1
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	char resposta[5]; // SP + 1 byte de status (O/I) + '\0'
	SerialRecebeChars(3, resposta); // Espera 3 bytes: 'S', 'P', Status (O/I) [cite: 52]
    11d0:	be 01       	movw	r22, r28
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 c6 0c 	call	0x198c	; 0x198c <SerialRecebeChars>
	if(resposta[0] == 'S' && resposta[1] == 'P') {
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	83 35       	cpi	r24, 0x53	; 83
    11e2:	29 f4       	brne	.+10     	; 0x11ee <receber_resposta_pagamento+0x2c>
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	80 35       	cpi	r24, 0x50	; 80
    11e8:	21 f4       	brne	.+8      	; 0x11f2 <receber_resposta_pagamento+0x30>
		return resposta[2]; // Retorna 'O' (OK) ou 'I' (Saldo Insuficiente) [cite: 52]
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <receber_resposta_pagamento+0x32>
	}
	return 'E'; // Erro
    11ee:	85 e4       	ldi	r24, 0x45	; 69
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <receber_resposta_pagamento+0x32>
    11f2:	85 e4       	ldi	r24, 0x45	; 69
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <realizar_pagamento>:
		delay1ms(3000);
	}
}

// Realiza um pagamento
void realizar_pagamento(void) {
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	62 97       	sbiw	r28, 0x12	; 18
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
	char banco[4] = {0}; // 3 dígitos para o banco
    121c:	19 82       	std	Y+1, r1	; 0x01
    121e:	1a 82       	std	Y+2, r1	; 0x02
    1220:	1b 82       	std	Y+3, r1	; 0x03
    1222:	1c 82       	std	Y+4, r1	; 0x04
	char convenio[5] = {0}; // 4 dígitos para o convênio
    1224:	fe 01       	movw	r30, r28
    1226:	35 96       	adiw	r30, 0x05	; 5
    1228:	85 e0       	ldi	r24, 0x05	; 5
    122a:	df 01       	movw	r26, r30
    122c:	1d 92       	st	X+, r1
    122e:	8a 95       	dec	r24
    1230:	e9 f7       	brne	.-6      	; 0x122c <realizar_pagamento+0x28>
	char valor_pagamento[MAX_VALOR_SAQUE] = {0}; // Mesmo tamanho do saque para valor
    1232:	35 96       	adiw	r30, 0x05	; 5
    1234:	87 e0       	ldi	r24, 0x07	; 7
    1236:	df 01       	movw	r26, r30
    1238:	1d 92       	st	X+, r1
    123a:	8a 95       	dec	r24
    123c:	e9 f7       	brne	.-6      	; 0x1238 <realizar_pagamento+0x34>

	int pos = 0;
	char tecla;

	// Entrada do Banco
	LCD_limpar();
    123e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Banco (3 dig.):");
    1242:	42 e0       	ldi	r20, 0x02	; 2
    1244:	53 e0       	ldi	r21, 0x03	; 3
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "___");
    124e:	40 e3       	ldi	r20, 0x30	; 48
    1250:	51 e0       	ldi	r21, 0x01	; 1
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	pos = 0;
    125a:	00 e0       	ldi	r16, 0x00	; 0
    125c:	10 e0       	ldi	r17, 0x00	; 0
	while (pos < 3) {
    125e:	49 c0       	rjmp	.+146    	; 0x12f2 <realizar_pagamento+0xee>
		if (isBlocked()) {
    1260:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
    1264:	88 23       	and	r24, r24
    1266:	99 f0       	breq	.+38     	; 0x128e <realizar_pagamento+0x8a>
			LCD_limpar();
    1268:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
    126c:	4e ee       	ldi	r20, 0xEE	; 238
    126e:	51 e0       	ldi	r21, 0x01	; 1
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
    1278:	4b ef       	ldi	r20, 0xFB	; 251
    127a:	51 e0       	ldi	r21, 0x01	; 1
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
    1284:	80 ed       	ldi	r24, 0xD0	; 208
    1286:	97 e0       	ldi	r25, 0x07	; 7
    1288:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return;
    128c:	5f c1       	rjmp	.+702    	; 0x154c <realizar_pagamento+0x348>
		}
		tecla = varredura();
    128e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <varredura>
		if (tecla >= '0' && tecla <= '9') {
    1292:	90 ed       	ldi	r25, 0xD0	; 208
    1294:	98 0f       	add	r25, r24
    1296:	9a 30       	cpi	r25, 0x0A	; 10
    1298:	b8 f4       	brcc	.+46     	; 0x12c8 <realizar_pagamento+0xc4>
			banco[pos] = tecla;
    129a:	e1 e0       	ldi	r30, 0x01	; 1
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	ec 0f       	add	r30, r28
    12a0:	fd 1f       	adc	r31, r29
    12a2:	e0 0f       	add	r30, r16
    12a4:	f1 1f       	adc	r31, r17
    12a6:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
    12a8:	89 8b       	std	Y+17, r24	; 0x11
    12aa:	1a 8a       	std	Y+18, r1	; 0x12
			LCD_Escrever_Linha(1, pos, temp);
    12ac:	ae 01       	movw	r20, r28
    12ae:	4f 5e       	subi	r20, 0xEF	; 239
    12b0:	5f 4f       	sbci	r21, 0xFF	; 255
    12b2:	60 2f       	mov	r22, r16
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
    12ba:	0f 5f       	subi	r16, 0xFF	; 255
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
    12be:	88 ec       	ldi	r24, 0xC8	; 200
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
    12c6:	15 c0       	rjmp	.+42     	; 0x12f2 <realizar_pagamento+0xee>
		} else if (tecla == '*') {
    12c8:	8a 32       	cpi	r24, 0x2A	; 42
    12ca:	99 f4       	brne	.+38     	; 0x12f2 <realizar_pagamento+0xee>
			LCD_limpar();
    12cc:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
    12d0:	4c e2       	ldi	r20, 0x2C	; 44
    12d2:	52 e0       	ldi	r21, 0x02	; 2
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
    12dc:	45 e3       	ldi	r20, 0x35	; 53
    12de:	52 e0       	ldi	r21, 0x02	; 2
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
    12e8:	80 ed       	ldi	r24, 0xD0	; 208
    12ea:	97 e0       	ldi	r25, 0x07	; 7
    12ec:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return;
    12f0:	2d c1       	rjmp	.+602    	; 0x154c <realizar_pagamento+0x348>
	// Entrada do Banco
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Banco (3 dig.):");
	LCD_Escrever_Linha(1, 0, "___");
	pos = 0;
	while (pos < 3) {
    12f2:	03 30       	cpi	r16, 0x03	; 3
    12f4:	11 05       	cpc	r17, r1
    12f6:	0c f4       	brge	.+2      	; 0x12fa <realizar_pagamento+0xf6>
    12f8:	b3 cf       	rjmp	.-154    	; 0x1260 <realizar_pagamento+0x5c>
			LCD_Escrever_Linha(1, 0, "cancelada");
			delay1ms(2000);
			return;
		}
	}
	banco[3] = '\0';
    12fa:	1c 82       	std	Y+4, r1	; 0x04

	// Entrada do Convênio
	LCD_limpar();
    12fc:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Convenio (4 dig.):");
    1300:	42 e1       	ldi	r20, 0x12	; 18
    1302:	53 e0       	ldi	r21, 0x03	; 3
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "____");
    130c:	4f e2       	ldi	r20, 0x2F	; 47
    130e:	51 e0       	ldi	r21, 0x01	; 1
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	pos = 0;
    1318:	00 e0       	ldi	r16, 0x00	; 0
    131a:	10 e0       	ldi	r17, 0x00	; 0
	while (pos < 4) {
    131c:	49 c0       	rjmp	.+146    	; 0x13b0 <realizar_pagamento+0x1ac>
		if (isBlocked()) {
    131e:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
    1322:	88 23       	and	r24, r24
    1324:	99 f0       	breq	.+38     	; 0x134c <realizar_pagamento+0x148>
			LCD_limpar();
    1326:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
    132a:	4e ee       	ldi	r20, 0xEE	; 238
    132c:	51 e0       	ldi	r21, 0x01	; 1
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
    1336:	4b ef       	ldi	r20, 0xFB	; 251
    1338:	51 e0       	ldi	r21, 0x01	; 1
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
    1342:	80 ed       	ldi	r24, 0xD0	; 208
    1344:	97 e0       	ldi	r25, 0x07	; 7
    1346:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return;
    134a:	00 c1       	rjmp	.+512    	; 0x154c <realizar_pagamento+0x348>
		}
		tecla = varredura();
    134c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <varredura>
		if (tecla >= '0' && tecla <= '9') {
    1350:	90 ed       	ldi	r25, 0xD0	; 208
    1352:	98 0f       	add	r25, r24
    1354:	9a 30       	cpi	r25, 0x0A	; 10
    1356:	b8 f4       	brcc	.+46     	; 0x1386 <realizar_pagamento+0x182>
			convenio[pos] = tecla;
    1358:	e5 e0       	ldi	r30, 0x05	; 5
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	ec 0f       	add	r30, r28
    135e:	fd 1f       	adc	r31, r29
    1360:	e0 0f       	add	r30, r16
    1362:	f1 1f       	adc	r31, r17
    1364:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
    1366:	89 8b       	std	Y+17, r24	; 0x11
    1368:	1a 8a       	std	Y+18, r1	; 0x12
			LCD_Escrever_Linha(1, pos, temp);
    136a:	ae 01       	movw	r20, r28
    136c:	4f 5e       	subi	r20, 0xEF	; 239
    136e:	5f 4f       	sbci	r21, 0xFF	; 255
    1370:	60 2f       	mov	r22, r16
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
    1378:	0f 5f       	subi	r16, 0xFF	; 255
    137a:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
    137c:	88 ec       	ldi	r24, 0xC8	; 200
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
    1384:	15 c0       	rjmp	.+42     	; 0x13b0 <realizar_pagamento+0x1ac>
		} else if (tecla == '*') {
    1386:	8a 32       	cpi	r24, 0x2A	; 42
    1388:	99 f4       	brne	.+38     	; 0x13b0 <realizar_pagamento+0x1ac>
			LCD_limpar();
    138a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
    138e:	4c e2       	ldi	r20, 0x2C	; 44
    1390:	52 e0       	ldi	r21, 0x02	; 2
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
    139a:	45 e3       	ldi	r20, 0x35	; 53
    139c:	52 e0       	ldi	r21, 0x02	; 2
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
    13a6:	80 ed       	ldi	r24, 0xD0	; 208
    13a8:	97 e0       	ldi	r25, 0x07	; 7
    13aa:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return;
    13ae:	ce c0       	rjmp	.+412    	; 0x154c <realizar_pagamento+0x348>
	// Entrada do Convênio
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Convenio (4 dig.):");
	LCD_Escrever_Linha(1, 0, "____");
	pos = 0;
	while (pos < 4) {
    13b0:	04 30       	cpi	r16, 0x04	; 4
    13b2:	11 05       	cpc	r17, r1
    13b4:	0c f4       	brge	.+2      	; 0x13b8 <realizar_pagamento+0x1b4>
    13b6:	b3 cf       	rjmp	.-154    	; 0x131e <realizar_pagamento+0x11a>
			LCD_Escrever_Linha(1, 0, "cancelada");
			delay1ms(2000);
			return;
		}
	}
	convenio[4] = '\0';
    13b8:	19 86       	std	Y+9, r1	; 0x09

	// Entrada do Valor
	LCD_limpar();
    13ba:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do pag.:");
    13be:	45 e2       	ldi	r20, 0x25	; 37
    13c0:	53 e0       	ldi	r21, 0x03	; 3
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
    13ca:	4e e8       	ldi	r20, 0x8E	; 142
    13cc:	52 e0       	ldi	r21, 0x02	; 2
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	pos = 0;
    13d6:	00 e0       	ldi	r16, 0x00	; 0
    13d8:	10 e0       	ldi	r17, 0x00	; 0
	while(1) {
		if (isBlocked()) {
    13da:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
    13de:	88 23       	and	r24, r24
    13e0:	99 f0       	breq	.+38     	; 0x1408 <realizar_pagamento+0x204>
			LCD_limpar();
    13e2:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
    13e6:	4e ee       	ldi	r20, 0xEE	; 238
    13e8:	51 e0       	ldi	r21, 0x01	; 1
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
    13f2:	4b ef       	ldi	r20, 0xFB	; 251
    13f4:	51 e0       	ldi	r21, 0x01	; 1
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
    13fe:	80 ed       	ldi	r24, 0xD0	; 208
    1400:	97 e0       	ldi	r25, 0x07	; 7
    1402:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			return;
    1406:	a2 c0       	rjmp	.+324    	; 0x154c <realizar_pagamento+0x348>
		}
		tecla = varredura();
    1408:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <varredura>
		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
    140c:	90 ed       	ldi	r25, 0xD0	; 208
    140e:	98 0f       	add	r25, r24
    1410:	9a 30       	cpi	r25, 0x0A	; 10
    1412:	d8 f4       	brcc	.+54     	; 0x144a <realizar_pagamento+0x246>
    1414:	06 30       	cpi	r16, 0x06	; 6
    1416:	11 05       	cpc	r17, r1
    1418:	c4 f4       	brge	.+48     	; 0x144a <realizar_pagamento+0x246>
			valor_pagamento[pos] = tecla;
    141a:	ea e0       	ldi	r30, 0x0A	; 10
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	ec 0f       	add	r30, r28
    1420:	fd 1f       	adc	r31, r29
    1422:	e0 0f       	add	r30, r16
    1424:	f1 1f       	adc	r31, r17
    1426:	80 83       	st	Z, r24
			char str[2] = {tecla, '\0'};
    1428:	89 8b       	std	Y+17, r24	; 0x11
    142a:	1a 8a       	std	Y+18, r1	; 0x12
			LCD_Escrever_Linha(1, 2 + pos, str);
    142c:	62 e0       	ldi	r22, 0x02	; 2
    142e:	60 0f       	add	r22, r16
    1430:	ae 01       	movw	r20, r28
    1432:	4f 5e       	subi	r20, 0xEF	; 239
    1434:	5f 4f       	sbci	r21, 0xFF	; 255
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
    143c:	0f 5f       	subi	r16, 0xFF	; 255
    143e:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
    1440:	88 ec       	ldi	r24, 0xC8	; 200
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
			delay1ms(2000);
			return;
		}
		tecla = varredura();
		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
    1448:	c8 cf       	rjmp	.-112    	; 0x13da <realizar_pagamento+0x1d6>
			valor_pagamento[pos] = tecla;
			char str[2] = {tecla, '\0'};
			LCD_Escrever_Linha(1, 2 + pos, str);
			pos++;
			delay1ms(200);
		} else if(tecla == '#') {
    144a:	83 32       	cpi	r24, 0x23	; 35
    144c:	09 f0       	breq	.+2      	; 0x1450 <realizar_pagamento+0x24c>
    144e:	69 c0       	rjmp	.+210    	; 0x1522 <realizar_pagamento+0x31e>
			valor_pagamento[pos] = '\0';
    1450:	ea e0       	ldi	r30, 0x0A	; 10
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	ec 0f       	add	r30, r28
    1456:	fd 1f       	adc	r31, r29
    1458:	e0 0f       	add	r30, r16
    145a:	f1 1f       	adc	r31, r17
    145c:	10 82       	st	Z, r1

			// Confirmação de senha antes de prosseguir
			if(!confirmar_senha(get_current_password())) {
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <get_current_password>
    1462:	0e 94 a7 04 	call	0x94e	; 0x94e <confirmar_senha>
    1466:	88 23       	and	r24, r24
    1468:	09 f4       	brne	.+2      	; 0x146c <realizar_pagamento+0x268>
    146a:	70 c0       	rjmp	.+224    	; 0x154c <realizar_pagamento+0x348>
				break; // Sai se a senha não for confirmada
			}
			
			enviar_mensagem_pagamento(banco, convenio, valor_pagamento); // Cada operação solicitada deve ser enviada ao aplicativo externo [cite: 12]
    146c:	ae 01       	movw	r20, r28
    146e:	46 5f       	subi	r20, 0xF6	; 246
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	be 01       	movw	r22, r28
    1474:	6b 5f       	subi	r22, 0xFB	; 251
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	ce 01       	movw	r24, r28
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <enviar_mensagem_pagamento>

			if (isBlocked()) {
    1480:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
    1484:	88 23       	and	r24, r24
    1486:	99 f0       	breq	.+38     	; 0x14ae <realizar_pagamento+0x2aa>
				LCD_limpar();
    1488:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "OP CANCELADA");
    148c:	4e ee       	ldi	r20, 0xEE	; 238
    148e:	51 e0       	ldi	r21, 0x01	; 1
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
    1498:	4b ef       	ldi	r20, 0xFB	; 251
    149a:	51 e0       	ldi	r21, 0x01	; 1
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
    14a4:	80 ed       	ldi	r24, 0xD0	; 208
    14a6:	97 e0       	ldi	r25, 0x07	; 7
    14a8:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
				return;
    14ac:	4f c0       	rjmp	.+158    	; 0x154c <realizar_pagamento+0x348>
			}
			
			char resposta = receber_resposta_pagamento(); // O aplicativo externo retorna se foi aceita ou não e os resultados da operação pedida [cite: 12]
    14ae:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <receber_resposta_pagamento>
    14b2:	18 2f       	mov	r17, r24

			LCD_limpar();
    14b4:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			if(resposta == 'O') { // 'O' para OK [cite: 52]
    14b8:	1f 34       	cpi	r17, 0x4F	; 79
    14ba:	99 f4       	brne	.+38     	; 0x14e2 <realizar_pagamento+0x2de>
				LCD_Escrever_Linha(0, 0, "Pagamento");
    14bc:	45 eb       	ldi	r20, 0xB5	; 181
    14be:	51 e0       	ldi	r21, 0x01	; 1
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Realizado!");
    14c8:	4a ea       	ldi	r20, 0xAA	; 170
    14ca:	52 e0       	ldi	r21, 0x02	; 2
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
    14d4:	80 ed       	ldi	r24, 0xD0	; 208
    14d6:	97 e0       	ldi	r25, 0x07	; 7
    14d8:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
				perguntar_comprovante(); // Permite ao cliente a opção de emitir comprovante [cite: 15]
    14dc:	0e 94 67 05 	call	0xace	; 0xace <perguntar_comprovante>
    14e0:	1b c0       	rjmp	.+54     	; 0x1518 <realizar_pagamento+0x314>
			} else if (resposta == 'I') { // 'I' para Saldo Insuficiente [cite: 52]
    14e2:	19 34       	cpi	r17, 0x49	; 73
    14e4:	69 f4       	brne	.+26     	; 0x1500 <realizar_pagamento+0x2fc>
				LCD_Escrever_Linha(0, 0, "Saldo");
    14e6:	4f ec       	ldi	r20, 0xCF	; 207
    14e8:	51 e0       	ldi	r21, 0x01	; 1
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "insuficiente");
    14f2:	45 eb       	ldi	r20, 0xB5	; 181
    14f4:	52 e0       	ldi	r21, 0x02	; 2
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
    14fe:	0c c0       	rjmp	.+24     	; 0x1518 <realizar_pagamento+0x314>
			} else {
				LCD_Escrever_Linha(0, 0, "Erro na");
    1500:	42 ec       	ldi	r20, 0xC2	; 194
    1502:	52 e0       	ldi	r21, 0x02	; 2
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "operacao");
    150c:	4a ec       	ldi	r20, 0xCA	; 202
    150e:	52 e0       	ldi	r21, 0x02	; 2
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			}
			delay1ms(3000);
    1518:	88 eb       	ldi	r24, 0xB8	; 184
    151a:	9b e0       	ldi	r25, 0x0B	; 11
    151c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			break;
    1520:	15 c0       	rjmp	.+42     	; 0x154c <realizar_pagamento+0x348>
		} else if(tecla == '*') {
    1522:	8a 32       	cpi	r24, 0x2A	; 42
    1524:	09 f0       	breq	.+2      	; 0x1528 <realizar_pagamento+0x324>
    1526:	59 cf       	rjmp	.-334    	; 0x13da <realizar_pagamento+0x1d6>
			LCD_limpar();
    1528:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
    152c:	4c e2       	ldi	r20, 0x2C	; 44
    152e:	52 e0       	ldi	r21, 0x02	; 2
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
    1538:	45 e3       	ldi	r20, 0x35	; 53
    153a:	52 e0       	ldi	r21, 0x02	; 2
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
    1544:	80 ed       	ldi	r24, 0xD0	; 208
    1546:	97 e0       	ldi	r25, 0x07	; 7
    1548:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			break;
		}
	}
}
    154c:	62 96       	adiw	r28, 0x12	; 18
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	08 95       	ret

00001562 <finalizar_sessao>:
	return 'E'; // Erro
}


// Finaliza a sessão
void finalizar_sessao(void) {
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	00 d0       	rcall	.+0      	; 0x1568 <finalizar_sessao+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <finalizar_sessao+0x8>
    156a:	1f 92       	push	r1
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
	char mensagem[2] = {'C', 'F'}; // Mensagem para informar que a sessão está sendo fechada [cite: 55]
    1570:	83 e4       	ldi	r24, 0x43	; 67
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	86 e4       	ldi	r24, 0x46	; 70
    1576:	8a 83       	std	Y+2, r24	; 0x02
	if (isBlocked()) {
    1578:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
    157c:	88 23       	and	r24, r24
    157e:	99 f0       	breq	.+38     	; 0x15a6 <finalizar_sessao+0x44>
		LCD_limpar();
    1580:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
    1584:	44 e3       	ldi	r20, 0x34	; 52
    1586:	53 e0       	ldi	r21, 0x03	; 3
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
    1590:	4f e3       	ldi	r20, 0x3F	; 63
    1592:	53 e0       	ldi	r21, 0x03	; 3
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(2000);
    159c:	80 ed       	ldi	r24, 0xD0	; 208
    159e:	97 e0       	ldi	r25, 0x07	; 7
    15a0:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
		return;
    15a4:	38 c0       	rjmp	.+112    	; 0x1616 <finalizar_sessao+0xb4>
	}
	SerialEnviaChars(2, mensagem);
    15a6:	be 01       	movw	r22, r28
    15a8:	6f 5f       	subi	r22, 0xFF	; 255
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	82 e0       	ldi	r24, 0x02	; 2
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 28 0b 	call	0x1650	; 0x1650 <SerialEnviaChars>

	char resposta[3];
	if (isBlocked()) {
    15b4:	0e 94 13 0b 	call	0x1626	; 0x1626 <isBlocked>
    15b8:	88 23       	and	r24, r24
    15ba:	99 f0       	breq	.+38     	; 0x15e2 <finalizar_sessao+0x80>
		LCD_limpar();
    15bc:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
    15c0:	44 e3       	ldi	r20, 0x34	; 52
    15c2:	53 e0       	ldi	r21, 0x03	; 3
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
    15cc:	4f e3       	ldi	r20, 0x3F	; 63
    15ce:	53 e0       	ldi	r21, 0x03	; 3
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(2000);
    15d8:	80 ed       	ldi	r24, 0xD0	; 208
    15da:	97 e0       	ldi	r25, 0x07	; 7
    15dc:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
		return;
    15e0:	1a c0       	rjmp	.+52     	; 0x1616 <finalizar_sessao+0xb4>
	}
	SerialRecebeChars(2, resposta); // Espera 'S', 'F' como resposta [cite: 55]
    15e2:	be 01       	movw	r22, r28
    15e4:	6d 5f       	subi	r22, 0xFD	; 253
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 c6 0c 	call	0x198c	; 0x198c <SerialRecebeChars>
	resposta[2] = '\0';
    15f0:	1d 82       	std	Y+5, r1	; 0x05

	LCD_limpar();
    15f2:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	//LCD_Escrever_Linha(0, 0, resposta);
	//delay1ms(2000);
	
	LCD_Escrever_Linha(0, 0, "Sessao");
    15f6:	4b e4       	ldi	r20, 0x4B	; 75
    15f8:	53 e0       	ldi	r21, 0x03	; 3
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "Finalizada!");
    1602:	42 e5       	ldi	r20, 0x52	; 82
    1604:	53 e0       	ldi	r21, 0x03	; 3
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "Finalizada!");
		} else {
		LCD_Escrever_Linha(0, 0, "Erro ao finalizar");
		LCD_Escrever_Linha(1, 0, "sessao!");
	}*/
	delay1ms(2000);
    160e:	80 ed       	ldi	r24, 0xD0	; 208
    1610:	97 e0       	ldi	r25, 0x07	; 7
    1612:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	08 95       	ret

00001626 <isBlocked>:
	if (uart_head >= uart_tail) {
		return uart_head - uart_tail;
		} else {
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}
    1626:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <blocked>
    162a:	08 95       	ret

0000162c <setBlocked>:
    162c:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <blocked>
    1630:	08 95       	ret

00001632 <initUART>:
    1632:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1636:	83 e3       	ldi	r24, 0x33	; 51
    1638:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    163c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1640:	88 e9       	ldi	r24, 0x98	; 152
    1642:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1646:	86 e0       	ldi	r24, 0x06	; 6
    1648:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    164c:	78 94       	sei
    164e:	08 95       	ret

00001650 <SerialEnviaChars>:
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	8c 01       	movw	r16, r24
    165e:	7b 01       	movw	r14, r22
    1660:	c0 e0       	ldi	r28, 0x00	; 0
    1662:	d0 e0       	ldi	r29, 0x00	; 0
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <SerialEnviaChars+0x34>
    1666:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    166a:	85 ff       	sbrs	r24, 5
    166c:	fc cf       	rjmp	.-8      	; 0x1666 <SerialEnviaChars+0x16>
    166e:	f7 01       	movw	r30, r14
    1670:	ec 0f       	add	r30, r28
    1672:	fd 1f       	adc	r31, r29
    1674:	80 81       	ld	r24, Z
    1676:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    167a:	84 e1       	ldi	r24, 0x14	; 20
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
    1682:	21 96       	adiw	r28, 0x01	; 1
    1684:	c0 17       	cp	r28, r16
    1686:	d1 07       	cpc	r29, r17
    1688:	74 f3       	brlt	.-36     	; 0x1666 <SerialEnviaChars+0x16>
    168a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    168e:	86 ff       	sbrs	r24, 6
    1690:	fc cf       	rjmp	.-8      	; 0x168a <SerialEnviaChars+0x3a>
    1692:	e0 ec       	ldi	r30, 0xC0	; 192
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	80 64       	ori	r24, 0x40	; 64
    169a:	80 83       	st	Z, r24
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	08 95       	ret

000016aa <__vector_18>:
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	2f 93       	push	r18
    16b6:	3f 93       	push	r19
    16b8:	4f 93       	push	r20
    16ba:	5f 93       	push	r21
    16bc:	6f 93       	push	r22
    16be:	7f 93       	push	r23
    16c0:	8f 93       	push	r24
    16c2:	9f 93       	push	r25
    16c4:	af 93       	push	r26
    16c6:	bf 93       	push	r27
    16c8:	ef 93       	push	r30
    16ca:	ff 93       	push	r31
    16cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    16d0:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <sh_bytes_count>
    16d4:	9f ef       	ldi	r25, 0xFF	; 255
    16d6:	9e 0f       	add	r25, r30
    16d8:	95 30       	cpi	r25, 0x05	; 5
    16da:	08 f5       	brcc	.+66     	; 0x171e <__vector_18+0x74>
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	9e 0f       	add	r25, r30
    16e0:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <sh_bytes_count>
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	e1 59       	subi	r30, 0x91	; 145
    16e8:	fc 4f       	sbci	r31, 0xFC	; 252
    16ea:	80 83       	st	Z, r24
    16ec:	96 30       	cpi	r25, 0x06	; 6
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <__vector_18+0x48>
    16f0:	05 c1       	rjmp	.+522    	; 0x18fc <__vector_18+0x252>
    16f2:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <sh_command_bytes_received+0x4>
    16f6:	98 50       	subi	r25, 0x08	; 8
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	9c 30       	cpi	r25, 0x0C	; 12
    16fc:	08 f4       	brcc	.+2      	; 0x1700 <__vector_18+0x56>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	0e 94 16 0b 	call	0x162c	; 0x162c <setBlocked>
    1704:	ea e7       	ldi	r30, 0x7A	; 122
    1706:	f3 e0       	ldi	r31, 0x03	; 3
    1708:	83 e4       	ldi	r24, 0x43	; 67
    170a:	80 83       	st	Z, r24
    170c:	88 e4       	ldi	r24, 0x48	; 72
    170e:	81 83       	std	Z+1, r24	; 0x01
    1710:	12 82       	std	Z+2, r1	; 0x02
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <serial_response_pending>
    1718:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <sh_bytes_count>
    171c:	ef c0       	rjmp	.+478    	; 0x18fc <__vector_18+0x252>
    171e:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <waiting_for_second_byte>
    1722:	99 23       	and	r25, r25
    1724:	09 f4       	brne	.+2      	; 0x1728 <__vector_18+0x7e>
    1726:	c0 c0       	rjmp	.+384    	; 0x18a8 <__vector_18+0x1fe>
    1728:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <first_byte_of_potential_command>
    172c:	93 35       	cpi	r25, 0x53	; 83
    172e:	09 f0       	breq	.+2      	; 0x1732 <__vector_18+0x88>
    1730:	72 c0       	rjmp	.+228    	; 0x1816 <__vector_18+0x16c>
    1732:	84 35       	cpi	r24, 0x54	; 84
    1734:	71 f4       	brne	.+28     	; 0x1752 <__vector_18+0xa8>
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	0e 94 16 0b 	call	0x162c	; 0x162c <setBlocked>
    173c:	ea e7       	ldi	r30, 0x7A	; 122
    173e:	f3 e0       	ldi	r31, 0x03	; 3
    1740:	83 e4       	ldi	r24, 0x43	; 67
    1742:	80 83       	st	Z, r24
    1744:	84 e5       	ldi	r24, 0x54	; 84
    1746:	81 83       	std	Z+1, r24	; 0x01
    1748:	12 82       	std	Z+2, r1	; 0x02
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <serial_response_pending>
    1750:	a6 c0       	rjmp	.+332    	; 0x189e <__vector_18+0x1f4>
    1752:	8c 34       	cpi	r24, 0x4C	; 76
    1754:	71 f4       	brne	.+28     	; 0x1772 <__vector_18+0xc8>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	0e 94 16 0b 	call	0x162c	; 0x162c <setBlocked>
    175c:	ea e7       	ldi	r30, 0x7A	; 122
    175e:	f3 e0       	ldi	r31, 0x03	; 3
    1760:	83 e4       	ldi	r24, 0x43	; 67
    1762:	80 83       	st	Z, r24
    1764:	8c e4       	ldi	r24, 0x4C	; 76
    1766:	81 83       	std	Z+1, r24	; 0x01
    1768:	12 82       	std	Z+2, r1	; 0x02
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <serial_response_pending>
    1770:	96 c0       	rjmp	.+300    	; 0x189e <__vector_18+0x1f4>
    1772:	88 34       	cpi	r24, 0x48	; 72
    1774:	51 f4       	brne	.+20     	; 0x178a <__vector_18+0xe0>
    1776:	ef e6       	ldi	r30, 0x6F	; 111
    1778:	f3 e0       	ldi	r31, 0x03	; 3
    177a:	83 e5       	ldi	r24, 0x53	; 83
    177c:	80 83       	st	Z, r24
    177e:	88 e4       	ldi	r24, 0x48	; 72
    1780:	81 83       	std	Z+1, r24	; 0x01
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <sh_bytes_count>
    1788:	8a c0       	rjmp	.+276    	; 0x189e <__vector_18+0x1f4>
    178a:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <uart_head>
    178e:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <uart_head+0x1>
    1792:	2f 5f       	subi	r18, 0xFF	; 255
    1794:	3f 4f       	sbci	r19, 0xFF	; 255
    1796:	2f 77       	andi	r18, 0x7F	; 127
    1798:	30 78       	andi	r19, 0x80	; 128
    179a:	33 23       	and	r19, r19
    179c:	34 f4       	brge	.+12     	; 0x17aa <__vector_18+0x100>
    179e:	21 50       	subi	r18, 0x01	; 1
    17a0:	31 09       	sbc	r19, r1
    17a2:	20 68       	ori	r18, 0x80	; 128
    17a4:	3f 6f       	ori	r19, 0xFF	; 255
    17a6:	2f 5f       	subi	r18, 0xFF	; 255
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	40 91 76 03 	lds	r20, 0x0376	; 0x800376 <uart_tail>
    17ae:	50 91 77 03 	lds	r21, 0x0377	; 0x800377 <uart_tail+0x1>
    17b2:	24 17       	cp	r18, r20
    17b4:	35 07       	cpc	r19, r21
    17b6:	59 f0       	breq	.+22     	; 0x17ce <__vector_18+0x124>
    17b8:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <uart_head>
    17bc:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <uart_head+0x1>
    17c0:	e3 58       	subi	r30, 0x83	; 131
    17c2:	fc 4f       	sbci	r31, 0xFC	; 252
    17c4:	90 83       	st	Z, r25
    17c6:	30 93 79 03 	sts	0x0379, r19	; 0x800379 <uart_head+0x1>
    17ca:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <uart_head>
    17ce:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <uart_head>
    17d2:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <uart_head+0x1>
    17d6:	2f 5f       	subi	r18, 0xFF	; 255
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	2f 77       	andi	r18, 0x7F	; 127
    17dc:	30 78       	andi	r19, 0x80	; 128
    17de:	33 23       	and	r19, r19
    17e0:	34 f4       	brge	.+12     	; 0x17ee <__vector_18+0x144>
    17e2:	21 50       	subi	r18, 0x01	; 1
    17e4:	31 09       	sbc	r19, r1
    17e6:	20 68       	ori	r18, 0x80	; 128
    17e8:	3f 6f       	ori	r19, 0xFF	; 255
    17ea:	2f 5f       	subi	r18, 0xFF	; 255
    17ec:	3f 4f       	sbci	r19, 0xFF	; 255
    17ee:	40 91 76 03 	lds	r20, 0x0376	; 0x800376 <uart_tail>
    17f2:	50 91 77 03 	lds	r21, 0x0377	; 0x800377 <uart_tail+0x1>
    17f6:	24 17       	cp	r18, r20
    17f8:	35 07       	cpc	r19, r21
    17fa:	09 f4       	brne	.+2      	; 0x17fe <__vector_18+0x154>
    17fc:	50 c0       	rjmp	.+160    	; 0x189e <__vector_18+0x1f4>
    17fe:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <uart_head>
    1802:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <uart_head+0x1>
    1806:	e3 58       	subi	r30, 0x83	; 131
    1808:	fc 4f       	sbci	r31, 0xFC	; 252
    180a:	80 83       	st	Z, r24
    180c:	30 93 79 03 	sts	0x0379, r19	; 0x800379 <uart_head+0x1>
    1810:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <uart_head>
    1814:	44 c0       	rjmp	.+136    	; 0x189e <__vector_18+0x1f4>
    1816:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <uart_head>
    181a:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <uart_head+0x1>
    181e:	2f 5f       	subi	r18, 0xFF	; 255
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	2f 77       	andi	r18, 0x7F	; 127
    1824:	30 78       	andi	r19, 0x80	; 128
    1826:	33 23       	and	r19, r19
    1828:	34 f4       	brge	.+12     	; 0x1836 <__vector_18+0x18c>
    182a:	21 50       	subi	r18, 0x01	; 1
    182c:	31 09       	sbc	r19, r1
    182e:	20 68       	ori	r18, 0x80	; 128
    1830:	3f 6f       	ori	r19, 0xFF	; 255
    1832:	2f 5f       	subi	r18, 0xFF	; 255
    1834:	3f 4f       	sbci	r19, 0xFF	; 255
    1836:	40 91 76 03 	lds	r20, 0x0376	; 0x800376 <uart_tail>
    183a:	50 91 77 03 	lds	r21, 0x0377	; 0x800377 <uart_tail+0x1>
    183e:	24 17       	cp	r18, r20
    1840:	35 07       	cpc	r19, r21
    1842:	59 f0       	breq	.+22     	; 0x185a <__vector_18+0x1b0>
    1844:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <uart_head>
    1848:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <uart_head+0x1>
    184c:	e3 58       	subi	r30, 0x83	; 131
    184e:	fc 4f       	sbci	r31, 0xFC	; 252
    1850:	90 83       	st	Z, r25
    1852:	30 93 79 03 	sts	0x0379, r19	; 0x800379 <uart_head+0x1>
    1856:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <uart_head>
    185a:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <uart_head>
    185e:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <uart_head+0x1>
    1862:	2f 5f       	subi	r18, 0xFF	; 255
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	2f 77       	andi	r18, 0x7F	; 127
    1868:	30 78       	andi	r19, 0x80	; 128
    186a:	33 23       	and	r19, r19
    186c:	34 f4       	brge	.+12     	; 0x187a <__vector_18+0x1d0>
    186e:	21 50       	subi	r18, 0x01	; 1
    1870:	31 09       	sbc	r19, r1
    1872:	20 68       	ori	r18, 0x80	; 128
    1874:	3f 6f       	ori	r19, 0xFF	; 255
    1876:	2f 5f       	subi	r18, 0xFF	; 255
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
    187a:	40 91 76 03 	lds	r20, 0x0376	; 0x800376 <uart_tail>
    187e:	50 91 77 03 	lds	r21, 0x0377	; 0x800377 <uart_tail+0x1>
    1882:	24 17       	cp	r18, r20
    1884:	35 07       	cpc	r19, r21
    1886:	59 f0       	breq	.+22     	; 0x189e <__vector_18+0x1f4>
    1888:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <uart_head>
    188c:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <uart_head+0x1>
    1890:	e3 58       	subi	r30, 0x83	; 131
    1892:	fc 4f       	sbci	r31, 0xFC	; 252
    1894:	80 83       	st	Z, r24
    1896:	30 93 79 03 	sts	0x0379, r19	; 0x800379 <uart_head+0x1>
    189a:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <uart_head>
    189e:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <waiting_for_second_byte>
    18a2:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <first_byte_of_potential_command>
    18a6:	2a c0       	rjmp	.+84     	; 0x18fc <__vector_18+0x252>
    18a8:	83 35       	cpi	r24, 0x53	; 83
    18aa:	31 f4       	brne	.+12     	; 0x18b8 <__vector_18+0x20e>
    18ac:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <first_byte_of_potential_command>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <waiting_for_second_byte>
    18b6:	22 c0       	rjmp	.+68     	; 0x18fc <__vector_18+0x252>
    18b8:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <uart_head>
    18bc:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <uart_head+0x1>
    18c0:	2f 5f       	subi	r18, 0xFF	; 255
    18c2:	3f 4f       	sbci	r19, 0xFF	; 255
    18c4:	2f 77       	andi	r18, 0x7F	; 127
    18c6:	30 78       	andi	r19, 0x80	; 128
    18c8:	33 23       	and	r19, r19
    18ca:	34 f4       	brge	.+12     	; 0x18d8 <__vector_18+0x22e>
    18cc:	21 50       	subi	r18, 0x01	; 1
    18ce:	31 09       	sbc	r19, r1
    18d0:	20 68       	ori	r18, 0x80	; 128
    18d2:	3f 6f       	ori	r19, 0xFF	; 255
    18d4:	2f 5f       	subi	r18, 0xFF	; 255
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	40 91 76 03 	lds	r20, 0x0376	; 0x800376 <uart_tail>
    18dc:	50 91 77 03 	lds	r21, 0x0377	; 0x800377 <uart_tail+0x1>
    18e0:	24 17       	cp	r18, r20
    18e2:	35 07       	cpc	r19, r21
    18e4:	59 f0       	breq	.+22     	; 0x18fc <__vector_18+0x252>
    18e6:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <uart_head>
    18ea:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <uart_head+0x1>
    18ee:	e3 58       	subi	r30, 0x83	; 131
    18f0:	fc 4f       	sbci	r31, 0xFC	; 252
    18f2:	80 83       	st	Z, r24
    18f4:	30 93 79 03 	sts	0x0379, r19	; 0x800379 <uart_head+0x1>
    18f8:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <uart_head>
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	7f 91       	pop	r23
    190a:	6f 91       	pop	r22
    190c:	5f 91       	pop	r21
    190e:	4f 91       	pop	r20
    1910:	3f 91       	pop	r19
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <uart_buffer_empty>:
    191e:	40 91 78 03 	lds	r20, 0x0378	; 0x800378 <uart_head>
    1922:	50 91 79 03 	lds	r21, 0x0379	; 0x800379 <uart_head+0x1>
    1926:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <uart_tail>
    192a:	30 91 77 03 	lds	r19, 0x0377	; 0x800377 <uart_tail+0x1>
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	42 17       	cp	r20, r18
    1932:	53 07       	cpc	r21, r19
    1934:	09 f0       	breq	.+2      	; 0x1938 <uart_buffer_empty+0x1a>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	08 95       	ret

0000193c <uart_buffer_read_char>:

int uart_buffer_read_char(char *c) {
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) return 0;
    1942:	0e 94 8f 0c 	call	0x191e	; 0x191e <uart_buffer_empty>
    1946:	89 2b       	or	r24, r25
    1948:	e1 f4       	brne	.+56     	; 0x1982 <uart_buffer_read_char+0x46>
	*c = uart_buffer[uart_tail];
    194a:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <uart_tail>
    194e:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <uart_tail+0x1>
    1952:	e3 58       	subi	r30, 0x83	; 131
    1954:	fc 4f       	sbci	r31, 0xFC	; 252
    1956:	80 81       	ld	r24, Z
    1958:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
    195a:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <uart_tail>
    195e:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <uart_tail+0x1>
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	8f 77       	andi	r24, 0x7F	; 127
    1966:	90 78       	andi	r25, 0x80	; 128
    1968:	99 23       	and	r25, r25
    196a:	24 f4       	brge	.+8      	; 0x1974 <uart_buffer_read_char+0x38>
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	80 68       	ori	r24, 0x80	; 128
    1970:	9f 6f       	ori	r25, 0xFF	; 255
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <uart_tail+0x1>
    1978:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <uart_tail>
	return 1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <uart_buffer_read_char+0x4a>
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}

int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) return 0;
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <SerialRecebeChars>:

void SerialRecebeChars(int sizeS, char* string) {
    198c:	af 92       	push	r10
    198e:	bf 92       	push	r11
    1990:	cf 92       	push	r12
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	1f 92       	push	r1
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	6c 01       	movw	r12, r24
    19a8:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
    19aa:	e1 2c       	mov	r14, r1
    19ac:	f1 2c       	mov	r15, r1
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
    19ae:	00 e0       	ldi	r16, 0x00	; 0
    19b0:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100; // 1 segundo de timeout

	while (received < sizeS && timeout_count < timeout_limit) {
    19b2:	20 c0       	rjmp	.+64     	; 0x19f4 <SerialRecebeChars+0x68>
		char c;
		// Permite ao main loop enviar ACK mesmo com bloqueio
		if (serial_response_pending) {
    19b4:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <serial_response_pending>
    19b8:	88 23       	and	r24, r24
    19ba:	29 f0       	breq	.+10     	; 0x19c6 <SerialRecebeChars+0x3a>
			delay1ms(10); // Pequeno atraso para o main loop
    19bc:	8a e0       	ldi	r24, 0x0A	; 10
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
    19c4:	17 c0       	rjmp	.+46     	; 0x19f4 <SerialRecebeChars+0x68>
			continue; // Tenta novamente
		}

		if (uart_buffer_read_char(&c)) {
    19c6:	ce 01       	movw	r24, r28
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	0e 94 9e 0c 	call	0x193c	; 0x193c <uart_buffer_read_char>
    19ce:	89 2b       	or	r24, r25
    19d0:	51 f0       	breq	.+20     	; 0x19e6 <SerialRecebeChars+0x5a>
			string[received++] = c;
    19d2:	f5 01       	movw	r30, r10
    19d4:	e0 0f       	add	r30, r16
    19d6:	f1 1f       	adc	r31, r17
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	80 83       	st	Z, r24
    19dc:	0f 5f       	subi	r16, 0xFF	; 255
    19de:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0; // Reseta timeout
    19e0:	e1 2c       	mov	r14, r1
    19e2:	f1 2c       	mov	r15, r1
    19e4:	07 c0       	rjmp	.+14     	; 0x19f4 <SerialRecebeChars+0x68>
			} else {
			delay1ms(10); // Espera por dados
    19e6:	8a e0       	ldi	r24, 0x0A	; 10
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <delay1ms>
			timeout_count++;
    19ee:	8f ef       	ldi	r24, 0xFF	; 255
    19f0:	e8 1a       	sub	r14, r24
    19f2:	f8 0a       	sbc	r15, r24
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100; // 1 segundo de timeout

	while (received < sizeS && timeout_count < timeout_limit) {
    19f4:	0c 15       	cp	r16, r12
    19f6:	1d 05       	cpc	r17, r13
    19f8:	24 f4       	brge	.+8      	; 0x1a02 <SerialRecebeChars+0x76>
    19fa:	84 e6       	ldi	r24, 0x64	; 100
    19fc:	e8 16       	cp	r14, r24
    19fe:	f1 04       	cpc	r15, r1
    1a00:	cc f2       	brlt	.-78     	; 0x19b4 <SerialRecebeChars+0x28>
			} else {
			delay1ms(10); // Espera por dados
			timeout_count++;
		}
	}
	string[received] = '\0'; // Termina a string
    1a02:	f5 01       	movw	r30, r10
    1a04:	e0 0f       	add	r30, r16
    1a06:	f1 1f       	adc	r31, r17
    1a08:	10 82       	st	Z, r1
}
    1a0a:	0f 90       	pop	r0
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	df 90       	pop	r13
    1a1a:	cf 90       	pop	r12
    1a1c:	bf 90       	pop	r11
    1a1e:	af 90       	pop	r10
    1a20:	08 95       	ret

00001a22 <prepara_teclado>:
    1a22:	84 b1       	in	r24, 0x04	; 4
    1a24:	83 60       	ori	r24, 0x03	; 3
    1a26:	84 b9       	out	0x04, r24	; 4
    1a28:	8a b1       	in	r24, 0x0a	; 10
    1a2a:	80 6c       	ori	r24, 0xC0	; 192
    1a2c:	8a b9       	out	0x0a, r24	; 10
    1a2e:	8a b1       	in	r24, 0x0a	; 10
    1a30:	83 7c       	andi	r24, 0xC3	; 195
    1a32:	8a b9       	out	0x0a, r24	; 10
    1a34:	8b b1       	in	r24, 0x0b	; 11
    1a36:	8c 63       	ori	r24, 0x3C	; 60
    1a38:	8b b9       	out	0x0b, r24	; 11
    1a3a:	08 95       	ret

00001a3c <atraso_debounce>:
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <atraso_debounce+0x6>
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	1a 82       	std	Y+2, r1	; 0x02
    1a48:	19 82       	std	Y+1, r1	; 0x01
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <atraso_debounce+0x1a>
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5a:	88 3e       	cpi	r24, 0xE8	; 232
    1a5c:	93 40       	sbci	r25, 0x03	; 3
    1a5e:	b0 f3       	brcs	.-20     	; 0x1a4c <atraso_debounce+0x10>
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	08 95       	ret

00001a6a <debounce>:
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	18 2f       	mov	r17, r24
    1a72:	c0 e0       	ldi	r28, 0x00	; 0
    1a74:	d0 e0       	ldi	r29, 0x00	; 0
    1a76:	12 c0       	rjmp	.+36     	; 0x1a9c <debounce+0x32>
    1a78:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <atraso_debounce>
    1a7c:	29 b1       	in	r18, 0x09	; 9
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	01 2e       	mov	r0, r17
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <debounce+0x20>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <debounce+0x1c>
    1a8e:	82 23       	and	r24, r18
    1a90:	d8 13       	cpse	r29, r24
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <debounce+0x2e>
    1a94:	cf 5f       	subi	r28, 0xFF	; 255
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <debounce+0x30>
    1a98:	c0 e0       	ldi	r28, 0x00	; 0
    1a9a:	d8 2f       	mov	r29, r24
    1a9c:	c7 30       	cpi	r28, 0x07	; 7
    1a9e:	61 f7       	brne	.-40     	; 0x1a78 <debounce+0xe>
    1aa0:	8d 2f       	mov	r24, r29
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	08 95       	ret

00001aaa <varredura>:
    1aaa:	cf 93       	push	r28
    1aac:	85 b1       	in	r24, 0x05	; 5
    1aae:	83 60       	ori	r24, 0x03	; 3
    1ab0:	85 b9       	out	0x05, r24	; 5
    1ab2:	8b b1       	in	r24, 0x0b	; 11
    1ab4:	80 6c       	ori	r24, 0xC0	; 192
    1ab6:	8b b9       	out	0x0b, r24	; 11
    1ab8:	85 b1       	in	r24, 0x05	; 5
    1aba:	8d 7f       	andi	r24, 0xFD	; 253
    1abc:	85 b9       	out	0x05, r24	; 5
    1abe:	85 e0       	ldi	r24, 0x05	; 5
    1ac0:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1ac4:	81 11       	cpse	r24, r1
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <varredura+0x26>
    1ac8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1acc:	c1 e3       	ldi	r28, 0x31	; 49
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <varredura+0x28>
    1ad0:	c0 e0       	ldi	r28, 0x00	; 0
    1ad2:	84 e0       	ldi	r24, 0x04	; 4
    1ad4:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1ad8:	81 11       	cpse	r24, r1
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <varredura+0x38>
    1adc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1ae0:	c2 e3       	ldi	r28, 0x32	; 50
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1ae8:	81 11       	cpse	r24, r1
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <varredura+0x48>
    1aec:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1af0:	c3 e3       	ldi	r28, 0x33	; 51
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1af8:	81 11       	cpse	r24, r1
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <varredura+0x58>
    1afc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1b00:	c1 e4       	ldi	r28, 0x41	; 65
    1b02:	85 b1       	in	r24, 0x05	; 5
    1b04:	82 60       	ori	r24, 0x02	; 2
    1b06:	85 b9       	out	0x05, r24	; 5
    1b08:	85 b1       	in	r24, 0x05	; 5
    1b0a:	8e 7f       	andi	r24, 0xFE	; 254
    1b0c:	85 b9       	out	0x05, r24	; 5
    1b0e:	85 e0       	ldi	r24, 0x05	; 5
    1b10:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1b14:	81 11       	cpse	r24, r1
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <varredura+0x74>
    1b18:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1b1c:	c4 e3       	ldi	r28, 0x34	; 52
    1b1e:	84 e0       	ldi	r24, 0x04	; 4
    1b20:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1b24:	81 11       	cpse	r24, r1
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <varredura+0x84>
    1b28:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1b2c:	c5 e3       	ldi	r28, 0x35	; 53
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1b34:	81 11       	cpse	r24, r1
    1b36:	03 c0       	rjmp	.+6      	; 0x1b3e <varredura+0x94>
    1b38:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1b3c:	c6 e3       	ldi	r28, 0x36	; 54
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1b44:	81 11       	cpse	r24, r1
    1b46:	03 c0       	rjmp	.+6      	; 0x1b4e <varredura+0xa4>
    1b48:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1b4c:	c2 e4       	ldi	r28, 0x42	; 66
    1b4e:	85 b1       	in	r24, 0x05	; 5
    1b50:	81 60       	ori	r24, 0x01	; 1
    1b52:	85 b9       	out	0x05, r24	; 5
    1b54:	8b b1       	in	r24, 0x0b	; 11
    1b56:	8f 77       	andi	r24, 0x7F	; 127
    1b58:	8b b9       	out	0x0b, r24	; 11
    1b5a:	85 e0       	ldi	r24, 0x05	; 5
    1b5c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1b60:	81 11       	cpse	r24, r1
    1b62:	03 c0       	rjmp	.+6      	; 0x1b6a <varredura+0xc0>
    1b64:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1b68:	c7 e3       	ldi	r28, 0x37	; 55
    1b6a:	84 e0       	ldi	r24, 0x04	; 4
    1b6c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1b70:	81 11       	cpse	r24, r1
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <varredura+0xd0>
    1b74:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1b78:	c8 e3       	ldi	r28, 0x38	; 56
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1b80:	81 11       	cpse	r24, r1
    1b82:	03 c0       	rjmp	.+6      	; 0x1b8a <varredura+0xe0>
    1b84:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1b88:	c9 e3       	ldi	r28, 0x39	; 57
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1b90:	81 11       	cpse	r24, r1
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <varredura+0xf0>
    1b94:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1b98:	c3 e4       	ldi	r28, 0x43	; 67
    1b9a:	8b b1       	in	r24, 0x0b	; 11
    1b9c:	80 68       	ori	r24, 0x80	; 128
    1b9e:	8b b9       	out	0x0b, r24	; 11
    1ba0:	8b b1       	in	r24, 0x0b	; 11
    1ba2:	8f 7b       	andi	r24, 0xBF	; 191
    1ba4:	8b b9       	out	0x0b, r24	; 11
    1ba6:	85 e0       	ldi	r24, 0x05	; 5
    1ba8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1bac:	81 11       	cpse	r24, r1
    1bae:	03 c0       	rjmp	.+6      	; 0x1bb6 <varredura+0x10c>
    1bb0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1bb4:	ca e2       	ldi	r28, 0x2A	; 42
    1bb6:	84 e0       	ldi	r24, 0x04	; 4
    1bb8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1bbc:	81 11       	cpse	r24, r1
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <varredura+0x11c>
    1bc0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1bc4:	c0 e3       	ldi	r28, 0x30	; 48
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1bcc:	81 11       	cpse	r24, r1
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <varredura+0x12c>
    1bd0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1bd4:	c3 e2       	ldi	r28, 0x23	; 35
    1bd6:	82 e0       	ldi	r24, 0x02	; 2
    1bd8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <debounce>
    1bdc:	81 11       	cpse	r24, r1
    1bde:	03 c0       	rjmp	.+6      	; 0x1be6 <varredura+0x13c>
    1be0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1be4:	c4 e4       	ldi	r28, 0x44	; 68
    1be6:	8b b1       	in	r24, 0x0b	; 11
    1be8:	80 64       	ori	r24, 0x40	; 64
    1bea:	8b b9       	out	0x0b, r24	; 11
    1bec:	8c 2f       	mov	r24, r28
    1bee:	cf 91       	pop	r28
    1bf0:	08 95       	ret

00001bf2 <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    1bf2:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    1bf4:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    1bf6:	85 e0       	ldi	r24, 0x05	; 5
    1bf8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    1bfa:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    1bfe:	81 ef       	ldi	r24, 0xF1	; 241
    1c00:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	08 c0       	rjmp	.+16     	; 0x1c18 <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    1c08:	a9 9b       	sbis	0x15, 1	; 21
    1c0a:	fe cf       	rjmp	.-4      	; 0x1c08 <delay1ms+0x16>
		TCNT0 = 241;
    1c0c:	91 ef       	ldi	r25, 0xF1	; 241
    1c0e:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    1c14:	2f 5f       	subi	r18, 0xFF	; 255
    1c16:	3f 4f       	sbci	r19, 0xFF	; 255
    1c18:	24 17       	cp	r18, r20
    1c1a:	35 07       	cpc	r19, r21
    1c1c:	ac f3       	brlt	.-22     	; 0x1c08 <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    1c1e:	15 bc       	out	0x25, r1	; 37
    1c20:	08 95       	ret

00001c22 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    1c22:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    1c24:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    1c2a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    1c2e:	85 ef       	ldi	r24, 0xF5	; 245
    1c30:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    1c38:	a9 9b       	sbis	0x15, 1	; 21
    1c3a:	fe cf       	rjmp	.-4      	; 0x1c38 <delay1us+0x16>
		TCNT0 = 245;
    1c3c:	95 ef       	ldi	r25, 0xF5	; 245
    1c3e:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    1c40:	95 b3       	in	r25, 0x15	; 21
    1c42:	92 60       	ori	r25, 0x02	; 2
    1c44:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    1c46:	2f 5f       	subi	r18, 0xFF	; 255
    1c48:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4a:	24 17       	cp	r18, r20
    1c4c:	35 07       	cpc	r19, r21
    1c4e:	a4 f3       	brlt	.-24     	; 0x1c38 <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    1c50:	15 bc       	out	0x25, r1	; 37
    1c52:	08 95       	ret

00001c54 <__udivmodsi4>:
    1c54:	a1 e2       	ldi	r26, 0x21	; 33
    1c56:	1a 2e       	mov	r1, r26
    1c58:	aa 1b       	sub	r26, r26
    1c5a:	bb 1b       	sub	r27, r27
    1c5c:	fd 01       	movw	r30, r26
    1c5e:	0d c0       	rjmp	.+26     	; 0x1c7a <__udivmodsi4_ep>

00001c60 <__udivmodsi4_loop>:
    1c60:	aa 1f       	adc	r26, r26
    1c62:	bb 1f       	adc	r27, r27
    1c64:	ee 1f       	adc	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	a2 17       	cp	r26, r18
    1c6a:	b3 07       	cpc	r27, r19
    1c6c:	e4 07       	cpc	r30, r20
    1c6e:	f5 07       	cpc	r31, r21
    1c70:	20 f0       	brcs	.+8      	; 0x1c7a <__udivmodsi4_ep>
    1c72:	a2 1b       	sub	r26, r18
    1c74:	b3 0b       	sbc	r27, r19
    1c76:	e4 0b       	sbc	r30, r20
    1c78:	f5 0b       	sbc	r31, r21

00001c7a <__udivmodsi4_ep>:
    1c7a:	66 1f       	adc	r22, r22
    1c7c:	77 1f       	adc	r23, r23
    1c7e:	88 1f       	adc	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	1a 94       	dec	r1
    1c84:	69 f7       	brne	.-38     	; 0x1c60 <__udivmodsi4_loop>
    1c86:	60 95       	com	r22
    1c88:	70 95       	com	r23
    1c8a:	80 95       	com	r24
    1c8c:	90 95       	com	r25
    1c8e:	9b 01       	movw	r18, r22
    1c90:	ac 01       	movw	r20, r24
    1c92:	bd 01       	movw	r22, r26
    1c94:	cf 01       	movw	r24, r30
    1c96:	08 95       	ret

00001c98 <__tablejump2__>:
    1c98:	ee 0f       	add	r30, r30
    1c9a:	ff 1f       	adc	r31, r31
    1c9c:	05 90       	lpm	r0, Z+
    1c9e:	f4 91       	lpm	r31, Z
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	09 94       	ijmp

00001ca4 <atol>:
    1ca4:	1f 93       	push	r17
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	99 27       	eor	r25, r25
    1caa:	88 27       	eor	r24, r24
    1cac:	bc 01       	movw	r22, r24
    1cae:	e8 94       	clt
    1cb0:	11 91       	ld	r17, Z+
    1cb2:	10 32       	cpi	r17, 0x20	; 32
    1cb4:	e9 f3       	breq	.-6      	; 0x1cb0 <atol+0xc>
    1cb6:	19 30       	cpi	r17, 0x09	; 9
    1cb8:	10 f0       	brcs	.+4      	; 0x1cbe <atol+0x1a>
    1cba:	1e 30       	cpi	r17, 0x0E	; 14
    1cbc:	c8 f3       	brcs	.-14     	; 0x1cb0 <atol+0xc>
    1cbe:	1b 32       	cpi	r17, 0x2B	; 43
    1cc0:	51 f0       	breq	.+20     	; 0x1cd6 <atol+0x32>
    1cc2:	1d 32       	cpi	r17, 0x2D	; 45
    1cc4:	49 f4       	brne	.+18     	; 0x1cd8 <atol+0x34>
    1cc6:	68 94       	set
    1cc8:	06 c0       	rjmp	.+12     	; 0x1cd6 <atol+0x32>
    1cca:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__mulsi_const_10>
    1cce:	61 0f       	add	r22, r17
    1cd0:	71 1d       	adc	r23, r1
    1cd2:	81 1d       	adc	r24, r1
    1cd4:	91 1d       	adc	r25, r1
    1cd6:	11 91       	ld	r17, Z+
    1cd8:	10 53       	subi	r17, 0x30	; 48
    1cda:	1a 30       	cpi	r17, 0x0A	; 10
    1cdc:	b0 f3       	brcs	.-20     	; 0x1cca <atol+0x26>
    1cde:	3e f4       	brtc	.+14     	; 0x1cee <atol+0x4a>
    1ce0:	90 95       	com	r25
    1ce2:	80 95       	com	r24
    1ce4:	70 95       	com	r23
    1ce6:	61 95       	neg	r22
    1ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cea:	8f 4f       	sbci	r24, 0xFF	; 255
    1cec:	9f 4f       	sbci	r25, 0xFF	; 255
    1cee:	1f 91       	pop	r17
    1cf0:	08 95       	ret

00001cf2 <memcpy>:
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <memcpy+0xa>
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	0d 92       	st	X+, r0
    1cfc:	41 50       	subi	r20, 0x01	; 1
    1cfe:	50 40       	sbci	r21, 0x00	; 0
    1d00:	d8 f7       	brcc	.-10     	; 0x1cf8 <memcpy+0x6>
    1d02:	08 95       	ret

00001d04 <strcat>:
    1d04:	fb 01       	movw	r30, r22
    1d06:	dc 01       	movw	r26, r24
    1d08:	0d 90       	ld	r0, X+
    1d0a:	00 20       	and	r0, r0
    1d0c:	e9 f7       	brne	.-6      	; 0x1d08 <strcat+0x4>
    1d0e:	11 97       	sbiw	r26, 0x01	; 1
    1d10:	01 90       	ld	r0, Z+
    1d12:	0d 92       	st	X+, r0
    1d14:	00 20       	and	r0, r0
    1d16:	e1 f7       	brne	.-8      	; 0x1d10 <strcat+0xc>
    1d18:	08 95       	ret

00001d1a <strcmp>:
    1d1a:	fb 01       	movw	r30, r22
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	8d 91       	ld	r24, X+
    1d20:	01 90       	ld	r0, Z+
    1d22:	80 19       	sub	r24, r0
    1d24:	01 10       	cpse	r0, r1
    1d26:	d9 f3       	breq	.-10     	; 0x1d1e <strcmp+0x4>
    1d28:	99 0b       	sbc	r25, r25
    1d2a:	08 95       	ret

00001d2c <strncat>:
    1d2c:	fb 01       	movw	r30, r22
    1d2e:	dc 01       	movw	r26, r24
    1d30:	0d 90       	ld	r0, X+
    1d32:	00 20       	and	r0, r0
    1d34:	e9 f7       	brne	.-6      	; 0x1d30 <strncat+0x4>
    1d36:	11 97       	sbiw	r26, 0x01	; 1
    1d38:	41 50       	subi	r20, 0x01	; 1
    1d3a:	50 40       	sbci	r21, 0x00	; 0
    1d3c:	28 f0       	brcs	.+10     	; 0x1d48 <strncat+0x1c>
    1d3e:	01 90       	ld	r0, Z+
    1d40:	00 20       	and	r0, r0
    1d42:	0d 92       	st	X+, r0
    1d44:	c9 f7       	brne	.-14     	; 0x1d38 <strncat+0xc>
    1d46:	08 95       	ret
    1d48:	1c 92       	st	X, r1
    1d4a:	08 95       	ret

00001d4c <strncpy>:
    1d4c:	fb 01       	movw	r30, r22
    1d4e:	dc 01       	movw	r26, r24
    1d50:	41 50       	subi	r20, 0x01	; 1
    1d52:	50 40       	sbci	r21, 0x00	; 0
    1d54:	48 f0       	brcs	.+18     	; 0x1d68 <strncpy+0x1c>
    1d56:	01 90       	ld	r0, Z+
    1d58:	0d 92       	st	X+, r0
    1d5a:	00 20       	and	r0, r0
    1d5c:	c9 f7       	brne	.-14     	; 0x1d50 <strncpy+0x4>
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <strncpy+0x16>
    1d60:	1d 92       	st	X+, r1
    1d62:	41 50       	subi	r20, 0x01	; 1
    1d64:	50 40       	sbci	r21, 0x00	; 0
    1d66:	e0 f7       	brcc	.-8      	; 0x1d60 <strncpy+0x14>
    1d68:	08 95       	ret

00001d6a <strstr>:
    1d6a:	fb 01       	movw	r30, r22
    1d6c:	51 91       	ld	r21, Z+
    1d6e:	55 23       	and	r21, r21
    1d70:	a9 f0       	breq	.+42     	; 0x1d9c <strstr+0x32>
    1d72:	bf 01       	movw	r22, r30
    1d74:	dc 01       	movw	r26, r24
    1d76:	4d 91       	ld	r20, X+
    1d78:	45 17       	cp	r20, r21
    1d7a:	41 11       	cpse	r20, r1
    1d7c:	e1 f7       	brne	.-8      	; 0x1d76 <strstr+0xc>
    1d7e:	59 f4       	brne	.+22     	; 0x1d96 <strstr+0x2c>
    1d80:	cd 01       	movw	r24, r26
    1d82:	01 90       	ld	r0, Z+
    1d84:	00 20       	and	r0, r0
    1d86:	49 f0       	breq	.+18     	; 0x1d9a <strstr+0x30>
    1d88:	4d 91       	ld	r20, X+
    1d8a:	40 15       	cp	r20, r0
    1d8c:	41 11       	cpse	r20, r1
    1d8e:	c9 f3       	breq	.-14     	; 0x1d82 <strstr+0x18>
    1d90:	fb 01       	movw	r30, r22
    1d92:	41 11       	cpse	r20, r1
    1d94:	ef cf       	rjmp	.-34     	; 0x1d74 <strstr+0xa>
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	08 95       	ret

00001d9e <__mulsi_const_10>:
    1d9e:	59 2f       	mov	r21, r25
    1da0:	48 2f       	mov	r20, r24
    1da2:	37 2f       	mov	r19, r23
    1da4:	26 2f       	mov	r18, r22
    1da6:	66 0f       	add	r22, r22
    1da8:	77 1f       	adc	r23, r23
    1daa:	88 1f       	adc	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	66 0f       	add	r22, r22
    1db0:	77 1f       	adc	r23, r23
    1db2:	88 1f       	adc	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	62 0f       	add	r22, r18
    1db8:	73 1f       	adc	r23, r19
    1dba:	84 1f       	adc	r24, r20
    1dbc:	95 1f       	adc	r25, r21
    1dbe:	66 0f       	add	r22, r22
    1dc0:	77 1f       	adc	r23, r23
    1dc2:	88 1f       	adc	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	08 95       	ret

00001dc8 <_exit>:
    1dc8:	f8 94       	cli

00001dca <__stop_program>:
    1dca:	ff cf       	rjmp	.-2      	; 0x1dca <__stop_program>
