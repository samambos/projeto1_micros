
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018e  00800100  00000f0e  00000fa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  0080028e  0080028e  00001130  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002614  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f45  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001308  00000000  00000000  000048b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00005bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a7  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001325  00000000  00000000  00006827  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00007b4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 38       	cpi	r26, 0x8E	; 142
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ae e8       	ldi	r26, 0x8E	; 142
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
  9e:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mensagem_Inicial>:
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){

		LCD_texto_correndo(0, " Banco UFRGS ", 300, 0);
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	4c e2       	ldi	r20, 0x2C	; 44
  aa:	68 e0       	ldi	r22, 0x08	; 8
  ac:	71 e0       	ldi	r23, 0x01	; 1
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_texto_correndo>
		LCD_Escrever_Linha(1, 0, "Digite cartao: ");
  b4:	46 e1       	ldi	r20, 0x16	; 22
  b6:	51 e0       	ldi	r21, 0x01	; 1
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
  c0:	08 95       	ret

000000c2 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	9c 2f       	mov	r25, r28
  cc:	92 95       	swap	r25
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	89 2b       	or	r24, r25
  d2:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
  e6:	84 e6       	ldi	r24, 0x64	; 100
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 3c 07 	call	0xe78	; 0xe78 <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	cf 70       	andi	r28, 0x0F	; 15
  f4:	c8 2b       	or	r28, r24
  f6:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 13a:	08 95       	ret

0000013c <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 148:	08 95       	ret

0000014a <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	while(*texto) {
 150:	23 c0       	rjmp	.+70     	; 0x198 <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
 152:	98 b1       	in	r25, 0x08	; 8
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	89 2b       	or	r24, r25
 15c:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	80 62       	ori	r24, 0x20	; 32
 162:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 164:	88 b1       	in	r24, 0x08	; 8
 166:	80 61       	ori	r24, 0x10	; 16
 168:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 16a:	88 b1       	in	r24, 0x08	; 8
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
 170:	88 ec       	ldi	r24, 0xC8	; 200
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 3c 07 	call	0xe78	; 0xe78 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
 178:	98 b1       	in	r25, 0x08	; 8
 17a:	89 91       	ld	r24, Y+
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	89 2b       	or	r24, r25
 182:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 184:	88 b1       	in	r24, 0x08	; 8
 186:	80 61       	ori	r24, 0x10	; 16
 188:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	da cf       	rjmp	.-76     	; 0x152 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
 1aa:	81 11       	cpse	r24, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <LCD_Escrever_Linha+0x1a>
 1ae:	60 31       	cpi	r22, 0x10	; 16
 1b0:	30 f4       	brcc	.+12     	; 0x1be <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
 1b2:	86 2f       	mov	r24, r22
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
 1c2:	60 31       	cpi	r22, 0x10	; 16
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
 1c6:	86 2f       	mov	r24, r22
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	80 6c       	ori	r24, 0xC0	; 192
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <LCD_texto_correndo>:

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
 1e2:	6f 92       	push	r6
 1e4:	7f 92       	push	r7
 1e6:	8f 92       	push	r8
 1e8:	9f 92       	push	r9
 1ea:	af 92       	push	r10
 1ec:	bf 92       	push	r11
 1ee:	cf 92       	push	r12
 1f0:	df 92       	push	r13
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	61 97       	sbiw	r28, 0x11	; 17
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	78 2e       	mov	r7, r24
 210:	4a 01       	movw	r8, r20
 212:	62 2e       	mov	r6, r18
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 214:	cd b6       	in	r12, 0x3d	; 61
 216:	de b6       	in	r13, 0x3e	; 62
	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
}

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
 218:	ad b6       	in	r10, 0x3d	; 61
 21a:	be b6       	in	r11, 0x3e	; 62
    uint8_t tamanho = strlen(texto);
 21c:	fb 01       	movw	r30, r22
 21e:	01 90       	ld	r0, Z+
 220:	00 20       	and	r0, r0
 222:	e9 f7       	brne	.-6      	; 0x21e <LCD_texto_correndo+0x3c>
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	e6 1b       	sub	r30, r22
 228:	f7 0b       	sbc	r31, r23
 22a:	0e 2f       	mov	r16, r30
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
 22c:	e1 31       	cpi	r30, 0x11	; 17
 22e:	28 f4       	brcc	.+10     	; 0x23a <LCD_texto_correndo+0x58>
        LCD_Escrever_Linha(linha, 0, texto);
 230:	ab 01       	movw	r20, r22
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
        return;
 238:	42 c0       	rjmp	.+132    	; 0x2be <LCD_texto_correndo+0xdc>
    }
    
    // Adiciona espaços no final para melhor visualização
    char texto_extendido[tamanho + 17];
 23a:	ff 27       	eor	r31, r31
 23c:	71 96       	adiw	r30, 0x11	; 17
 23e:	8d b7       	in	r24, 0x3d	; 61
 240:	9e b7       	in	r25, 0x3e	; 62
 242:	8e 1b       	sub	r24, r30
 244:	9f 0b       	sbc	r25, r31
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	9e bf       	out	0x3e, r25	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	8d bf       	out	0x3d, r24	; 61
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	7c 01       	movw	r14, r24
    strcpy(texto_extendido, texto);
 254:	0e 94 55 07 	call	0xeaa	; 0xeaa <strcpy>
    strcat(texto_extendido, "                "); // 16 espaços
 258:	d7 01       	movw	r26, r14
 25a:	0d 90       	ld	r0, X+
 25c:	00 20       	and	r0, r0
 25e:	e9 f7       	brne	.-6      	; 0x25a <LCD_texto_correndo+0x78>
 260:	11 97       	sbiw	r26, 0x01	; 1
 262:	81 e1       	ldi	r24, 0x11	; 17
 264:	e6 e2       	ldi	r30, 0x26	; 38
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	01 90       	ld	r0, Z+
 26a:	0d 92       	st	X+, r0
 26c:	8a 95       	dec	r24
 26e:	e1 f7       	brne	.-8      	; 0x268 <LCD_texto_correndo+0x86>
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	1b c0       	rjmp	.+54     	; 0x2aa <LCD_texto_correndo+0xc8>
            // Copia 16 caracteres começando na posição i
            strncpy(buffer, &texto_extendido[i], 16);
 274:	40 e1       	ldi	r20, 0x10	; 16
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	b7 01       	movw	r22, r14
 27a:	61 0f       	add	r22, r17
 27c:	71 1d       	adc	r23, r1
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <strncpy>
            buffer[16] = '\0';
 286:	19 8a       	std	Y+17, r1	; 0x11
            
            LCD_Escrever_Linha(linha, 0, buffer);
 288:	ae 01       	movw	r20, r28
 28a:	4f 5f       	subi	r20, 0xFF	; 255
 28c:	5f 4f       	sbci	r21, 0xFF	; 255
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	87 2d       	mov	r24, r7
 292:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
            delay1ms(velocidade_ms);
 296:	c4 01       	movw	r24, r8
 298:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
 29c:	0e 94 a0 06 	call	0xd40	; 0xd40 <varredura>
 2a0:	89 2b       	or	r24, r25
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <LCD_texto_correndo+0xc6>
 2a4:	66 20       	and	r6, r6
 2a6:	59 f0       	breq	.+22     	; 0x2be <LCD_texto_correndo+0xdc>
    char texto_extendido[tamanho + 17];
    strcpy(texto_extendido, texto);
    strcat(texto_extendido, "                "); // 16 espaços
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
 2a8:	1f 5f       	subi	r17, 0xFF	; 255
 2aa:	01 17       	cp	r16, r17
 2ac:	18 f7       	brcc	.-58     	; 0x274 <LCD_texto_correndo+0x92>
            delay1ms(velocidade_ms);
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 2ae:	61 10       	cpse	r6, r1
 2b0:	df cf       	rjmp	.-66     	; 0x270 <LCD_texto_correndo+0x8e>
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	be be       	out	0x3e, r11	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	ad be       	out	0x3d, r10	; 61
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <LCD_texto_correndo+0xe6>
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
        LCD_Escrever_Linha(linha, 0, texto);
        return;
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	be be       	out	0x3e, r11	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	ad be       	out	0x3d, r10	; 61
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de be       	out	0x3e, r13	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd be       	out	0x3d, r12	; 61
 2d2:	61 96       	adiw	r28, 0x11	; 17
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	df 90       	pop	r13
 2ec:	cf 90       	pop	r12
 2ee:	bf 90       	pop	r11
 2f0:	af 90       	pop	r10
 2f2:	9f 90       	pop	r9
 2f4:	8f 90       	pop	r8
 2f6:	7f 90       	pop	r7
 2f8:	6f 90       	pop	r6
 2fa:	08 95       	ret

000002fc <ler_codigo_aluno>:
#include "caixa_inicial.h"
#include "operacao.h"
#include "serial.h"

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	00 d0       	rcall	.+0      	; 0x30a <ler_codigo_aluno+0xe>
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
 310:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
 314:	47 e3       	ldi	r20, 0x37	; 55
 316:	51 e0       	ldi	r21, 0x01	; 1
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
 320:	46 e4       	ldi	r20, 0x46	; 70
 322:	51 e0       	ldi	r21, 0x01	; 1
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
#include "operacao.h"
#include "serial.h"

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
	int pos = 0;
 32c:	00 e0       	ldi	r16, 0x00	; 0
 32e:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 330:	1d c0       	rjmp	.+58     	; 0x36c <ler_codigo_aluno+0x70>
		if (isBlocked()) return;
 332:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 336:	89 2b       	or	r24, r25
 338:	f1 f4       	brne	.+60     	; 0x376 <ler_codigo_aluno+0x7a>
		tecla = varredura();
 33a:	0e 94 a0 06 	call	0xd40	; 0xd40 <varredura>
		if (tecla >= '0' && tecla <= '9') {
 33e:	90 ed       	ldi	r25, 0xD0	; 208
 340:	98 0f       	add	r25, r24
 342:	9a 30       	cpi	r25, 0x0A	; 10
 344:	98 f4       	brcc	.+38     	; 0x36c <ler_codigo_aluno+0x70>
			codigo[pos] = tecla;
 346:	f7 01       	movw	r30, r14
 348:	e0 0f       	add	r30, r16
 34a:	f1 1f       	adc	r31, r17
 34c:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
 352:	ae 01       	movw	r20, r28
 354:	4f 5f       	subi	r20, 0xFF	; 255
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	60 2f       	mov	r22, r16
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 360:	0f 5f       	subi	r16, 0xFF	; 255
 362:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
 364:	88 ec       	ldi	r24, 0xC8	; 200
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 36c:	06 30       	cpi	r16, 0x06	; 6
 36e:	11 05       	cpc	r17, r1
 370:	04 f3       	brlt	.-64     	; 0x332 <ler_codigo_aluno+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	codigo[6] = '\0';
 372:	f7 01       	movw	r30, r14
 374:	16 82       	std	Z+6, r1	; 0x06
}
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	08 95       	ret

00000388 <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	00 d0       	rcall	.+0      	; 0x396 <ler_senha+0xe>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
 39c:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite senha:");
 3a0:	4d e4       	ldi	r20, 0x4D	; 77
 3a2:	51 e0       	ldi	r21, 0x01	; 1
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
 3ac:	46 e4       	ldi	r20, 0x46	; 70
 3ae:	51 e0       	ldi	r21, 0x01	; 1
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
	int pos = 0;
 3b8:	00 e0       	ldi	r16, 0x00	; 0
 3ba:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 3bc:	1e c0       	rjmp	.+60     	; 0x3fa <ler_senha+0x72>
		if (isBlocked()) return;
 3be:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 3c2:	89 2b       	or	r24, r25
 3c4:	f9 f4       	brne	.+62     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		tecla = varredura();
 3c6:	0e 94 a0 06 	call	0xd40	; 0xd40 <varredura>
		if (tecla >= '0' && tecla <= '9') {
 3ca:	90 ed       	ldi	r25, 0xD0	; 208
 3cc:	98 0f       	add	r25, r24
 3ce:	9a 30       	cpi	r25, 0x0A	; 10
 3d0:	a0 f4       	brcc	.+40     	; 0x3fa <ler_senha+0x72>
			senha[pos] = tecla;
 3d2:	f7 01       	movw	r30, r14
 3d4:	e0 0f       	add	r30, r16
 3d6:	f1 1f       	adc	r31, r17
 3d8:	80 83       	st	Z, r24
			char temp[2] = { '*', '\0' };
 3da:	8a e2       	ldi	r24, 0x2A	; 42
 3dc:	89 83       	std	Y+1, r24	; 0x01
 3de:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
 3e0:	ae 01       	movw	r20, r28
 3e2:	4f 5f       	subi	r20, 0xFF	; 255
 3e4:	5f 4f       	sbci	r21, 0xFF	; 255
 3e6:	60 2f       	mov	r22, r16
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 3ee:	0f 5f       	subi	r16, 0xFF	; 255
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
 3f2:	88 ec       	ldi	r24, 0xC8	; 200
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 3fa:	06 30       	cpi	r16, 0x06	; 6
 3fc:	11 05       	cpc	r17, r1
 3fe:	fc f2       	brlt	.-66     	; 0x3be <ler_senha+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	senha[6] = '\0';
 400:	f7 01       	movw	r30, r14
 402:	16 82       	std	Z+6, r1	; 0x06
}
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	08 95       	ret

00000416 <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	a1 97       	sbiw	r28, 0x21	; 33
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	f8 94       	cli
 424:	de bf       	out	0x3e, r29	; 62
 426:	0f be       	out	0x3f, r0	; 63
 428:	cd bf       	out	0x3d, r28	; 61
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
 42a:	dc 01       	movw	r26, r24
 42c:	0d 90       	ld	r0, X+
 42e:	00 20       	and	r0, r0
 430:	e9 f7       	brne	.-6      	; 0x42c <validar_codigo_aluno+0x16>
 432:	11 97       	sbiw	r26, 0x01	; 1
 434:	a8 1b       	sub	r26, r24
 436:	b9 0b       	sbc	r27, r25
 438:	16 97       	sbiw	r26, 0x06	; 6
 43a:	09 f0       	breq	.+2      	; 0x43e <validar_codigo_aluno+0x28>
 43c:	53 c0       	rjmp	.+166    	; 0x4e4 <validar_codigo_aluno+0xce>
 43e:	db 01       	movw	r26, r22
 440:	0d 90       	ld	r0, X+
 442:	00 20       	and	r0, r0
 444:	e9 f7       	brne	.-6      	; 0x440 <validar_codigo_aluno+0x2a>
 446:	11 97       	sbiw	r26, 0x01	; 1
 448:	a6 1b       	sub	r26, r22
 44a:	b7 0b       	sbc	r27, r23
 44c:	16 97       	sbiw	r26, 0x06	; 6
 44e:	09 f0       	breq	.+2      	; 0x452 <validar_codigo_aluno+0x3c>
 450:	4c c0       	rjmp	.+152    	; 0x4ea <validar_codigo_aluno+0xd4>
 452:	fc 01       	movw	r30, r24

	char mensagem[14];
	mensagem[0] = 'C';
 454:	83 e4       	ldi	r24, 0x43	; 67
 456:	89 83       	std	Y+1, r24	; 0x01
	mensagem[1] = 'E';
 458:	85 e4       	ldi	r24, 0x45	; 69
 45a:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(&mensagem[2], codigo, 6);
 45c:	86 e0       	ldi	r24, 0x06	; 6
 45e:	de 01       	movw	r26, r28
 460:	13 96       	adiw	r26, 0x03	; 3
 462:	01 90       	ld	r0, Z+
 464:	0d 92       	st	X+, r0
 466:	8a 95       	dec	r24
 468:	e1 f7       	brne	.-8      	; 0x462 <validar_codigo_aluno+0x4c>
	memcpy(&mensagem[8], senha, 6);
 46a:	86 e0       	ldi	r24, 0x06	; 6
 46c:	fb 01       	movw	r30, r22
 46e:	de 01       	movw	r26, r28
 470:	19 96       	adiw	r26, 0x09	; 9
 472:	01 90       	ld	r0, Z+
 474:	0d 92       	st	X+, r0
 476:	8a 95       	dec	r24
 478:	e1 f7       	brne	.-8      	; 0x472 <validar_codigo_aluno+0x5c>

	SerialEnviaChars(14, mensagem);
 47a:	be 01       	movw	r22, r28
 47c:	6f 5f       	subi	r22, 0xFF	; 255
 47e:	7f 4f       	sbci	r23, 0xFF	; 255
 480:	8e e0       	ldi	r24, 0x0E	; 14
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <SerialEnviaChars>

	char resposta[19]; // +1 para \0
	SerialRecebeChars(18, resposta);
 488:	be 01       	movw	r22, r28
 48a:	61 5f       	subi	r22, 0xF1	; 241
 48c:	7f 4f       	sbci	r23, 0xFF	; 255
 48e:	82 e1       	ldi	r24, 0x12	; 18
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 16 06 	call	0xc2c	; 0xc2c <SerialRecebeChars>
	resposta[18] = '\0';
 496:	19 a2       	std	Y+33, r1	; 0x21

	LCD_limpar();
 498:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Resp Servidor:");
 49c:	4b e5       	ldi	r20, 0x5B	; 91
 49e:	51 e0       	ldi	r21, 0x01	; 1
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, resposta);
 4a8:	ae 01       	movw	r20, r28
 4aa:	41 5f       	subi	r20, 0xF1	; 241
 4ac:	5f 4f       	sbci	r21, 0xFF	; 255
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	delay1ms(2000);
 4b6:	80 ed       	ldi	r24, 0xD0	; 208
 4b8:	97 e0       	ldi	r25, 0x07	; 7
 4ba:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
	LCD_limpar();
 4be:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
 4c2:	8f 85       	ldd	r24, Y+15	; 0x0f
 4c4:	83 35       	cpi	r24, 0x53	; 83
 4c6:	a1 f4       	brne	.+40     	; 0x4f0 <validar_codigo_aluno+0xda>
 4c8:	88 89       	ldd	r24, Y+16	; 0x10
 4ca:	85 34       	cpi	r24, 0x45	; 69
 4cc:	a1 f4       	brne	.+40     	; 0x4f6 <validar_codigo_aluno+0xe0>
		if (strstr(resposta, "Nao autorizado") != NULL) {
 4ce:	6a e6       	ldi	r22, 0x6A	; 106
 4d0:	71 e0       	ldi	r23, 0x01	; 1
 4d2:	ce 01       	movw	r24, r28
 4d4:	0f 96       	adiw	r24, 0x0f	; 15
 4d6:	0e 94 6b 07 	call	0xed6	; 0xed6 <strstr>
 4da:	89 2b       	or	r24, r25
 4dc:	79 f0       	breq	.+30     	; 0x4fc <validar_codigo_aluno+0xe6>
			return 0;
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e c0       	rjmp	.+28     	; 0x500 <validar_codigo_aluno+0xea>
	}
	senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0b c0       	rjmp	.+22     	; 0x500 <validar_codigo_aluno+0xea>
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	08 c0       	rjmp	.+16     	; 0x500 <validar_codigo_aluno+0xea>
			return 0;
			} else {
			return 1;
		}
	}
	return 0;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <validar_codigo_aluno+0xea>
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <validar_codigo_aluno+0xea>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
		if (strstr(resposta, "Nao autorizado") != NULL) {
			return 0;
			} else {
			return 1;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
 500:	a1 96       	adiw	r28, 0x21	; 33
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <aguardar_desbloqueio>:

// Mostra mensagem enquanto bloqueado
void aguardar_desbloqueio() {
	LCD_limpar();
 512:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
 516:	49 e7       	ldi	r20, 0x79	; 121
 518:	51 e0       	ldi	r21, 0x01	; 1
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
 522:	46 e8       	ldi	r20, 0x86	; 134
 524:	51 e0       	ldi	r21, 0x01	; 1
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	while (isBlocked()) {
 52e:	06 c0       	rjmp	.+12     	; 0x53c <aguardar_desbloqueio+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 530:	8f e4       	ldi	r24, 0x4F	; 79
 532:	93 ec       	ldi	r25, 0xC3	; 195
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <aguardar_desbloqueio+0x22>
 538:	00 c0       	rjmp	.+0      	; 0x53a <aguardar_desbloqueio+0x28>
 53a:	00 00       	nop
 53c:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 540:	89 2b       	or	r24, r25
 542:	b1 f7       	brne	.-20     	; 0x530 <aguardar_desbloqueio+0x1e>
		_delay_ms(200);
	}
	LCD_limpar();
 544:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
 548:	08 95       	ret

0000054a <main>:
}

int main(void) {
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	66 97       	sbiw	r28, 0x16	; 22
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	de bf       	out	0x3e, r29	; 62
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
 55e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <prepara_teclado>
	LCD_iniciar();
 562:	0e 94 88 00 	call	0x110	; 0x110 <LCD_iniciar>
	initUART();
 566:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <initUART>

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
 56a:	88 e0       	ldi	r24, 0x08	; 8
 56c:	e0 e0       	ldi	r30, 0x00	; 0
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	de 01       	movw	r26, r28
 572:	1f 96       	adiw	r26, 0x0f	; 15
 574:	01 90       	ld	r0, Z+
 576:	0d 92       	st	X+, r0
 578:	8a 95       	dec	r24
 57a:	e1 f7       	brne	.-8      	; 0x574 <main+0x2a>
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	while (1) {
		if (isBlocked()) {
 57c:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 580:	89 2b       	or	r24, r25
 582:	19 f0       	breq	.+6      	; 0x58a <main+0x40>
			aguardar_desbloqueio();
 584:	0e 94 89 02 	call	0x512	; 0x512 <aguardar_desbloqueio>
			continue;
 588:	f9 cf       	rjmp	.-14     	; 0x57c <main+0x32>
		}

		mensagem_Inicial();
 58a:	0e 94 53 00 	call	0xa6	; 0xa6 <mensagem_Inicial>

		while (varredura() == 0) {
 58e:	04 c0       	rjmp	.+8      	; 0x598 <main+0x4e>
			if (isBlocked()) break;
 590:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 594:	89 2b       	or	r24, r25
 596:	21 f4       	brne	.+8      	; 0x5a0 <main+0x56>
			continue;
		}

		mensagem_Inicial();

		while (varredura() == 0) {
 598:	0e 94 a0 06 	call	0xd40	; 0xd40 <varredura>
 59c:	88 23       	and	r24, r24
 59e:	c1 f3       	breq	.-16     	; 0x590 <main+0x46>
			if (isBlocked()) break;
		}
		if (isBlocked()) continue;
 5a0:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 5a4:	89 2b       	or	r24, r25
 5a6:	51 f7       	brne	.-44     	; 0x57c <main+0x32>

		ler_codigo_aluno(codigo_aluno);
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ler_codigo_aluno>
		if (isBlocked()) continue;
 5b0:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 5b4:	89 2b       	or	r24, r25
 5b6:	11 f7       	brne	.-60     	; 0x57c <main+0x32>

		ler_senha(senha_aluno);
 5b8:	ce 01       	movw	r24, r28
 5ba:	08 96       	adiw	r24, 0x08	; 8
 5bc:	0e 94 c4 01 	call	0x388	; 0x388 <ler_senha>
		if (isBlocked()) continue;
 5c0:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 5c4:	89 2b       	or	r24, r25
 5c6:	d1 f6       	brne	.-76     	; 0x57c <main+0x32>

		if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
 5c8:	be 01       	movw	r22, r28
 5ca:	68 5f       	subi	r22, 0xF8	; 248
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	ce 01       	movw	r24, r28
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	0e 94 0b 02 	call	0x416	; 0x416 <validar_codigo_aluno>
 5d6:	89 2b       	or	r24, r25
 5d8:	09 f4       	brne	.+2      	; 0x5dc <main+0x92>
 5da:	e0 c0       	rjmp	.+448    	; 0x79c <main+0x252>
			if (isBlocked()) continue;
 5dc:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 5e0:	89 2b       	or	r24, r25
 5e2:	61 f6       	brne	.-104    	; 0x57c <main+0x32>

			LCD_limpar();
 5e4:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Codigo valido!");
 5e8:	43 e9       	ldi	r20, 0x93	; 147
 5ea:	51 e0       	ldi	r21, 0x01	; 1
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Processando...");
 5f4:	42 ea       	ldi	r20, 0xA2	; 162
 5f6:	51 e0       	ldi	r21, 0x01	; 1
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			delay1ms(2000);
 600:	80 ed       	ldi	r24, 0xD0	; 208
 602:	97 e0       	ldi	r25, 0x07	; 7
 604:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>

			int menu_ativo = 1;
 608:	cc 24       	eor	r12, r12
 60a:	c3 94       	inc	r12
 60c:	d1 2c       	mov	r13, r1
			indice_menu = 0;
 60e:	e1 2c       	mov	r14, r1
 610:	f1 2c       	mov	r15, r1

			while (menu_ativo) {
 612:	bf c0       	rjmp	.+382    	; 0x792 <main+0x248>
				if (isBlocked()) break;
 614:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 618:	89 2b       	or	r24, r25
 61a:	09 f0       	breq	.+2      	; 0x61e <main+0xd4>
 61c:	af cf       	rjmp	.-162    	; 0x57c <main+0x32>

				LCD_limpar();
 61e:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
 622:	f7 01       	movw	r30, r14
 624:	ee 0f       	add	r30, r30
 626:	ff 1f       	adc	r31, r31
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	8c 0f       	add	r24, r28
 62e:	9d 1f       	adc	r25, r29
 630:	e8 0f       	add	r30, r24
 632:	f9 1f       	adc	r31, r25
 634:	46 85       	ldd	r20, Z+14	; 0x0e
 636:	57 85       	ldd	r21, Z+15	; 0x0f
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				if (indice_menu + 1 < total_opcoes) {
 640:	57 01       	movw	r10, r14
 642:	9f ef       	ldi	r25, 0xFF	; 255
 644:	a9 1a       	sub	r10, r25
 646:	b9 0a       	sbc	r11, r25
 648:	84 e0       	ldi	r24, 0x04	; 4
 64a:	a8 16       	cp	r10, r24
 64c:	b1 04       	cpc	r11, r1
 64e:	84 f4       	brge	.+32     	; 0x670 <main+0x126>
					LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
 650:	f5 01       	movw	r30, r10
 652:	ee 0f       	add	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	8c 0f       	add	r24, r28
 65c:	9d 1f       	adc	r25, r29
 65e:	e8 0f       	add	r30, r24
 660:	f9 1f       	adc	r31, r25
 662:	46 85       	ldd	r20, Z+14	; 0x0e
 664:	57 85       	ldd	r21, Z+15	; 0x0f
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 66e:	0b c0       	rjmp	.+22     	; 0x686 <main+0x13c>
					} else {
					LCD_Escrever_Linha(1, 0, " ");
 670:	45 e3       	ldi	r20, 0x35	; 53
 672:	51 e0       	ldi	r21, 0x01	; 1
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 67c:	04 c0       	rjmp	.+8      	; 0x686 <main+0x13c>
				}

				while ((tecla = varredura()) == 0) {
					if (isBlocked()) break;
 67e:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 682:	89 2b       	or	r24, r25
 684:	29 f4       	brne	.+10     	; 0x690 <main+0x146>
					LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
					} else {
					LCD_Escrever_Linha(1, 0, " ");
				}

				while ((tecla = varredura()) == 0) {
 686:	0e 94 a0 06 	call	0xd40	; 0xd40 <varredura>
 68a:	18 2f       	mov	r17, r24
 68c:	88 23       	and	r24, r24
 68e:	b9 f3       	breq	.-18     	; 0x67e <main+0x134>
					if (isBlocked()) break;
				}
				if (isBlocked()) break;
 690:	0e 94 d2 05 	call	0xba4	; 0xba4 <isBlocked>
 694:	89 2b       	or	r24, r25
 696:	09 f0       	breq	.+2      	; 0x69a <main+0x150>
 698:	71 cf       	rjmp	.-286    	; 0x57c <main+0x32>

				delay1ms(300);
 69a:	8c e2       	ldi	r24, 0x2C	; 44
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>

				if (tecla == 'B' && indice_menu < total_opcoes - 2) {
 6a2:	12 34       	cpi	r17, 0x42	; 66
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <main+0x166>
 6a6:	92 e0       	ldi	r25, 0x02	; 2
 6a8:	e9 16       	cp	r14, r25
 6aa:	f1 04       	cpc	r15, r1
 6ac:	0c f4       	brge	.+2      	; 0x6b0 <main+0x166>
 6ae:	70 c0       	rjmp	.+224    	; 0x790 <main+0x246>
					indice_menu++;
					} else if (tecla == 'A' && indice_menu > 0) {
 6b0:	11 34       	cpi	r17, 0x41	; 65
 6b2:	39 f4       	brne	.+14     	; 0x6c2 <main+0x178>
 6b4:	1e 14       	cp	r1, r14
 6b6:	1f 04       	cpc	r1, r15
 6b8:	24 f4       	brge	.+8      	; 0x6c2 <main+0x178>
					indice_menu--;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	e8 1a       	sub	r14, r24
 6be:	f1 08       	sbc	r15, r1
 6c0:	68 c0       	rjmp	.+208    	; 0x792 <main+0x248>
					} else if (tecla == '*') {
 6c2:	1a 32       	cpi	r17, 0x2A	; 42
 6c4:	79 f4       	brne	.+30     	; 0x6e4 <main+0x19a>
					LCD_limpar();
 6c6:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
					LCD_Escrever_Linha(0, 0, "Voltando...");
 6ca:	41 eb       	ldi	r20, 0xB1	; 177
 6cc:	51 e0       	ldi	r21, 0x01	; 1
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
					delay1ms(1000);
 6d6:	88 ee       	ldi	r24, 0xE8	; 232
 6d8:	93 e0       	ldi	r25, 0x03	; 3
 6da:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
					menu_ativo = 0;
 6de:	c1 2c       	mov	r12, r1
 6e0:	d1 2c       	mov	r13, r1
 6e2:	57 c0       	rjmp	.+174    	; 0x792 <main+0x248>
					} else if (tecla == opcoes[indice_menu][0]) {
 6e4:	f7 01       	movw	r30, r14
 6e6:	ee 0f       	add	r30, r30
 6e8:	ff 1f       	adc	r31, r31
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	8c 0f       	add	r24, r28
 6f0:	9d 1f       	adc	r25, r29
 6f2:	e8 0f       	add	r30, r24
 6f4:	f9 1f       	adc	r31, r25
 6f6:	06 84       	ldd	r0, Z+14	; 0x0e
 6f8:	f7 85       	ldd	r31, Z+15	; 0x0f
 6fa:	e0 2d       	mov	r30, r0
 6fc:	80 81       	ld	r24, Z
 6fe:	18 13       	cpse	r17, r24
 700:	48 c0       	rjmp	.+144    	; 0x792 <main+0x248>
					switch (tecla) {
 702:	12 33       	cpi	r17, 0x32	; 50
 704:	61 f0       	breq	.+24     	; 0x71e <main+0x1d4>
 706:	18 f4       	brcc	.+6      	; 0x70e <main+0x1c4>
 708:	11 33       	cpi	r17, 0x31	; 49
 70a:	31 f0       	breq	.+12     	; 0x718 <main+0x1ce>
 70c:	42 c0       	rjmp	.+132    	; 0x792 <main+0x248>
 70e:	13 33       	cpi	r17, 0x33	; 51
 710:	c9 f0       	breq	.+50     	; 0x744 <main+0x1fa>
 712:	14 33       	cpi	r17, 0x34	; 52
 714:	51 f1       	breq	.+84     	; 0x76a <main+0x220>
 716:	3d c0       	rjmp	.+122    	; 0x792 <main+0x248>
						case '1':
						realizar_saque();
 718:	0e 94 42 04 	call	0x884	; 0x884 <realizar_saque>
						break;
 71c:	3a c0       	rjmp	.+116    	; 0x792 <main+0x248>
						case '2':
						LCD_limpar();
 71e:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Deposito");
 722:	4a ef       	ldi	r20, 0xFA	; 250
 724:	51 e0       	ldi	r21, 0x01	; 1
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 72e:	4d eb       	ldi	r20, 0xBD	; 189
 730:	51 e0       	ldi	r21, 0x01	; 1
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 73a:	80 ed       	ldi	r24, 0xD0	; 208
 73c:	97 e0       	ldi	r25, 0x07	; 7
 73e:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
						break;
 742:	27 c0       	rjmp	.+78     	; 0x792 <main+0x248>
						case '3':
						LCD_limpar();
 744:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Pagamento");
 748:	45 e0       	ldi	r20, 0x05	; 5
 74a:	52 e0       	ldi	r21, 0x02	; 2
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 754:	4d eb       	ldi	r20, 0xBD	; 189
 756:	51 e0       	ldi	r21, 0x01	; 1
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 760:	80 ed       	ldi	r24, 0xD0	; 208
 762:	97 e0       	ldi	r25, 0x07	; 7
 764:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
						break;
 768:	14 c0       	rjmp	.+40     	; 0x792 <main+0x248>
						case '4':
						LCD_limpar();
 76a:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Saldo");
 76e:	41 e1       	ldi	r20, 0x11	; 17
 770:	52 e0       	ldi	r21, 0x02	; 2
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 77a:	4d eb       	ldi	r20, 0xBD	; 189
 77c:	51 e0       	ldi	r21, 0x01	; 1
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 786:	80 ed       	ldi	r24, 0xD0	; 208
 788:	97 e0       	ldi	r25, 0x07	; 7
 78a:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
						break;
 78e:	01 c0       	rjmp	.+2      	; 0x792 <main+0x248>
				if (isBlocked()) break;

				delay1ms(300);

				if (tecla == 'B' && indice_menu < total_opcoes - 2) {
					indice_menu++;
 790:	75 01       	movw	r14, r10
			delay1ms(2000);

			int menu_ativo = 1;
			indice_menu = 0;

			while (menu_ativo) {
 792:	c1 14       	cp	r12, r1
 794:	d1 04       	cpc	r13, r1
 796:	09 f0       	breq	.+2      	; 0x79a <main+0x250>
 798:	3d cf       	rjmp	.-390    	; 0x614 <main+0xca>
 79a:	f0 ce       	rjmp	.-544    	; 0x57c <main+0x32>
						break;
					}
				}
			}
			} else {
			LCD_limpar();
 79c:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Conta invalida!");
 7a0:	40 ed       	ldi	r20, 0xD0	; 208
 7a2:	51 e0       	ldi	r21, 0x01	; 1
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Tente novamente");
 7ac:	40 ee       	ldi	r20, 0xE0	; 224
 7ae:	51 e0       	ldi	r21, 0x01	; 1
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			delay1ms(2000);
 7b8:	80 ed       	ldi	r24, 0xD0	; 208
 7ba:	97 e0       	ldi	r25, 0x07	; 7
 7bc:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
 7c0:	dd ce       	rjmp	.-582    	; 0x57c <main+0x32>

000007c2 <enviar_mensagem_saque>:
		}
	}
}

// Função para enviar mensagem de saque para o servidor
void enviar_mensagem_saque(const char* valor) {
 7c2:	cf 92       	push	r12
 7c4:	df 92       	push	r13
 7c6:	ef 92       	push	r14
 7c8:	ff 92       	push	r15
 7ca:	0f 93       	push	r16
 7cc:	1f 93       	push	r17
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
 7d6:	bc 01       	movw	r22, r24
	// Copia o valor para a mensagem
	strncpy(&mensagem[3], valor, tamanho_valor);
	
	// Envia a mensagem via serial
	SerialEnviaChars(tamanho_mensagem, mensagem);
}
 7d8:	ed b6       	in	r14, 0x3d	; 61
 7da:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de saque para o servidor
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
 7dc:	fc 01       	movw	r30, r24
 7de:	01 90       	ld	r0, Z+
 7e0:	00 20       	and	r0, r0
 7e2:	e9 f7       	brne	.-6      	; 0x7de <enviar_mensagem_saque+0x1c>
 7e4:	31 97       	sbiw	r30, 0x01	; 1
 7e6:	af 01       	movw	r20, r30
 7e8:	48 1b       	sub	r20, r24
 7ea:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3; // 'C' + 'S' + n + valor
 7ec:	6a 01       	movw	r12, r20
 7ee:	83 e0       	ldi	r24, 0x03	; 3
 7f0:	c8 0e       	add	r12, r24
 7f2:	d1 1c       	adc	r13, r1
	
	char mensagem[tamanho_mensagem];
 7f4:	ed b7       	in	r30, 0x3d	; 61
 7f6:	fe b7       	in	r31, 0x3e	; 62
 7f8:	ec 19       	sub	r30, r12
 7fa:	fd 09       	sbc	r31, r13
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	fe bf       	out	0x3e, r31	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	ed bf       	out	0x3d, r30	; 61
 806:	0d b7       	in	r16, 0x3d	; 61
 808:	1e b7       	in	r17, 0x3e	; 62
 80a:	0f 5f       	subi	r16, 0xFF	; 255
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// Monta a mensagem conforme o protocolo
	mensagem[0] = 'C'; // Comando
 80e:	83 e4       	ldi	r24, 0x43	; 67
 810:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S'; // Subcomando (Saque)
 812:	83 e5       	ldi	r24, 0x53	; 83
 814:	f8 01       	movw	r30, r16
 816:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor; // Tamanho do valor
 818:	42 83       	std	Z+2, r20	; 0x02
	
	// Copia o valor para a mensagem
	strncpy(&mensagem[3], valor, tamanho_valor);
 81a:	8d b7       	in	r24, 0x3d	; 61
 81c:	9e b7       	in	r25, 0x3e	; 62
 81e:	04 96       	adiw	r24, 0x04	; 4
 820:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <strncpy>
	
	// Envia a mensagem via serial
	SerialEnviaChars(tamanho_mensagem, mensagem);
 824:	b8 01       	movw	r22, r16
 826:	c6 01       	movw	r24, r12
 828:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <SerialEnviaChars>
}
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	f8 94       	cli
 830:	fe be       	out	0x3e, r15	; 62
 832:	0f be       	out	0x3f, r0	; 63
 834:	ed be       	out	0x3d, r14	; 61
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	0f 91       	pop	r16
 83e:	ff 90       	pop	r15
 840:	ef 90       	pop	r14
 842:	df 90       	pop	r13
 844:	cf 90       	pop	r12
 846:	08 95       	ret

00000848 <receber_resposta_servidor>:

// Função para receber resposta do servidor
char receber_resposta_servidor(void) {
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	00 d0       	rcall	.+0      	; 0x84e <receber_resposta_servidor+0x6>
 84e:	1f 92       	push	r1
 850:	cd b7       	in	r28, 0x3d	; 61
 852:	de b7       	in	r29, 0x3e	; 62
	char resposta[3];
	
	// Aguarda a resposta do servidor (3 bytes)
	SerialRecebeChars(3, resposta);
 854:	be 01       	movw	r22, r28
 856:	6f 5f       	subi	r22, 0xFF	; 255
 858:	7f 4f       	sbci	r23, 0xFF	; 255
 85a:	83 e0       	ldi	r24, 0x03	; 3
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 16 06 	call	0xc2c	; 0xc2c <SerialRecebeChars>
	
	// Verifica se é uma resposta de saque
	if(resposta[0] == 'S' && resposta[1] == 'S') {
 862:	89 81       	ldd	r24, Y+1	; 0x01
 864:	83 35       	cpi	r24, 0x53	; 83
 866:	29 f4       	brne	.+10     	; 0x872 <receber_resposta_servidor+0x2a>
 868:	8a 81       	ldd	r24, Y+2	; 0x02
 86a:	83 35       	cpi	r24, 0x53	; 83
 86c:	21 f4       	brne	.+8      	; 0x876 <receber_resposta_servidor+0x2e>
		return resposta[2]; // Retorna 'O' ou 'I'
 86e:	8b 81       	ldd	r24, Y+3	; 0x03
 870:	03 c0       	rjmp	.+6      	; 0x878 <receber_resposta_servidor+0x30>
	}
	
	return 'E'; // Erro
 872:	85 e4       	ldi	r24, 0x45	; 69
 874:	01 c0       	rjmp	.+2      	; 0x878 <receber_resposta_servidor+0x30>
 876:	85 e4       	ldi	r24, 0x45	; 69
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	0f 90       	pop	r0
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	08 95       	ret

00000884 <realizar_saque>:
#include "LCD.h"
#include "teclado.h"
#include <util/delay.h>

// Função para realizar um saque
void realizar_saque(void) {
 884:	0f 93       	push	r16
 886:	1f 93       	push	r17
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
 890:	2a 97       	sbiw	r28, 0x0a	; 10
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	f8 94       	cli
 896:	de bf       	out	0x3e, r29	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
 89c:	fe 01       	movw	r30, r28
 89e:	31 96       	adiw	r30, 0x01	; 1
 8a0:	89 e0       	ldi	r24, 0x09	; 9
 8a2:	df 01       	movw	r26, r30
 8a4:	1d 92       	st	X+, r1
 8a6:	8a 95       	dec	r24
 8a8:	e9 f7       	brne	.-6      	; 0x8a4 <realizar_saque+0x20>
	int pos = 0;
	char tecla;
	
	// Solicita o valor do saque ao usuário
	LCD_limpar();
 8aa:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
 8ae:	47 e1       	ldi	r20, 0x17	; 23
 8b0:	52 e0       	ldi	r21, 0x02	; 2
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
 8ba:	47 e2       	ldi	r20, 0x27	; 39
 8bc:	52 e0       	ldi	r21, 0x02	; 2
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
#include <util/delay.h>

// Função para realizar um saque
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
 8c6:	00 e0       	ldi	r16, 0x00	; 0
 8c8:	10 e0       	ldi	r17, 0x00	; 0
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");
	
	while(1) {
		tecla = varredura();
 8ca:	0e 94 a0 06 	call	0xd40	; 0xd40 <varredura>
 8ce:	8a 87       	std	Y+10, r24	; 0x0a
		
		// Se for dígito e ainda houver espaço
		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE-1)) {
 8d0:	90 ed       	ldi	r25, 0xD0	; 208
 8d2:	98 0f       	add	r25, r24
 8d4:	9a 30       	cpi	r25, 0x0A	; 10
 8d6:	c8 f4       	brcc	.+50     	; 0x90a <__stack+0xb>
 8d8:	08 30       	cpi	r16, 0x08	; 8
 8da:	11 05       	cpc	r17, r1
 8dc:	b4 f4       	brge	.+44     	; 0x90a <__stack+0xb>
			valor_saque[pos] = tecla;
 8de:	e1 e0       	ldi	r30, 0x01	; 1
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	ec 0f       	add	r30, r28
 8e4:	fd 1f       	adc	r31, r29
 8e6:	e0 0f       	add	r30, r16
 8e8:	f1 1f       	adc	r31, r17
 8ea:	80 83       	st	Z, r24
			LCD_Escrever_Linha(1, 2+pos, &tecla);
 8ec:	62 e0       	ldi	r22, 0x02	; 2
 8ee:	60 0f       	add	r22, r16
 8f0:	ae 01       	movw	r20, r28
 8f2:	46 5f       	subi	r20, 0xF6	; 246
 8f4:	5f 4f       	sbci	r21, 0xFF	; 255
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 8fc:	0f 5f       	subi	r16, 0xFF	; 255
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200); // Debounce
 900:	88 ec       	ldi	r24, 0xC8	; 200
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 24 07 	call	0xe48	; 0xe48 <delay1ms>
	
	while(1) {
		tecla = varredura();
		
		// Se for dígito e ainda houver espaço
		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE-1)) {
 908:	e0 cf       	rjmp	.-64     	; 0x8ca <realizar_saque+0x46>
			LCD_Escrever_Linha(1, 2+pos, &tecla);
			pos++;
			delay1ms(200); // Debounce
		}
		// Tecla enter (confirmar)
		else if(tecla == '#' && pos > 0) {
 90a:	83 32       	cpi	r24, 0x23	; 35
 90c:	c1 f5       	brne	.+112    	; 0x97e <__stack+0x7f>
 90e:	10 16       	cp	r1, r16
 910:	11 06       	cpc	r1, r17
 912:	ac f5       	brge	.+106    	; 0x97e <__stack+0x7f>
			valor_saque[pos] = '\0'; // Finaliza a string
 914:	e1 e0       	ldi	r30, 0x01	; 1
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	ec 0f       	add	r30, r28
 91a:	fd 1f       	adc	r31, r29
 91c:	e0 0f       	add	r30, r16
 91e:	f1 1f       	adc	r31, r17
 920:	10 82       	st	Z, r1
			
			// Envia a mensagem de saque para o servidor
			enviar_mensagem_saque(valor_saque);
 922:	ce 01       	movw	r24, r28
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <enviar_mensagem_saque>
			
			// Aguarda resposta do servidor
			char resposta = receber_resposta_servidor();
 92a:	0e 94 24 04 	call	0x848	; 0x848 <receber_resposta_servidor>
 92e:	18 2f       	mov	r17, r24
			
			LCD_limpar();
 930:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			if(resposta == 'O') { // OK
 934:	1f 34       	cpi	r17, 0x4F	; 79
 936:	69 f4       	brne	.+26     	; 0x952 <__stack+0x53>
				LCD_Escrever_Linha(0, 0, "Saque realizado!");
 938:	4a e2       	ldi	r20, 0x2A	; 42
 93a:	52 e0       	ldi	r21, 0x02	; 2
 93c:	60 e0       	ldi	r22, 0x00	; 0
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Retire o dinheiro");
 944:	4b e3       	ldi	r20, 0x3B	; 59
 946:	52 e0       	ldi	r21, 0x02	; 2
 948:	60 e0       	ldi	r22, 0x00	; 0
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 950:	0c c0       	rjmp	.+24     	; 0x96a <__stack+0x6b>
				} else { // Saldo Insuficiente
				LCD_Escrever_Linha(0, 0, "Saldo insuficiente");
 952:	4d e4       	ldi	r20, 0x4D	; 77
 954:	52 e0       	ldi	r21, 0x02	; 2
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente outro valor");
 95e:	40 e6       	ldi	r20, 0x60	; 96
 960:	52 e0       	ldi	r21, 0x02	; 2
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 96a:	bf eb       	ldi	r27, 0xBF	; 191
 96c:	27 e2       	ldi	r18, 0x27	; 39
 96e:	89 e0       	ldi	r24, 0x09	; 9
 970:	b1 50       	subi	r27, 0x01	; 1
 972:	20 40       	sbci	r18, 0x00	; 0
 974:	80 40       	sbci	r24, 0x00	; 0
 976:	e1 f7       	brne	.-8      	; 0x970 <__stack+0x71>
 978:	00 c0       	rjmp	.+0      	; 0x97a <__stack+0x7b>
 97a:	00 00       	nop
 97c:	1a c0       	rjmp	.+52     	; 0x9b2 <__stack+0xb3>
			}
			_delay_ms(3000);
			break;
		}
		// Tecla cancelar
		else if(tecla == '*') {
 97e:	8a 32       	cpi	r24, 0x2A	; 42
 980:	09 f0       	breq	.+2      	; 0x984 <__stack+0x85>
 982:	a3 cf       	rjmp	.-186    	; 0x8ca <realizar_saque+0x46>
			LCD_limpar();
 984:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
 988:	42 e7       	ldi	r20, 0x72	; 114
 98a:	52 e0       	ldi	r21, 0x02	; 2
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
 994:	4b e7       	ldi	r20, 0x7B	; 123
 996:	52 e0       	ldi	r21, 0x02	; 2
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 9a0:	9f e7       	ldi	r25, 0x7F	; 127
 9a2:	aa e1       	ldi	r26, 0x1A	; 26
 9a4:	b6 e0       	ldi	r27, 0x06	; 6
 9a6:	91 50       	subi	r25, 0x01	; 1
 9a8:	a0 40       	sbci	r26, 0x00	; 0
 9aa:	b0 40       	sbci	r27, 0x00	; 0
 9ac:	e1 f7       	brne	.-8      	; 0x9a6 <__stack+0xa7>
 9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <__stack+0xb1>
 9b0:	00 00       	nop
			_delay_ms(2000);
			break;
		}
	}
}
 9b2:	2a 96       	adiw	r28, 0x0a	; 10
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	f8 94       	cli
 9b8:	de bf       	out	0x3e, r29	; 62
 9ba:	0f be       	out	0x3f, r0	; 63
 9bc:	cd bf       	out	0x3d, r28	; 61
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	1f 91       	pop	r17
 9c4:	0f 91       	pop	r16
 9c6:	08 95       	ret

000009c8 <initUART>:
	return bytes_recebidos;
}

int SerialTemDados() {
	return !uart_buffer_empty();
}
 9c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 9cc:	83 e3       	ldi	r24, 0x33	; 51
 9ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 9d2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 9d6:	88 e9       	ldi	r24, 0x98	; 152
 9d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 9dc:	86 e0       	ldi	r24, 0x06	; 6
 9de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 9e2:	78 94       	sei
 9e4:	08 95       	ret

000009e6 <SerialEnviaChars>:
 9e6:	ac 01       	movw	r20, r24
 9e8:	20 e0       	ldi	r18, 0x00	; 0
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	0c c0       	rjmp	.+24     	; 0xa06 <SerialEnviaChars+0x20>
 9ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 9f2:	95 ff       	sbrs	r25, 5
 9f4:	fc cf       	rjmp	.-8      	; 0x9ee <SerialEnviaChars+0x8>
 9f6:	fb 01       	movw	r30, r22
 9f8:	e2 0f       	add	r30, r18
 9fa:	f3 1f       	adc	r31, r19
 9fc:	90 81       	ld	r25, Z
 9fe:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 a02:	2f 5f       	subi	r18, 0xFF	; 255
 a04:	3f 4f       	sbci	r19, 0xFF	; 255
 a06:	24 17       	cp	r18, r20
 a08:	35 07       	cpc	r19, r21
 a0a:	8c f3       	brlt	.-30     	; 0x9ee <SerialEnviaChars+0x8>
 a0c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 a10:	86 ff       	sbrs	r24, 6
 a12:	fc cf       	rjmp	.-8      	; 0xa0c <SerialEnviaChars+0x26>
 a14:	e0 ec       	ldi	r30, 0xC0	; 192
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	80 81       	ld	r24, Z
 a1a:	80 64       	ori	r24, 0x40	; 64
 a1c:	80 83       	st	Z, r24
 a1e:	08 95       	ret

00000a20 <SerialEnviaString>:
 a20:	fc 01       	movw	r30, r24
 a22:	01 90       	ld	r0, Z+
 a24:	00 20       	and	r0, r0
 a26:	e9 f7       	brne	.-6      	; 0xa22 <SerialEnviaString+0x2>
 a28:	31 97       	sbiw	r30, 0x01	; 1
 a2a:	bc 01       	movw	r22, r24
 a2c:	9f 01       	movw	r18, r30
 a2e:	28 1b       	sub	r18, r24
 a30:	39 0b       	sbc	r19, r25
 a32:	c9 01       	movw	r24, r18
 a34:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <SerialEnviaChars>
 a38:	08 95       	ret

00000a3a <__vector_18>:
 a3a:	1f 92       	push	r1
 a3c:	0f 92       	push	r0
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	0f 92       	push	r0
 a42:	11 24       	eor	r1, r1
 a44:	2f 93       	push	r18
 a46:	3f 93       	push	r19
 a48:	4f 93       	push	r20
 a4a:	5f 93       	push	r21
 a4c:	6f 93       	push	r22
 a4e:	7f 93       	push	r23
 a50:	8f 93       	push	r24
 a52:	9f 93       	push	r25
 a54:	af 93       	push	r26
 a56:	bf 93       	push	r27
 a58:	ef 93       	push	r30
 a5a:	ff 93       	push	r31
 a5c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 a60:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <temp_index.1893>
 a64:	9f ef       	ldi	r25, 0xFF	; 255
 a66:	9e 0f       	add	r25, r30
 a68:	95 30       	cpi	r25, 0x05	; 5
 a6a:	d8 f4       	brcc	.+54     	; 0xaa2 <__vector_18+0x68>
 a6c:	91 e0       	ldi	r25, 0x01	; 1
 a6e:	9e 0f       	add	r25, r30
 a70:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <temp_index.1893>
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	e2 57       	subi	r30, 0x72	; 114
 a78:	fd 4f       	sbci	r31, 0xFD	; 253
 a7a:	80 83       	st	Z, r24
 a7c:	96 30       	cpi	r25, 0x06	; 6
 a7e:	09 f0       	breq	.+2      	; 0xa82 <__vector_18+0x48>
 a80:	80 c0       	rjmp	.+256    	; 0xb82 <__vector_18+0x148>
 a82:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x4>
 a86:	88 50       	subi	r24, 0x08	; 8
 a88:	91 e0       	ldi	r25, 0x01	; 1
 a8a:	8c 30       	cpi	r24, 0x0C	; 12
 a8c:	08 f4       	brcc	.+2      	; 0xa90 <__vector_18+0x56>
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <blocked>
 a94:	85 e8       	ldi	r24, 0x85	; 133
 a96:	92 e0       	ldi	r25, 0x02	; 2
 a98:	0e 94 10 05 	call	0xa20	; 0xa20 <SerialEnviaString>
 a9c:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <temp_index.1893>
 aa0:	70 c0       	rjmp	.+224    	; 0xb82 <__vector_18+0x148>
 aa2:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <comando_index>
 aa6:	91 e0       	ldi	r25, 0x01	; 1
 aa8:	9e 0f       	add	r25, r30
 aaa:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <comando_index>
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	e5 5e       	subi	r30, 0xE5	; 229
 ab2:	fc 4f       	sbci	r31, 0xFC	; 252
 ab4:	80 83       	st	Z, r24
 ab6:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <comando_index>
 aba:	82 30       	cpi	r24, 0x02	; 2
 abc:	09 f0       	breq	.+2      	; 0xac0 <__vector_18+0x86>
 abe:	61 c0       	rjmp	.+194    	; 0xb82 <__vector_18+0x148>
 ac0:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <comando_buffer>
 ac4:	83 35       	cpi	r24, 0x53	; 83
 ac6:	61 f4       	brne	.+24     	; 0xae0 <__vector_18+0xa6>
 ac8:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <comando_buffer+0x1>
 acc:	84 35       	cpi	r24, 0x54	; 84
 ace:	41 f4       	brne	.+16     	; 0xae0 <__vector_18+0xa6>
 ad0:	81 e0       	ldi	r24, 0x01	; 1
 ad2:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <blocked>
 ad6:	88 e8       	ldi	r24, 0x88	; 136
 ad8:	92 e0       	ldi	r25, 0x02	; 2
 ada:	0e 94 10 05 	call	0xa20	; 0xa20 <SerialEnviaString>
 ade:	4f c0       	rjmp	.+158    	; 0xb7e <__vector_18+0x144>
 ae0:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <comando_buffer>
 ae4:	83 35       	cpi	r24, 0x53	; 83
 ae6:	59 f4       	brne	.+22     	; 0xafe <__vector_18+0xc4>
 ae8:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <comando_buffer+0x1>
 aec:	8c 34       	cpi	r24, 0x4C	; 76
 aee:	39 f4       	brne	.+14     	; 0xafe <__vector_18+0xc4>
 af0:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <blocked>
 af4:	8b e8       	ldi	r24, 0x8B	; 139
 af6:	92 e0       	ldi	r25, 0x02	; 2
 af8:	0e 94 10 05 	call	0xa20	; 0xa20 <SerialEnviaString>
 afc:	40 c0       	rjmp	.+128    	; 0xb7e <__vector_18+0x144>
 afe:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <comando_buffer>
 b02:	83 35       	cpi	r24, 0x53	; 83
 b04:	a1 f5       	brne	.+104    	; 0xb6e <__vector_18+0x134>
 b06:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <comando_buffer+0x1>
 b0a:	88 34       	cpi	r24, 0x48	; 72
 b0c:	99 f5       	brne	.+102    	; 0xb74 <__vector_18+0x13a>
 b0e:	ee e8       	ldi	r30, 0x8E	; 142
 b10:	f2 e0       	ldi	r31, 0x02	; 2
 b12:	83 e5       	ldi	r24, 0x53	; 83
 b14:	80 83       	st	Z, r24
 b16:	88 e4       	ldi	r24, 0x48	; 72
 b18:	81 83       	std	Z+1, r24	; 0x01
 b1a:	82 e0       	ldi	r24, 0x02	; 2
 b1c:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <temp_index.1893>
 b20:	2e c0       	rjmp	.+92     	; 0xb7e <__vector_18+0x144>
 b22:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <uart_head>
 b26:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <uart_head+0x1>
 b2a:	01 96       	adiw	r24, 0x01	; 1
 b2c:	8f 77       	andi	r24, 0x7F	; 127
 b2e:	90 78       	andi	r25, 0x80	; 128
 b30:	99 23       	and	r25, r25
 b32:	24 f4       	brge	.+8      	; 0xb3c <__vector_18+0x102>
 b34:	01 97       	sbiw	r24, 0x01	; 1
 b36:	80 68       	ori	r24, 0x80	; 128
 b38:	9f 6f       	ori	r25, 0xFF	; 255
 b3a:	01 96       	adiw	r24, 0x01	; 1
 b3c:	40 91 97 02 	lds	r20, 0x0297	; 0x800297 <uart_tail>
 b40:	50 91 98 02 	lds	r21, 0x0298	; 0x800298 <uart_tail+0x1>
 b44:	84 17       	cp	r24, r20
 b46:	95 07       	cpc	r25, r21
 b48:	79 f0       	breq	.+30     	; 0xb68 <__vector_18+0x12e>
 b4a:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <uart_head>
 b4e:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <uart_head+0x1>
 b52:	d9 01       	movw	r26, r18
 b54:	a5 5e       	subi	r26, 0xE5	; 229
 b56:	bc 4f       	sbci	r27, 0xFC	; 252
 b58:	4c 91       	ld	r20, X
 b5a:	e5 56       	subi	r30, 0x65	; 101
 b5c:	fd 4f       	sbci	r31, 0xFD	; 253
 b5e:	40 83       	st	Z, r20
 b60:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <uart_head+0x1>
 b64:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <uart_head>
 b68:	2f 5f       	subi	r18, 0xFF	; 255
 b6a:	3f 4f       	sbci	r19, 0xFF	; 255
 b6c:	05 c0       	rjmp	.+10     	; 0xb78 <__vector_18+0x13e>
 b6e:	20 e0       	ldi	r18, 0x00	; 0
 b70:	30 e0       	ldi	r19, 0x00	; 0
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <__vector_18+0x13e>
 b74:	20 e0       	ldi	r18, 0x00	; 0
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	22 30       	cpi	r18, 0x02	; 2
 b7a:	31 05       	cpc	r19, r1
 b7c:	94 f2       	brlt	.-92     	; 0xb22 <__vector_18+0xe8>
 b7e:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <comando_index>
 b82:	ff 91       	pop	r31
 b84:	ef 91       	pop	r30
 b86:	bf 91       	pop	r27
 b88:	af 91       	pop	r26
 b8a:	9f 91       	pop	r25
 b8c:	8f 91       	pop	r24
 b8e:	7f 91       	pop	r23
 b90:	6f 91       	pop	r22
 b92:	5f 91       	pop	r21
 b94:	4f 91       	pop	r20
 b96:	3f 91       	pop	r19
 b98:	2f 91       	pop	r18
 b9a:	0f 90       	pop	r0
 b9c:	0f be       	out	0x3f, r0	; 63
 b9e:	0f 90       	pop	r0
 ba0:	1f 90       	pop	r1
 ba2:	18 95       	reti

00000ba4 <isBlocked>:
 ba4:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <blocked>
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	08 95       	ret

00000bac <uart_buffer_empty>:
 bac:	40 91 99 02 	lds	r20, 0x0299	; 0x800299 <uart_head>
 bb0:	50 91 9a 02 	lds	r21, 0x029A	; 0x80029a <uart_head+0x1>
 bb4:	20 91 97 02 	lds	r18, 0x0297	; 0x800297 <uart_tail>
 bb8:	30 91 98 02 	lds	r19, 0x0298	; 0x800298 <uart_tail+0x1>
 bbc:	81 e0       	ldi	r24, 0x01	; 1
 bbe:	42 17       	cp	r20, r18
 bc0:	53 07       	cpc	r21, r19
 bc2:	09 f0       	breq	.+2      	; 0xbc6 <uart_buffer_empty+0x1a>
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	08 95       	ret

00000bca <uart_buffer_read_char>:
 bca:	cf 93       	push	r28
 bcc:	df 93       	push	r29
 bce:	ec 01       	movw	r28, r24
 bd0:	0e 94 d6 05 	call	0xbac	; 0xbac <uart_buffer_empty>
 bd4:	89 2b       	or	r24, r25
 bd6:	e1 f4       	brne	.+56     	; 0xc10 <uart_buffer_read_char+0x46>
 bd8:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <uart_tail>
 bdc:	f0 91 98 02 	lds	r31, 0x0298	; 0x800298 <uart_tail+0x1>
 be0:	e5 56       	subi	r30, 0x65	; 101
 be2:	fd 4f       	sbci	r31, 0xFD	; 253
 be4:	80 81       	ld	r24, Z
 be6:	88 83       	st	Y, r24
 be8:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <uart_tail>
 bec:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <uart_tail+0x1>
 bf0:	01 96       	adiw	r24, 0x01	; 1
 bf2:	8f 77       	andi	r24, 0x7F	; 127
 bf4:	90 78       	andi	r25, 0x80	; 128
 bf6:	99 23       	and	r25, r25
 bf8:	24 f4       	brge	.+8      	; 0xc02 <uart_buffer_read_char+0x38>
 bfa:	01 97       	sbiw	r24, 0x01	; 1
 bfc:	80 68       	ori	r24, 0x80	; 128
 bfe:	9f 6f       	ori	r25, 0xFF	; 255
 c00:	01 96       	adiw	r24, 0x01	; 1
 c02:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <uart_tail+0x1>
 c06:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <uart_tail>
 c0a:	81 e0       	ldi	r24, 0x01	; 1
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	02 c0       	rjmp	.+4      	; 0xc14 <uart_buffer_read_char+0x4a>
 c10:	80 e0       	ldi	r24, 0x00	; 0
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	08 95       	ret

00000c1a <uart_buffer_clear>:

void uart_buffer_clear() {
	uart_head = 0;
 c1a:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <uart_head+0x1>
 c1e:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <uart_head>
	uart_tail = 0;
 c22:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <uart_tail+0x1>
 c26:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <uart_tail>
 c2a:	08 95       	ret

00000c2c <SerialRecebeChars>:
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
 c2c:	af 92       	push	r10
 c2e:	bf 92       	push	r11
 c30:	cf 92       	push	r12
 c32:	df 92       	push	r13
 c34:	ef 92       	push	r14
 c36:	ff 92       	push	r15
 c38:	0f 93       	push	r16
 c3a:	1f 93       	push	r17
 c3c:	cf 93       	push	r28
 c3e:	df 93       	push	r29
 c40:	1f 92       	push	r1
 c42:	cd b7       	in	r28, 0x3d	; 61
 c44:	de b7       	in	r29, 0x3e	; 62
 c46:	6c 01       	movw	r12, r24
 c48:	5b 01       	movw	r10, r22
	uart_buffer_clear();
 c4a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <uart_buffer_clear>
	int received = 0;
	int timeout_count = 0;
 c4e:	e1 2c       	mov	r14, r1
 c50:	f1 2c       	mov	r15, r1
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
	uart_buffer_clear();
	int received = 0;
 c52:	00 e0       	ldi	r16, 0x00	; 0
 c54:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100;

	while (received < sizeS && timeout_count < timeout_limit) {
 c56:	19 c0       	rjmp	.+50     	; 0xc8a <SerialRecebeChars+0x5e>
		char c;
		if (uart_buffer_read_char(&c)) {
 c58:	ce 01       	movw	r24, r28
 c5a:	01 96       	adiw	r24, 0x01	; 1
 c5c:	0e 94 e5 05 	call	0xbca	; 0xbca <uart_buffer_read_char>
 c60:	89 2b       	or	r24, r25
 c62:	51 f0       	breq	.+20     	; 0xc78 <SerialRecebeChars+0x4c>
			string[received++] = c;
 c64:	f5 01       	movw	r30, r10
 c66:	e0 0f       	add	r30, r16
 c68:	f1 1f       	adc	r31, r17
 c6a:	89 81       	ldd	r24, Y+1	; 0x01
 c6c:	80 83       	st	Z, r24
 c6e:	0f 5f       	subi	r16, 0xFF	; 255
 c70:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0;
 c72:	e1 2c       	mov	r14, r1
 c74:	f1 2c       	mov	r15, r1
 c76:	09 c0       	rjmp	.+18     	; 0xc8a <SerialRecebeChars+0x5e>
 c78:	8f e3       	ldi	r24, 0x3F	; 63
 c7a:	9c e9       	ldi	r25, 0x9C	; 156
 c7c:	01 97       	sbiw	r24, 0x01	; 1
 c7e:	f1 f7       	brne	.-4      	; 0xc7c <SerialRecebeChars+0x50>
 c80:	00 c0       	rjmp	.+0      	; 0xc82 <SerialRecebeChars+0x56>
 c82:	00 00       	nop
			} else {
			_delay_ms(10);
			timeout_count++;
 c84:	9f ef       	ldi	r25, 0xFF	; 255
 c86:	e9 1a       	sub	r14, r25
 c88:	f9 0a       	sbc	r15, r25
	uart_buffer_clear();
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100;

	while (received < sizeS && timeout_count < timeout_limit) {
 c8a:	0c 15       	cp	r16, r12
 c8c:	1d 05       	cpc	r17, r13
 c8e:	24 f4       	brge	.+8      	; 0xc98 <SerialRecebeChars+0x6c>
 c90:	84 e6       	ldi	r24, 0x64	; 100
 c92:	e8 16       	cp	r14, r24
 c94:	f1 04       	cpc	r15, r1
 c96:	04 f3       	brlt	.-64     	; 0xc58 <SerialRecebeChars+0x2c>
			} else {
			_delay_ms(10);
			timeout_count++;
		}
	}
	string[received] = '\0';
 c98:	f5 01       	movw	r30, r10
 c9a:	e0 0f       	add	r30, r16
 c9c:	f1 1f       	adc	r31, r17
 c9e:	10 82       	st	Z, r1
}
 ca0:	0f 90       	pop	r0
 ca2:	df 91       	pop	r29
 ca4:	cf 91       	pop	r28
 ca6:	1f 91       	pop	r17
 ca8:	0f 91       	pop	r16
 caa:	ff 90       	pop	r15
 cac:	ef 90       	pop	r14
 cae:	df 90       	pop	r13
 cb0:	cf 90       	pop	r12
 cb2:	bf 90       	pop	r11
 cb4:	af 90       	pop	r10
 cb6:	08 95       	ret

00000cb8 <prepara_teclado>:
#define COL4 PD2    // Coluna 4 no PD2

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
 cb8:	84 b1       	in	r24, 0x04	; 4
 cba:	83 60       	ori	r24, 0x03	; 3
 cbc:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
 cbe:	8a b1       	in	r24, 0x0a	; 10
 cc0:	80 6c       	ori	r24, 0xC0	; 192
 cc2:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4)); // PD5, PD4, PD3 e PD2 como entradas
 cc4:	8a b1       	in	r24, 0x0a	; 10
 cc6:	83 7c       	andi	r24, 0xC3	; 195
 cc8:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);   // Habilitar resistores de Pull-up
 cca:	8b b1       	in	r24, 0x0b	; 11
 ccc:	8c 63       	ori	r24, 0x3C	; 60
 cce:	8b b9       	out	0x0b, r24	; 11
 cd0:	08 95       	ret

00000cd2 <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
 cd2:	cf 93       	push	r28
 cd4:	df 93       	push	r29
 cd6:	00 d0       	rcall	.+0      	; 0xcd8 <atraso_debounce+0x6>
 cd8:	cd b7       	in	r28, 0x3d	; 61
 cda:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
 cdc:	1a 82       	std	Y+2, r1	; 0x02
 cde:	19 82       	std	Y+1, r1	; 0x01
 ce0:	05 c0       	rjmp	.+10     	; 0xcec <atraso_debounce+0x1a>
 ce2:	89 81       	ldd	r24, Y+1	; 0x01
 ce4:	9a 81       	ldd	r25, Y+2	; 0x02
 ce6:	01 96       	adiw	r24, 0x01	; 1
 ce8:	9a 83       	std	Y+2, r25	; 0x02
 cea:	89 83       	std	Y+1, r24	; 0x01
 cec:	89 81       	ldd	r24, Y+1	; 0x01
 cee:	9a 81       	ldd	r25, Y+2	; 0x02
 cf0:	88 3e       	cpi	r24, 0xE8	; 232
 cf2:	93 40       	sbci	r25, 0x03	; 3
 cf4:	b0 f3       	brcs	.-20     	; 0xce2 <atraso_debounce+0x10>
}
 cf6:	0f 90       	pop	r0
 cf8:	0f 90       	pop	r0
 cfa:	df 91       	pop	r29
 cfc:	cf 91       	pop	r28
 cfe:	08 95       	ret

00000d00 <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
 d00:	1f 93       	push	r17
 d02:	cf 93       	push	r28
 d04:	df 93       	push	r29
 d06:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
 d08:	c0 e0       	ldi	r28, 0x00	; 0
 d0a:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 d0c:	12 c0       	rjmp	.+36     	; 0xd32 <debounce+0x32>
        atraso_debounce();
 d0e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
 d12:	29 b1       	in	r18, 0x09	; 9
 d14:	81 e0       	ldi	r24, 0x01	; 1
 d16:	90 e0       	ldi	r25, 0x00	; 0
 d18:	01 2e       	mov	r0, r17
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <debounce+0x20>
 d1c:	88 0f       	add	r24, r24
 d1e:	99 1f       	adc	r25, r25
 d20:	0a 94       	dec	r0
 d22:	e2 f7       	brpl	.-8      	; 0xd1c <debounce+0x1c>
 d24:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
 d26:	d8 13       	cpse	r29, r24
 d28:	02 c0       	rjmp	.+4      	; 0xd2e <debounce+0x2e>
            counter++;
 d2a:	cf 5f       	subi	r28, 0xFF	; 255
 d2c:	01 c0       	rjmp	.+2      	; 0xd30 <debounce+0x30>
        } else {
            counter = 0;
 d2e:	c0 e0       	ldi	r28, 0x00	; 0
 d30:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 d32:	c7 30       	cpi	r28, 0x07	; 7
 d34:	61 f7       	brne	.-40     	; 0xd0e <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
 d36:	8d 2f       	mov	r24, r29
 d38:	df 91       	pop	r29
 d3a:	cf 91       	pop	r28
 d3c:	1f 91       	pop	r17
 d3e:	08 95       	ret

00000d40 <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
 d40:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
 d42:	85 b1       	in	r24, 0x05	; 5
 d44:	83 60       	ori	r24, 0x03	; 3
 d46:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
 d48:	8b b1       	in	r24, 0x0b	; 11
 d4a:	80 6c       	ori	r24, 0xC0	; 192
 d4c:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
 d4e:	85 b1       	in	r24, 0x05	; 5
 d50:	8d 7f       	andi	r24, 0xFD	; 253
 d52:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 d54:	85 e0       	ldi	r24, 0x05	; 5
 d56:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 d5a:	88 23       	and	r24, r24
 d5c:	11 f0       	breq	.+4      	; 0xd62 <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
 d5e:	c0 e0       	ldi	r28, 0x00	; 0
 d60:	01 c0       	rjmp	.+2      	; 0xd64 <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 d62:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
 d64:	84 e0       	ldi	r24, 0x04	; 4
 d66:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 d6a:	81 11       	cpse	r24, r1
 d6c:	01 c0       	rjmp	.+2      	; 0xd70 <varredura+0x30>
 d6e:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
 d70:	83 e0       	ldi	r24, 0x03	; 3
 d72:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 d76:	81 11       	cpse	r24, r1
 d78:	01 c0       	rjmp	.+2      	; 0xd7c <varredura+0x3c>
 d7a:	c3 e3       	ldi	r28, 0x33	; 51
	if (!debounce(COL4 - 0)) tecla = 'A'; 
 d7c:	82 e0       	ldi	r24, 0x02	; 2
 d7e:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 d82:	81 11       	cpse	r24, r1
 d84:	01 c0       	rjmp	.+2      	; 0xd88 <varredura+0x48>
 d86:	c1 e4       	ldi	r28, 0x41	; 65
    PORTB |= (1 << LIN1); // Desativa LIN1
 d88:	85 b1       	in	r24, 0x05	; 5
 d8a:	82 60       	ori	r24, 0x02	; 2
 d8c:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
 d8e:	85 b1       	in	r24, 0x05	; 5
 d90:	8e 7f       	andi	r24, 0xFE	; 254
 d92:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
 d94:	85 e0       	ldi	r24, 0x05	; 5
 d96:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 d9a:	81 11       	cpse	r24, r1
 d9c:	01 c0       	rjmp	.+2      	; 0xda0 <varredura+0x60>
 d9e:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
 da0:	84 e0       	ldi	r24, 0x04	; 4
 da2:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 da6:	81 11       	cpse	r24, r1
 da8:	01 c0       	rjmp	.+2      	; 0xdac <varredura+0x6c>
 daa:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
 dac:	83 e0       	ldi	r24, 0x03	; 3
 dae:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 db2:	81 11       	cpse	r24, r1
 db4:	01 c0       	rjmp	.+2      	; 0xdb8 <varredura+0x78>
 db6:	c6 e3       	ldi	r28, 0x36	; 54
	if (!debounce(COL4 - 0)) tecla = 'B'; 
 db8:	82 e0       	ldi	r24, 0x02	; 2
 dba:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 dbe:	81 11       	cpse	r24, r1
 dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <varredura+0x84>
 dc2:	c2 e4       	ldi	r28, 0x42	; 66
    PORTB |= (1 << LIN2); // Desativa LIN2
 dc4:	85 b1       	in	r24, 0x05	; 5
 dc6:	81 60       	ori	r24, 0x01	; 1
 dc8:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
 dca:	8b b1       	in	r24, 0x0b	; 11
 dcc:	8f 77       	andi	r24, 0x7F	; 127
 dce:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
 dd0:	85 e0       	ldi	r24, 0x05	; 5
 dd2:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 dd6:	81 11       	cpse	r24, r1
 dd8:	01 c0       	rjmp	.+2      	; 0xddc <varredura+0x9c>
 dda:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
 ddc:	84 e0       	ldi	r24, 0x04	; 4
 dde:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 de2:	81 11       	cpse	r24, r1
 de4:	01 c0       	rjmp	.+2      	; 0xde8 <varredura+0xa8>
 de6:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
 de8:	83 e0       	ldi	r24, 0x03	; 3
 dea:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 dee:	81 11       	cpse	r24, r1
 df0:	01 c0       	rjmp	.+2      	; 0xdf4 <varredura+0xb4>
 df2:	c9 e3       	ldi	r28, 0x39	; 57
	if (!debounce(COL4 - 0)) tecla = 'C'; 
 df4:	82 e0       	ldi	r24, 0x02	; 2
 df6:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 dfa:	81 11       	cpse	r24, r1
 dfc:	01 c0       	rjmp	.+2      	; 0xe00 <varredura+0xc0>
 dfe:	c3 e4       	ldi	r28, 0x43	; 67
    PORTD |= (1 << LIN3); // Desativa LIN3
 e00:	8b b1       	in	r24, 0x0b	; 11
 e02:	80 68       	ori	r24, 0x80	; 128
 e04:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
 e06:	8b b1       	in	r24, 0x0b	; 11
 e08:	8f 7b       	andi	r24, 0xBF	; 191
 e0a:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
 e0c:	85 e0       	ldi	r24, 0x05	; 5
 e0e:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 e12:	81 11       	cpse	r24, r1
 e14:	01 c0       	rjmp	.+2      	; 0xe18 <varredura+0xd8>
 e16:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
 e18:	84 e0       	ldi	r24, 0x04	; 4
 e1a:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 e1e:	81 11       	cpse	r24, r1
 e20:	01 c0       	rjmp	.+2      	; 0xe24 <varredura+0xe4>
 e22:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
 e24:	83 e0       	ldi	r24, 0x03	; 3
 e26:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 e2a:	81 11       	cpse	r24, r1
 e2c:	01 c0       	rjmp	.+2      	; 0xe30 <varredura+0xf0>
 e2e:	c3 e2       	ldi	r28, 0x23	; 35
	if (!debounce(COL4 - 0)) tecla = 'D'; 
 e30:	82 e0       	ldi	r24, 0x02	; 2
 e32:	0e 94 80 06 	call	0xd00	; 0xd00 <debounce>
 e36:	81 11       	cpse	r24, r1
 e38:	01 c0       	rjmp	.+2      	; 0xe3c <varredura+0xfc>
 e3a:	c4 e4       	ldi	r28, 0x44	; 68
    PORTD |= (1 << LIN4); // Desativa LIN4
 e3c:	8b b1       	in	r24, 0x0b	; 11
 e3e:	80 64       	ori	r24, 0x40	; 64
 e40:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
 e42:	8c 2f       	mov	r24, r28
 e44:	cf 91       	pop	r28
 e46:	08 95       	ret

00000e48 <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
 e48:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
 e4a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
 e4c:	85 e0       	ldi	r24, 0x05	; 5
 e4e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 e50:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
 e54:	81 ef       	ldi	r24, 0xF1	; 241
 e56:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
 e58:	20 e0       	ldi	r18, 0x00	; 0
 e5a:	30 e0       	ldi	r19, 0x00	; 0
 e5c:	08 c0       	rjmp	.+16     	; 0xe6e <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 e5e:	a9 9b       	sbis	0x15, 1	; 21
 e60:	fe cf       	rjmp	.-4      	; 0xe5e <delay1ms+0x16>
		TCNT0 = 241;
 e62:	91 ef       	ldi	r25, 0xF1	; 241
 e64:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
 e66:	92 e0       	ldi	r25, 0x02	; 2
 e68:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
 e6a:	2f 5f       	subi	r18, 0xFF	; 255
 e6c:	3f 4f       	sbci	r19, 0xFF	; 255
 e6e:	24 17       	cp	r18, r20
 e70:	35 07       	cpc	r19, r21
 e72:	ac f3       	brlt	.-22     	; 0xe5e <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 e74:	15 bc       	out	0x25, r1	; 37
 e76:	08 95       	ret

00000e78 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
 e78:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
 e7a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
 e7c:	81 e0       	ldi	r24, 0x01	; 1
 e7e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 e80:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
 e84:	85 ef       	ldi	r24, 0xF5	; 245
 e86:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
 e88:	20 e0       	ldi	r18, 0x00	; 0
 e8a:	30 e0       	ldi	r19, 0x00	; 0
 e8c:	09 c0       	rjmp	.+18     	; 0xea0 <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 e8e:	a9 9b       	sbis	0x15, 1	; 21
 e90:	fe cf       	rjmp	.-4      	; 0xe8e <delay1us+0x16>
		TCNT0 = 245;
 e92:	95 ef       	ldi	r25, 0xF5	; 245
 e94:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
 e96:	95 b3       	in	r25, 0x15	; 21
 e98:	92 60       	ori	r25, 0x02	; 2
 e9a:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
 e9c:	2f 5f       	subi	r18, 0xFF	; 255
 e9e:	3f 4f       	sbci	r19, 0xFF	; 255
 ea0:	24 17       	cp	r18, r20
 ea2:	35 07       	cpc	r19, r21
 ea4:	a4 f3       	brlt	.-24     	; 0xe8e <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 ea6:	15 bc       	out	0x25, r1	; 37
 ea8:	08 95       	ret

00000eaa <strcpy>:
 eaa:	fb 01       	movw	r30, r22
 eac:	dc 01       	movw	r26, r24
 eae:	01 90       	ld	r0, Z+
 eb0:	0d 92       	st	X+, r0
 eb2:	00 20       	and	r0, r0
 eb4:	e1 f7       	brne	.-8      	; 0xeae <strcpy+0x4>
 eb6:	08 95       	ret

00000eb8 <strncpy>:
 eb8:	fb 01       	movw	r30, r22
 eba:	dc 01       	movw	r26, r24
 ebc:	41 50       	subi	r20, 0x01	; 1
 ebe:	50 40       	sbci	r21, 0x00	; 0
 ec0:	48 f0       	brcs	.+18     	; 0xed4 <strncpy+0x1c>
 ec2:	01 90       	ld	r0, Z+
 ec4:	0d 92       	st	X+, r0
 ec6:	00 20       	and	r0, r0
 ec8:	c9 f7       	brne	.-14     	; 0xebc <strncpy+0x4>
 eca:	01 c0       	rjmp	.+2      	; 0xece <strncpy+0x16>
 ecc:	1d 92       	st	X+, r1
 ece:	41 50       	subi	r20, 0x01	; 1
 ed0:	50 40       	sbci	r21, 0x00	; 0
 ed2:	e0 f7       	brcc	.-8      	; 0xecc <strncpy+0x14>
 ed4:	08 95       	ret

00000ed6 <strstr>:
 ed6:	fb 01       	movw	r30, r22
 ed8:	51 91       	ld	r21, Z+
 eda:	55 23       	and	r21, r21
 edc:	a9 f0       	breq	.+42     	; 0xf08 <strstr+0x32>
 ede:	bf 01       	movw	r22, r30
 ee0:	dc 01       	movw	r26, r24
 ee2:	4d 91       	ld	r20, X+
 ee4:	45 17       	cp	r20, r21
 ee6:	41 11       	cpse	r20, r1
 ee8:	e1 f7       	brne	.-8      	; 0xee2 <strstr+0xc>
 eea:	59 f4       	brne	.+22     	; 0xf02 <strstr+0x2c>
 eec:	cd 01       	movw	r24, r26
 eee:	01 90       	ld	r0, Z+
 ef0:	00 20       	and	r0, r0
 ef2:	49 f0       	breq	.+18     	; 0xf06 <strstr+0x30>
 ef4:	4d 91       	ld	r20, X+
 ef6:	40 15       	cp	r20, r0
 ef8:	41 11       	cpse	r20, r1
 efa:	c9 f3       	breq	.-14     	; 0xeee <strstr+0x18>
 efc:	fb 01       	movw	r30, r22
 efe:	41 11       	cpse	r20, r1
 f00:	ef cf       	rjmp	.-34     	; 0xee0 <strstr+0xa>
 f02:	81 e0       	ldi	r24, 0x01	; 1
 f04:	90 e0       	ldi	r25, 0x00	; 0
 f06:	01 97       	sbiw	r24, 0x01	; 1
 f08:	08 95       	ret

00000f0a <_exit>:
 f0a:	f8 94       	cli

00000f0c <__stop_program>:
 f0c:	ff cf       	rjmp	.-2      	; 0xf0c <__stop_program>
