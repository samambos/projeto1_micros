
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  0000130c  000013a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000130c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  008002d8  008002d8  00001578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ee8  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e84  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014c4  00000000  00000000  00005524  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  000069e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e0  00000000  00000000  00006f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014b7  00000000  00000000  000077fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_18>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	d9 02       	muls	r29, r25
      6a:	eb 02       	muls	r30, r27
      6c:	f4 02       	muls	r31, r20
      6e:	fd 02       	muls	r31, r29
      70:	2e 03       	fmul	r18, r22
      72:	71 03       	mulsu	r23, r17
      74:	75 03       	mulsu	r23, r21
      76:	89 03       	fmulsu	r16, r17

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	12 e0       	ldi	r17, 0x02	; 2
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	ec e0       	ldi	r30, 0x0C	; 12
      8c:	f3 e1       	ldi	r31, 0x13	; 19
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a8 3d       	cpi	r26, 0xD8	; 216
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	23 e0       	ldi	r18, 0x03	; 3
      9c:	a8 ed       	ldi	r26, 0xD8	; 216
      9e:	b2 e0       	ldi	r27, 0x02	; 2
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a6 36       	cpi	r26, 0x66	; 102
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 b1 02 	call	0x562	; 0x562 <main>
      ae:	0c 94 84 09 	jmp	0x1308	; 0x1308 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <mensagem_Inicial>:
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){

		LCD_texto_correndo(0, " Banco UFRGS ", 300, 0);
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	4c e2       	ldi	r20, 0x2C	; 44
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	71 e0       	ldi	r23, 0x01	; 1
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_texto_correndo>
		LCD_Escrever_Linha(1, 0, "Digite cartao: ");
      c4:	4e e0       	ldi	r20, 0x0E	; 14
      c6:	51 e0       	ldi	r21, 0x01	; 1
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
      d0:	08 95       	ret

000000d2 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      d2:	cf 93       	push	r28
      d4:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      d6:	88 b1       	in	r24, 0x08	; 8
      d8:	80 7f       	andi	r24, 0xF0	; 240
      da:	9c 2f       	mov	r25, r28
      dc:	92 95       	swap	r25
      de:	9f 70       	andi	r25, 0x0F	; 15
      e0:	89 2b       	or	r24, r25
      e2:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
      e4:	88 b1       	in	r24, 0x08	; 8
      e6:	8f 7d       	andi	r24, 0xDF	; 223
      e8:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
      ea:	88 b1       	in	r24, 0x08	; 8
      ec:	80 61       	ori	r24, 0x10	; 16
      ee:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
      f0:	88 b1       	in	r24, 0x08	; 8
      f2:	8f 7e       	andi	r24, 0xEF	; 239
      f4:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
      f6:	84 e6       	ldi	r24, 0x64	; 100
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
      fe:	88 b1       	in	r24, 0x08	; 8
     100:	80 7f       	andi	r24, 0xF0	; 240
     102:	cf 70       	andi	r28, 0x0F	; 15
     104:	c8 2b       	or	r28, r24
     106:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     108:	88 b1       	in	r24, 0x08	; 8
     10a:	80 61       	ori	r24, 0x10	; 16
     10c:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     10e:	88 b1       	in	r24, 0x08	; 8
     110:	8f 7e       	andi	r24, 0xEF	; 239
     112:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     114:	82 e0       	ldi	r24, 0x02	; 2
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
}
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

00000120 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     120:	8f ef       	ldi	r24, 0xFF	; 255
     122:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     124:	8a e0       	ldi	r24, 0x0A	; 10
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     132:	88 e2       	ldi	r24, 0x28	; 40
     134:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     138:	8c e0       	ldi	r24, 0x0C	; 12
     13a:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     13e:	86 e0       	ldi	r24, 0x06	; 6
     140:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
     14a:	08 95       	ret

0000014c <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     152:	80 e8       	ldi	r24, 0x80	; 128
     154:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
     158:	08 95       	ret

0000015a <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	ec 01       	movw	r28, r24
	while(*texto) {
     160:	23 c0       	rjmp	.+70     	; 0x1a8 <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     162:	98 b1       	in	r25, 0x08	; 8
     164:	90 7f       	andi	r25, 0xF0	; 240
     166:	82 95       	swap	r24
     168:	8f 70       	andi	r24, 0x0F	; 15
     16a:	89 2b       	or	r24, r25
     16c:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     16e:	88 b1       	in	r24, 0x08	; 8
     170:	80 62       	ori	r24, 0x20	; 32
     172:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     174:	88 b1       	in	r24, 0x08	; 8
     176:	80 61       	ori	r24, 0x10	; 16
     178:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     17a:	88 b1       	in	r24, 0x08	; 8
     17c:	8f 7e       	andi	r24, 0xEF	; 239
     17e:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     180:	88 ec       	ldi	r24, 0xC8	; 200
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     188:	98 b1       	in	r25, 0x08	; 8
     18a:	89 91       	ld	r24, Y+
     18c:	90 7f       	andi	r25, 0xF0	; 240
     18e:	8f 70       	andi	r24, 0x0F	; 15
     190:	89 2b       	or	r24, r25
     192:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     194:	88 b1       	in	r24, 0x08	; 8
     196:	80 61       	ori	r24, 0x10	; 16
     198:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     19a:	88 b1       	in	r24, 0x08	; 8
     19c:	8f 7e       	andi	r24, 0xEF	; 239
     19e:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1a8:	88 81       	ld	r24, Y
     1aa:	81 11       	cpse	r24, r1
     1ac:	da cf       	rjmp	.-76     	; 0x162 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1ba:	81 11       	cpse	r24, r1
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <LCD_Escrever_Linha+0x1a>
     1be:	60 31       	cpi	r22, 0x10	; 16
     1c0:	30 f4       	brcc	.+12     	; 0x1ce <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1c2:	86 2f       	mov	r24, r22
     1c4:	8f 70       	andi	r24, 0x0F	; 15
     1c6:	80 68       	ori	r24, 0x80	; 128
     1c8:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
     1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	39 f4       	brne	.+14     	; 0x1e0 <LCD_Escrever_Linha+0x2c>
     1d2:	60 31       	cpi	r22, 0x10	; 16
     1d4:	28 f4       	brcc	.+10     	; 0x1e0 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1d6:	86 2f       	mov	r24, r22
     1d8:	8f 70       	andi	r24, 0x0F	; 15
     1da:	80 6c       	ori	r24, 0xC0	; 192
     1dc:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     1e0:	ce 01       	movw	r24, r28
     1e2:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     1e6:	80 e8       	ldi	r24, 0x80	; 128
     1e8:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <LCD_texto_correndo>:

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
     1f2:	6f 92       	push	r6
     1f4:	7f 92       	push	r7
     1f6:	8f 92       	push	r8
     1f8:	9f 92       	push	r9
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	61 97       	sbiw	r28, 0x11	; 17
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	78 2e       	mov	r7, r24
     220:	4a 01       	movw	r8, r20
     222:	62 2e       	mov	r6, r18
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     224:	cd b6       	in	r12, 0x3d	; 61
     226:	de b6       	in	r13, 0x3e	; 62
	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
}

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
     228:	ad b6       	in	r10, 0x3d	; 61
     22a:	be b6       	in	r11, 0x3e	; 62
    uint8_t tamanho = strlen(texto);
     22c:	fb 01       	movw	r30, r22
     22e:	01 90       	ld	r0, Z+
     230:	00 20       	and	r0, r0
     232:	e9 f7       	brne	.-6      	; 0x22e <LCD_texto_correndo+0x3c>
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	e6 1b       	sub	r30, r22
     238:	f7 0b       	sbc	r31, r23
     23a:	0e 2f       	mov	r16, r30
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
     23c:	e1 31       	cpi	r30, 0x11	; 17
     23e:	28 f4       	brcc	.+10     	; 0x24a <LCD_texto_correndo+0x58>
        LCD_Escrever_Linha(linha, 0, texto);
     240:	ab 01       	movw	r20, r22
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
        return;
     248:	42 c0       	rjmp	.+132    	; 0x2ce <LCD_texto_correndo+0xdc>
    }
    
    // Adiciona espaços no final para melhor visualização
    char texto_extendido[tamanho + 17];
     24a:	ff 27       	eor	r31, r31
     24c:	71 96       	adiw	r30, 0x11	; 17
     24e:	8d b7       	in	r24, 0x3d	; 61
     250:	9e b7       	in	r25, 0x3e	; 62
     252:	8e 1b       	sub	r24, r30
     254:	9f 0b       	sbc	r25, r31
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	9e bf       	out	0x3e, r25	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	8d bf       	out	0x3d, r24	; 61
     260:	01 96       	adiw	r24, 0x01	; 1
     262:	7c 01       	movw	r14, r24
    strcpy(texto_extendido, texto);
     264:	0e 94 44 09 	call	0x1288	; 0x1288 <strcpy>
    strcat(texto_extendido, "                "); // 16 espaços
     268:	d7 01       	movw	r26, r14
     26a:	0d 90       	ld	r0, X+
     26c:	00 20       	and	r0, r0
     26e:	e9 f7       	brne	.-6      	; 0x26a <LCD_texto_correndo+0x78>
     270:	11 97       	sbiw	r26, 0x01	; 1
     272:	81 e1       	ldi	r24, 0x11	; 17
     274:	ee e1       	ldi	r30, 0x1E	; 30
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	01 90       	ld	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	8a 95       	dec	r24
     27e:	e1 f7       	brne	.-8      	; 0x278 <LCD_texto_correndo+0x86>
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	1b c0       	rjmp	.+54     	; 0x2ba <LCD_texto_correndo+0xc8>
            // Copia 16 caracteres começando na posição i
            strncpy(buffer, &texto_extendido[i], 16);
     284:	40 e1       	ldi	r20, 0x10	; 16
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	b7 01       	movw	r22, r14
     28a:	61 0f       	add	r22, r17
     28c:	71 1d       	adc	r23, r1
     28e:	ce 01       	movw	r24, r28
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <strncpy>
            buffer[16] = '\0';
     296:	19 8a       	std	Y+17, r1	; 0x11
            
            LCD_Escrever_Linha(linha, 0, buffer);
     298:	ae 01       	movw	r20, r28
     29a:	4f 5f       	subi	r20, 0xFF	; 255
     29c:	5f 4f       	sbci	r21, 0xFF	; 255
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	87 2d       	mov	r24, r7
     2a2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
            delay1ms(velocidade_ms);
     2a6:	c4 01       	movw	r24, r8
     2a8:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
     2ac:	0e 94 7e 08 	call	0x10fc	; 0x10fc <varredura>
     2b0:	89 2b       	or	r24, r25
     2b2:	11 f0       	breq	.+4      	; 0x2b8 <LCD_texto_correndo+0xc6>
     2b4:	66 20       	and	r6, r6
     2b6:	59 f0       	breq	.+22     	; 0x2ce <LCD_texto_correndo+0xdc>
    char texto_extendido[tamanho + 17];
    strcpy(texto_extendido, texto);
    strcat(texto_extendido, "                "); // 16 espaços
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
     2b8:	1f 5f       	subi	r17, 0xFF	; 255
     2ba:	01 17       	cp	r16, r17
     2bc:	18 f7       	brcc	.-58     	; 0x284 <LCD_texto_correndo+0x92>
            delay1ms(velocidade_ms);
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     2be:	61 10       	cpse	r6, r1
     2c0:	df cf       	rjmp	.-66     	; 0x280 <LCD_texto_correndo+0x8e>
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	be be       	out	0x3e, r11	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	ad be       	out	0x3d, r10	; 61
     2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <LCD_texto_correndo+0xe6>
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
        LCD_Escrever_Linha(linha, 0, texto);
        return;
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	f8 94       	cli
     2d2:	be be       	out	0x3e, r11	; 62
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	ad be       	out	0x3d, r10	; 61
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de be       	out	0x3e, r13	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd be       	out	0x3d, r12	; 61
     2e2:	61 96       	adiw	r28, 0x11	; 17
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	bf 90       	pop	r11
     300:	af 90       	pop	r10
     302:	9f 90       	pop	r9
     304:	8f 90       	pop	r8
     306:	7f 90       	pop	r7
     308:	6f 90       	pop	r6
     30a:	08 95       	ret

0000030c <ler_codigo_aluno>:
	ESTADO_PAGAMENTO,
	ESTADO_SALDO
} Estado;

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	00 d0       	rcall	.+0      	; 0x31a <ler_codigo_aluno+0xe>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
     320:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
     324:	4f e2       	ldi	r20, 0x2F	; 47
     326:	51 e0       	ldi	r21, 0x01	; 1
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     330:	4e e3       	ldi	r20, 0x3E	; 62
     332:	51 e0       	ldi	r21, 0x01	; 1
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	ESTADO_SALDO
} Estado;

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
	int pos = 0;
     33c:	00 e0       	ldi	r16, 0x00	; 0
     33e:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     340:	1d c0       	rjmp	.+58     	; 0x37c <ler_codigo_aluno+0x70>
		if (isBlocked()) return;
     342:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     346:	89 2b       	or	r24, r25
     348:	f1 f4       	brne	.+60     	; 0x386 <ler_codigo_aluno+0x7a>
		tecla = varredura();
     34a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <varredura>
		if (tecla >= '0' && tecla <= '9') {
     34e:	90 ed       	ldi	r25, 0xD0	; 208
     350:	98 0f       	add	r25, r24
     352:	9a 30       	cpi	r25, 0x0A	; 10
     354:	98 f4       	brcc	.+38     	; 0x37c <ler_codigo_aluno+0x70>
			codigo[pos] = tecla;
     356:	f7 01       	movw	r30, r14
     358:	e0 0f       	add	r30, r16
     35a:	f1 1f       	adc	r31, r17
     35c:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
     362:	ae 01       	movw	r20, r28
     364:	4f 5f       	subi	r20, 0xFF	; 255
     366:	5f 4f       	sbci	r21, 0xFF	; 255
     368:	60 2f       	mov	r22, r16
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			pos++;
     370:	0f 5f       	subi	r16, 0xFF	; 255
     372:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     374:	88 ec       	ldi	r24, 0xC8	; 200
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     37c:	06 30       	cpi	r16, 0x06	; 6
     37e:	11 05       	cpc	r17, r1
     380:	04 f3       	brlt	.-64     	; 0x342 <ler_codigo_aluno+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	codigo[6] = '\0';
     382:	f7 01       	movw	r30, r14
     384:	16 82       	std	Z+6, r1	; 0x06
}
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <ler_senha+0xe>
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
     3ac:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite senha:");
     3b0:	45 e4       	ldi	r20, 0x45	; 69
     3b2:	51 e0       	ldi	r21, 0x01	; 1
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     3bc:	4e e3       	ldi	r20, 0x3E	; 62
     3be:	51 e0       	ldi	r21, 0x01	; 1
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
	int pos = 0;
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     3cc:	1e c0       	rjmp	.+60     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		if (isBlocked()) return;
     3ce:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     3d2:	89 2b       	or	r24, r25
     3d4:	f9 f4       	brne	.+62     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		tecla = varredura();
     3d6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <varredura>
		if (tecla >= '0' && tecla <= '9') {
     3da:	90 ed       	ldi	r25, 0xD0	; 208
     3dc:	98 0f       	add	r25, r24
     3de:	9a 30       	cpi	r25, 0x0A	; 10
     3e0:	a0 f4       	brcc	.+40     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			senha[pos] = tecla;
     3e2:	f7 01       	movw	r30, r14
     3e4:	e0 0f       	add	r30, r16
     3e6:	f1 1f       	adc	r31, r17
     3e8:	80 83       	st	Z, r24
			char temp[2] = { '*', '\0' };
     3ea:	8a e2       	ldi	r24, 0x2A	; 42
     3ec:	89 83       	std	Y+1, r24	; 0x01
     3ee:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
     3f0:	ae 01       	movw	r20, r28
     3f2:	4f 5f       	subi	r20, 0xFF	; 255
     3f4:	5f 4f       	sbci	r21, 0xFF	; 255
     3f6:	60 2f       	mov	r22, r16
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			pos++;
     3fe:	0f 5f       	subi	r16, 0xFF	; 255
     400:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     402:	88 ec       	ldi	r24, 0xC8	; 200
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
     40a:	06 30       	cpi	r16, 0x06	; 6
     40c:	11 05       	cpc	r17, r1
     40e:	fc f2       	brlt	.-66     	; 0x3ce <ler_senha+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	senha[6] = '\0';
     410:	f7 01       	movw	r30, r14
     412:	16 82       	std	Z+6, r1	; 0x06
}
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	08 95       	ret

00000426 <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	ae 97       	sbiw	r28, 0x2e	; 46
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     43e:	dc 01       	movw	r26, r24
     440:	0d 90       	ld	r0, X+
     442:	00 20       	and	r0, r0
     444:	e9 f7       	brne	.-6      	; 0x440 <validar_codigo_aluno+0x1a>
     446:	11 97       	sbiw	r26, 0x01	; 1
     448:	a8 1b       	sub	r26, r24
     44a:	b9 0b       	sbc	r27, r25
     44c:	16 97       	sbiw	r26, 0x06	; 6
     44e:	09 f0       	breq	.+2      	; 0x452 <validar_codigo_aluno+0x2c>
     450:	55 c0       	rjmp	.+170    	; 0x4fc <validar_codigo_aluno+0xd6>
     452:	db 01       	movw	r26, r22
     454:	0d 90       	ld	r0, X+
     456:	00 20       	and	r0, r0
     458:	e9 f7       	brne	.-6      	; 0x454 <validar_codigo_aluno+0x2e>
     45a:	11 97       	sbiw	r26, 0x01	; 1
     45c:	a6 1b       	sub	r26, r22
     45e:	b7 0b       	sbc	r27, r23
     460:	16 97       	sbiw	r26, 0x06	; 6
     462:	09 f0       	breq	.+2      	; 0x466 <validar_codigo_aluno+0x40>
     464:	4e c0       	rjmp	.+156    	; 0x502 <validar_codigo_aluno+0xdc>
     466:	fc 01       	movw	r30, r24

	char mensagem[14];
	mensagem[0] = 'C';
     468:	83 e4       	ldi	r24, 0x43	; 67
     46a:	89 83       	std	Y+1, r24	; 0x01
	mensagem[1] = 'E';
     46c:	85 e4       	ldi	r24, 0x45	; 69
     46e:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(&mensagem[2], codigo, 6);
     470:	86 e0       	ldi	r24, 0x06	; 6
     472:	de 01       	movw	r26, r28
     474:	13 96       	adiw	r26, 0x03	; 3
     476:	01 90       	ld	r0, Z+
     478:	0d 92       	st	X+, r0
     47a:	8a 95       	dec	r24
     47c:	e1 f7       	brne	.-8      	; 0x476 <validar_codigo_aluno+0x50>
	memcpy(&mensagem[8], senha, 6);
     47e:	86 e0       	ldi	r24, 0x06	; 6
     480:	fb 01       	movw	r30, r22
     482:	de 01       	movw	r26, r28
     484:	19 96       	adiw	r26, 0x09	; 9
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	8a 95       	dec	r24
     48c:	e1 f7       	brne	.-8      	; 0x486 <validar_codigo_aluno+0x60>

	SerialEnviaChars(14, mensagem);
     48e:	be 01       	movw	r22, r28
     490:	6f 5f       	subi	r22, 0xFF	; 255
     492:	7f 4f       	sbci	r23, 0xFF	; 255
     494:	8e e0       	ldi	r24, 0x0E	; 14
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <SerialEnviaChars>

	char resposta[32];
	memset(resposta, 0, sizeof(resposta));
     49c:	8e 01       	movw	r16, r28
     49e:	01 5f       	subi	r16, 0xF1	; 241
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	80 e2       	ldi	r24, 0x20	; 32
     4a4:	f8 01       	movw	r30, r16
     4a6:	11 92       	st	Z+, r1
     4a8:	8a 95       	dec	r24
     4aa:	e9 f7       	brne	.-6      	; 0x4a6 <validar_codigo_aluno+0x80>

	SerialRecebeChars(31, resposta);
     4ac:	b8 01       	movw	r22, r16
     4ae:	8f e1       	ldi	r24, 0x1F	; 31
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 f6 07 	call	0xfec	; 0xfec <SerialRecebeChars>

	LCD_limpar();
     4b6:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Resp Servidor:");
     4ba:	43 e5       	ldi	r20, 0x53	; 83
     4bc:	51 e0       	ldi	r21, 0x01	; 1
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, resposta);
     4c6:	a8 01       	movw	r20, r16
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	delay1ms(2000);
     4d0:	80 ed       	ldi	r24, 0xD0	; 208
     4d2:	97 e0       	ldi	r25, 0x07	; 7
     4d4:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
	LCD_limpar();
     4d8:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
     4dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     4de:	83 35       	cpi	r24, 0x53	; 83
     4e0:	99 f4       	brne	.+38     	; 0x508 <validar_codigo_aluno+0xe2>
     4e2:	88 89       	ldd	r24, Y+16	; 0x10
     4e4:	85 34       	cpi	r24, 0x45	; 69
     4e6:	99 f4       	brne	.+38     	; 0x50e <validar_codigo_aluno+0xe8>
		if (strstr(resposta, "Nao autorizado") != NULL) {
     4e8:	62 e6       	ldi	r22, 0x62	; 98
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	c8 01       	movw	r24, r16
     4ee:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <strstr>
     4f2:	89 2b       	or	r24, r25
     4f4:	79 f0       	breq	.+30     	; 0x514 <validar_codigo_aluno+0xee>
			return 0;
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e c0       	rjmp	.+28     	; 0x518 <validar_codigo_aluno+0xf2>
	}
	senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0b c0       	rjmp	.+22     	; 0x518 <validar_codigo_aluno+0xf2>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	08 c0       	rjmp	.+16     	; 0x518 <validar_codigo_aluno+0xf2>
			return 0;
			} else {
			return 1;
		}
	}
	return 0;
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	05 c0       	rjmp	.+10     	; 0x518 <validar_codigo_aluno+0xf2>
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <validar_codigo_aluno+0xf2>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
		if (strstr(resposta, "Nao autorizado") != NULL) {
			return 0;
			} else {
			return 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
     518:	ae 96       	adiw	r28, 0x2e	; 46
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	08 95       	ret

0000052e <aguardar_desbloqueio>:

void aguardar_desbloqueio() {
	LCD_limpar();
     52e:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
     532:	41 e7       	ldi	r20, 0x71	; 113
     534:	51 e0       	ldi	r21, 0x01	; 1
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
     53e:	4e e7       	ldi	r20, 0x7E	; 126
     540:	51 e0       	ldi	r21, 0x01	; 1
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	while (isBlocked()) {
     54a:	04 c0       	rjmp	.+8      	; 0x554 <aguardar_desbloqueio+0x26>
		delay1ms(200);
     54c:	88 ec       	ldi	r24, 0xC8	; 200
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>

void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
	while (isBlocked()) {
     554:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     558:	89 2b       	or	r24, r25
     55a:	c1 f7       	brne	.-16     	; 0x54c <aguardar_desbloqueio+0x1e>
		delay1ms(200);
	}
	LCD_limpar();
     55c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
     560:	08 95       	ret

00000562 <main>:
}

int main(void) {
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	2e 97       	sbiw	r28, 0x0e	; 14
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     576:	0e 94 3a 08 	call	0x1074	; 0x1074 <prepara_teclado>
	LCD_iniciar();
     57a:	0e 94 90 00 	call	0x120	; 0x120 <LCD_iniciar>
	initUART();
     57e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <initUART>
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     582:	00 e0       	ldi	r16, 0x00	; 0
     584:	07 c0       	rjmp	.+14     	; 0x594 <main+0x32>
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     586:	01 e0       	ldi	r16, 0x01	; 1
     588:	05 c0       	rjmp	.+10     	; 0x594 <main+0x32>
			break;

			case ESTADO_CODIGO:
			ler_codigo_aluno(codigo_aluno);
			if (!isBlocked()) estado = ESTADO_SENHA;
     58a:	02 e0       	ldi	r16, 0x02	; 2
     58c:	03 c0       	rjmp	.+6      	; 0x594 <main+0x32>
			break;

			case ESTADO_SENHA:
			ler_senha(senha_aluno);
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     58e:	03 e0       	ldi	r16, 0x03	; 3
     590:	01 c0       	rjmp	.+2      	; 0x594 <main+0x32>
				LCD_Escrever_Linha(0, 0, "Voltando...");
				delay1ms(1000);
				estado = ESTADO_TELA_INICIAL;
				} else {
				switch (tecla) {
					case '1': estado = ESTADO_SAQUE; break;
     592:	05 e0       	ldi	r16, 0x05	; 5
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		if (isBlocked()) {
     594:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     598:	89 2b       	or	r24, r25
     59a:	21 f0       	breq	.+8      	; 0x5a4 <main+0x42>
			aguardar_desbloqueio();
     59c:	0e 94 97 02 	call	0x52e	; 0x52e <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     5a0:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     5a2:	f8 cf       	rjmp	.-16     	; 0x594 <main+0x32>
		}

		switch (estado) {
     5a4:	80 2f       	mov	r24, r16
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	fc 01       	movw	r30, r24
     5aa:	ec 5c       	subi	r30, 0xCC	; 204
     5ac:	ff 4f       	sbci	r31, 0xFF	; 255
     5ae:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			LCD_limpar();
     5b2:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			mensagem_Inicial();
     5b6:	0e 94 5b 00 	call	0xb6	; 0xb6 <mensagem_Inicial>
			while (varredura() == 0) {
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <main+0x62>
				if (isBlocked()) break;
     5bc:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     5c0:	89 2b       	or	r24, r25
     5c2:	21 f4       	brne	.+8      	; 0x5cc <main+0x6a>

		switch (estado) {
			case ESTADO_TELA_INICIAL:
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     5c4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <varredura>
     5c8:	88 23       	and	r24, r24
     5ca:	c1 f3       	breq	.-16     	; 0x5bc <main+0x5a>
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     5cc:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     5d0:	89 2b       	or	r24, r25
     5d2:	c9 f2       	breq	.-78     	; 0x586 <main+0x24>
     5d4:	df cf       	rjmp	.-66     	; 0x594 <main+0x32>
			break;

			case ESTADO_CODIGO:
			ler_codigo_aluno(codigo_aluno);
     5d6:	ce 01       	movw	r24, r28
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	0e 94 86 01 	call	0x30c	; 0x30c <ler_codigo_aluno>
			if (!isBlocked()) estado = ESTADO_SENHA;
     5de:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     5e2:	89 2b       	or	r24, r25
     5e4:	91 f2       	breq	.-92     	; 0x58a <main+0x28>
     5e6:	d6 cf       	rjmp	.-84     	; 0x594 <main+0x32>
			break;

			case ESTADO_SENHA:
			ler_senha(senha_aluno);
     5e8:	ce 01       	movw	r24, r28
     5ea:	08 96       	adiw	r24, 0x08	; 8
     5ec:	0e 94 cc 01 	call	0x398	; 0x398 <ler_senha>
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     5f0:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     5f4:	89 2b       	or	r24, r25
     5f6:	59 f2       	breq	.-106    	; 0x58e <main+0x2c>
     5f8:	cd cf       	rjmp	.-102    	; 0x594 <main+0x32>
			break;

			case ESTADO_VALIDACAO:
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
     5fa:	be 01       	movw	r22, r28
     5fc:	68 5f       	subi	r22, 0xF8	; 248
     5fe:	7f 4f       	sbci	r23, 0xFF	; 255
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	0e 94 13 02 	call	0x426	; 0x426 <validar_codigo_aluno>
     608:	89 2b       	or	r24, r25
     60a:	a1 f0       	breq	.+40     	; 0x634 <main+0xd2>
				LCD_limpar();
     60c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Codigo valido!");
     610:	4b e8       	ldi	r20, 0x8B	; 139
     612:	51 e0       	ldi	r21, 0x01	; 1
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Processando...");
     61c:	4a e9       	ldi	r20, 0x9A	; 154
     61e:	51 e0       	ldi	r21, 0x01	; 1
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				delay1ms(2000);
     628:	80 ed       	ldi	r24, 0xD0	; 208
     62a:	97 e0       	ldi	r25, 0x07	; 7
     62c:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
				estado = ESTADO_MENU;
     630:	04 e0       	ldi	r16, 0x04	; 4
     632:	b0 cf       	rjmp	.-160    	; 0x594 <main+0x32>
				} else {
				LCD_limpar();
     634:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Conta invalida!");
     638:	49 ea       	ldi	r20, 0xA9	; 169
     63a:	51 e0       	ldi	r21, 0x01	; 1
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente novamente");
     644:	49 eb       	ldi	r20, 0xB9	; 185
     646:	51 e0       	ldi	r21, 0x01	; 1
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				delay1ms(2000);
     650:	80 ed       	ldi	r24, 0xD0	; 208
     652:	97 e0       	ldi	r25, 0x07	; 7
     654:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     658:	00 e0       	ldi	r16, 0x00	; 0
     65a:	9c cf       	rjmp	.-200    	; 0x594 <main+0x32>
			}
			break;

			case ESTADO_MENU:
			LCD_limpar();
     65c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			indice_menu=0;
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     660:	49 ec       	ldi	r20, 0xC9	; 201
     662:	51 e0       	ldi	r21, 0x01	; 1
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes)
			LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     66c:	41 ed       	ldi	r20, 0xD1	; 209
     66e:	51 e0       	ldi	r21, 0x01	; 1
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
     678:	04 c0       	rjmp	.+8      	; 0x682 <main+0x120>
			else
			LCD_Escrever_Linha(1, 0, " ");

			while ((tecla = varredura()) == 0) {
				if (isBlocked()) break;
     67a:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     67e:	89 2b       	or	r24, r25
     680:	29 f4       	brne	.+10     	; 0x68c <main+0x12a>
			if (indice_menu + 1 < total_opcoes)
			LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
			else
			LCD_Escrever_Linha(1, 0, " ");

			while ((tecla = varredura()) == 0) {
     682:	0e 94 7e 08 	call	0x10fc	; 0x10fc <varredura>
     686:	18 2f       	mov	r17, r24
     688:	88 23       	and	r24, r24
     68a:	b9 f3       	breq	.-18     	; 0x67a <main+0x118>
				if (isBlocked()) break;
			}

			delay1ms(300); // Debounce delay
     68c:	8c e2       	ldi	r24, 0x2C	; 44
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>

			if (tecla == 'B' && indice_menu < total_opcoes - 2) {
     694:	12 34       	cpi	r17, 0x42	; 66
     696:	09 f4       	brne	.+2      	; 0x69a <main+0x138>
     698:	7d cf       	rjmp	.-262    	; 0x594 <main+0x32>
				indice_menu++;
				} else if (tecla == 'A' && indice_menu > 0) {
				indice_menu--;
				} else if (tecla == '*') {
     69a:	1a 32       	cpi	r17, 0x2A	; 42
     69c:	71 f4       	brne	.+28     	; 0x6ba <main+0x158>
				LCD_limpar();
     69e:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Voltando...");
     6a2:	4d ed       	ldi	r20, 0xDD	; 221
     6a4:	51 e0       	ldi	r21, 0x01	; 1
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				delay1ms(1000);
     6ae:	88 ee       	ldi	r24, 0xE8	; 232
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     6b6:	00 e0       	ldi	r16, 0x00	; 0
     6b8:	6d cf       	rjmp	.-294    	; 0x594 <main+0x32>
				} else {
				switch (tecla) {
     6ba:	12 33       	cpi	r17, 0x32	; 50
     6bc:	51 f0       	breq	.+20     	; 0x6d2 <main+0x170>
     6be:	20 f4       	brcc	.+8      	; 0x6c8 <main+0x166>
     6c0:	11 33       	cpi	r17, 0x31	; 49
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <main+0x164>
     6c4:	66 cf       	rjmp	.-308    	; 0x592 <main+0x30>
     6c6:	66 cf       	rjmp	.-308    	; 0x594 <main+0x32>
     6c8:	13 33       	cpi	r17, 0x33	; 51
     6ca:	29 f0       	breq	.+10     	; 0x6d6 <main+0x174>
     6cc:	14 33       	cpi	r17, 0x34	; 52
     6ce:	29 f0       	breq	.+10     	; 0x6da <main+0x178>
     6d0:	61 cf       	rjmp	.-318    	; 0x594 <main+0x32>
					case '1': estado = ESTADO_SAQUE; break;
					case '2': estado = ESTADO_PAGAMENTO; break;
     6d2:	06 e0       	ldi	r16, 0x06	; 6
     6d4:	5f cf       	rjmp	.-322    	; 0x594 <main+0x32>
					case '3': estado = ESTADO_SALDO; break;
     6d6:	07 e0       	ldi	r16, 0x07	; 7
     6d8:	5d cf       	rjmp	.-326    	; 0x594 <main+0x32>
					case '4':
					finalizar_sessao(); 
     6da:	0e 94 e6 05 	call	0xbcc	; 0xbcc <finalizar_sessao>
					estado = ESTADO_TELA_INICIAL; 
     6de:	00 e0       	ldi	r16, 0x00	; 0
					break;
     6e0:	59 cf       	rjmp	.-334    	; 0x594 <main+0x32>
				}
			}
			break;

			case ESTADO_SAQUE:
			realizar_saque();
     6e2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <realizar_saque>
			estado = ESTADO_MENU;
     6e6:	04 e0       	ldi	r16, 0x04	; 4
			break;
     6e8:	55 cf       	rjmp	.-342    	; 0x594 <main+0x32>

			case ESTADO_PAGAMENTO:
			LCD_limpar();
     6ea:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Pagamento");
     6ee:	43 ed       	ldi	r20, 0xD3	; 211
     6f0:	51 e0       	ldi	r21, 0x01	; 1
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
     6fa:	49 ee       	ldi	r20, 0xE9	; 233
     6fc:	51 e0       	ldi	r21, 0x01	; 1
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			delay1ms(2000);
     706:	80 ed       	ldi	r24, 0xD0	; 208
     708:	97 e0       	ldi	r25, 0x07	; 7
     70a:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
			estado = ESTADO_MENU;
     70e:	04 e0       	ldi	r16, 0x04	; 4
			break;
     710:	41 cf       	rjmp	.-382    	; 0x594 <main+0x32>

			case ESTADO_SALDO:
			consultar_saldo();
     712:	0e 94 df 04 	call	0x9be	; 0x9be <consultar_saldo>
			estado = ESTADO_MENU;
     716:	04 e0       	ldi	r16, 0x04	; 4
			break;
     718:	3d cf       	rjmp	.-390    	; 0x594 <main+0x32>

0000071a <enviar_mensagem_saque>:
		}
	}
}

// Função para enviar mensagem de saque
void enviar_mensagem_saque(const char* valor) {
     71a:	cf 92       	push	r12
     71c:	df 92       	push	r13
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	bc 01       	movw	r22, r24
	mensagem[2] = (char)tamanho_valor; // Tamanho do valor como byte

	strncpy(&mensagem[3], valor, tamanho_valor);

	SerialEnviaChars(tamanho_mensagem, mensagem);
}
     730:	ed b6       	in	r14, 0x3d	; 61
     732:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de saque
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
     734:	fc 01       	movw	r30, r24
     736:	01 90       	ld	r0, Z+
     738:	00 20       	and	r0, r0
     73a:	e9 f7       	brne	.-6      	; 0x736 <enviar_mensagem_saque+0x1c>
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	af 01       	movw	r20, r30
     740:	48 1b       	sub	r20, r24
     742:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3;
     744:	6a 01       	movw	r12, r20
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	c8 0e       	add	r12, r24
     74a:	d1 1c       	adc	r13, r1

	char mensagem[tamanho_mensagem];
     74c:	ed b7       	in	r30, 0x3d	; 61
     74e:	fe b7       	in	r31, 0x3e	; 62
     750:	ec 19       	sub	r30, r12
     752:	fd 09       	sbc	r31, r13
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	fe bf       	out	0x3e, r31	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	ed bf       	out	0x3d, r30	; 61
     75e:	0d b7       	in	r16, 0x3d	; 61
     760:	1e b7       	in	r17, 0x3e	; 62
     762:	0f 5f       	subi	r16, 0xFF	; 255
     764:	1f 4f       	sbci	r17, 0xFF	; 255
	mensagem[0] = 'C';
     766:	83 e4       	ldi	r24, 0x43	; 67
     768:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S';
     76a:	83 e5       	ldi	r24, 0x53	; 83
     76c:	f8 01       	movw	r30, r16
     76e:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor; // Tamanho do valor como byte
     770:	42 83       	std	Z+2, r20	; 0x02

	strncpy(&mensagem[3], valor, tamanho_valor);
     772:	8d b7       	in	r24, 0x3d	; 61
     774:	9e b7       	in	r25, 0x3e	; 62
     776:	04 96       	adiw	r24, 0x04	; 4
     778:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <strncpy>

	SerialEnviaChars(tamanho_mensagem, mensagem);
     77c:	b8 01       	movw	r22, r16
     77e:	c6 01       	movw	r24, r12
     780:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <SerialEnviaChars>
}
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	fe be       	out	0x3e, r15	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	ed be       	out	0x3d, r14	; 61
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	08 95       	ret

000007a0 <receber_resposta_servidor>:

// Função para receber resposta do servidor
char receber_resposta_servidor(void) {
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <receber_resposta_servidor+0x6>
     7a6:	00 d0       	rcall	.+0      	; 0x7a8 <receber_resposta_servidor+0x8>
     7a8:	1f 92       	push	r1
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
	char resposta[5]; // Suficiente para "SSO", "SSI", "SSE" + '\0'

	// Espera 3 bytes de resposta do servidor (ex: "SSO")
	// Idealmente, SerialRecebeChars também deveria verificar isBlocked() ou ter timeout
	SerialRecebeChars(3, resposta);
     7ae:	be 01       	movw	r22, r28
     7b0:	6f 5f       	subi	r22, 0xFF	; 255
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 f6 07 	call	0xfec	; 0xfec <SerialRecebeChars>
	resposta[3]='\0'; // Garante terminação nula
     7bc:	1c 82       	std	Y+4, r1	; 0x04

	LCD_limpar();
     7be:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, resposta); // Para debug, mostra a resposta crua
     7c2:	ae 01       	movw	r20, r28
     7c4:	4f 5f       	subi	r20, 0xFF	; 255
     7c6:	5f 4f       	sbci	r21, 0xFF	; 255
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	delay1ms(2000); // Mostra a resposta por 2 segundos
     7d0:	80 ed       	ldi	r24, 0xD0	; 208
     7d2:	97 e0       	ldi	r25, 0x07	; 7
     7d4:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>

	if(resposta[0] == 'S' && resposta[1] == 'S') {
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	83 35       	cpi	r24, 0x53	; 83
     7dc:	29 f4       	brne	.+10     	; 0x7e8 <receber_resposta_servidor+0x48>
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	83 35       	cpi	r24, 0x53	; 83
     7e2:	21 f4       	brne	.+8      	; 0x7ec <receber_resposta_servidor+0x4c>
		return resposta[2]; // Retorna 'O' (Ok) ou 'I' (Insuficiente)
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <receber_resposta_servidor+0x4e>
	}

	return 'E'; // Retorna 'E' para Erro padrão
     7e8:	85 e4       	ldi	r24, 0x45	; 69
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <receber_resposta_servidor+0x4e>
     7ec:	85 e4       	ldi	r24, 0x45	; 69
}
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <realizar_saque>:
#include <util/delay.h>
#include <string.h>
#include <stdio.h>

// Função para realizar um saque
void realizar_saque(void) {
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	2b 97       	sbiw	r28, 0x0b	; 11
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
     816:	fe 01       	movw	r30, r28
     818:	31 96       	adiw	r30, 0x01	; 1
     81a:	89 e0       	ldi	r24, 0x09	; 9
     81c:	df 01       	movw	r26, r30
     81e:	1d 92       	st	X+, r1
     820:	8a 95       	dec	r24
     822:	e9 f7       	brne	.-6      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
	int pos = 0;
	char tecla;

	LCD_limpar();
     824:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
     828:	4c ef       	ldi	r20, 0xFC	; 252
     82a:	51 e0       	ldi	r21, 0x01	; 1
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
     834:	4c e0       	ldi	r20, 0x0C	; 12
     836:	52 e0       	ldi	r21, 0x02	; 2
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
#include <stdio.h>

// Função para realizar um saque
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
     840:	00 e0       	ldi	r16, 0x00	; 0
     842:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		// Verifica bloqueio durante a entrada do valor
		if (isBlocked()) {
     844:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     848:	89 2b       	or	r24, r25
     84a:	99 f0       	breq	.+38     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
			LCD_limpar();
     84c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     850:	4f e0       	ldi	r20, 0x0F	; 15
     852:	52 e0       	ldi	r21, 0x02	; 2
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     85c:	4c e1       	ldi	r20, 0x1C	; 28
     85e:	52 e0       	ldi	r21, 0x02	; 2
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			delay1ms(2000);
     868:	80 ed       	ldi	r24, 0xD0	; 208
     86a:	97 e0       	ldi	r25, 0x07	; 7
     86c:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
			return; // Sai da função imediatamente
     870:	9b c0       	rjmp	.+310    	; 0x9a8 <__stack+0xa9>
		}

		tecla = varredura();
     872:	0e 94 7e 08 	call	0x10fc	; 0x10fc <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     876:	90 ed       	ldi	r25, 0xD0	; 208
     878:	98 0f       	add	r25, r24
     87a:	9a 30       	cpi	r25, 0x0A	; 10
     87c:	d8 f4       	brcc	.+54     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     87e:	08 30       	cpi	r16, 0x08	; 8
     880:	11 05       	cpc	r17, r1
     882:	c4 f4       	brge	.+48     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
			valor_saque[pos] = tecla;
     884:	e1 e0       	ldi	r30, 0x01	; 1
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	ec 0f       	add	r30, r28
     88a:	fd 1f       	adc	r31, r29
     88c:	e0 0f       	add	r30, r16
     88e:	f1 1f       	adc	r31, r17
     890:	80 83       	st	Z, r24

			char str[2] = {tecla, '\0'};
     892:	8a 87       	std	Y+10, r24	; 0x0a
     894:	1b 86       	std	Y+11, r1	; 0x0b
			LCD_Escrever_Linha(1, 2 + pos, str);
     896:	62 e0       	ldi	r22, 0x02	; 2
     898:	60 0f       	add	r22, r16
     89a:	ae 01       	movw	r20, r28
     89c:	46 5f       	subi	r20, 0xF6	; 246
     89e:	5f 4f       	sbci	r21, 0xFF	; 255
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			pos++;
     8a6:	0f 5f       	subi	r16, 0xFF	; 255
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255

			delay1ms(200);
     8aa:	88 ec       	ldi	r24, 0xC8	; 200
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
			return; // Sai da função imediatamente
		}

		tecla = varredura();

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     8b2:	c8 cf       	rjmp	.-112    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
			LCD_Escrever_Linha(1, 2 + pos, str);
			pos++;

			delay1ms(200);
		}
		else if(tecla == '#' && pos > 0) {
     8b4:	83 32       	cpi	r24, 0x23	; 35
     8b6:	09 f0       	breq	.+2      	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
     8b8:	62 c0       	rjmp	.+196    	; 0x97e <__stack+0x7f>
     8ba:	10 16       	cp	r1, r16
     8bc:	11 06       	cpc	r1, r17
     8be:	0c f0       	brlt	.+2      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
     8c0:	5e c0       	rjmp	.+188    	; 0x97e <__stack+0x7f>
			valor_saque[pos] = '\0';
     8c2:	e1 e0       	ldi	r30, 0x01	; 1
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	ec 0f       	add	r30, r28
     8c8:	fd 1f       	adc	r31, r29
     8ca:	e0 0f       	add	r30, r16
     8cc:	f1 1f       	adc	r31, r17
     8ce:	10 82       	st	Z, r1

			// Verifica bloqueio antes de enviar a mensagem
			if (isBlocked()) {
     8d0:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     8d4:	89 2b       	or	r24, r25
     8d6:	99 f0       	breq	.+38     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
				LCD_limpar();
     8d8:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     8dc:	4f e0       	ldi	r20, 0x0F	; 15
     8de:	52 e0       	ldi	r21, 0x02	; 2
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     8e8:	4c e1       	ldi	r20, 0x1C	; 28
     8ea:	52 e0       	ldi	r21, 0x02	; 2
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				delay1ms(2000);
     8f4:	80 ed       	ldi	r24, 0xD0	; 208
     8f6:	97 e0       	ldi	r25, 0x07	; 7
     8f8:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
				return;
     8fc:	55 c0       	rjmp	.+170    	; 0x9a8 <__stack+0xa9>
			}
			enviar_mensagem_saque(valor_saque);
     8fe:	ce 01       	movw	r24, r28
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	0e 94 8d 03 	call	0x71a	; 0x71a <enviar_mensagem_saque>

			// Verifica bloqueio antes de receber resposta
			if (isBlocked()) {
     906:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     90a:	89 2b       	or	r24, r25
     90c:	99 f0       	breq	.+38     	; 0x934 <__stack+0x35>
				LCD_limpar();
     90e:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     912:	4f e0       	ldi	r20, 0x0F	; 15
     914:	52 e0       	ldi	r21, 0x02	; 2
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     91e:	4c e1       	ldi	r20, 0x1C	; 28
     920:	52 e0       	ldi	r21, 0x02	; 2
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				delay1ms(2000);
     92a:	80 ed       	ldi	r24, 0xD0	; 208
     92c:	97 e0       	ldi	r25, 0x07	; 7
     92e:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
				return;
     932:	3a c0       	rjmp	.+116    	; 0x9a8 <__stack+0xa9>
			}
			char resposta = receber_resposta_servidor(); // Esta função já tem um delay e exibe algo
     934:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <receber_resposta_servidor>
     938:	18 2f       	mov	r17, r24

			LCD_limpar();
     93a:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			if(resposta == 'O') {
     93e:	1f 34       	cpi	r17, 0x4F	; 79
     940:	69 f4       	brne	.+26     	; 0x95c <__stack+0x5d>
				LCD_Escrever_Linha(0, 0, "Saque");
     942:	4b ec       	ldi	r20, 0xCB	; 203
     944:	51 e0       	ldi	r21, 0x01	; 1
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Realizado!");
     94e:	4a e2       	ldi	r20, 0x2A	; 42
     950:	52 e0       	ldi	r21, 0x02	; 2
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
     95a:	0c c0       	rjmp	.+24     	; 0x974 <__stack+0x75>
				} else {
				LCD_Escrever_Linha(0, 0, "Saldo");
     95c:	45 e3       	ldi	r20, 0x35	; 53
     95e:	52 e0       	ldi	r21, 0x02	; 2
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "insuficiente");
     968:	4b e3       	ldi	r20, 0x3B	; 59
     96a:	52 e0       	ldi	r21, 0x02	; 2
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			}
			delay1ms(3000);
     974:	88 eb       	ldi	r24, 0xB8	; 184
     976:	9b e0       	ldi	r25, 0x0B	; 11
     978:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
			break; // Sai do loop após processar o saque
     97c:	15 c0       	rjmp	.+42     	; 0x9a8 <__stack+0xa9>
		}
		else if(tecla == '*') {
     97e:	8a 32       	cpi	r24, 0x2A	; 42
     980:	09 f0       	breq	.+2      	; 0x984 <__stack+0x85>
     982:	60 cf       	rjmp	.-320    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
			LCD_limpar();
     984:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
     988:	48 e4       	ldi	r20, 0x48	; 72
     98a:	52 e0       	ldi	r21, 0x02	; 2
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
     994:	41 e5       	ldi	r20, 0x51	; 81
     996:	52 e0       	ldi	r21, 0x02	; 2
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			delay1ms(2000);
     9a0:	80 ed       	ldi	r24, 0xD0	; 208
     9a2:	97 e0       	ldi	r25, 0x07	; 7
     9a4:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
			break; // Sai do loop se cancelar
		}
	}
}
     9a8:	2b 96       	adiw	r28, 0x0b	; 11
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <consultar_saldo>:
	return 'E'; // Retorna 'E' para Erro padrão
}


// Função para consultar saldo
void consultar_saldo(void) {
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	a9 97       	sbiw	r28, 0x29	; 41
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
	char mensagem[2] = { 'C', 'V' }; // Mensagem de consulta de saldo: 'C' 'V'
     9da:	83 e4       	ldi	r24, 0x43	; 67
     9dc:	89 83       	std	Y+1, r24	; 0x01
     9de:	86 e5       	ldi	r24, 0x56	; 86
     9e0:	8a 83       	std	Y+2, r24	; 0x02

	// Verifica bloqueio antes de enviar a mensagem
	if (isBlocked()) {
     9e2:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     9e6:	89 2b       	or	r24, r25
     9e8:	99 f0       	breq	.+38     	; 0xa10 <consultar_saldo+0x52>
		LCD_limpar();
     9ea:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     9ee:	4f e0       	ldi	r20, 0x0F	; 15
     9f0:	52 e0       	ldi	r21, 0x02	; 2
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     9fa:	4c e1       	ldi	r20, 0x1C	; 28
     9fc:	52 e0       	ldi	r21, 0x02	; 2
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		delay1ms(2000);
     a06:	80 ed       	ldi	r24, 0xD0	; 208
     a08:	97 e0       	ldi	r25, 0x07	; 7
     a0a:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
		return;
     a0e:	d1 c0       	rjmp	.+418    	; 0xbb2 <consultar_saldo+0x1f4>
	}
	SerialEnviaChars(2, mensagem); // Envia 2 bytes
     a10:	be 01       	movw	r22, r28
     a12:	6f 5f       	subi	r22, 0xFF	; 255
     a14:	7f 4f       	sbci	r23, 0xFF	; 255
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <SerialEnviaChars>

	char resposta_header[3]; // Para 'S', 'V', 'n'
	// Verifica bloqueio antes de receber o cabeçalho da resposta
	if (isBlocked()) {
     a1e:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     a22:	89 2b       	or	r24, r25
     a24:	99 f0       	breq	.+38     	; 0xa4c <consultar_saldo+0x8e>
		LCD_limpar();
     a26:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     a2a:	4f e0       	ldi	r20, 0x0F	; 15
     a2c:	52 e0       	ldi	r21, 0x02	; 2
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     a36:	4c e1       	ldi	r20, 0x1C	; 28
     a38:	52 e0       	ldi	r21, 0x02	; 2
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		delay1ms(2000);
     a42:	80 ed       	ldi	r24, 0xD0	; 208
     a44:	97 e0       	ldi	r25, 0x07	; 7
     a46:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
		return;
     a4a:	b3 c0       	rjmp	.+358    	; 0xbb2 <consultar_saldo+0x1f4>
	}
	// Recebe os primeiros 3 bytes da resposta (comando + tamanho do campo de dados)
	SerialRecebeChars(3, resposta_header);
     a4c:	be 01       	movw	r22, r28
     a4e:	6d 5f       	subi	r22, 0xFD	; 253
     a50:	7f 4f       	sbci	r23, 0xFF	; 255
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 f6 07 	call	0xfec	; 0xfec <SerialRecebeChars>
	resposta_header[3] = '\0'; // Garante terminação nula
     a5a:	1e 82       	std	Y+6, r1	; 0x06

	// Verifica se o cabeçalho da resposta é 'S' 'V'
	if (resposta_header[0] == 'S' && resposta_header[1] == 'V') {
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	83 35       	cpi	r24, 0x53	; 83
     a60:	09 f0       	breq	.+2      	; 0xa64 <consultar_saldo+0xa6>
     a62:	95 c0       	rjmp	.+298    	; 0xb8e <consultar_saldo+0x1d0>
     a64:	8c 81       	ldd	r24, Y+4	; 0x04
     a66:	86 35       	cpi	r24, 0x56	; 86
     a68:	09 f0       	breq	.+2      	; 0xa6c <consultar_saldo+0xae>
     a6a:	91 c0       	rjmp	.+290    	; 0xb8e <consultar_saldo+0x1d0>
		unsigned char num_bytes_saldo = resposta_header[2]; // 'n' é o número de bytes do saldo
     a6c:	0d 81       	ldd	r16, Y+5	; 0x05

		char saldo_bruto[16]; // Buffer para o saldo recebido (ex: "169071")
		memset(saldo_bruto, 0, sizeof(saldo_bruto)); // Limpa o buffer
     a6e:	fe 01       	movw	r30, r28
     a70:	7a 96       	adiw	r30, 0x1a	; 26
     a72:	80 e1       	ldi	r24, 0x10	; 16
     a74:	df 01       	movw	r26, r30
     a76:	1d 92       	st	X+, r1
     a78:	8a 95       	dec	r24
     a7a:	e9 f7       	brne	.-6      	; 0xa76 <consultar_saldo+0xb8>

		// Limita a leitura para não exceder o buffer
		if (num_bytes_saldo >= sizeof(saldo_bruto)) {
     a7c:	00 31       	cpi	r16, 0x10	; 16
     a7e:	08 f0       	brcs	.+2      	; 0xa82 <consultar_saldo+0xc4>
			num_bytes_saldo = sizeof(saldo_bruto) - 1;
     a80:	0f e0       	ldi	r16, 0x0F	; 15
		}

		// Verifica bloqueio antes de receber os bytes do saldo
		if (isBlocked()) {
     a82:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     a86:	89 2b       	or	r24, r25
     a88:	99 f0       	breq	.+38     	; 0xab0 <consultar_saldo+0xf2>
			LCD_limpar();
     a8a:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     a8e:	4f e0       	ldi	r20, 0x0F	; 15
     a90:	52 e0       	ldi	r21, 0x02	; 2
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     a9a:	4c e1       	ldi	r20, 0x1C	; 28
     a9c:	52 e0       	ldi	r21, 0x02	; 2
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
			delay1ms(2000);
     aa6:	80 ed       	ldi	r24, 0xD0	; 208
     aa8:	97 e0       	ldi	r25, 0x07	; 7
     aaa:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
     aae:	81 c0       	rjmp	.+258    	; 0xbb2 <consultar_saldo+0x1f4>
			return;
		}
		// Recebe os 'n' bytes do saldo
		SerialRecebeChars(num_bytes_saldo, saldo_bruto);
     ab0:	10 e0       	ldi	r17, 0x00	; 0
     ab2:	7e 01       	movw	r14, r28
     ab4:	ba e1       	ldi	r27, 0x1A	; 26
     ab6:	eb 0e       	add	r14, r27
     ab8:	f1 1c       	adc	r15, r1
     aba:	b7 01       	movw	r22, r14
     abc:	c8 01       	movw	r24, r16
     abe:	0e 94 f6 07 	call	0xfec	; 0xfec <SerialRecebeChars>
		saldo_bruto[num_bytes_saldo] = '\0'; // Garante terminação nula
     ac2:	f7 01       	movw	r30, r14
     ac4:	e0 0f       	add	r30, r16
     ac6:	f1 1f       	adc	r31, r17
     ac8:	10 82       	st	Z, r1

		// --- Início da Formatação do Saldo ---
		char saldo_formatado[20]; // Buffer para a string formatada (ex: "R$1690.71")
		int len_bruto = strlen(saldo_bruto);
     aca:	f7 01       	movw	r30, r14
     acc:	01 90       	ld	r0, Z+
     ace:	00 20       	and	r0, r0
     ad0:	e9 f7       	brne	.-6      	; 0xacc <consultar_saldo+0x10e>
     ad2:	31 97       	sbiw	r30, 0x01	; 1
     ad4:	ee 19       	sub	r30, r14
     ad6:	ff 09       	sbc	r31, r15

		// Lógica de formatação para R$XX.YY
		if (len_bruto >= 2) {
     ad8:	e2 30       	cpi	r30, 0x02	; 2
     ada:	f1 05       	cpc	r31, r1
     adc:	44 f1       	brlt	.+80     	; 0xb2e <consultar_saldo+0x170>
			strcpy(saldo_formatado, "R$"); // Começa com "R$"
     ade:	7e 01       	movw	r14, r28
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	e8 0e       	add	r14, r24
     ae4:	f1 1c       	adc	r15, r1
     ae6:	82 e5       	ldi	r24, 0x52	; 82
     ae8:	94 e2       	ldi	r25, 0x24	; 36
     aea:	9f 83       	std	Y+7, r25	; 0x07
     aec:	8e 83       	std	Y+6, r24	; 0x06
     aee:	d7 01       	movw	r26, r14
     af0:	12 96       	adiw	r26, 0x02	; 2
     af2:	1c 92       	st	X, r1
			// Concatena a parte dos reais (todos os dígitos menos os últimos 2)
			strncat(saldo_formatado, saldo_bruto, len_bruto - 2);
     af4:	8f 01       	movw	r16, r30
     af6:	02 50       	subi	r16, 0x02	; 2
     af8:	11 09       	sbc	r17, r1
     afa:	a8 01       	movw	r20, r16
     afc:	be 01       	movw	r22, r28
     afe:	66 5e       	subi	r22, 0xE6	; 230
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	c7 01       	movw	r24, r14
     b04:	0e 94 4b 09 	call	0x1296	; 0x1296 <strncat>
			strcat(saldo_formatado, "."); // Adiciona o ponto decimal
     b08:	f7 01       	movw	r30, r14
     b0a:	01 90       	ld	r0, Z+
     b0c:	00 20       	and	r0, r0
     b0e:	e9 f7       	brne	.-6      	; 0xb0a <consultar_saldo+0x14c>
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	8e e2       	ldi	r24, 0x2E	; 46
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	91 83       	std	Z+1, r25	; 0x01
     b18:	80 83       	st	Z, r24
			// Concatena os centavos (os últimos 2 dígitos)
			strcat(saldo_formatado, &saldo_bruto[len_bruto - 2]);
     b1a:	6a e1       	ldi	r22, 0x1A	; 26
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	6c 0f       	add	r22, r28
     b20:	7d 1f       	adc	r23, r29
     b22:	60 0f       	add	r22, r16
     b24:	71 1f       	adc	r23, r17
     b26:	c7 01       	movw	r24, r14
     b28:	0e 94 39 09 	call	0x1272	; 0x1272 <strcat>
     b2c:	1c c0       	rjmp	.+56     	; 0xb66 <consultar_saldo+0x1a8>
			} else if (len_bruto == 1) { // Ex: saldo "5" -> R$0.05
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	89 f4       	brne	.+34     	; 0xb54 <consultar_saldo+0x196>
			strcpy(saldo_formatado, "R$0.0");
     b32:	86 e0       	ldi	r24, 0x06	; 6
     b34:	eb e5       	ldi	r30, 0x5B	; 91
     b36:	f2 e0       	ldi	r31, 0x02	; 2
     b38:	de 01       	movw	r26, r28
     b3a:	16 96       	adiw	r26, 0x06	; 6
     b3c:	01 90       	ld	r0, Z+
     b3e:	0d 92       	st	X+, r0
     b40:	8a 95       	dec	r24
     b42:	e1 f7       	brne	.-8      	; 0xb3c <consultar_saldo+0x17e>
			strcat(saldo_formatado, saldo_bruto);
     b44:	be 01       	movw	r22, r28
     b46:	66 5e       	subi	r22, 0xE6	; 230
     b48:	7f 4f       	sbci	r23, 0xFF	; 255
     b4a:	ce 01       	movw	r24, r28
     b4c:	06 96       	adiw	r24, 0x06	; 6
     b4e:	0e 94 39 09 	call	0x1272	; 0x1272 <strcat>
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <consultar_saldo+0x1a8>
			} else { // Ex: saldo "0" ou vazio -> R$0.00
			strcpy(saldo_formatado, "R$0.00");
     b54:	87 e0       	ldi	r24, 0x07	; 7
     b56:	e1 e6       	ldi	r30, 0x61	; 97
     b58:	f2 e0       	ldi	r31, 0x02	; 2
     b5a:	de 01       	movw	r26, r28
     b5c:	16 96       	adiw	r26, 0x06	; 6
     b5e:	01 90       	ld	r0, Z+
     b60:	0d 92       	st	X+, r0
     b62:	8a 95       	dec	r24
     b64:	e1 f7       	brne	.-8      	; 0xb5e <consultar_saldo+0x1a0>
		}
		// --- Fim da Formatação do Saldo ---

		LCD_limpar();
     b66:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Saldo atual:");
     b6a:	48 e6       	ldi	r20, 0x68	; 104
     b6c:	52 e0       	ldi	r21, 0x02	; 2
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, saldo_formatado); // Exibe o saldo formatado
     b76:	ae 01       	movw	r20, r28
     b78:	4a 5f       	subi	r20, 0xFA	; 250
     b7a:	5f 4f       	sbci	r21, 0xFF	; 255
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		delay1ms(3000); // Exibe por 3 segundos
     b84:	88 eb       	ldi	r24, 0xB8	; 184
     b86:	9b e0       	ldi	r25, 0x0B	; 11
     b88:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
	// Recebe os primeiros 3 bytes da resposta (comando + tamanho do campo de dados)
	SerialRecebeChars(3, resposta_header);
	resposta_header[3] = '\0'; // Garante terminação nula

	// Verifica se o cabeçalho da resposta é 'S' 'V'
	if (resposta_header[0] == 'S' && resposta_header[1] == 'V') {
     b8c:	12 c0       	rjmp	.+36     	; 0xbb2 <consultar_saldo+0x1f4>
		LCD_Escrever_Linha(0, 0, "Saldo atual:");
		LCD_Escrever_Linha(1, 0, saldo_formatado); // Exibe o saldo formatado
		delay1ms(3000); // Exibe por 3 segundos
		} else {
		// Se a resposta do servidor não seguir o formato esperado
		LCD_limpar();
     b8e:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Erro ao obter");
     b92:	45 e7       	ldi	r20, 0x75	; 117
     b94:	52 e0       	ldi	r21, 0x02	; 2
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "saldo!");
     b9e:	43 e8       	ldi	r20, 0x83	; 131
     ba0:	52 e0       	ldi	r21, 0x02	; 2
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		delay1ms(3000);
     baa:	88 eb       	ldi	r24, 0xB8	; 184
     bac:	9b e0       	ldi	r25, 0x0B	; 11
     bae:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
	}
}
     bb2:	a9 96       	adiw	r28, 0x29	; 41
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	08 95       	ret

00000bcc <finalizar_sessao>:

// Função para finalizar a sessão
void finalizar_sessao(void) {
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <finalizar_sessao+0x6>
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <finalizar_sessao+0x8>
     bd4:	1f 92       	push	r1
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
	char mensagem[2] = {'C', 'F'}; // Comando para finalizar sessão
     bda:	83 e4       	ldi	r24, 0x43	; 67
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	86 e4       	ldi	r24, 0x46	; 70
     be0:	8a 83       	std	Y+2, r24	; 0x02

	// Verifica bloqueio antes de enviar a mensagem
	if (isBlocked()) {
     be2:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     be6:	89 2b       	or	r24, r25
     be8:	99 f0       	breq	.+38     	; 0xc10 <finalizar_sessao+0x44>
		LCD_limpar();
     bea:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
     bee:	4a e8       	ldi	r20, 0x8A	; 138
     bf0:	52 e0       	ldi	r21, 0x02	; 2
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
     bfa:	45 e9       	ldi	r20, 0x95	; 149
     bfc:	52 e0       	ldi	r21, 0x02	; 2
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		delay1ms(2000);
     c06:	80 ed       	ldi	r24, 0xD0	; 208
     c08:	97 e0       	ldi	r25, 0x07	; 7
     c0a:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
		return;
     c0e:	4b c0       	rjmp	.+150    	; 0xca6 <finalizar_sessao+0xda>
	}
	SerialEnviaChars(2, mensagem);
     c10:	be 01       	movw	r22, r28
     c12:	6f 5f       	subi	r22, 0xFF	; 255
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <SerialEnviaChars>

	char resposta[3]; // Suficiente para "SF" + '\0'
	// Verifica bloqueio antes de receber a resposta
	if (isBlocked()) {
     c1e:	0e 94 bb 07 	call	0xf76	; 0xf76 <isBlocked>
     c22:	89 2b       	or	r24, r25
     c24:	99 f0       	breq	.+38     	; 0xc4c <finalizar_sessao+0x80>
		LCD_limpar();
     c26:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
     c2a:	4a e8       	ldi	r20, 0x8A	; 138
     c2c:	52 e0       	ldi	r21, 0x02	; 2
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
     c36:	45 e9       	ldi	r20, 0x95	; 149
     c38:	52 e0       	ldi	r21, 0x02	; 2
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		delay1ms(2000);
     c42:	80 ed       	ldi	r24, 0xD0	; 208
     c44:	97 e0       	ldi	r25, 0x07	; 7
     c46:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
		return;
     c4a:	2d c0       	rjmp	.+90     	; 0xca6 <finalizar_sessao+0xda>
	}
	SerialRecebeChars(2, resposta); // Espera 2 bytes de resposta ("SF")
     c4c:	be 01       	movw	r22, r28
     c4e:	6d 5f       	subi	r22, 0xFD	; 253
     c50:	7f 4f       	sbci	r23, 0xFF	; 255
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 f6 07 	call	0xfec	; 0xfec <SerialRecebeChars>
	resposta[2] = '\0'; // Garante terminação nula
     c5a:	1d 82       	std	Y+5, r1	; 0x05

	LCD_limpar();
     c5c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_limpar>
	
	if (resposta[0] == 'S' && resposta[1] == 'F') {
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	83 35       	cpi	r24, 0x53	; 83
     c64:	81 f4       	brne	.+32     	; 0xc86 <finalizar_sessao+0xba>
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	86 34       	cpi	r24, 0x46	; 70
     c6a:	69 f4       	brne	.+26     	; 0xc86 <finalizar_sessao+0xba>
		LCD_Escrever_Linha(0, 0, "Sessao");
     c6c:	41 ea       	ldi	r20, 0xA1	; 161
     c6e:	52 e0       	ldi	r21, 0x02	; 2
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "Finalizada!");
     c78:	48 ea       	ldi	r20, 0xA8	; 168
     c7a:	52 e0       	ldi	r21, 0x02	; 2
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
     c84:	0c c0       	rjmp	.+24     	; 0xc9e <finalizar_sessao+0xd2>
		} else {
		LCD_Escrever_Linha(0, 0, "Erro ao finalizar");
     c86:	44 eb       	ldi	r20, 0xB4	; 180
     c88:	52 e0       	ldi	r21, 0x02	; 2
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "sessao!");
     c92:	46 ec       	ldi	r20, 0xC6	; 198
     c94:	52 e0       	ldi	r21, 0x02	; 2
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Escrever_Linha>
	}
	delay1ms(2000); // Exibe a mensagem por 2 segundos
     c9e:	80 ed       	ldi	r24, 0xD0	; 208
     ca0:	97 e0       	ldi	r25, 0x07	; 7
     ca2:	0e 94 02 09 	call	0x1204	; 0x1204 <delay1ms>
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <initUART>:
	if (uart_head >= uart_tail) {
		return uart_head - uart_tail;
		} else {
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}
     cb6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     cba:	83 e3       	ldi	r24, 0x33	; 51
     cbc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     cc0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     cc4:	88 e9       	ldi	r24, 0x98	; 152
     cc6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     cca:	86 e0       	ldi	r24, 0x06	; 6
     ccc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     cd0:	78 94       	sei
     cd2:	08 95       	ret

00000cd4 <SerialEnviaChars>:
     cd4:	ac 01       	movw	r20, r24
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	0c c0       	rjmp	.+24     	; 0xcf4 <SerialEnviaChars+0x20>
     cdc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ce0:	95 ff       	sbrs	r25, 5
     ce2:	fc cf       	rjmp	.-8      	; 0xcdc <SerialEnviaChars+0x8>
     ce4:	fb 01       	movw	r30, r22
     ce6:	e2 0f       	add	r30, r18
     ce8:	f3 1f       	adc	r31, r19
     cea:	90 81       	ld	r25, Z
     cec:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     cf0:	2f 5f       	subi	r18, 0xFF	; 255
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	24 17       	cp	r18, r20
     cf6:	35 07       	cpc	r19, r21
     cf8:	8c f3       	brlt	.-30     	; 0xcdc <SerialEnviaChars+0x8>
     cfa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     cfe:	86 ff       	sbrs	r24, 6
     d00:	fc cf       	rjmp	.-8      	; 0xcfa <SerialEnviaChars+0x26>
     d02:	e0 ec       	ldi	r30, 0xC0	; 192
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	80 64       	ori	r24, 0x40	; 64
     d0a:	80 83       	st	Z, r24
     d0c:	08 95       	ret

00000d0e <SerialEnviaString>:
     d0e:	fc 01       	movw	r30, r24
     d10:	01 90       	ld	r0, Z+
     d12:	00 20       	and	r0, r0
     d14:	e9 f7       	brne	.-6      	; 0xd10 <SerialEnviaString+0x2>
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	bc 01       	movw	r22, r24
     d1a:	9f 01       	movw	r18, r30
     d1c:	28 1b       	sub	r18, r24
     d1e:	39 0b       	sbc	r19, r25
     d20:	c9 01       	movw	r24, r18
     d22:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <SerialEnviaChars>
     d26:	08 95       	ret

00000d28 <__vector_18>:
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
     d4a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     d4e:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <sh_bytes_count>
     d52:	9f ef       	ldi	r25, 0xFF	; 255
     d54:	9e 0f       	add	r25, r30
     d56:	95 30       	cpi	r25, 0x05	; 5
     d58:	d8 f4       	brcc	.+54     	; 0xd90 <__vector_18+0x68>
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	9e 0f       	add	r25, r30
     d5e:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <sh_bytes_count>
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	e5 52       	subi	r30, 0x25	; 37
     d66:	fd 4f       	sbci	r31, 0xFD	; 253
     d68:	80 83       	st	Z, r24
     d6a:	96 30       	cpi	r25, 0x06	; 6
     d6c:	09 f0       	breq	.+2      	; 0xd70 <__vector_18+0x48>
     d6e:	f2 c0       	rjmp	.+484    	; 0xf54 <__vector_18+0x22c>
     d70:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <sh_command_bytes_received+0x4>
     d74:	88 50       	subi	r24, 0x08	; 8
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	8c 30       	cpi	r24, 0x0C	; 12
     d7a:	08 f4       	brcc	.+2      	; 0xd7e <__vector_18+0x56>
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <blocked>
     d82:	8e ec       	ldi	r24, 0xCE	; 206
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	0e 94 87 06 	call	0xd0e	; 0xd0e <SerialEnviaString>
     d8a:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <sh_bytes_count>
     d8e:	e2 c0       	rjmp	.+452    	; 0xf54 <__vector_18+0x22c>
     d90:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <__data_end>
     d94:	99 23       	and	r25, r25
     d96:	09 f4       	brne	.+2      	; 0xd9a <__vector_18+0x72>
     d98:	b3 c0       	rjmp	.+358    	; 0xf00 <__vector_18+0x1d8>
     d9a:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <first_byte_of_potential_command>
     d9e:	93 35       	cpi	r25, 0x53	; 83
     da0:	09 f0       	breq	.+2      	; 0xda4 <__vector_18+0x7c>
     da2:	65 c0       	rjmp	.+202    	; 0xe6e <__vector_18+0x146>
     da4:	84 35       	cpi	r24, 0x54	; 84
     da6:	41 f4       	brne	.+16     	; 0xdb8 <__vector_18+0x90>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <blocked>
     dae:	81 ed       	ldi	r24, 0xD1	; 209
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	0e 94 87 06 	call	0xd0e	; 0xd0e <SerialEnviaString>
     db6:	9f c0       	rjmp	.+318    	; 0xef6 <__vector_18+0x1ce>
     db8:	8c 34       	cpi	r24, 0x4C	; 76
     dba:	39 f4       	brne	.+14     	; 0xdca <__vector_18+0xa2>
     dbc:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <blocked>
     dc0:	84 ed       	ldi	r24, 0xD4	; 212
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	0e 94 87 06 	call	0xd0e	; 0xd0e <SerialEnviaString>
     dc8:	96 c0       	rjmp	.+300    	; 0xef6 <__vector_18+0x1ce>
     dca:	88 34       	cpi	r24, 0x48	; 72
     dcc:	51 f4       	brne	.+20     	; 0xde2 <__vector_18+0xba>
     dce:	eb ed       	ldi	r30, 0xDB	; 219
     dd0:	f2 e0       	ldi	r31, 0x02	; 2
     dd2:	83 e5       	ldi	r24, 0x53	; 83
     dd4:	80 83       	st	Z, r24
     dd6:	88 e4       	ldi	r24, 0x48	; 72
     dd8:	81 83       	std	Z+1, r24	; 0x01
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <sh_bytes_count>
     de0:	8a c0       	rjmp	.+276    	; 0xef6 <__vector_18+0x1ce>
     de2:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <uart_head>
     de6:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <uart_head+0x1>
     dea:	2f 5f       	subi	r18, 0xFF	; 255
     dec:	3f 4f       	sbci	r19, 0xFF	; 255
     dee:	2f 77       	andi	r18, 0x7F	; 127
     df0:	30 78       	andi	r19, 0x80	; 128
     df2:	33 23       	and	r19, r19
     df4:	34 f4       	brge	.+12     	; 0xe02 <__vector_18+0xda>
     df6:	21 50       	subi	r18, 0x01	; 1
     df8:	31 09       	sbc	r19, r1
     dfa:	20 68       	ori	r18, 0x80	; 128
     dfc:	3f 6f       	ori	r19, 0xFF	; 255
     dfe:	2f 5f       	subi	r18, 0xFF	; 255
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	40 91 e2 02 	lds	r20, 0x02E2	; 0x8002e2 <uart_tail>
     e06:	50 91 e3 02 	lds	r21, 0x02E3	; 0x8002e3 <uart_tail+0x1>
     e0a:	24 17       	cp	r18, r20
     e0c:	35 07       	cpc	r19, r21
     e0e:	59 f0       	breq	.+22     	; 0xe26 <__vector_18+0xfe>
     e10:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <uart_head>
     e14:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <uart_head+0x1>
     e18:	ea 51       	subi	r30, 0x1A	; 26
     e1a:	fd 4f       	sbci	r31, 0xFD	; 253
     e1c:	90 83       	st	Z, r25
     e1e:	30 93 e5 02 	sts	0x02E5, r19	; 0x8002e5 <uart_head+0x1>
     e22:	20 93 e4 02 	sts	0x02E4, r18	; 0x8002e4 <uart_head>
     e26:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <uart_head>
     e2a:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <uart_head+0x1>
     e2e:	2f 5f       	subi	r18, 0xFF	; 255
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	2f 77       	andi	r18, 0x7F	; 127
     e34:	30 78       	andi	r19, 0x80	; 128
     e36:	33 23       	and	r19, r19
     e38:	34 f4       	brge	.+12     	; 0xe46 <__vector_18+0x11e>
     e3a:	21 50       	subi	r18, 0x01	; 1
     e3c:	31 09       	sbc	r19, r1
     e3e:	20 68       	ori	r18, 0x80	; 128
     e40:	3f 6f       	ori	r19, 0xFF	; 255
     e42:	2f 5f       	subi	r18, 0xFF	; 255
     e44:	3f 4f       	sbci	r19, 0xFF	; 255
     e46:	40 91 e2 02 	lds	r20, 0x02E2	; 0x8002e2 <uart_tail>
     e4a:	50 91 e3 02 	lds	r21, 0x02E3	; 0x8002e3 <uart_tail+0x1>
     e4e:	24 17       	cp	r18, r20
     e50:	35 07       	cpc	r19, r21
     e52:	09 f4       	brne	.+2      	; 0xe56 <__vector_18+0x12e>
     e54:	50 c0       	rjmp	.+160    	; 0xef6 <__vector_18+0x1ce>
     e56:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <uart_head>
     e5a:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <uart_head+0x1>
     e5e:	ea 51       	subi	r30, 0x1A	; 26
     e60:	fd 4f       	sbci	r31, 0xFD	; 253
     e62:	80 83       	st	Z, r24
     e64:	30 93 e5 02 	sts	0x02E5, r19	; 0x8002e5 <uart_head+0x1>
     e68:	20 93 e4 02 	sts	0x02E4, r18	; 0x8002e4 <uart_head>
     e6c:	44 c0       	rjmp	.+136    	; 0xef6 <__vector_18+0x1ce>
     e6e:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <uart_head>
     e72:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <uart_head+0x1>
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	2f 77       	andi	r18, 0x7F	; 127
     e7c:	30 78       	andi	r19, 0x80	; 128
     e7e:	33 23       	and	r19, r19
     e80:	34 f4       	brge	.+12     	; 0xe8e <__vector_18+0x166>
     e82:	21 50       	subi	r18, 0x01	; 1
     e84:	31 09       	sbc	r19, r1
     e86:	20 68       	ori	r18, 0x80	; 128
     e88:	3f 6f       	ori	r19, 0xFF	; 255
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
     e8e:	40 91 e2 02 	lds	r20, 0x02E2	; 0x8002e2 <uart_tail>
     e92:	50 91 e3 02 	lds	r21, 0x02E3	; 0x8002e3 <uart_tail+0x1>
     e96:	24 17       	cp	r18, r20
     e98:	35 07       	cpc	r19, r21
     e9a:	59 f0       	breq	.+22     	; 0xeb2 <__vector_18+0x18a>
     e9c:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <uart_head>
     ea0:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <uart_head+0x1>
     ea4:	ea 51       	subi	r30, 0x1A	; 26
     ea6:	fd 4f       	sbci	r31, 0xFD	; 253
     ea8:	90 83       	st	Z, r25
     eaa:	30 93 e5 02 	sts	0x02E5, r19	; 0x8002e5 <uart_head+0x1>
     eae:	20 93 e4 02 	sts	0x02E4, r18	; 0x8002e4 <uart_head>
     eb2:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <uart_head>
     eb6:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <uart_head+0x1>
     eba:	2f 5f       	subi	r18, 0xFF	; 255
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	2f 77       	andi	r18, 0x7F	; 127
     ec0:	30 78       	andi	r19, 0x80	; 128
     ec2:	33 23       	and	r19, r19
     ec4:	34 f4       	brge	.+12     	; 0xed2 <__vector_18+0x1aa>
     ec6:	21 50       	subi	r18, 0x01	; 1
     ec8:	31 09       	sbc	r19, r1
     eca:	20 68       	ori	r18, 0x80	; 128
     ecc:	3f 6f       	ori	r19, 0xFF	; 255
     ece:	2f 5f       	subi	r18, 0xFF	; 255
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
     ed2:	40 91 e2 02 	lds	r20, 0x02E2	; 0x8002e2 <uart_tail>
     ed6:	50 91 e3 02 	lds	r21, 0x02E3	; 0x8002e3 <uart_tail+0x1>
     eda:	24 17       	cp	r18, r20
     edc:	35 07       	cpc	r19, r21
     ede:	59 f0       	breq	.+22     	; 0xef6 <__vector_18+0x1ce>
     ee0:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <uart_head>
     ee4:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <uart_head+0x1>
     ee8:	ea 51       	subi	r30, 0x1A	; 26
     eea:	fd 4f       	sbci	r31, 0xFD	; 253
     eec:	80 83       	st	Z, r24
     eee:	30 93 e5 02 	sts	0x02E5, r19	; 0x8002e5 <uart_head+0x1>
     ef2:	20 93 e4 02 	sts	0x02E4, r18	; 0x8002e4 <uart_head>
     ef6:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__data_end>
     efa:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <first_byte_of_potential_command>
     efe:	2a c0       	rjmp	.+84     	; 0xf54 <__vector_18+0x22c>
     f00:	83 35       	cpi	r24, 0x53	; 83
     f02:	31 f4       	brne	.+12     	; 0xf10 <__vector_18+0x1e8>
     f04:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <first_byte_of_potential_command>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__data_end>
     f0e:	22 c0       	rjmp	.+68     	; 0xf54 <__vector_18+0x22c>
     f10:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <uart_head>
     f14:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <uart_head+0x1>
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	2f 77       	andi	r18, 0x7F	; 127
     f1e:	30 78       	andi	r19, 0x80	; 128
     f20:	33 23       	and	r19, r19
     f22:	34 f4       	brge	.+12     	; 0xf30 <__vector_18+0x208>
     f24:	21 50       	subi	r18, 0x01	; 1
     f26:	31 09       	sbc	r19, r1
     f28:	20 68       	ori	r18, 0x80	; 128
     f2a:	3f 6f       	ori	r19, 0xFF	; 255
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	40 91 e2 02 	lds	r20, 0x02E2	; 0x8002e2 <uart_tail>
     f34:	50 91 e3 02 	lds	r21, 0x02E3	; 0x8002e3 <uart_tail+0x1>
     f38:	24 17       	cp	r18, r20
     f3a:	35 07       	cpc	r19, r21
     f3c:	59 f0       	breq	.+22     	; 0xf54 <__vector_18+0x22c>
     f3e:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <uart_head>
     f42:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <uart_head+0x1>
     f46:	ea 51       	subi	r30, 0x1A	; 26
     f48:	fd 4f       	sbci	r31, 0xFD	; 253
     f4a:	80 83       	st	Z, r24
     f4c:	30 93 e5 02 	sts	0x02E5, r19	; 0x8002e5 <uart_head+0x1>
     f50:	20 93 e4 02 	sts	0x02E4, r18	; 0x8002e4 <uart_head>
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <isBlocked>:
     f76:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <blocked>
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	08 95       	ret

00000f7e <uart_buffer_empty>:
     f7e:	40 91 e4 02 	lds	r20, 0x02E4	; 0x8002e4 <uart_head>
     f82:	50 91 e5 02 	lds	r21, 0x02E5	; 0x8002e5 <uart_head+0x1>
     f86:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <uart_tail>
     f8a:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <uart_tail+0x1>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	42 17       	cp	r20, r18
     f92:	53 07       	cpc	r21, r19
     f94:	09 f0       	breq	.+2      	; 0xf98 <uart_buffer_empty+0x1a>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	08 95       	ret

00000f9c <uart_buffer_read_char>:

int uart_buffer_read_char(char *c) {
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) return 0;
     fa2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart_buffer_empty>
     fa6:	89 2b       	or	r24, r25
     fa8:	e1 f4       	brne	.+56     	; 0xfe2 <uart_buffer_read_char+0x46>
	*c = uart_buffer[uart_tail];
     faa:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <uart_tail>
     fae:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <uart_tail+0x1>
     fb2:	ea 51       	subi	r30, 0x1A	; 26
     fb4:	fd 4f       	sbci	r31, 0xFD	; 253
     fb6:	80 81       	ld	r24, Z
     fb8:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
     fba:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <uart_tail>
     fbe:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <uart_tail+0x1>
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	8f 77       	andi	r24, 0x7F	; 127
     fc6:	90 78       	andi	r25, 0x80	; 128
     fc8:	99 23       	and	r25, r25
     fca:	24 f4       	brge	.+8      	; 0xfd4 <uart_buffer_read_char+0x38>
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	9f 6f       	ori	r25, 0xFF	; 255
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <uart_tail+0x1>
     fd8:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <uart_tail>
	return 1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <uart_buffer_read_char+0x4a>
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}

int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) return 0;
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <SerialRecebeChars>:

void SerialRecebeChars(int sizeS, char* string) {
     fec:	af 92       	push	r10
     fee:	bf 92       	push	r11
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	1f 92       	push	r1
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	6c 01       	movw	r12, r24
    1008:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
    100a:	e1 2c       	mov	r14, r1
    100c:	f1 2c       	mov	r15, r1
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
    100e:	00 e0       	ldi	r16, 0x00	; 0
    1010:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100;

	while (received < sizeS && timeout_count < timeout_limit) {
    1012:	19 c0       	rjmp	.+50     	; 0x1046 <SerialRecebeChars+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
    1014:	ce 01       	movw	r24, r28
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	0e 94 ce 07 	call	0xf9c	; 0xf9c <uart_buffer_read_char>
    101c:	89 2b       	or	r24, r25
    101e:	51 f0       	breq	.+20     	; 0x1034 <SerialRecebeChars+0x48>
			string[received++] = c;
    1020:	f5 01       	movw	r30, r10
    1022:	e0 0f       	add	r30, r16
    1024:	f1 1f       	adc	r31, r17
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	80 83       	st	Z, r24
    102a:	0f 5f       	subi	r16, 0xFF	; 255
    102c:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0;
    102e:	e1 2c       	mov	r14, r1
    1030:	f1 2c       	mov	r15, r1
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <SerialRecebeChars+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1034:	8f e3       	ldi	r24, 0x3F	; 63
    1036:	9c e9       	ldi	r25, 0x9C	; 156
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <SerialRecebeChars+0x4c>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <SerialRecebeChars+0x52>
    103e:	00 00       	nop
			} else {
			_delay_ms(10);
			timeout_count++;
    1040:	9f ef       	ldi	r25, 0xFF	; 255
    1042:	e9 1a       	sub	r14, r25
    1044:	f9 0a       	sbc	r15, r25
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100;

	while (received < sizeS && timeout_count < timeout_limit) {
    1046:	0c 15       	cp	r16, r12
    1048:	1d 05       	cpc	r17, r13
    104a:	24 f4       	brge	.+8      	; 0x1054 <SerialRecebeChars+0x68>
    104c:	84 e6       	ldi	r24, 0x64	; 100
    104e:	e8 16       	cp	r14, r24
    1050:	f1 04       	cpc	r15, r1
    1052:	04 f3       	brlt	.-64     	; 0x1014 <SerialRecebeChars+0x28>
			} else {
			_delay_ms(10);
			timeout_count++;
		}
	}
	string[received] = '\0';
    1054:	f5 01       	movw	r30, r10
    1056:	e0 0f       	add	r30, r16
    1058:	f1 1f       	adc	r31, r17
    105a:	10 82       	st	Z, r1
}
    105c:	0f 90       	pop	r0
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	df 90       	pop	r13
    106c:	cf 90       	pop	r12
    106e:	bf 90       	pop	r11
    1070:	af 90       	pop	r10
    1072:	08 95       	ret

00001074 <prepara_teclado>:
#define COL4 PD2    // Coluna 4 no PD2

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
    1074:	84 b1       	in	r24, 0x04	; 4
    1076:	83 60       	ori	r24, 0x03	; 3
    1078:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
    107a:	8a b1       	in	r24, 0x0a	; 10
    107c:	80 6c       	ori	r24, 0xC0	; 192
    107e:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4)); // PD5, PD4, PD3 e PD2 como entradas
    1080:	8a b1       	in	r24, 0x0a	; 10
    1082:	83 7c       	andi	r24, 0xC3	; 195
    1084:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);   // Habilitar resistores de Pull-up
    1086:	8b b1       	in	r24, 0x0b	; 11
    1088:	8c 63       	ori	r24, 0x3C	; 60
    108a:	8b b9       	out	0x0b, r24	; 11
    108c:	08 95       	ret

0000108e <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	00 d0       	rcall	.+0      	; 0x1094 <atraso_debounce+0x6>
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
    1098:	1a 82       	std	Y+2, r1	; 0x02
    109a:	19 82       	std	Y+1, r1	; 0x01
    109c:	05 c0       	rjmp	.+10     	; 0x10a8 <atraso_debounce+0x1a>
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	88 3e       	cpi	r24, 0xE8	; 232
    10ae:	93 40       	sbci	r25, 0x03	; 3
    10b0:	b0 f3       	brcs	.-20     	; 0x109e <atraso_debounce+0x10>
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    10c4:	c0 e0       	ldi	r28, 0x00	; 0
    10c6:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
    10c8:	12 c0       	rjmp	.+36     	; 0x10ee <debounce+0x32>
        atraso_debounce();
    10ca:	0e 94 47 08 	call	0x108e	; 0x108e <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
    10ce:	29 b1       	in	r18, 0x09	; 9
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	01 2e       	mov	r0, r17
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <debounce+0x20>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <debounce+0x1c>
    10e0:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
    10e2:	d8 13       	cpse	r29, r24
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <debounce+0x2e>
            counter++;
    10e6:	cf 5f       	subi	r28, 0xFF	; 255
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <debounce+0x30>
        } else {
            counter = 0;
    10ea:	c0 e0       	ldi	r28, 0x00	; 0
    10ec:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
    10ee:	c7 30       	cpi	r28, 0x07	; 7
    10f0:	61 f7       	brne	.-40     	; 0x10ca <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
    10f2:	8d 2f       	mov	r24, r29
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	08 95       	ret

000010fc <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
    10fc:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
    10fe:	85 b1       	in	r24, 0x05	; 5
    1100:	83 60       	ori	r24, 0x03	; 3
    1102:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
    1104:	8b b1       	in	r24, 0x0b	; 11
    1106:	80 6c       	ori	r24, 0xC0	; 192
    1108:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    110a:	85 b1       	in	r24, 0x05	; 5
    110c:	8d 7f       	andi	r24, 0xFD	; 253
    110e:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
    1110:	85 e0       	ldi	r24, 0x05	; 5
    1112:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    1116:	88 23       	and	r24, r24
    1118:	11 f0       	breq	.+4      	; 0x111e <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
    111a:	c0 e0       	ldi	r28, 0x00	; 0
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
    111e:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
    1120:	84 e0       	ldi	r24, 0x04	; 4
    1122:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    1126:	81 11       	cpse	r24, r1
    1128:	01 c0       	rjmp	.+2      	; 0x112c <varredura+0x30>
    112a:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    1132:	81 11       	cpse	r24, r1
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <varredura+0x3c>
    1136:	c3 e3       	ldi	r28, 0x33	; 51
	if (!debounce(COL4 - 0)) tecla = 'A'; 
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    113e:	81 11       	cpse	r24, r1
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <varredura+0x48>
    1142:	c1 e4       	ldi	r28, 0x41	; 65
    PORTB |= (1 << LIN1); // Desativa LIN1
    1144:	85 b1       	in	r24, 0x05	; 5
    1146:	82 60       	ori	r24, 0x02	; 2
    1148:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
    114a:	85 b1       	in	r24, 0x05	; 5
    114c:	8e 7f       	andi	r24, 0xFE	; 254
    114e:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
    1150:	85 e0       	ldi	r24, 0x05	; 5
    1152:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    1156:	81 11       	cpse	r24, r1
    1158:	01 c0       	rjmp	.+2      	; 0x115c <varredura+0x60>
    115a:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    1162:	81 11       	cpse	r24, r1
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <varredura+0x6c>
    1166:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
    1168:	83 e0       	ldi	r24, 0x03	; 3
    116a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    116e:	81 11       	cpse	r24, r1
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <varredura+0x78>
    1172:	c6 e3       	ldi	r28, 0x36	; 54
	if (!debounce(COL4 - 0)) tecla = 'B'; 
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    117a:	81 11       	cpse	r24, r1
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <varredura+0x84>
    117e:	c2 e4       	ldi	r28, 0x42	; 66
    PORTB |= (1 << LIN2); // Desativa LIN2
    1180:	85 b1       	in	r24, 0x05	; 5
    1182:	81 60       	ori	r24, 0x01	; 1
    1184:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
    1186:	8b b1       	in	r24, 0x0b	; 11
    1188:	8f 77       	andi	r24, 0x7F	; 127
    118a:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
    118c:	85 e0       	ldi	r24, 0x05	; 5
    118e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    1192:	81 11       	cpse	r24, r1
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <varredura+0x9c>
    1196:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    119e:	81 11       	cpse	r24, r1
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <varredura+0xa8>
    11a2:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    11aa:	81 11       	cpse	r24, r1
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <varredura+0xb4>
    11ae:	c9 e3       	ldi	r28, 0x39	; 57
	if (!debounce(COL4 - 0)) tecla = 'C'; 
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    11b6:	81 11       	cpse	r24, r1
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <varredura+0xc0>
    11ba:	c3 e4       	ldi	r28, 0x43	; 67
    PORTD |= (1 << LIN3); // Desativa LIN3
    11bc:	8b b1       	in	r24, 0x0b	; 11
    11be:	80 68       	ori	r24, 0x80	; 128
    11c0:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
    11c2:	8b b1       	in	r24, 0x0b	; 11
    11c4:	8f 7b       	andi	r24, 0xBF	; 191
    11c6:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
    11c8:	85 e0       	ldi	r24, 0x05	; 5
    11ca:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    11ce:	81 11       	cpse	r24, r1
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <varredura+0xd8>
    11d2:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
    11d4:	84 e0       	ldi	r24, 0x04	; 4
    11d6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    11da:	81 11       	cpse	r24, r1
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <varredura+0xe4>
    11de:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    11e6:	81 11       	cpse	r24, r1
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <varredura+0xf0>
    11ea:	c3 e2       	ldi	r28, 0x23	; 35
	if (!debounce(COL4 - 0)) tecla = 'D'; 
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debounce>
    11f2:	81 11       	cpse	r24, r1
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <varredura+0xfc>
    11f6:	c4 e4       	ldi	r28, 0x44	; 68
    PORTD |= (1 << LIN4); // Desativa LIN4
    11f8:	8b b1       	in	r24, 0x0b	; 11
    11fa:	80 64       	ori	r24, 0x40	; 64
    11fc:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
    11fe:	8c 2f       	mov	r24, r28
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    1204:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    1206:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    1208:	85 e0       	ldi	r24, 0x05	; 5
    120a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    120c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    1210:	81 ef       	ldi	r24, 0xF1	; 241
    1212:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	08 c0       	rjmp	.+16     	; 0x122a <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    121a:	a9 9b       	sbis	0x15, 1	; 21
    121c:	fe cf       	rjmp	.-4      	; 0x121a <delay1ms+0x16>
		TCNT0 = 241;
    121e:	91 ef       	ldi	r25, 0xF1	; 241
    1220:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    1222:	92 e0       	ldi	r25, 0x02	; 2
    1224:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    1226:	2f 5f       	subi	r18, 0xFF	; 255
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
    122a:	24 17       	cp	r18, r20
    122c:	35 07       	cpc	r19, r21
    122e:	ac f3       	brlt	.-22     	; 0x121a <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    1230:	15 bc       	out	0x25, r1	; 37
    1232:	08 95       	ret

00001234 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    1234:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    1236:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    123c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    1240:	85 ef       	ldi	r24, 0xF5	; 245
    1242:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	09 c0       	rjmp	.+18     	; 0x125c <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    124a:	a9 9b       	sbis	0x15, 1	; 21
    124c:	fe cf       	rjmp	.-4      	; 0x124a <delay1us+0x16>
		TCNT0 = 245;
    124e:	95 ef       	ldi	r25, 0xF5	; 245
    1250:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    1252:	95 b3       	in	r25, 0x15	; 21
    1254:	92 60       	ori	r25, 0x02	; 2
    1256:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	24 17       	cp	r18, r20
    125e:	35 07       	cpc	r19, r21
    1260:	a4 f3       	brlt	.-24     	; 0x124a <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    1262:	15 bc       	out	0x25, r1	; 37
    1264:	08 95       	ret

00001266 <__tablejump2__>:
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	05 90       	lpm	r0, Z+
    126c:	f4 91       	lpm	r31, Z
    126e:	e0 2d       	mov	r30, r0
    1270:	09 94       	ijmp

00001272 <strcat>:
    1272:	fb 01       	movw	r30, r22
    1274:	dc 01       	movw	r26, r24
    1276:	0d 90       	ld	r0, X+
    1278:	00 20       	and	r0, r0
    127a:	e9 f7       	brne	.-6      	; 0x1276 <strcat+0x4>
    127c:	11 97       	sbiw	r26, 0x01	; 1
    127e:	01 90       	ld	r0, Z+
    1280:	0d 92       	st	X+, r0
    1282:	00 20       	and	r0, r0
    1284:	e1 f7       	brne	.-8      	; 0x127e <strcat+0xc>
    1286:	08 95       	ret

00001288 <strcpy>:
    1288:	fb 01       	movw	r30, r22
    128a:	dc 01       	movw	r26, r24
    128c:	01 90       	ld	r0, Z+
    128e:	0d 92       	st	X+, r0
    1290:	00 20       	and	r0, r0
    1292:	e1 f7       	brne	.-8      	; 0x128c <strcpy+0x4>
    1294:	08 95       	ret

00001296 <strncat>:
    1296:	fb 01       	movw	r30, r22
    1298:	dc 01       	movw	r26, r24
    129a:	0d 90       	ld	r0, X+
    129c:	00 20       	and	r0, r0
    129e:	e9 f7       	brne	.-6      	; 0x129a <strncat+0x4>
    12a0:	11 97       	sbiw	r26, 0x01	; 1
    12a2:	41 50       	subi	r20, 0x01	; 1
    12a4:	50 40       	sbci	r21, 0x00	; 0
    12a6:	28 f0       	brcs	.+10     	; 0x12b2 <strncat+0x1c>
    12a8:	01 90       	ld	r0, Z+
    12aa:	00 20       	and	r0, r0
    12ac:	0d 92       	st	X+, r0
    12ae:	c9 f7       	brne	.-14     	; 0x12a2 <strncat+0xc>
    12b0:	08 95       	ret
    12b2:	1c 92       	st	X, r1
    12b4:	08 95       	ret

000012b6 <strncpy>:
    12b6:	fb 01       	movw	r30, r22
    12b8:	dc 01       	movw	r26, r24
    12ba:	41 50       	subi	r20, 0x01	; 1
    12bc:	50 40       	sbci	r21, 0x00	; 0
    12be:	48 f0       	brcs	.+18     	; 0x12d2 <strncpy+0x1c>
    12c0:	01 90       	ld	r0, Z+
    12c2:	0d 92       	st	X+, r0
    12c4:	00 20       	and	r0, r0
    12c6:	c9 f7       	brne	.-14     	; 0x12ba <strncpy+0x4>
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <strncpy+0x16>
    12ca:	1d 92       	st	X+, r1
    12cc:	41 50       	subi	r20, 0x01	; 1
    12ce:	50 40       	sbci	r21, 0x00	; 0
    12d0:	e0 f7       	brcc	.-8      	; 0x12ca <strncpy+0x14>
    12d2:	08 95       	ret

000012d4 <strstr>:
    12d4:	fb 01       	movw	r30, r22
    12d6:	51 91       	ld	r21, Z+
    12d8:	55 23       	and	r21, r21
    12da:	a9 f0       	breq	.+42     	; 0x1306 <strstr+0x32>
    12dc:	bf 01       	movw	r22, r30
    12de:	dc 01       	movw	r26, r24
    12e0:	4d 91       	ld	r20, X+
    12e2:	45 17       	cp	r20, r21
    12e4:	41 11       	cpse	r20, r1
    12e6:	e1 f7       	brne	.-8      	; 0x12e0 <strstr+0xc>
    12e8:	59 f4       	brne	.+22     	; 0x1300 <strstr+0x2c>
    12ea:	cd 01       	movw	r24, r26
    12ec:	01 90       	ld	r0, Z+
    12ee:	00 20       	and	r0, r0
    12f0:	49 f0       	breq	.+18     	; 0x1304 <strstr+0x30>
    12f2:	4d 91       	ld	r20, X+
    12f4:	40 15       	cp	r20, r0
    12f6:	41 11       	cpse	r20, r1
    12f8:	c9 f3       	breq	.-14     	; 0x12ec <strstr+0x18>
    12fa:	fb 01       	movw	r30, r22
    12fc:	41 11       	cpse	r20, r1
    12fe:	ef cf       	rjmp	.-34     	; 0x12de <strstr+0xa>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	08 95       	ret

00001308 <_exit>:
    1308:	f8 94       	cli

0000130a <__stop_program>:
    130a:	ff cf       	rjmp	.-2      	; 0x130a <__stop_program>
