
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001aa  00800100  00000f36  00000fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  008002aa  008002aa  00001174  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002472  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eff  00000000  00000000  000037fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001244  00000000  00000000  000046fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  00005944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000775  00000000  00000000  00005de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012e7  00000000  00000000  00006555  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000783c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 66 05 	jmp	0xacc	; 0xacc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3a       	cpi	r26, 0xAA	; 170
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	aa ea       	ldi	r26, 0xAA	; 170
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <main>
  9e:	0c 94 99 07 	jmp	0xf32	; 0xf32 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mensagem_Inicial>:
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){

		LCD_texto_correndo(0, " Banco UFRGS ", 300, 0);
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	4c e2       	ldi	r20, 0x2C	; 44
  aa:	68 e0       	ldi	r22, 0x08	; 8
  ac:	71 e0       	ldi	r23, 0x01	; 1
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_texto_correndo>
		LCD_Escrever_Linha(1, 0, "Digite cartao: ");
  b4:	46 e1       	ldi	r20, 0x16	; 22
  b6:	51 e0       	ldi	r21, 0x01	; 1
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
  c0:	08 95       	ret

000000c2 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	9c 2f       	mov	r25, r28
  cc:	92 95       	swap	r25
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	89 2b       	or	r24, r25
  d2:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
  e6:	84 e6       	ldi	r24, 0x64	; 100
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 47 07 	call	0xe8e	; 0xe8e <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	cf 70       	andi	r28, 0x0F	; 15
  f4:	c8 2b       	or	r28, r24
  f6:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 13a:	08 95       	ret

0000013c <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 148:	08 95       	ret

0000014a <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	while(*texto) {
 150:	23 c0       	rjmp	.+70     	; 0x198 <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
 152:	98 b1       	in	r25, 0x08	; 8
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	89 2b       	or	r24, r25
 15c:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	80 62       	ori	r24, 0x20	; 32
 162:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 164:	88 b1       	in	r24, 0x08	; 8
 166:	80 61       	ori	r24, 0x10	; 16
 168:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 16a:	88 b1       	in	r24, 0x08	; 8
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
 170:	88 ec       	ldi	r24, 0xC8	; 200
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 47 07 	call	0xe8e	; 0xe8e <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
 178:	98 b1       	in	r25, 0x08	; 8
 17a:	89 91       	ld	r24, Y+
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	89 2b       	or	r24, r25
 182:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 184:	88 b1       	in	r24, 0x08	; 8
 186:	80 61       	ori	r24, 0x10	; 16
 188:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	da cf       	rjmp	.-76     	; 0x152 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
 1aa:	81 11       	cpse	r24, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <LCD_Escrever_Linha+0x1a>
 1ae:	60 31       	cpi	r22, 0x10	; 16
 1b0:	30 f4       	brcc	.+12     	; 0x1be <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
 1b2:	86 2f       	mov	r24, r22
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
 1c2:	60 31       	cpi	r22, 0x10	; 16
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
 1c6:	86 2f       	mov	r24, r22
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	80 6c       	ori	r24, 0xC0	; 192
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <LCD_texto_correndo>:

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
 1e2:	6f 92       	push	r6
 1e4:	7f 92       	push	r7
 1e6:	8f 92       	push	r8
 1e8:	9f 92       	push	r9
 1ea:	af 92       	push	r10
 1ec:	bf 92       	push	r11
 1ee:	cf 92       	push	r12
 1f0:	df 92       	push	r13
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	61 97       	sbiw	r28, 0x11	; 17
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	78 2e       	mov	r7, r24
 210:	4a 01       	movw	r8, r20
 212:	62 2e       	mov	r6, r18
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 214:	cd b6       	in	r12, 0x3d	; 61
 216:	de b6       	in	r13, 0x3e	; 62
	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
}

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
 218:	ad b6       	in	r10, 0x3d	; 61
 21a:	be b6       	in	r11, 0x3e	; 62
    uint8_t tamanho = strlen(texto);
 21c:	fb 01       	movw	r30, r22
 21e:	01 90       	ld	r0, Z+
 220:	00 20       	and	r0, r0
 222:	e9 f7       	brne	.-6      	; 0x21e <LCD_texto_correndo+0x3c>
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	e6 1b       	sub	r30, r22
 228:	f7 0b       	sbc	r31, r23
 22a:	0e 2f       	mov	r16, r30
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
 22c:	e1 31       	cpi	r30, 0x11	; 17
 22e:	28 f4       	brcc	.+10     	; 0x23a <LCD_texto_correndo+0x58>
        LCD_Escrever_Linha(linha, 0, texto);
 230:	ab 01       	movw	r20, r22
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
        return;
 238:	42 c0       	rjmp	.+132    	; 0x2be <LCD_texto_correndo+0xdc>
    }
    
    // Adiciona espaços no final para melhor visualização
    char texto_extendido[tamanho + 17];
 23a:	ff 27       	eor	r31, r31
 23c:	71 96       	adiw	r30, 0x11	; 17
 23e:	8d b7       	in	r24, 0x3d	; 61
 240:	9e b7       	in	r25, 0x3e	; 62
 242:	8e 1b       	sub	r24, r30
 244:	9f 0b       	sbc	r25, r31
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	9e bf       	out	0x3e, r25	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	8d bf       	out	0x3d, r24	; 61
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	7c 01       	movw	r14, r24
    strcpy(texto_extendido, texto);
 254:	0e 94 69 07 	call	0xed2	; 0xed2 <strcpy>
    strcat(texto_extendido, "                "); // 16 espaços
 258:	d7 01       	movw	r26, r14
 25a:	0d 90       	ld	r0, X+
 25c:	00 20       	and	r0, r0
 25e:	e9 f7       	brne	.-6      	; 0x25a <LCD_texto_correndo+0x78>
 260:	11 97       	sbiw	r26, 0x01	; 1
 262:	81 e1       	ldi	r24, 0x11	; 17
 264:	e6 e2       	ldi	r30, 0x26	; 38
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	01 90       	ld	r0, Z+
 26a:	0d 92       	st	X+, r0
 26c:	8a 95       	dec	r24
 26e:	e1 f7       	brne	.-8      	; 0x268 <LCD_texto_correndo+0x86>
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	1b c0       	rjmp	.+54     	; 0x2aa <LCD_texto_correndo+0xc8>
            // Copia 16 caracteres começando na posição i
            strncpy(buffer, &texto_extendido[i], 16);
 274:	40 e1       	ldi	r20, 0x10	; 16
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	b7 01       	movw	r22, r14
 27a:	61 0f       	add	r22, r17
 27c:	71 1d       	adc	r23, r1
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	0e 94 70 07 	call	0xee0	; 0xee0 <strncpy>
            buffer[16] = '\0';
 286:	19 8a       	std	Y+17, r1	; 0x11
            
            LCD_Escrever_Linha(linha, 0, buffer);
 288:	ae 01       	movw	r20, r28
 28a:	4f 5f       	subi	r20, 0xFF	; 255
 28c:	5f 4f       	sbci	r21, 0xFF	; 255
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	87 2d       	mov	r24, r7
 292:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
            delay1ms(velocidade_ms);
 296:	c4 01       	movw	r24, r8
 298:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
 29c:	0e 94 ab 06 	call	0xd56	; 0xd56 <varredura>
 2a0:	89 2b       	or	r24, r25
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <LCD_texto_correndo+0xc6>
 2a4:	66 20       	and	r6, r6
 2a6:	59 f0       	breq	.+22     	; 0x2be <LCD_texto_correndo+0xdc>
    char texto_extendido[tamanho + 17];
    strcpy(texto_extendido, texto);
    strcat(texto_extendido, "                "); // 16 espaços
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
 2a8:	1f 5f       	subi	r17, 0xFF	; 255
 2aa:	01 17       	cp	r16, r17
 2ac:	18 f7       	brcc	.-58     	; 0x274 <LCD_texto_correndo+0x92>
            delay1ms(velocidade_ms);
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 2ae:	61 10       	cpse	r6, r1
 2b0:	df cf       	rjmp	.-66     	; 0x270 <LCD_texto_correndo+0x8e>
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	be be       	out	0x3e, r11	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	ad be       	out	0x3d, r10	; 61
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <LCD_texto_correndo+0xe6>
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
        LCD_Escrever_Linha(linha, 0, texto);
        return;
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	be be       	out	0x3e, r11	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	ad be       	out	0x3d, r10	; 61
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de be       	out	0x3e, r13	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd be       	out	0x3d, r12	; 61
 2d2:	61 96       	adiw	r28, 0x11	; 17
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	df 90       	pop	r13
 2ec:	cf 90       	pop	r12
 2ee:	bf 90       	pop	r11
 2f0:	af 90       	pop	r10
 2f2:	9f 90       	pop	r9
 2f4:	8f 90       	pop	r8
 2f6:	7f 90       	pop	r7
 2f8:	6f 90       	pop	r6
 2fa:	08 95       	ret

000002fc <verifica_comandos_servidor>:
#include "serial.h" // Certifique-se de ter a implementaÃ§Ã£o da serial separada aqui, se nÃ£o, inclua diretamente

volatile int terminal_travado = 0; // 1 = fora de operaÃ§Ã£o

// Verifica comandos recebidos do servidor e atualiza estado do terminal
void verifica_comandos_servidor() {
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <verifica_comandos_servidor+0x6>
 302:	1f 92       	push	r1
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
	char comando[3];
	if (SerialRecebeCharsNonBlocking(2, comando) == 2) {
 308:	be 01       	movw	r22, r28
 30a:	6f 5f       	subi	r22, 0xFF	; 255
 30c:	7f 4f       	sbci	r23, 0xFF	; 255
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 1a 06 	call	0xc34	; 0xc34 <SerialRecebeCharsNonBlocking>
 316:	02 97       	sbiw	r24, 0x02	; 2
 318:	09 f0       	breq	.+2      	; 0x31c <verifica_comandos_servidor+0x20>
 31a:	44 c0       	rjmp	.+136    	; 0x3a4 <verifica_comandos_servidor+0xa8>
		comando[2] = '\0';
 31c:	1b 82       	std	Y+3, r1	; 0x03

		if (strcmp(comando, "ST") == 0) {
 31e:	67 e3       	ldi	r22, 0x37	; 55
 320:	71 e0       	ldi	r23, 0x01	; 1
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	0e 94 60 07 	call	0xec0	; 0xec0 <strcmp>
 32a:	89 2b       	or	r24, r25
 32c:	c9 f4       	brne	.+50     	; 0x360 <verifica_comandos_servidor+0x64>
			terminal_travado = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <__data_end+0x1>
 336:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <__data_end>
			SerialEnviaString("CT");
 33a:	8a e3       	ldi	r24, 0x3A	; 58
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 59 05 	call	0xab2	; 0xab2 <SerialEnviaString>
			LCD_limpar();
 342:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "    FORA  DE");
 346:	4d e3       	ldi	r20, 0x3D	; 61
 348:	51 e0       	ldi	r21, 0x01	; 1
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "    OPERACAO");
 352:	4a e4       	ldi	r20, 0x4A	; 74
 354:	51 e0       	ldi	r21, 0x01	; 1
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 35e:	22 c0       	rjmp	.+68     	; 0x3a4 <verifica_comandos_servidor+0xa8>
		}
		else if (strcmp(comando, "SL") == 0) {
 360:	67 e5       	ldi	r22, 0x57	; 87
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	0e 94 60 07 	call	0xec0	; 0xec0 <strcmp>
 36c:	89 2b       	or	r24, r25
 36e:	d1 f4       	brne	.+52     	; 0x3a4 <verifica_comandos_servidor+0xa8>
			terminal_travado = 0;
 370:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <__data_end+0x1>
 374:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <__data_end>
			SerialEnviaString("CL");
 378:	8a e5       	ldi	r24, 0x5A	; 90
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 59 05 	call	0xab2	; 0xab2 <SerialEnviaString>
			LCD_limpar();
 380:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "     CAIXA");
 384:	4d e5       	ldi	r20, 0x5D	; 93
 386:	51 e0       	ldi	r21, 0x01	; 1
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "   LIBERADO!");
 390:	48 e6       	ldi	r20, 0x68	; 104
 392:	51 e0       	ldi	r21, 0x01	; 1
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			delay1ms(1500);
 39c:	8c ed       	ldi	r24, 0xDC	; 220
 39e:	95 e0       	ldi	r25, 0x05	; 5
 3a0:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
		}
	}
}
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <ler_codigo_aluno>:

// Leitura do cÃ³digo do aluno
void ler_codigo_aluno(char* codigo) {
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	00 d0       	rcall	.+0      	; 0x3be <ler_codigo_aluno+0xe>
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
 3c4:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
 3c8:	45 e7       	ldi	r20, 0x75	; 117
 3ca:	51 e0       	ldi	r21, 0x01	; 1
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
 3d4:	44 e8       	ldi	r20, 0x84	; 132
 3d6:	51 e0       	ldi	r21, 0x01	; 1
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	}
}

// Leitura do cÃ³digo do aluno
void ler_codigo_aluno(char* codigo) {
	int pos = 0;
 3e0:	00 e0       	ldi	r16, 0x00	; 0
 3e2:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 3e4:	19 c0       	rjmp	.+50     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		tecla = varredura();
 3e6:	0e 94 ab 06 	call	0xd56	; 0xd56 <varredura>
		if (tecla >= '0' && tecla <= '9') {
 3ea:	90 ed       	ldi	r25, 0xD0	; 208
 3ec:	98 0f       	add	r25, r24
 3ee:	9a 30       	cpi	r25, 0x0A	; 10
 3f0:	98 f4       	brcc	.+38     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			codigo[pos] = tecla;
 3f2:	f7 01       	movw	r30, r14
 3f4:	e0 0f       	add	r30, r16
 3f6:	f1 1f       	adc	r31, r17
 3f8:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
 3fa:	89 83       	std	Y+1, r24	; 0x01
 3fc:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
 3fe:	ae 01       	movw	r20, r28
 400:	4f 5f       	subi	r20, 0xFF	; 255
 402:	5f 4f       	sbci	r21, 0xFF	; 255
 404:	60 2f       	mov	r22, r16
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 40c:	0f 5f       	subi	r16, 0xFF	; 255
 40e:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
 410:	88 ec       	ldi	r24, 0xC8	; 200
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 418:	06 30       	cpi	r16, 0x06	; 6
 41a:	11 05       	cpc	r17, r1
 41c:	24 f3       	brlt	.-56     	; 0x3e6 <ler_codigo_aluno+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	codigo[6] = '\0';
 41e:	f7 01       	movw	r30, r14
 420:	16 82       	std	Z+6, r1	; 0x06
}
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	08 95       	ret

00000434 <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	00 d0       	rcall	.+0      	; 0x442 <ler_senha+0xe>
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
 448:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite senha:");
 44c:	4b e8       	ldi	r20, 0x8B	; 139
 44e:	51 e0       	ldi	r21, 0x01	; 1
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
 458:	44 e8       	ldi	r20, 0x84	; 132
 45a:	51 e0       	ldi	r21, 0x01	; 1
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
	int pos = 0;
 464:	00 e0       	ldi	r16, 0x00	; 0
 466:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 468:	1a c0       	rjmp	.+52     	; 0x49e <ler_senha+0x6a>
		tecla = varredura();
 46a:	0e 94 ab 06 	call	0xd56	; 0xd56 <varredura>
		if (tecla >= '0' && tecla <= '9') {
 46e:	90 ed       	ldi	r25, 0xD0	; 208
 470:	98 0f       	add	r25, r24
 472:	9a 30       	cpi	r25, 0x0A	; 10
 474:	a0 f4       	brcc	.+40     	; 0x49e <ler_senha+0x6a>
			senha[pos] = tecla;
 476:	f7 01       	movw	r30, r14
 478:	e0 0f       	add	r30, r16
 47a:	f1 1f       	adc	r31, r17
 47c:	80 83       	st	Z, r24
			char temp[2] = { '*', '\0' };
 47e:	8a e2       	ldi	r24, 0x2A	; 42
 480:	89 83       	std	Y+1, r24	; 0x01
 482:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
 484:	ae 01       	movw	r20, r28
 486:	4f 5f       	subi	r20, 0xFF	; 255
 488:	5f 4f       	sbci	r21, 0xFF	; 255
 48a:	60 2f       	mov	r22, r16
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 492:	0f 5f       	subi	r16, 0xFF	; 255
 494:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
 496:	88 ec       	ldi	r24, 0xC8	; 200
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 49e:	06 30       	cpi	r16, 0x06	; 6
 4a0:	11 05       	cpc	r17, r1
 4a2:	1c f3       	brlt	.-58     	; 0x46a <ler_senha+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	senha[6] = '\0';
 4a4:	f7 01       	movw	r30, r14
 4a6:	16 82       	std	Z+6, r1	; 0x06
}
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	08 95       	ret

000004ba <validar_codigo_aluno>:

// Valida cÃ³digo com o servidor via serial
int validar_codigo_aluno(const char* codigo, const char* senha) {
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	a1 97       	sbiw	r28, 0x21	; 33
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
 4ce:	dc 01       	movw	r26, r24
 4d0:	0d 90       	ld	r0, X+
 4d2:	00 20       	and	r0, r0
 4d4:	e9 f7       	brne	.-6      	; 0x4d0 <validar_codigo_aluno+0x16>
 4d6:	11 97       	sbiw	r26, 0x01	; 1
 4d8:	a8 1b       	sub	r26, r24
 4da:	b9 0b       	sbc	r27, r25
 4dc:	16 97       	sbiw	r26, 0x06	; 6
 4de:	09 f0       	breq	.+2      	; 0x4e2 <validar_codigo_aluno+0x28>
 4e0:	53 c0       	rjmp	.+166    	; 0x588 <validar_codigo_aluno+0xce>
 4e2:	db 01       	movw	r26, r22
 4e4:	0d 90       	ld	r0, X+
 4e6:	00 20       	and	r0, r0
 4e8:	e9 f7       	brne	.-6      	; 0x4e4 <validar_codigo_aluno+0x2a>
 4ea:	11 97       	sbiw	r26, 0x01	; 1
 4ec:	a6 1b       	sub	r26, r22
 4ee:	b7 0b       	sbc	r27, r23
 4f0:	16 97       	sbiw	r26, 0x06	; 6
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <validar_codigo_aluno+0x3c>
 4f4:	4c c0       	rjmp	.+152    	; 0x58e <validar_codigo_aluno+0xd4>
 4f6:	fc 01       	movw	r30, r24

	char mensagem[14];
	mensagem[0] = 'C';
 4f8:	83 e4       	ldi	r24, 0x43	; 67
 4fa:	89 83       	std	Y+1, r24	; 0x01
	mensagem[1] = 'E';
 4fc:	85 e4       	ldi	r24, 0x45	; 69
 4fe:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(&mensagem[2], codigo, 6);
 500:	86 e0       	ldi	r24, 0x06	; 6
 502:	de 01       	movw	r26, r28
 504:	13 96       	adiw	r26, 0x03	; 3
 506:	01 90       	ld	r0, Z+
 508:	0d 92       	st	X+, r0
 50a:	8a 95       	dec	r24
 50c:	e1 f7       	brne	.-8      	; 0x506 <validar_codigo_aluno+0x4c>
	memcpy(&mensagem[8], senha, 6);
 50e:	86 e0       	ldi	r24, 0x06	; 6
 510:	fb 01       	movw	r30, r22
 512:	de 01       	movw	r26, r28
 514:	19 96       	adiw	r26, 0x09	; 9
 516:	01 90       	ld	r0, Z+
 518:	0d 92       	st	X+, r0
 51a:	8a 95       	dec	r24
 51c:	e1 f7       	brne	.-8      	; 0x516 <validar_codigo_aluno+0x5c>

	SerialEnviaChars(14, mensagem);
 51e:	be 01       	movw	r22, r28
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	8e e0       	ldi	r24, 0x0E	; 14
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 3c 05 	call	0xa78	; 0xa78 <SerialEnviaChars>

	char resposta[19];
	SerialRecebeChars(18, resposta);
 52c:	be 01       	movw	r22, r28
 52e:	61 5f       	subi	r22, 0xF1	; 241
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	82 e1       	ldi	r24, 0x12	; 18
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 d6 05 	call	0xbac	; 0xbac <SerialRecebeChars>
	resposta[18] = '\0';
 53a:	19 a2       	std	Y+33, r1	; 0x21

	LCD_limpar();
 53c:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Resp Servidor:");
 540:	49 e9       	ldi	r20, 0x99	; 153
 542:	51 e0       	ldi	r21, 0x01	; 1
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, resposta);
 54c:	ae 01       	movw	r20, r28
 54e:	41 5f       	subi	r20, 0xF1	; 241
 550:	5f 4f       	sbci	r21, 0xFF	; 255
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	delay1ms(2000);
 55a:	80 ed       	ldi	r24, 0xD0	; 208
 55c:	97 e0       	ldi	r25, 0x07	; 7
 55e:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
	LCD_limpar();
 562:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
 566:	8f 85       	ldd	r24, Y+15	; 0x0f
 568:	83 35       	cpi	r24, 0x53	; 83
 56a:	a1 f4       	brne	.+40     	; 0x594 <validar_codigo_aluno+0xda>
 56c:	88 89       	ldd	r24, Y+16	; 0x10
 56e:	85 34       	cpi	r24, 0x45	; 69
 570:	a1 f4       	brne	.+40     	; 0x59a <validar_codigo_aluno+0xe0>
		if (strstr(resposta, "Nao autorizado") != NULL) {
 572:	68 ea       	ldi	r22, 0xA8	; 168
 574:	71 e0       	ldi	r23, 0x01	; 1
 576:	ce 01       	movw	r24, r28
 578:	0f 96       	adiw	r24, 0x0f	; 15
 57a:	0e 94 7f 07 	call	0xefe	; 0xefe <strstr>
 57e:	89 2b       	or	r24, r25
 580:	79 f0       	breq	.+30     	; 0x5a0 <validar_codigo_aluno+0xe6>
			return 0;
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e c0       	rjmp	.+28     	; 0x5a4 <validar_codigo_aluno+0xea>
	senha[6] = '\0';
}

// Valida cÃ³digo com o servidor via serial
int validar_codigo_aluno(const char* codigo, const char* senha) {
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0b c0       	rjmp	.+22     	; 0x5a4 <validar_codigo_aluno+0xea>
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	08 c0       	rjmp	.+16     	; 0x5a4 <validar_codigo_aluno+0xea>
			return 0;
			} else {
			return 1;
		}
	}
	return 0;
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <validar_codigo_aluno+0xea>
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <validar_codigo_aluno+0xea>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
		if (strstr(resposta, "Nao autorizado") != NULL) {
			return 0;
			} else {
			return 1;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
 5a4:	a1 96       	adiw	r28, 0x21	; 33
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	f8 94       	cli
 5aa:	de bf       	out	0x3e, r29	; 62
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	cd bf       	out	0x3d, r28	; 61
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <main>:

int main(void) {
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	66 97       	sbiw	r28, 0x16	; 22
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
 5ca:	0e 94 67 06 	call	0xcce	; 0xcce <prepara_teclado>
	LCD_iniciar();
 5ce:	0e 94 88 00 	call	0x110	; 0x110 <LCD_iniciar>
	initUART();
 5d2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <initUART>

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
 5d6:	88 e0       	ldi	r24, 0x08	; 8
 5d8:	e0 e0       	ldi	r30, 0x00	; 0
 5da:	f1 e0       	ldi	r31, 0x01	; 1
 5dc:	de 01       	movw	r26, r28
 5de:	1f 96       	adiw	r26, 0x0f	; 15
 5e0:	01 90       	ld	r0, Z+
 5e2:	0d 92       	st	X+, r0
 5e4:	8a 95       	dec	r24
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x2a>
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	while (1) {
		verifica_comandos_servidor();
 5e8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <verifica_comandos_servidor>

		if (terminal_travado) {
 5ec:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 5f0:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 5f4:	89 2b       	or	r24, r25
 5f6:	51 f0       	breq	.+20     	; 0x60c <main+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f8:	2f e9       	ldi	r18, 0x9F	; 159
 5fa:	86 e8       	ldi	r24, 0x86	; 134
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	21 50       	subi	r18, 0x01	; 1
 600:	80 40       	sbci	r24, 0x00	; 0
 602:	90 40       	sbci	r25, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <main+0x48>
 606:	00 c0       	rjmp	.+0      	; 0x608 <main+0x52>
 608:	00 00       	nop
			_delay_ms(500);
			continue;
 60a:	ee cf       	rjmp	.-36     	; 0x5e8 <main+0x32>
		}

		LCD_limpar();
 60c:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
		mensagem_Inicial();
 610:	0e 94 53 00 	call	0xa6	; 0xa6 <mensagem_Inicial>

		while (varredura() == 0) {
 614:	08 c0       	rjmp	.+16     	; 0x626 <main+0x70>
			verifica_comandos_servidor();
 616:	0e 94 7e 01 	call	0x2fc	; 0x2fc <verifica_comandos_servidor>
			if (terminal_travado) break;
 61a:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 61e:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 622:	89 2b       	or	r24, r25
 624:	21 f4       	brne	.+8      	; 0x62e <main+0x78>
		}

		LCD_limpar();
		mensagem_Inicial();

		while (varredura() == 0) {
 626:	0e 94 ab 06 	call	0xd56	; 0xd56 <varredura>
 62a:	88 23       	and	r24, r24
 62c:	a1 f3       	breq	.-24     	; 0x616 <main+0x60>
			verifica_comandos_servidor();
			if (terminal_travado) break;
		}
		if (terminal_travado) continue;
 62e:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 632:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 636:	89 2b       	or	r24, r25
 638:	b9 f6       	brne	.-82     	; 0x5e8 <main+0x32>

		ler_codigo_aluno(codigo_aluno);
 63a:	ce 01       	movw	r24, r28
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ler_codigo_aluno>
		ler_senha(senha_aluno);
 642:	ce 01       	movw	r24, r28
 644:	08 96       	adiw	r24, 0x08	; 8
 646:	0e 94 1a 02 	call	0x434	; 0x434 <ler_senha>

		if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
 64a:	be 01       	movw	r22, r28
 64c:	68 5f       	subi	r22, 0xF8	; 248
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	ce 01       	movw	r24, r28
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	0e 94 5d 02 	call	0x4ba	; 0x4ba <validar_codigo_aluno>
 658:	89 2b       	or	r24, r25
 65a:	09 f4       	brne	.+2      	; 0x65e <main+0xa8>
 65c:	e6 c0       	rjmp	.+460    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
			LCD_limpar();
 65e:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Codigo valido!");
 662:	47 eb       	ldi	r20, 0xB7	; 183
 664:	51 e0       	ldi	r21, 0x01	; 1
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Processando...");
 66e:	46 ec       	ldi	r20, 0xC6	; 198
 670:	51 e0       	ldi	r21, 0x01	; 1
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			delay1ms(2000);
 67a:	80 ed       	ldi	r24, 0xD0	; 208
 67c:	97 e0       	ldi	r25, 0x07	; 7
 67e:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>

			int menu_ativo = 1;
 682:	cc 24       	eor	r12, r12
 684:	c3 94       	inc	r12
 686:	d1 2c       	mov	r13, r1
			indice_menu = 0;
 688:	e1 2c       	mov	r14, r1
 68a:	f1 2c       	mov	r15, r1

			while (menu_ativo) {
 68c:	c9 c0       	rjmp	.+402    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
				verifica_comandos_servidor();
 68e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <verifica_comandos_servidor>
				if (terminal_travado) break;
 692:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 696:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 69a:	89 2b       	or	r24, r25
 69c:	09 f0       	breq	.+2      	; 0x6a0 <main+0xea>
 69e:	a4 cf       	rjmp	.-184    	; 0x5e8 <main+0x32>

				LCD_limpar();
 6a0:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
 6a4:	f7 01       	movw	r30, r14
 6a6:	ee 0f       	add	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	8c 0f       	add	r24, r28
 6b0:	9d 1f       	adc	r25, r29
 6b2:	e8 0f       	add	r30, r24
 6b4:	f9 1f       	adc	r31, r25
 6b6:	46 85       	ldd	r20, Z+14	; 0x0e
 6b8:	57 85       	ldd	r21, Z+15	; 0x0f
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				if (indice_menu + 1 < total_opcoes) {
 6c2:	57 01       	movw	r10, r14
 6c4:	9f ef       	ldi	r25, 0xFF	; 255
 6c6:	a9 1a       	sub	r10, r25
 6c8:	b9 0a       	sbc	r11, r25
 6ca:	24 e0       	ldi	r18, 0x04	; 4
 6cc:	a2 16       	cp	r10, r18
 6ce:	b1 04       	cpc	r11, r1
 6d0:	84 f4       	brge	.+32     	; 0x6f2 <main+0x13c>
					LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
 6d2:	f5 01       	movw	r30, r10
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	8c 0f       	add	r24, r28
 6de:	9d 1f       	adc	r25, r29
 6e0:	e8 0f       	add	r30, r24
 6e2:	f9 1f       	adc	r31, r25
 6e4:	46 85       	ldd	r20, Z+14	; 0x0e
 6e6:	57 85       	ldd	r21, Z+15	; 0x0f
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 6f0:	0f c0       	rjmp	.+30     	; 0x710 <main+0x15a>
					} else {
					LCD_Escrever_Linha(1, 0, " ");
 6f2:	45 e3       	ldi	r20, 0x35	; 53
 6f4:	51 e0       	ldi	r21, 0x01	; 1
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 6fe:	08 c0       	rjmp	.+16     	; 0x710 <main+0x15a>
				}

				while ((tecla = varredura()) == 0) {
					verifica_comandos_servidor();
 700:	0e 94 7e 01 	call	0x2fc	; 0x2fc <verifica_comandos_servidor>
					if (terminal_travado) break;
 704:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 708:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 70c:	89 2b       	or	r24, r25
 70e:	29 f4       	brne	.+10     	; 0x71a <main+0x164>
					LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
					} else {
					LCD_Escrever_Linha(1, 0, " ");
				}

				while ((tecla = varredura()) == 0) {
 710:	0e 94 ab 06 	call	0xd56	; 0xd56 <varredura>
 714:	18 2f       	mov	r17, r24
 716:	88 23       	and	r24, r24
 718:	99 f3       	breq	.-26     	; 0x700 <main+0x14a>
					verifica_comandos_servidor();
					if (terminal_travado) break;
				}
				if (terminal_travado) break;
 71a:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 71e:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
 722:	89 2b       	or	r24, r25
 724:	09 f0       	breq	.+2      	; 0x728 <main+0x172>
 726:	60 cf       	rjmp	.-320    	; 0x5e8 <main+0x32>

				delay1ms(300);
 728:	8c e2       	ldi	r24, 0x2C	; 44
 72a:	91 e0       	ldi	r25, 0x01	; 1
 72c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>

				if (tecla == 'B' && indice_menu < total_opcoes - 2) {
 730:	12 34       	cpi	r17, 0x42	; 66
 732:	29 f4       	brne	.+10     	; 0x73e <main+0x188>
 734:	92 e0       	ldi	r25, 0x02	; 2
 736:	e9 16       	cp	r14, r25
 738:	f1 04       	cpc	r15, r1
 73a:	0c f4       	brge	.+2      	; 0x73e <main+0x188>
 73c:	70 c0       	rjmp	.+224    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
					indice_menu++;
					} else if (tecla == 'A' && indice_menu > 0) {
 73e:	11 34       	cpi	r17, 0x41	; 65
 740:	39 f4       	brne	.+14     	; 0x750 <main+0x19a>
 742:	1e 14       	cp	r1, r14
 744:	1f 04       	cpc	r1, r15
 746:	24 f4       	brge	.+8      	; 0x750 <main+0x19a>
					indice_menu--;
 748:	21 e0       	ldi	r18, 0x01	; 1
 74a:	e2 1a       	sub	r14, r18
 74c:	f1 08       	sbc	r15, r1
 74e:	68 c0       	rjmp	.+208    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
					} else if (tecla == '*') {
 750:	1a 32       	cpi	r17, 0x2A	; 42
 752:	79 f4       	brne	.+30     	; 0x772 <main+0x1bc>
					LCD_limpar();
 754:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
					LCD_Escrever_Linha(0, 0, "Voltando...");
 758:	45 ed       	ldi	r20, 0xD5	; 213
 75a:	51 e0       	ldi	r21, 0x01	; 1
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
					delay1ms(1000);
 764:	88 ee       	ldi	r24, 0xE8	; 232
 766:	93 e0       	ldi	r25, 0x03	; 3
 768:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
					menu_ativo = 0;
 76c:	c1 2c       	mov	r12, r1
 76e:	d1 2c       	mov	r13, r1
 770:	57 c0       	rjmp	.+174    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
					} else if (tecla == opcoes[indice_menu][0]) {
 772:	f7 01       	movw	r30, r14
 774:	ee 0f       	add	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	8c 0f       	add	r24, r28
 77e:	9d 1f       	adc	r25, r29
 780:	e8 0f       	add	r30, r24
 782:	f9 1f       	adc	r31, r25
 784:	06 84       	ldd	r0, Z+14	; 0x0e
 786:	f7 85       	ldd	r31, Z+15	; 0x0f
 788:	e0 2d       	mov	r30, r0
 78a:	80 81       	ld	r24, Z
 78c:	18 13       	cpse	r17, r24
 78e:	48 c0       	rjmp	.+144    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
					switch (tecla) {
 790:	12 33       	cpi	r17, 0x32	; 50
 792:	61 f0       	breq	.+24     	; 0x7ac <main+0x1f6>
 794:	18 f4       	brcc	.+6      	; 0x79c <main+0x1e6>
 796:	11 33       	cpi	r17, 0x31	; 49
 798:	31 f0       	breq	.+12     	; 0x7a6 <main+0x1f0>
 79a:	42 c0       	rjmp	.+132    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 79c:	13 33       	cpi	r17, 0x33	; 51
 79e:	c9 f0       	breq	.+50     	; 0x7d2 <main+0x21c>
 7a0:	14 33       	cpi	r17, 0x34	; 52
 7a2:	51 f1       	breq	.+84     	; 0x7f8 <main+0x242>
 7a4:	3d c0       	rjmp	.+122    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
						case '1':
						realizar_saque();
 7a6:	0e 94 89 04 	call	0x912	; 0x912 <realizar_saque>
						break;
 7aa:	3a c0       	rjmp	.+116    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
						case '2':
						LCD_limpar();
 7ac:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Deposito");
 7b0:	4e e1       	ldi	r20, 0x1E	; 30
 7b2:	52 e0       	ldi	r21, 0x02	; 2
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 7bc:	41 ee       	ldi	r20, 0xE1	; 225
 7be:	51 e0       	ldi	r21, 0x01	; 1
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 7c8:	80 ed       	ldi	r24, 0xD0	; 208
 7ca:	97 e0       	ldi	r25, 0x07	; 7
 7cc:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
						break;
 7d0:	27 c0       	rjmp	.+78     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
						case '3':
						LCD_limpar();
 7d2:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Pagamento");
 7d6:	49 e2       	ldi	r20, 0x29	; 41
 7d8:	52 e0       	ldi	r21, 0x02	; 2
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 7e2:	41 ee       	ldi	r20, 0xE1	; 225
 7e4:	51 e0       	ldi	r21, 0x01	; 1
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 7ee:	80 ed       	ldi	r24, 0xD0	; 208
 7f0:	97 e0       	ldi	r25, 0x07	; 7
 7f2:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
						break;
 7f6:	14 c0       	rjmp	.+40     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
						case '4':
						LCD_limpar();
 7f8:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Saldo");
 7fc:	45 e3       	ldi	r20, 0x35	; 53
 7fe:	52 e0       	ldi	r21, 0x02	; 2
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 808:	41 ee       	ldi	r20, 0xE1	; 225
 80a:	51 e0       	ldi	r21, 0x01	; 1
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 814:	80 ed       	ldi	r24, 0xD0	; 208
 816:	97 e0       	ldi	r25, 0x07	; 7
 818:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
						break;
 81c:	01 c0       	rjmp	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
				if (terminal_travado) break;

				delay1ms(300);

				if (tecla == 'B' && indice_menu < total_opcoes - 2) {
					indice_menu++;
 81e:	75 01       	movw	r14, r10
			delay1ms(2000);

			int menu_ativo = 1;
			indice_menu = 0;

			while (menu_ativo) {
 820:	c1 14       	cp	r12, r1
 822:	d1 04       	cpc	r13, r1
 824:	09 f0       	breq	.+2      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 826:	33 cf       	rjmp	.-410    	; 0x68e <main+0xd8>
 828:	df ce       	rjmp	.-578    	; 0x5e8 <main+0x32>
						break;
					}
				}
			}
			} else {
			LCD_limpar();
 82a:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Conta invalida!");
 82e:	44 ef       	ldi	r20, 0xF4	; 244
 830:	51 e0       	ldi	r21, 0x01	; 1
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Tente novamente");
 83a:	44 e0       	ldi	r20, 0x04	; 4
 83c:	52 e0       	ldi	r21, 0x02	; 2
 83e:	60 e0       	ldi	r22, 0x00	; 0
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			delay1ms(2000);
 846:	80 ed       	ldi	r24, 0xD0	; 208
 848:	97 e0       	ldi	r25, 0x07	; 7
 84a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <delay1ms>
 84e:	cc ce       	rjmp	.-616    	; 0x5e8 <main+0x32>

00000850 <enviar_mensagem_saque>:
		}
	}
}

// Função para enviar mensagem de saque para o servidor
void enviar_mensagem_saque(const char* valor) {
 850:	cf 92       	push	r12
 852:	df 92       	push	r13
 854:	ef 92       	push	r14
 856:	ff 92       	push	r15
 858:	0f 93       	push	r16
 85a:	1f 93       	push	r17
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	bc 01       	movw	r22, r24
	// Copia o valor para a mensagem
	strncpy(&mensagem[3], valor, tamanho_valor);
	
	// Envia a mensagem via serial
	SerialEnviaChars(tamanho_mensagem, mensagem);
}
 866:	ed b6       	in	r14, 0x3d	; 61
 868:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de saque para o servidor
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
 86a:	fc 01       	movw	r30, r24
 86c:	01 90       	ld	r0, Z+
 86e:	00 20       	and	r0, r0
 870:	e9 f7       	brne	.-6      	; 0x86c <enviar_mensagem_saque+0x1c>
 872:	31 97       	sbiw	r30, 0x01	; 1
 874:	af 01       	movw	r20, r30
 876:	48 1b       	sub	r20, r24
 878:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3; // 'C' + 'S' + n + valor
 87a:	6a 01       	movw	r12, r20
 87c:	83 e0       	ldi	r24, 0x03	; 3
 87e:	c8 0e       	add	r12, r24
 880:	d1 1c       	adc	r13, r1
	
	char mensagem[tamanho_mensagem];
 882:	ed b7       	in	r30, 0x3d	; 61
 884:	fe b7       	in	r31, 0x3e	; 62
 886:	ec 19       	sub	r30, r12
 888:	fd 09       	sbc	r31, r13
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	f8 94       	cli
 88e:	fe bf       	out	0x3e, r31	; 62
 890:	0f be       	out	0x3f, r0	; 63
 892:	ed bf       	out	0x3d, r30	; 61
 894:	0d b7       	in	r16, 0x3d	; 61
 896:	1e b7       	in	r17, 0x3e	; 62
 898:	0f 5f       	subi	r16, 0xFF	; 255
 89a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// Monta a mensagem conforme o protocolo
	mensagem[0] = 'C'; // Comando
 89c:	83 e4       	ldi	r24, 0x43	; 67
 89e:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S'; // Subcomando (Saque)
 8a0:	83 e5       	ldi	r24, 0x53	; 83
 8a2:	f8 01       	movw	r30, r16
 8a4:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor; // Tamanho do valor
 8a6:	42 83       	std	Z+2, r20	; 0x02
	
	// Copia o valor para a mensagem
	strncpy(&mensagem[3], valor, tamanho_valor);
 8a8:	8d b7       	in	r24, 0x3d	; 61
 8aa:	9e b7       	in	r25, 0x3e	; 62
 8ac:	04 96       	adiw	r24, 0x04	; 4
 8ae:	0e 94 70 07 	call	0xee0	; 0xee0 <strncpy>
	
	// Envia a mensagem via serial
	SerialEnviaChars(tamanho_mensagem, mensagem);
 8b2:	b8 01       	movw	r22, r16
 8b4:	c6 01       	movw	r24, r12
 8b6:	0e 94 3c 05 	call	0xa78	; 0xa78 <SerialEnviaChars>
}
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	f8 94       	cli
 8be:	fe be       	out	0x3e, r15	; 62
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	ed be       	out	0x3d, r14	; 61
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	08 95       	ret

000008d6 <receber_resposta_servidor>:

// Função para receber resposta do servidor
char receber_resposta_servidor(void) {
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	00 d0       	rcall	.+0      	; 0x8dc <receber_resposta_servidor+0x6>
 8dc:	1f 92       	push	r1
 8de:	cd b7       	in	r28, 0x3d	; 61
 8e0:	de b7       	in	r29, 0x3e	; 62
	char resposta[3];
	
	// Aguarda a resposta do servidor (3 bytes)
	SerialRecebeChars(3, resposta);
 8e2:	be 01       	movw	r22, r28
 8e4:	6f 5f       	subi	r22, 0xFF	; 255
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	83 e0       	ldi	r24, 0x03	; 3
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 d6 05 	call	0xbac	; 0xbac <SerialRecebeChars>
	
	// Verifica se é uma resposta de saque
	if(resposta[0] == 'S' && resposta[1] == 'S') {
 8f0:	89 81       	ldd	r24, Y+1	; 0x01
 8f2:	83 35       	cpi	r24, 0x53	; 83
 8f4:	29 f4       	brne	.+10     	; 0x900 <__stack+0x1>
 8f6:	8a 81       	ldd	r24, Y+2	; 0x02
 8f8:	83 35       	cpi	r24, 0x53	; 83
 8fa:	21 f4       	brne	.+8      	; 0x904 <__stack+0x5>
		return resposta[2]; // Retorna 'O' ou 'I'
 8fc:	8b 81       	ldd	r24, Y+3	; 0x03
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <__stack+0x7>
	}
	
	return 'E'; // Erro
 900:	85 e4       	ldi	r24, 0x45	; 69
 902:	01 c0       	rjmp	.+2      	; 0x906 <__stack+0x7>
 904:	85 e4       	ldi	r24, 0x45	; 69
 906:	0f 90       	pop	r0
 908:	0f 90       	pop	r0
 90a:	0f 90       	pop	r0
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	08 95       	ret

00000912 <realizar_saque>:
#include "LCD.h"
#include "teclado.h"
#include <util/delay.h>

// Função para realizar um saque
void realizar_saque(void) {
 912:	0f 93       	push	r16
 914:	1f 93       	push	r17
 916:	cf 93       	push	r28
 918:	df 93       	push	r29
 91a:	cd b7       	in	r28, 0x3d	; 61
 91c:	de b7       	in	r29, 0x3e	; 62
 91e:	2a 97       	sbiw	r28, 0x0a	; 10
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
 92a:	fe 01       	movw	r30, r28
 92c:	31 96       	adiw	r30, 0x01	; 1
 92e:	89 e0       	ldi	r24, 0x09	; 9
 930:	df 01       	movw	r26, r30
 932:	1d 92       	st	X+, r1
 934:	8a 95       	dec	r24
 936:	e9 f7       	brne	.-6      	; 0x932 <realizar_saque+0x20>
	int pos = 0;
	char tecla;
	
	// Solicita o valor do saque ao usuário
	LCD_limpar();
 938:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
 93c:	4b e3       	ldi	r20, 0x3B	; 59
 93e:	52 e0       	ldi	r21, 0x02	; 2
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
 948:	4b e4       	ldi	r20, 0x4B	; 75
 94a:	52 e0       	ldi	r21, 0x02	; 2
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
#include <util/delay.h>

// Função para realizar um saque
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
 954:	00 e0       	ldi	r16, 0x00	; 0
 956:	10 e0       	ldi	r17, 0x00	; 0
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");
	
	while(1) {
		tecla = varredura();
 958:	0e 94 ab 06 	call	0xd56	; 0xd56 <varredura>
 95c:	8a 87       	std	Y+10, r24	; 0x0a
		
		// Se for dígito e ainda houver espaço
		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE-1)) {
 95e:	90 ed       	ldi	r25, 0xD0	; 208
 960:	98 0f       	add	r25, r24
 962:	9a 30       	cpi	r25, 0x0A	; 10
 964:	d8 f4       	brcc	.+54     	; 0x99c <realizar_saque+0x8a>
 966:	08 30       	cpi	r16, 0x08	; 8
 968:	11 05       	cpc	r17, r1
 96a:	c4 f4       	brge	.+48     	; 0x99c <realizar_saque+0x8a>
			valor_saque[pos] = tecla;
 96c:	e1 e0       	ldi	r30, 0x01	; 1
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	ec 0f       	add	r30, r28
 972:	fd 1f       	adc	r31, r29
 974:	e0 0f       	add	r30, r16
 976:	f1 1f       	adc	r31, r17
 978:	80 83       	st	Z, r24
			LCD_Escrever_Linha(1, 2+pos, &tecla);
 97a:	62 e0       	ldi	r22, 0x02	; 2
 97c:	60 0f       	add	r22, r16
 97e:	ae 01       	movw	r20, r28
 980:	46 5f       	subi	r20, 0xF6	; 246
 982:	5f 4f       	sbci	r21, 0xFF	; 255
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 98a:	0f 5f       	subi	r16, 0xFF	; 255
 98c:	1f 4f       	sbci	r17, 0xFF	; 255
 98e:	8f e4       	ldi	r24, 0x4F	; 79
 990:	93 ec       	ldi	r25, 0xC3	; 195
 992:	01 97       	sbiw	r24, 0x01	; 1
 994:	f1 f7       	brne	.-4      	; 0x992 <realizar_saque+0x80>
 996:	00 c0       	rjmp	.+0      	; 0x998 <realizar_saque+0x86>
 998:	00 00       	nop
 99a:	de cf       	rjmp	.-68     	; 0x958 <realizar_saque+0x46>
			_delay_ms(200); // Debounce
		}
		// Tecla enter (confirmar)
		else if(tecla == '#' && pos > 0) {
 99c:	83 32       	cpi	r24, 0x23	; 35
 99e:	c1 f5       	brne	.+112    	; 0xa10 <realizar_saque+0xfe>
 9a0:	10 16       	cp	r1, r16
 9a2:	11 06       	cpc	r1, r17
 9a4:	ac f5       	brge	.+106    	; 0xa10 <realizar_saque+0xfe>
			valor_saque[pos] = '\0'; // Finaliza a string
 9a6:	e1 e0       	ldi	r30, 0x01	; 1
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	ec 0f       	add	r30, r28
 9ac:	fd 1f       	adc	r31, r29
 9ae:	e0 0f       	add	r30, r16
 9b0:	f1 1f       	adc	r31, r17
 9b2:	10 82       	st	Z, r1
			
			// Envia a mensagem de saque para o servidor
			enviar_mensagem_saque(valor_saque);
 9b4:	ce 01       	movw	r24, r28
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	0e 94 28 04 	call	0x850	; 0x850 <enviar_mensagem_saque>
			
			// Aguarda resposta do servidor
			char resposta = receber_resposta_servidor();
 9bc:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <receber_resposta_servidor>
 9c0:	18 2f       	mov	r17, r24
			
			LCD_limpar();
 9c2:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			if(resposta == 'O') { // OK
 9c6:	1f 34       	cpi	r17, 0x4F	; 79
 9c8:	69 f4       	brne	.+26     	; 0x9e4 <realizar_saque+0xd2>
				LCD_Escrever_Linha(0, 0, "Saque realizado!");
 9ca:	4e e4       	ldi	r20, 0x4E	; 78
 9cc:	52 e0       	ldi	r21, 0x02	; 2
 9ce:	60 e0       	ldi	r22, 0x00	; 0
 9d0:	80 e0       	ldi	r24, 0x00	; 0
 9d2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Retire o dinheiro");
 9d6:	4f e5       	ldi	r20, 0x5F	; 95
 9d8:	52 e0       	ldi	r21, 0x02	; 2
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 9e2:	0c c0       	rjmp	.+24     	; 0x9fc <realizar_saque+0xea>
				} else { // Saldo Insuficiente
				LCD_Escrever_Linha(0, 0, "Saldo insuficiente");
 9e4:	41 e7       	ldi	r20, 0x71	; 113
 9e6:	52 e0       	ldi	r21, 0x02	; 2
 9e8:	60 e0       	ldi	r22, 0x00	; 0
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente outro valor");
 9f0:	44 e8       	ldi	r20, 0x84	; 132
 9f2:	52 e0       	ldi	r21, 0x02	; 2
 9f4:	60 e0       	ldi	r22, 0x00	; 0
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 9fc:	9f eb       	ldi	r25, 0xBF	; 191
 9fe:	a7 e2       	ldi	r26, 0x27	; 39
 a00:	b9 e0       	ldi	r27, 0x09	; 9
 a02:	91 50       	subi	r25, 0x01	; 1
 a04:	a0 40       	sbci	r26, 0x00	; 0
 a06:	b0 40       	sbci	r27, 0x00	; 0
 a08:	e1 f7       	brne	.-8      	; 0xa02 <realizar_saque+0xf0>
 a0a:	00 c0       	rjmp	.+0      	; 0xa0c <realizar_saque+0xfa>
 a0c:	00 00       	nop
 a0e:	1a c0       	rjmp	.+52     	; 0xa44 <realizar_saque+0x132>
			}
			_delay_ms(3000);
			break;
		}
		// Tecla cancelar
		else if(tecla == '*') {
 a10:	8a 32       	cpi	r24, 0x2A	; 42
 a12:	09 f0       	breq	.+2      	; 0xa16 <realizar_saque+0x104>
 a14:	a1 cf       	rjmp	.-190    	; 0x958 <realizar_saque+0x46>
			LCD_limpar();
 a16:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
 a1a:	46 e9       	ldi	r20, 0x96	; 150
 a1c:	52 e0       	ldi	r21, 0x02	; 2
 a1e:	60 e0       	ldi	r22, 0x00	; 0
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
 a26:	4f e9       	ldi	r20, 0x9F	; 159
 a28:	52 e0       	ldi	r21, 0x02	; 2
 a2a:	60 e0       	ldi	r22, 0x00	; 0
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 a32:	2f e7       	ldi	r18, 0x7F	; 127
 a34:	8a e1       	ldi	r24, 0x1A	; 26
 a36:	96 e0       	ldi	r25, 0x06	; 6
 a38:	21 50       	subi	r18, 0x01	; 1
 a3a:	80 40       	sbci	r24, 0x00	; 0
 a3c:	90 40       	sbci	r25, 0x00	; 0
 a3e:	e1 f7       	brne	.-8      	; 0xa38 <realizar_saque+0x126>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <realizar_saque+0x130>
 a42:	00 00       	nop
			_delay_ms(2000);
			break;
		}
	}
}
 a44:	2a 96       	adiw	r28, 0x0a	; 10
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	f8 94       	cli
 a4a:	de bf       	out	0x3e, r29	; 62
 a4c:	0f be       	out	0x3f, r0	; 63
 a4e:	cd bf       	out	0x3d, r28	; 61
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	1f 91       	pop	r17
 a56:	0f 91       	pop	r16
 a58:	08 95       	ret

00000a5a <initUART>:
volatile int uart_tail = 0; // posição do próximo byte para leitura na função SerialRecebeChars

// Inicializa a UART com 19200 bps, 8N1
void initUART(void) {
	// Baud rate = 19200, UBRR = 51 para F_CPU = 16MHz
	UBRR0H = (51 >> 8);
 a5a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 51;
 a5e:	83 e3       	ldi	r24, 0x33	; 51
 a60:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0A = 0; // Padrão
 a64:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

	// Ativa transmissor e receptor e interrupção RX completa
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 a68:	88 e9       	ldi	r24, 0x98	; 152
 a6a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, sem paridade, 1 stop bit (8N1)
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 a6e:	86 e0       	ldi	r24, 0x06	; 6
 a70:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

	sei(); // habilita interrupções globais
 a74:	78 94       	sei
 a76:	08 95       	ret

00000a78 <SerialEnviaChars>:
}

// Envia uma string de tamanho definido
void SerialEnviaChars(int sizeS, char* string) {
 a78:	ac 01       	movw	r20, r24
	for (int i = 0; i < sizeS; i++) {
 a7a:	20 e0       	ldi	r18, 0x00	; 0
 a7c:	30 e0       	ldi	r19, 0x00	; 0
 a7e:	0c c0       	rjmp	.+24     	; 0xa98 <SerialEnviaChars+0x20>
		while (!(UCSR0A & (1 << UDRE0))); // Espera registrador livre
 a80:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 a84:	95 ff       	sbrs	r25, 5
 a86:	fc cf       	rjmp	.-8      	; 0xa80 <SerialEnviaChars+0x8>
		UDR0 = string[i];
 a88:	fb 01       	movw	r30, r22
 a8a:	e2 0f       	add	r30, r18
 a8c:	f3 1f       	adc	r31, r19
 a8e:	90 81       	ld	r25, Z
 a90:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	sei(); // habilita interrupções globais
}

// Envia uma string de tamanho definido
void SerialEnviaChars(int sizeS, char* string) {
	for (int i = 0; i < sizeS; i++) {
 a94:	2f 5f       	subi	r18, 0xFF	; 255
 a96:	3f 4f       	sbci	r19, 0xFF	; 255
 a98:	24 17       	cp	r18, r20
 a9a:	35 07       	cpc	r19, r21
 a9c:	8c f3       	brlt	.-30     	; 0xa80 <SerialEnviaChars+0x8>
		while (!(UCSR0A & (1 << UDRE0))); // Espera registrador livre
		UDR0 = string[i];
	}

	// Espera a transmissão do último byte
	while (!(UCSR0A & (1 << TXC0)));
 a9e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 aa2:	86 ff       	sbrs	r24, 6
 aa4:	fc cf       	rjmp	.-8      	; 0xa9e <SerialEnviaChars+0x26>
	UCSR0A |= (1 << TXC0); // Limpa flag TXC
 aa6:	e0 ec       	ldi	r30, 0xC0	; 192
 aa8:	f0 e0       	ldi	r31, 0x00	; 0
 aaa:	80 81       	ld	r24, Z
 aac:	80 64       	ori	r24, 0x40	; 64
 aae:	80 83       	st	Z, r24
 ab0:	08 95       	ret

00000ab2 <SerialEnviaString>:
}

// Envia string null-terminated (mais comum)
void SerialEnviaString(char* str) {
	SerialEnviaChars(strlen(str), str);
 ab2:	fc 01       	movw	r30, r24
 ab4:	01 90       	ld	r0, Z+
 ab6:	00 20       	and	r0, r0
 ab8:	e9 f7       	brne	.-6      	; 0xab4 <SerialEnviaString+0x2>
 aba:	31 97       	sbiw	r30, 0x01	; 1
 abc:	bc 01       	movw	r22, r24
 abe:	9f 01       	movw	r18, r30
 ac0:	28 1b       	sub	r18, r24
 ac2:	39 0b       	sbc	r19, r25
 ac4:	c9 01       	movw	r24, r18
 ac6:	0e 94 3c 05 	call	0xa78	; 0xa78 <SerialEnviaChars>
 aca:	08 95       	ret

00000acc <__vector_18>:
}

// Buffer circular auxiliar para receber dados na ISR
ISR(USART_RX_vect) {
 acc:	1f 92       	push	r1
 ace:	0f 92       	push	r0
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	0f 92       	push	r0
 ad4:	11 24       	eor	r1, r1
 ad6:	2f 93       	push	r18
 ad8:	3f 93       	push	r19
 ada:	4f 93       	push	r20
 adc:	8f 93       	push	r24
 ade:	9f 93       	push	r25
 ae0:	ef 93       	push	r30
 ae2:	ff 93       	push	r31
	char received = UDR0;
 ae4:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	int next_head = (uart_head + 1) % UART_BUFFER_SIZE;
 ae8:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <uart_head>
 aec:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <uart_head+0x1>
 af0:	01 96       	adiw	r24, 0x01	; 1
 af2:	8f 77       	andi	r24, 0x7F	; 127
 af4:	90 78       	andi	r25, 0x80	; 128
 af6:	99 23       	and	r25, r25
 af8:	24 f4       	brge	.+8      	; 0xb02 <__vector_18+0x36>
 afa:	01 97       	sbiw	r24, 0x01	; 1
 afc:	80 68       	ori	r24, 0x80	; 128
 afe:	9f 6f       	ori	r25, 0xFF	; 255
 b00:	01 96       	adiw	r24, 0x01	; 1
	if (next_head != uart_tail) { // evita overflow
 b02:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <uart_tail>
 b06:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <uart_tail+0x1>
 b0a:	82 17       	cp	r24, r18
 b0c:	93 07       	cpc	r25, r19
 b0e:	59 f0       	breq	.+22     	; 0xb26 <__vector_18+0x5a>
		uart_buffer[uart_head] = received;
 b10:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <uart_head>
 b14:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <uart_head+0x1>
 b18:	e0 55       	subi	r30, 0x50	; 80
 b1a:	fd 4f       	sbci	r31, 0xFD	; 253
 b1c:	40 83       	st	Z, r20
		uart_head = next_head;
 b1e:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <uart_head+0x1>
 b22:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <uart_head>
	}
}
 b26:	ff 91       	pop	r31
 b28:	ef 91       	pop	r30
 b2a:	9f 91       	pop	r25
 b2c:	8f 91       	pop	r24
 b2e:	4f 91       	pop	r20
 b30:	3f 91       	pop	r19
 b32:	2f 91       	pop	r18
 b34:	0f 90       	pop	r0
 b36:	0f be       	out	0x3f, r0	; 63
 b38:	0f 90       	pop	r0
 b3a:	1f 90       	pop	r1
 b3c:	18 95       	reti

00000b3e <uart_buffer_empty>:

// Função auxiliar para verificar se buffer está vazio
int uart_buffer_empty() {
	return (uart_head == uart_tail);
 b3e:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <uart_head>
 b42:	50 91 af 02 	lds	r21, 0x02AF	; 0x8002af <uart_head+0x1>
 b46:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <uart_tail>
 b4a:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <uart_tail+0x1>
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	42 17       	cp	r20, r18
 b52:	53 07       	cpc	r21, r19
 b54:	09 f0       	breq	.+2      	; 0xb58 <uart_buffer_empty+0x1a>
 b56:	80 e0       	ldi	r24, 0x00	; 0
}
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	08 95       	ret

00000b5c <uart_buffer_read_char>:

// Função auxiliar para ler um byte do buffer
int uart_buffer_read_char(char *c) {
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29
 b60:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) {
 b62:	0e 94 9f 05 	call	0xb3e	; 0xb3e <uart_buffer_empty>
 b66:	89 2b       	or	r24, r25
 b68:	e1 f4       	brne	.+56     	; 0xba2 <uart_buffer_read_char+0x46>
		return 0; // nada para ler
	}
	*c = uart_buffer[uart_tail];
 b6a:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <uart_tail>
 b6e:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <uart_tail+0x1>
 b72:	e0 55       	subi	r30, 0x50	; 80
 b74:	fd 4f       	sbci	r31, 0xFD	; 253
 b76:	80 81       	ld	r24, Z
 b78:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
 b7a:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <uart_tail>
 b7e:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <uart_tail+0x1>
 b82:	01 96       	adiw	r24, 0x01	; 1
 b84:	8f 77       	andi	r24, 0x7F	; 127
 b86:	90 78       	andi	r25, 0x80	; 128
 b88:	99 23       	and	r25, r25
 b8a:	24 f4       	brge	.+8      	; 0xb94 <uart_buffer_read_char+0x38>
 b8c:	01 97       	sbiw	r24, 0x01	; 1
 b8e:	80 68       	ori	r24, 0x80	; 128
 b90:	9f 6f       	ori	r25, 0xFF	; 255
 b92:	01 96       	adiw	r24, 0x01	; 1
 b94:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <uart_tail+0x1>
 b98:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <uart_tail>
	return 1;
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <uart_buffer_read_char+0x4a>
}

// Função auxiliar para ler um byte do buffer
int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) {
		return 0; // nada para ler
 ba2:	80 e0       	ldi	r24, 0x00	; 0
 ba4:	90 e0       	ldi	r25, 0x00	; 0
	}
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	08 95       	ret

00000bac <SerialRecebeChars>:

// Recebe exatamente `sizeS` caracteres e termina com \0, com timeout (~1s)
// Timeout é em número de loops com delay curto (aprox. 10ms por loop)
void SerialRecebeChars(int sizeS, char* string) {
 bac:	af 92       	push	r10
 bae:	bf 92       	push	r11
 bb0:	cf 92       	push	r12
 bb2:	df 92       	push	r13
 bb4:	ef 92       	push	r14
 bb6:	ff 92       	push	r15
 bb8:	0f 93       	push	r16
 bba:	1f 93       	push	r17
 bbc:	cf 93       	push	r28
 bbe:	df 93       	push	r29
 bc0:	1f 92       	push	r1
 bc2:	cd b7       	in	r28, 0x3d	; 61
 bc4:	de b7       	in	r29, 0x3e	; 62
 bc6:	6c 01       	movw	r12, r24
 bc8:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
 bca:	e1 2c       	mov	r14, r1
 bcc:	f1 2c       	mov	r15, r1
}

// Recebe exatamente `sizeS` caracteres e termina com \0, com timeout (~1s)
// Timeout é em número de loops com delay curto (aprox. 10ms por loop)
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
 bce:	00 e0       	ldi	r16, 0x00	; 0
 bd0:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100; // ~1 segundo timeout (100 * 10ms)

	while (received < sizeS && timeout_count < timeout_limit) {
 bd2:	19 c0       	rjmp	.+50     	; 0xc06 <SerialRecebeChars+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
 bd4:	ce 01       	movw	r24, r28
 bd6:	01 96       	adiw	r24, 0x01	; 1
 bd8:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uart_buffer_read_char>
 bdc:	89 2b       	or	r24, r25
 bde:	51 f0       	breq	.+20     	; 0xbf4 <SerialRecebeChars+0x48>
			string[received++] = c;
 be0:	f5 01       	movw	r30, r10
 be2:	e0 0f       	add	r30, r16
 be4:	f1 1f       	adc	r31, r17
 be6:	89 81       	ldd	r24, Y+1	; 0x01
 be8:	80 83       	st	Z, r24
 bea:	0f 5f       	subi	r16, 0xFF	; 255
 bec:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0; // reinicia timeout ao receber caractere
 bee:	e1 2c       	mov	r14, r1
 bf0:	f1 2c       	mov	r15, r1
 bf2:	09 c0       	rjmp	.+18     	; 0xc06 <SerialRecebeChars+0x5a>
 bf4:	8f e3       	ldi	r24, 0x3F	; 63
 bf6:	9c e9       	ldi	r25, 0x9C	; 156
 bf8:	01 97       	sbiw	r24, 0x01	; 1
 bfa:	f1 f7       	brne	.-4      	; 0xbf8 <SerialRecebeChars+0x4c>
 bfc:	00 c0       	rjmp	.+0      	; 0xbfe <SerialRecebeChars+0x52>
 bfe:	00 00       	nop
			} else {
			_delay_ms(10);
			timeout_count++;
 c00:	9f ef       	ldi	r25, 0xFF	; 255
 c02:	e9 1a       	sub	r14, r25
 c04:	f9 0a       	sbc	r15, r25
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100; // ~1 segundo timeout (100 * 10ms)

	while (received < sizeS && timeout_count < timeout_limit) {
 c06:	0c 15       	cp	r16, r12
 c08:	1d 05       	cpc	r17, r13
 c0a:	24 f4       	brge	.+8      	; 0xc14 <SerialRecebeChars+0x68>
 c0c:	84 e6       	ldi	r24, 0x64	; 100
 c0e:	e8 16       	cp	r14, r24
 c10:	f1 04       	cpc	r15, r1
 c12:	04 f3       	brlt	.-64     	; 0xbd4 <SerialRecebeChars+0x28>
			} else {
			_delay_ms(10);
			timeout_count++;
		}
	}
	string[received] = '\0';
 c14:	f5 01       	movw	r30, r10
 c16:	e0 0f       	add	r30, r16
 c18:	f1 1f       	adc	r31, r17
 c1a:	10 82       	st	Z, r1
}
 c1c:	0f 90       	pop	r0
 c1e:	df 91       	pop	r29
 c20:	cf 91       	pop	r28
 c22:	1f 91       	pop	r17
 c24:	0f 91       	pop	r16
 c26:	ff 90       	pop	r15
 c28:	ef 90       	pop	r14
 c2a:	df 90       	pop	r13
 c2c:	cf 90       	pop	r12
 c2e:	bf 90       	pop	r11
 c30:	af 90       	pop	r10
 c32:	08 95       	ret

00000c34 <SerialRecebeCharsNonBlocking>:

// Recebe até `sizeS` caracteres, retorna o número de bytes realmente lidos, com timeout (~500ms)
int SerialRecebeCharsNonBlocking(int sizeS, char* string) {
 c34:	af 92       	push	r10
 c36:	bf 92       	push	r11
 c38:	cf 92       	push	r12
 c3a:	df 92       	push	r13
 c3c:	ef 92       	push	r14
 c3e:	ff 92       	push	r15
 c40:	0f 93       	push	r16
 c42:	1f 93       	push	r17
 c44:	cf 93       	push	r28
 c46:	df 93       	push	r29
 c48:	1f 92       	push	r1
 c4a:	cd b7       	in	r28, 0x3d	; 61
 c4c:	de b7       	in	r29, 0x3e	; 62
 c4e:	6c 01       	movw	r12, r24
 c50:	5b 01       	movw	r10, r22
	int bytes_recebidos = 0;
	int timeout_count = 0;
 c52:	e1 2c       	mov	r14, r1
 c54:	f1 2c       	mov	r15, r1
	string[received] = '\0';
}

// Recebe até `sizeS` caracteres, retorna o número de bytes realmente lidos, com timeout (~500ms)
int SerialRecebeCharsNonBlocking(int sizeS, char* string) {
	int bytes_recebidos = 0;
 c56:	00 e0       	ldi	r16, 0x00	; 0
 c58:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 50; // ~500ms (50 * 10ms)

	while (bytes_recebidos < sizeS && timeout_count < timeout_limit) {
 c5a:	19 c0       	rjmp	.+50     	; 0xc8e <SerialRecebeCharsNonBlocking+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
 c5c:	ce 01       	movw	r24, r28
 c5e:	01 96       	adiw	r24, 0x01	; 1
 c60:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uart_buffer_read_char>
 c64:	89 2b       	or	r24, r25
 c66:	51 f0       	breq	.+20     	; 0xc7c <SerialRecebeCharsNonBlocking+0x48>
			string[bytes_recebidos++] = c;
 c68:	d5 01       	movw	r26, r10
 c6a:	a0 0f       	add	r26, r16
 c6c:	b1 1f       	adc	r27, r17
 c6e:	89 81       	ldd	r24, Y+1	; 0x01
 c70:	8c 93       	st	X, r24
 c72:	0f 5f       	subi	r16, 0xFF	; 255
 c74:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0;
 c76:	e1 2c       	mov	r14, r1
 c78:	f1 2c       	mov	r15, r1
 c7a:	09 c0       	rjmp	.+18     	; 0xc8e <SerialRecebeCharsNonBlocking+0x5a>
 c7c:	8f e3       	ldi	r24, 0x3F	; 63
 c7e:	9c e9       	ldi	r25, 0x9C	; 156
 c80:	01 97       	sbiw	r24, 0x01	; 1
 c82:	f1 f7       	brne	.-4      	; 0xc80 <SerialRecebeCharsNonBlocking+0x4c>
 c84:	00 c0       	rjmp	.+0      	; 0xc86 <SerialRecebeCharsNonBlocking+0x52>
 c86:	00 00       	nop
			} else {
			_delay_ms(10);
			timeout_count++;
 c88:	9f ef       	ldi	r25, 0xFF	; 255
 c8a:	e9 1a       	sub	r14, r25
 c8c:	f9 0a       	sbc	r15, r25
int SerialRecebeCharsNonBlocking(int sizeS, char* string) {
	int bytes_recebidos = 0;
	int timeout_count = 0;
	const int timeout_limit = 50; // ~500ms (50 * 10ms)

	while (bytes_recebidos < sizeS && timeout_count < timeout_limit) {
 c8e:	0c 15       	cp	r16, r12
 c90:	1d 05       	cpc	r17, r13
 c92:	24 f4       	brge	.+8      	; 0xc9c <SerialRecebeCharsNonBlocking+0x68>
 c94:	82 e3       	ldi	r24, 0x32	; 50
 c96:	e8 16       	cp	r14, r24
 c98:	f1 04       	cpc	r15, r1
 c9a:	04 f3       	brlt	.-64     	; 0xc5c <SerialRecebeCharsNonBlocking+0x28>
			_delay_ms(10);
			timeout_count++;
		}
	}

	if (bytes_recebidos < sizeS) {
 c9c:	0c 15       	cp	r16, r12
 c9e:	1d 05       	cpc	r17, r13
 ca0:	2c f4       	brge	.+10     	; 0xcac <SerialRecebeCharsNonBlocking+0x78>
		string[bytes_recebidos] = '\0';
 ca2:	f5 01       	movw	r30, r10
 ca4:	e0 0f       	add	r30, r16
 ca6:	f1 1f       	adc	r31, r17
 ca8:	10 82       	st	Z, r1
 caa:	04 c0       	rjmp	.+8      	; 0xcb4 <SerialRecebeCharsNonBlocking+0x80>
		} else {
		string[sizeS] = '\0';
 cac:	f5 01       	movw	r30, r10
 cae:	ec 0d       	add	r30, r12
 cb0:	fd 1d       	adc	r31, r13
 cb2:	10 82       	st	Z, r1
	}

	return bytes_recebidos;
}
 cb4:	c8 01       	movw	r24, r16
 cb6:	0f 90       	pop	r0
 cb8:	df 91       	pop	r29
 cba:	cf 91       	pop	r28
 cbc:	1f 91       	pop	r17
 cbe:	0f 91       	pop	r16
 cc0:	ff 90       	pop	r15
 cc2:	ef 90       	pop	r14
 cc4:	df 90       	pop	r13
 cc6:	cf 90       	pop	r12
 cc8:	bf 90       	pop	r11
 cca:	af 90       	pop	r10
 ccc:	08 95       	ret

00000cce <prepara_teclado>:
#define COL4 PD2    // Coluna 4 no PD2

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
 cce:	84 b1       	in	r24, 0x04	; 4
 cd0:	83 60       	ori	r24, 0x03	; 3
 cd2:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
 cd4:	8a b1       	in	r24, 0x0a	; 10
 cd6:	80 6c       	ori	r24, 0xC0	; 192
 cd8:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4)); // PD5, PD4, PD3 e PD2 como entradas
 cda:	8a b1       	in	r24, 0x0a	; 10
 cdc:	83 7c       	andi	r24, 0xC3	; 195
 cde:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);   // Habilitar resistores de Pull-up
 ce0:	8b b1       	in	r24, 0x0b	; 11
 ce2:	8c 63       	ori	r24, 0x3C	; 60
 ce4:	8b b9       	out	0x0b, r24	; 11
 ce6:	08 95       	ret

00000ce8 <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
 ce8:	cf 93       	push	r28
 cea:	df 93       	push	r29
 cec:	00 d0       	rcall	.+0      	; 0xcee <atraso_debounce+0x6>
 cee:	cd b7       	in	r28, 0x3d	; 61
 cf0:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
 cf2:	1a 82       	std	Y+2, r1	; 0x02
 cf4:	19 82       	std	Y+1, r1	; 0x01
 cf6:	05 c0       	rjmp	.+10     	; 0xd02 <atraso_debounce+0x1a>
 cf8:	89 81       	ldd	r24, Y+1	; 0x01
 cfa:	9a 81       	ldd	r25, Y+2	; 0x02
 cfc:	01 96       	adiw	r24, 0x01	; 1
 cfe:	9a 83       	std	Y+2, r25	; 0x02
 d00:	89 83       	std	Y+1, r24	; 0x01
 d02:	89 81       	ldd	r24, Y+1	; 0x01
 d04:	9a 81       	ldd	r25, Y+2	; 0x02
 d06:	88 3e       	cpi	r24, 0xE8	; 232
 d08:	93 40       	sbci	r25, 0x03	; 3
 d0a:	b0 f3       	brcs	.-20     	; 0xcf8 <atraso_debounce+0x10>
}
 d0c:	0f 90       	pop	r0
 d0e:	0f 90       	pop	r0
 d10:	df 91       	pop	r29
 d12:	cf 91       	pop	r28
 d14:	08 95       	ret

00000d16 <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
 d16:	1f 93       	push	r17
 d18:	cf 93       	push	r28
 d1a:	df 93       	push	r29
 d1c:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
 d1e:	c0 e0       	ldi	r28, 0x00	; 0
 d20:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 d22:	12 c0       	rjmp	.+36     	; 0xd48 <debounce+0x32>
        atraso_debounce();
 d24:	0e 94 74 06 	call	0xce8	; 0xce8 <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
 d28:	29 b1       	in	r18, 0x09	; 9
 d2a:	81 e0       	ldi	r24, 0x01	; 1
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	01 2e       	mov	r0, r17
 d30:	02 c0       	rjmp	.+4      	; 0xd36 <debounce+0x20>
 d32:	88 0f       	add	r24, r24
 d34:	99 1f       	adc	r25, r25
 d36:	0a 94       	dec	r0
 d38:	e2 f7       	brpl	.-8      	; 0xd32 <debounce+0x1c>
 d3a:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
 d3c:	d8 13       	cpse	r29, r24
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <debounce+0x2e>
            counter++;
 d40:	cf 5f       	subi	r28, 0xFF	; 255
 d42:	01 c0       	rjmp	.+2      	; 0xd46 <debounce+0x30>
        } else {
            counter = 0;
 d44:	c0 e0       	ldi	r28, 0x00	; 0
 d46:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 d48:	c7 30       	cpi	r28, 0x07	; 7
 d4a:	61 f7       	brne	.-40     	; 0xd24 <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
 d4c:	8d 2f       	mov	r24, r29
 d4e:	df 91       	pop	r29
 d50:	cf 91       	pop	r28
 d52:	1f 91       	pop	r17
 d54:	08 95       	ret

00000d56 <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
 d56:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
 d58:	85 b1       	in	r24, 0x05	; 5
 d5a:	83 60       	ori	r24, 0x03	; 3
 d5c:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
 d5e:	8b b1       	in	r24, 0x0b	; 11
 d60:	80 6c       	ori	r24, 0xC0	; 192
 d62:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
 d64:	85 b1       	in	r24, 0x05	; 5
 d66:	8d 7f       	andi	r24, 0xFD	; 253
 d68:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 d6a:	85 e0       	ldi	r24, 0x05	; 5
 d6c:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 d70:	88 23       	and	r24, r24
 d72:	11 f0       	breq	.+4      	; 0xd78 <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
 d74:	c0 e0       	ldi	r28, 0x00	; 0
 d76:	01 c0       	rjmp	.+2      	; 0xd7a <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 d78:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
 d7a:	84 e0       	ldi	r24, 0x04	; 4
 d7c:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 d80:	81 11       	cpse	r24, r1
 d82:	01 c0       	rjmp	.+2      	; 0xd86 <varredura+0x30>
 d84:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
 d86:	83 e0       	ldi	r24, 0x03	; 3
 d88:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 d8c:	81 11       	cpse	r24, r1
 d8e:	01 c0       	rjmp	.+2      	; 0xd92 <varredura+0x3c>
 d90:	c3 e3       	ldi	r28, 0x33	; 51
	if (!debounce(COL4 - 0)) tecla = 'A'; 
 d92:	82 e0       	ldi	r24, 0x02	; 2
 d94:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 d98:	81 11       	cpse	r24, r1
 d9a:	01 c0       	rjmp	.+2      	; 0xd9e <varredura+0x48>
 d9c:	c1 e4       	ldi	r28, 0x41	; 65
    PORTB |= (1 << LIN1); // Desativa LIN1
 d9e:	85 b1       	in	r24, 0x05	; 5
 da0:	82 60       	ori	r24, 0x02	; 2
 da2:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
 da4:	85 b1       	in	r24, 0x05	; 5
 da6:	8e 7f       	andi	r24, 0xFE	; 254
 da8:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
 daa:	85 e0       	ldi	r24, 0x05	; 5
 dac:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 db0:	81 11       	cpse	r24, r1
 db2:	01 c0       	rjmp	.+2      	; 0xdb6 <varredura+0x60>
 db4:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
 db6:	84 e0       	ldi	r24, 0x04	; 4
 db8:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 dbc:	81 11       	cpse	r24, r1
 dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <varredura+0x6c>
 dc0:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
 dc2:	83 e0       	ldi	r24, 0x03	; 3
 dc4:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 dc8:	81 11       	cpse	r24, r1
 dca:	01 c0       	rjmp	.+2      	; 0xdce <varredura+0x78>
 dcc:	c6 e3       	ldi	r28, 0x36	; 54
	if (!debounce(COL4 - 0)) tecla = 'B'; 
 dce:	82 e0       	ldi	r24, 0x02	; 2
 dd0:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 dd4:	81 11       	cpse	r24, r1
 dd6:	01 c0       	rjmp	.+2      	; 0xdda <varredura+0x84>
 dd8:	c2 e4       	ldi	r28, 0x42	; 66
    PORTB |= (1 << LIN2); // Desativa LIN2
 dda:	85 b1       	in	r24, 0x05	; 5
 ddc:	81 60       	ori	r24, 0x01	; 1
 dde:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
 de0:	8b b1       	in	r24, 0x0b	; 11
 de2:	8f 77       	andi	r24, 0x7F	; 127
 de4:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
 de6:	85 e0       	ldi	r24, 0x05	; 5
 de8:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 dec:	81 11       	cpse	r24, r1
 dee:	01 c0       	rjmp	.+2      	; 0xdf2 <varredura+0x9c>
 df0:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
 df2:	84 e0       	ldi	r24, 0x04	; 4
 df4:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 df8:	81 11       	cpse	r24, r1
 dfa:	01 c0       	rjmp	.+2      	; 0xdfe <varredura+0xa8>
 dfc:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
 dfe:	83 e0       	ldi	r24, 0x03	; 3
 e00:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 e04:	81 11       	cpse	r24, r1
 e06:	01 c0       	rjmp	.+2      	; 0xe0a <varredura+0xb4>
 e08:	c9 e3       	ldi	r28, 0x39	; 57
	if (!debounce(COL4 - 0)) tecla = 'C'; 
 e0a:	82 e0       	ldi	r24, 0x02	; 2
 e0c:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 e10:	81 11       	cpse	r24, r1
 e12:	01 c0       	rjmp	.+2      	; 0xe16 <varredura+0xc0>
 e14:	c3 e4       	ldi	r28, 0x43	; 67
    PORTD |= (1 << LIN3); // Desativa LIN3
 e16:	8b b1       	in	r24, 0x0b	; 11
 e18:	80 68       	ori	r24, 0x80	; 128
 e1a:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
 e1c:	8b b1       	in	r24, 0x0b	; 11
 e1e:	8f 7b       	andi	r24, 0xBF	; 191
 e20:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
 e22:	85 e0       	ldi	r24, 0x05	; 5
 e24:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 e28:	81 11       	cpse	r24, r1
 e2a:	01 c0       	rjmp	.+2      	; 0xe2e <varredura+0xd8>
 e2c:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
 e2e:	84 e0       	ldi	r24, 0x04	; 4
 e30:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 e34:	81 11       	cpse	r24, r1
 e36:	01 c0       	rjmp	.+2      	; 0xe3a <varredura+0xe4>
 e38:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
 e3a:	83 e0       	ldi	r24, 0x03	; 3
 e3c:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 e40:	81 11       	cpse	r24, r1
 e42:	01 c0       	rjmp	.+2      	; 0xe46 <varredura+0xf0>
 e44:	c3 e2       	ldi	r28, 0x23	; 35
	if (!debounce(COL4 - 0)) tecla = 'D'; 
 e46:	82 e0       	ldi	r24, 0x02	; 2
 e48:	0e 94 8b 06 	call	0xd16	; 0xd16 <debounce>
 e4c:	81 11       	cpse	r24, r1
 e4e:	01 c0       	rjmp	.+2      	; 0xe52 <varredura+0xfc>
 e50:	c4 e4       	ldi	r28, 0x44	; 68
    PORTD |= (1 << LIN4); // Desativa LIN4
 e52:	8b b1       	in	r24, 0x0b	; 11
 e54:	80 64       	ori	r24, 0x40	; 64
 e56:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
 e58:	8c 2f       	mov	r24, r28
 e5a:	cf 91       	pop	r28
 e5c:	08 95       	ret

00000e5e <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
 e5e:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
 e60:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
 e62:	85 e0       	ldi	r24, 0x05	; 5
 e64:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 e66:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
 e6a:	81 ef       	ldi	r24, 0xF1	; 241
 e6c:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
 e6e:	20 e0       	ldi	r18, 0x00	; 0
 e70:	30 e0       	ldi	r19, 0x00	; 0
 e72:	08 c0       	rjmp	.+16     	; 0xe84 <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 e74:	a9 9b       	sbis	0x15, 1	; 21
 e76:	fe cf       	rjmp	.-4      	; 0xe74 <delay1ms+0x16>
		TCNT0 = 241;
 e78:	91 ef       	ldi	r25, 0xF1	; 241
 e7a:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
 e7c:	92 e0       	ldi	r25, 0x02	; 2
 e7e:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
 e80:	2f 5f       	subi	r18, 0xFF	; 255
 e82:	3f 4f       	sbci	r19, 0xFF	; 255
 e84:	24 17       	cp	r18, r20
 e86:	35 07       	cpc	r19, r21
 e88:	ac f3       	brlt	.-22     	; 0xe74 <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 e8a:	15 bc       	out	0x25, r1	; 37
 e8c:	08 95       	ret

00000e8e <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
 e8e:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
 e90:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
 e92:	81 e0       	ldi	r24, 0x01	; 1
 e94:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 e96:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
 e9a:	85 ef       	ldi	r24, 0xF5	; 245
 e9c:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
 e9e:	20 e0       	ldi	r18, 0x00	; 0
 ea0:	30 e0       	ldi	r19, 0x00	; 0
 ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 ea4:	a9 9b       	sbis	0x15, 1	; 21
 ea6:	fe cf       	rjmp	.-4      	; 0xea4 <delay1us+0x16>
		TCNT0 = 245;
 ea8:	95 ef       	ldi	r25, 0xF5	; 245
 eaa:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
 eac:	95 b3       	in	r25, 0x15	; 21
 eae:	92 60       	ori	r25, 0x02	; 2
 eb0:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
 eb2:	2f 5f       	subi	r18, 0xFF	; 255
 eb4:	3f 4f       	sbci	r19, 0xFF	; 255
 eb6:	24 17       	cp	r18, r20
 eb8:	35 07       	cpc	r19, r21
 eba:	a4 f3       	brlt	.-24     	; 0xea4 <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 ebc:	15 bc       	out	0x25, r1	; 37
 ebe:	08 95       	ret

00000ec0 <strcmp>:
 ec0:	fb 01       	movw	r30, r22
 ec2:	dc 01       	movw	r26, r24
 ec4:	8d 91       	ld	r24, X+
 ec6:	01 90       	ld	r0, Z+
 ec8:	80 19       	sub	r24, r0
 eca:	01 10       	cpse	r0, r1
 ecc:	d9 f3       	breq	.-10     	; 0xec4 <strcmp+0x4>
 ece:	99 0b       	sbc	r25, r25
 ed0:	08 95       	ret

00000ed2 <strcpy>:
 ed2:	fb 01       	movw	r30, r22
 ed4:	dc 01       	movw	r26, r24
 ed6:	01 90       	ld	r0, Z+
 ed8:	0d 92       	st	X+, r0
 eda:	00 20       	and	r0, r0
 edc:	e1 f7       	brne	.-8      	; 0xed6 <strcpy+0x4>
 ede:	08 95       	ret

00000ee0 <strncpy>:
 ee0:	fb 01       	movw	r30, r22
 ee2:	dc 01       	movw	r26, r24
 ee4:	41 50       	subi	r20, 0x01	; 1
 ee6:	50 40       	sbci	r21, 0x00	; 0
 ee8:	48 f0       	brcs	.+18     	; 0xefc <strncpy+0x1c>
 eea:	01 90       	ld	r0, Z+
 eec:	0d 92       	st	X+, r0
 eee:	00 20       	and	r0, r0
 ef0:	c9 f7       	brne	.-14     	; 0xee4 <strncpy+0x4>
 ef2:	01 c0       	rjmp	.+2      	; 0xef6 <strncpy+0x16>
 ef4:	1d 92       	st	X+, r1
 ef6:	41 50       	subi	r20, 0x01	; 1
 ef8:	50 40       	sbci	r21, 0x00	; 0
 efa:	e0 f7       	brcc	.-8      	; 0xef4 <strncpy+0x14>
 efc:	08 95       	ret

00000efe <strstr>:
 efe:	fb 01       	movw	r30, r22
 f00:	51 91       	ld	r21, Z+
 f02:	55 23       	and	r21, r21
 f04:	a9 f0       	breq	.+42     	; 0xf30 <strstr+0x32>
 f06:	bf 01       	movw	r22, r30
 f08:	dc 01       	movw	r26, r24
 f0a:	4d 91       	ld	r20, X+
 f0c:	45 17       	cp	r20, r21
 f0e:	41 11       	cpse	r20, r1
 f10:	e1 f7       	brne	.-8      	; 0xf0a <strstr+0xc>
 f12:	59 f4       	brne	.+22     	; 0xf2a <strstr+0x2c>
 f14:	cd 01       	movw	r24, r26
 f16:	01 90       	ld	r0, Z+
 f18:	00 20       	and	r0, r0
 f1a:	49 f0       	breq	.+18     	; 0xf2e <strstr+0x30>
 f1c:	4d 91       	ld	r20, X+
 f1e:	40 15       	cp	r20, r0
 f20:	41 11       	cpse	r20, r1
 f22:	c9 f3       	breq	.-14     	; 0xf16 <strstr+0x18>
 f24:	fb 01       	movw	r30, r22
 f26:	41 11       	cpse	r20, r1
 f28:	ef cf       	rjmp	.-34     	; 0xf08 <strstr+0xa>
 f2a:	81 e0       	ldi	r24, 0x01	; 1
 f2c:	90 e0       	ldi	r25, 0x00	; 0
 f2e:	01 97       	sbiw	r24, 0x01	; 1
 f30:	08 95       	ret

00000f32 <_exit>:
 f32:	f8 94       	cli

00000f34 <__stop_program>:
 f34:	ff cf       	rjmp	.-2      	; 0xf34 <__stop_program>
