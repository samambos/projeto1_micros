
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028a  00800100  00001e9c  00001f30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009f  0080038a  0080038a  000021ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044c8  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000106a  00000000  00000000  0000696c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000204e  00000000  00000000  000079d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f8  00000000  00000000  00009a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c29  00000000  00000000  0000a21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002363  00000000  00000000  0000ae45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000d1a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_11>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	8a 03       	fmulsu	r16, r18
      6a:	9f 03       	fmulsu	r17, r23
      6c:	ac 03       	fmulsu	r18, r20
      6e:	b9 03       	fmulsu	r19, r17
      70:	ec 03       	fmulsu	r22, r20
      72:	96 04       	cpc	r9, r6
      74:	ba 04       	cpc	r11, r10
      76:	c5 04       	cpc	r12, r5
      78:	d0 04       	cpc	r13, r0
      7a:	db 04       	cpc	r13, r11

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	13 e0       	ldi	r17, 0x03	; 3
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ec e9       	ldi	r30, 0x9C	; 156
      90:	fe e1       	ldi	r31, 0x1E	; 30
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	aa 38       	cpi	r26, 0x8A	; 138
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	24 e0       	ldi	r18, 0x04	; 4
      a0:	aa e8       	ldi	r26, 0x8A	; 138
      a2:	b3 e0       	ldi	r27, 0x03	; 3
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a9 32       	cpi	r26, 0x29	; 41
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 33 03 	call	0x666	; 0x666 <main>
      b2:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <mensagem_Inicial>:
*/
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){
		LCD_limpar();
      ba:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
		LCD_Escrever_Linha(0,1,"DIGITE QUALQUER");
      be:	48 e0       	ldi	r20, 0x08	; 8
      c0:	51 e0       	ldi	r21, 0x01	; 1
      c2:	61 e0       	ldi	r22, 0x01	; 1
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1,5, "TECLA");
      ca:	48 e1       	ldi	r20, 0x18	; 24
      cc:	51 e0       	ldi	r21, 0x01	; 1
      ce:	65 e0       	ldi	r22, 0x05	; 5
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
      d6:	08 95       	ret

000000d8 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      d8:	cf 93       	push	r28
      da:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      dc:	88 b1       	in	r24, 0x08	; 8
      de:	80 7f       	andi	r24, 0xF0	; 240
      e0:	9c 2f       	mov	r25, r28
      e2:	92 95       	swap	r25
      e4:	9f 70       	andi	r25, 0x0F	; 15
      e6:	89 2b       	or	r24, r25
      e8:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
      ea:	88 b1       	in	r24, 0x08	; 8
      ec:	8f 7d       	andi	r24, 0xDF	; 223
      ee:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
      f0:	88 b1       	in	r24, 0x08	; 8
      f2:	80 61       	ori	r24, 0x10	; 16
      f4:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
      f6:	88 b1       	in	r24, 0x08	; 8
      f8:	8f 7e       	andi	r24, 0xEF	; 239
      fa:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
      fc:	84 e6       	ldi	r24, 0x64	; 100
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
     104:	88 b1       	in	r24, 0x08	; 8
     106:	80 7f       	andi	r24, 0xF0	; 240
     108:	cf 70       	andi	r28, 0x0F	; 15
     10a:	c8 2b       	or	r28, r24
     10c:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     10e:	88 b1       	in	r24, 0x08	; 8
     110:	80 61       	ori	r24, 0x10	; 16
     112:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     114:	88 b1       	in	r24, 0x08	; 8
     116:	8f 7e       	andi	r24, 0xEF	; 239
     118:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     11a:	82 e0       	ldi	r24, 0x02	; 2
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
}
     122:	cf 91       	pop	r28
     124:	08 95       	ret

00000126 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     12a:	8a e0       	ldi	r24, 0x0A	; 10
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     138:	88 e2       	ldi	r24, 0x28	; 40
     13a:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     13e:	8c e0       	ldi	r24, 0x0C	; 12
     140:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     144:	86 e0       	ldi	r24, 0x06	; 6
     146:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
     150:	08 95       	ret

00000152 <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     158:	80 e8       	ldi	r24, 0x80	; 128
     15a:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
     15e:	08 95       	ret

00000160 <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	ec 01       	movw	r28, r24
	while(*texto) {
     166:	23 c0       	rjmp	.+70     	; 0x1ae <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     168:	98 b1       	in	r25, 0x08	; 8
     16a:	90 7f       	andi	r25, 0xF0	; 240
     16c:	82 95       	swap	r24
     16e:	8f 70       	andi	r24, 0x0F	; 15
     170:	89 2b       	or	r24, r25
     172:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     174:	88 b1       	in	r24, 0x08	; 8
     176:	80 62       	ori	r24, 0x20	; 32
     178:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     17a:	88 b1       	in	r24, 0x08	; 8
     17c:	80 61       	ori	r24, 0x10	; 16
     17e:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     180:	88 b1       	in	r24, 0x08	; 8
     182:	8f 7e       	andi	r24, 0xEF	; 239
     184:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     186:	88 ec       	ldi	r24, 0xC8	; 200
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     18e:	98 b1       	in	r25, 0x08	; 8
     190:	89 91       	ld	r24, Y+
     192:	90 7f       	andi	r25, 0xF0	; 240
     194:	8f 70       	andi	r24, 0x0F	; 15
     196:	89 2b       	or	r24, r25
     198:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     19a:	88 b1       	in	r24, 0x08	; 8
     19c:	80 61       	ori	r24, 0x10	; 16
     19e:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     1a0:	88 b1       	in	r24, 0x08	; 8
     1a2:	8f 7e       	andi	r24, 0xEF	; 239
     1a4:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1ae:	88 81       	ld	r24, Y
     1b0:	81 11       	cpse	r24, r1
     1b2:	da cf       	rjmp	.-76     	; 0x168 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1c0:	81 11       	cpse	r24, r1
     1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <LCD_Escrever_Linha+0x1a>
     1c4:	60 31       	cpi	r22, 0x10	; 16
     1c6:	30 f4       	brcc	.+12     	; 0x1d4 <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1c8:	86 2f       	mov	r24, r22
     1ca:	8f 70       	andi	r24, 0x0F	; 15
     1cc:	80 68       	ori	r24, 0x80	; 128
     1ce:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
     1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	39 f4       	brne	.+14     	; 0x1e6 <LCD_Escrever_Linha+0x2c>
     1d8:	60 31       	cpi	r22, 0x10	; 16
     1da:	28 f4       	brcc	.+10     	; 0x1e6 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1dc:	86 2f       	mov	r24, r22
     1de:	8f 70       	andi	r24, 0x0F	; 15
     1e0:	80 6c       	ori	r24, 0xC0	; 192
     1e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     1e6:	ce 01       	movw	r24, r28
     1e8:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_cmd>
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <ler_codigo_aluno>:

// Variável global para armazenar a senha validada
static char senha_validada[7] = {0};

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <ler_codigo_aluno+0xe>
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	7c 01       	movw	r14, r24
    int pos = 0;
    char tecla;

    LCD_limpar();
     20c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
     210:	4e e1       	ldi	r20, 0x1E	; 30
     212:	51 e0       	ldi	r21, 0x01	; 1
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    LCD_Escrever_Linha(1, 0, "______");
     21c:	4d e2       	ldi	r20, 0x2D	; 45
     21e:	51 e0       	ldi	r21, 0x01	; 1
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
// Variável global para armazenar a senha validada
static char senha_validada[7] = {0};

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
    int pos = 0;
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	10 e0       	ldi	r17, 0x00	; 0

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     22c:	1d c0       	rjmp	.+58     	; 0x268 <ler_codigo_aluno+0x70>
        if (isBlocked()) return;
     22e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     232:	81 11       	cpse	r24, r1
     234:	1e c0       	rjmp	.+60     	; 0x272 <ler_codigo_aluno+0x7a>
        tecla = varredura();
     236:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
        if (tecla >= '0' && tecla <= '9') {
     23a:	90 ed       	ldi	r25, 0xD0	; 208
     23c:	98 0f       	add	r25, r24
     23e:	9a 30       	cpi	r25, 0x0A	; 10
     240:	98 f4       	brcc	.+38     	; 0x268 <ler_codigo_aluno+0x70>
            codigo[pos] = tecla;
     242:	f7 01       	movw	r30, r14
     244:	e0 0f       	add	r30, r16
     246:	f1 1f       	adc	r31, r17
     248:	80 83       	st	Z, r24
            char temp[2] = { tecla, '\0' };
     24a:	89 83       	std	Y+1, r24	; 0x01
     24c:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Escrever_Linha(1, pos, temp);
     24e:	ae 01       	movw	r20, r28
     250:	4f 5f       	subi	r20, 0xFF	; 255
     252:	5f 4f       	sbci	r21, 0xFF	; 255
     254:	60 2f       	mov	r22, r16
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
            pos++;
     25c:	0f 5f       	subi	r16, 0xFF	; 255
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
            delay1ms(200);
     260:	88 ec       	ldi	r24, 0xC8	; 200
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     268:	06 30       	cpi	r16, 0x06	; 6
     26a:	11 05       	cpc	r17, r1
     26c:	04 f3       	brlt	.-64     	; 0x22e <ler_codigo_aluno+0x36>
            LCD_Escrever_Linha(1, pos, temp);
            pos++;
            delay1ms(200);
        }
    }
    codigo[6] = '\0';
     26e:	f7 01       	movw	r30, r14
     270:	16 82       	std	Z+6, r1	; 0x06
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	ff 90       	pop	r15
     280:	ef 90       	pop	r14
     282:	08 95       	ret

00000284 <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	00 d0       	rcall	.+0      	; 0x292 <ler_senha+0xe>
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	7c 01       	movw	r14, r24
    int pos = 0;
    char tecla;

    LCD_limpar();
     298:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    LCD_Escrever_Linha(0, 0, "Digite senha:");
     29c:	44 e3       	ldi	r20, 0x34	; 52
     29e:	51 e0       	ldi	r21, 0x01	; 1
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    LCD_Escrever_Linha(1, 0, "______");
     2a8:	4d e2       	ldi	r20, 0x2D	; 45
     2aa:	51 e0       	ldi	r21, 0x01	; 1
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
    int pos = 0;
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	10 e0       	ldi	r17, 0x00	; 0

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite senha:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     2b8:	1e c0       	rjmp	.+60     	; 0x2f6 <ler_senha+0x72>
        if (isBlocked()) return;
     2ba:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     2be:	81 11       	cpse	r24, r1
     2c0:	1f c0       	rjmp	.+62     	; 0x300 <ler_senha+0x7c>
        tecla = varredura();
     2c2:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
        if (tecla >= '0' && tecla <= '9') {
     2c6:	90 ed       	ldi	r25, 0xD0	; 208
     2c8:	98 0f       	add	r25, r24
     2ca:	9a 30       	cpi	r25, 0x0A	; 10
     2cc:	a0 f4       	brcc	.+40     	; 0x2f6 <ler_senha+0x72>
            senha[pos] = tecla;
     2ce:	f7 01       	movw	r30, r14
     2d0:	e0 0f       	add	r30, r16
     2d2:	f1 1f       	adc	r31, r17
     2d4:	80 83       	st	Z, r24
            char temp[2] = { '*', '\0' };
     2d6:	8a e2       	ldi	r24, 0x2A	; 42
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Escrever_Linha(1, pos, temp);
     2dc:	ae 01       	movw	r20, r28
     2de:	4f 5f       	subi	r20, 0xFF	; 255
     2e0:	5f 4f       	sbci	r21, 0xFF	; 255
     2e2:	60 2f       	mov	r22, r16
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
            pos++;
     2ea:	0f 5f       	subi	r16, 0xFF	; 255
     2ec:	1f 4f       	sbci	r17, 0xFF	; 255
            delay1ms(200);
     2ee:	88 ec       	ldi	r24, 0xC8	; 200
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite senha:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     2f6:	06 30       	cpi	r16, 0x06	; 6
     2f8:	11 05       	cpc	r17, r1
     2fa:	fc f2       	brlt	.-66     	; 0x2ba <ler_senha+0x36>
            LCD_Escrever_Linha(1, pos, temp);
            pos++;
            delay1ms(200);
        }
    }
    senha[6] = '\0';
     2fc:	f7 01       	movw	r30, r14
     2fe:	16 82       	std	Z+6, r1	; 0x06
}
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	08 95       	ret

00000312 <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	ae 97       	sbiw	r28, 0x2e	; 46
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
    if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     32e:	dc 01       	movw	r26, r24
     330:	0d 90       	ld	r0, X+
     332:	00 20       	and	r0, r0
     334:	e9 f7       	brne	.-6      	; 0x330 <validar_codigo_aluno+0x1e>
     336:	11 97       	sbiw	r26, 0x01	; 1
     338:	a8 1b       	sub	r26, r24
     33a:	b9 0b       	sbc	r27, r25
     33c:	16 97       	sbiw	r26, 0x06	; 6
     33e:	09 f0       	breq	.+2      	; 0x342 <validar_codigo_aluno+0x30>
     340:	6b c0       	rjmp	.+214    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     342:	db 01       	movw	r26, r22
     344:	0d 90       	ld	r0, X+
     346:	00 20       	and	r0, r0
     348:	e9 f7       	brne	.-6      	; 0x344 <validar_codigo_aluno+0x32>
     34a:	11 97       	sbiw	r26, 0x01	; 1
     34c:	a6 1b       	sub	r26, r22
     34e:	b7 0b       	sbc	r27, r23
     350:	16 97       	sbiw	r26, 0x06	; 6
     352:	09 f0       	breq	.+2      	; 0x356 <validar_codigo_aluno+0x44>
     354:	64 c0       	rjmp	.+200    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     356:	7b 01       	movw	r14, r22
     358:	8c 01       	movw	r16, r24

    // Armazena a senha antes de validar 
    strncpy(senha_validada, senha, 6);
     35a:	46 e0       	ldi	r20, 0x06	; 6
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	8a e8       	ldi	r24, 0x8A	; 138
     360:	93 e0       	ldi	r25, 0x03	; 3
     362:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <strncpy>
    senha_validada[6] = '\0';
     366:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <__data_end+0x6>

    char mensagem[14];
    mensagem[0] = 'C';
     36a:	83 e4       	ldi	r24, 0x43	; 67
     36c:	89 83       	std	Y+1, r24	; 0x01
    mensagem[1] = 'E';
     36e:	85 e4       	ldi	r24, 0x45	; 69
     370:	8a 83       	std	Y+2, r24	; 0x02
    memcpy(&mensagem[2], codigo, 6);
     372:	86 e0       	ldi	r24, 0x06	; 6
     374:	f8 01       	movw	r30, r16
     376:	de 01       	movw	r26, r28
     378:	13 96       	adiw	r26, 0x03	; 3
     37a:	01 90       	ld	r0, Z+
     37c:	0d 92       	st	X+, r0
     37e:	8a 95       	dec	r24
     380:	e1 f7       	brne	.-8      	; 0x37a <validar_codigo_aluno+0x68>
    memcpy(&mensagem[8], senha, 6);
     382:	86 e0       	ldi	r24, 0x06	; 6
     384:	f7 01       	movw	r30, r14
     386:	de 01       	movw	r26, r28
     388:	19 96       	adiw	r26, 0x09	; 9
     38a:	01 90       	ld	r0, Z+
     38c:	0d 92       	st	X+, r0
     38e:	8a 95       	dec	r24
     390:	e1 f7       	brne	.-8      	; 0x38a <validar_codigo_aluno+0x78>

    SerialEnviaChars(14, mensagem);
     392:	be 01       	movw	r22, r28
     394:	6f 5f       	subi	r22, 0xFF	; 255
     396:	7f 4f       	sbci	r23, 0xFF	; 255
     398:	8e e0       	ldi	r24, 0x0E	; 14
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 90 0b 	call	0x1720	; 0x1720 <SerialEnviaChars>

    char resposta[32];
    memset(resposta, 0, sizeof(resposta));
     3a0:	be 01       	movw	r22, r28
     3a2:	61 5f       	subi	r22, 0xF1	; 241
     3a4:	7f 4f       	sbci	r23, 0xFF	; 255
     3a6:	80 e2       	ldi	r24, 0x20	; 32
     3a8:	db 01       	movw	r26, r22
     3aa:	1d 92       	st	X+, r1
     3ac:	8a 95       	dec	r24
     3ae:	e9 f7       	brne	.-6      	; 0x3aa <validar_codigo_aluno+0x98>

    SerialRecebeChars(31, resposta);
     3b0:	8f e1       	ldi	r24, 0x1F	; 31
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SerialRecebeChars>

    LCD_limpar();
     3b8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    LCD_Escrever_Linha(0, 3, "Aguarde...");
     3bc:	42 e4       	ldi	r20, 0x42	; 66
     3be:	51 e0       	ldi	r21, 0x01	; 1
     3c0:	63 e0       	ldi	r22, 0x03	; 3
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    delay1ms(1000);
     3c8:	88 ee       	ldi	r24, 0xE8	; 232
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    LCD_limpar();
     3d0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>

    if (resposta[0] == 'S' && resposta[1] == 'E') {
     3d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d6:	83 35       	cpi	r24, 0x53	; 83
     3d8:	a9 f4       	brne	.+42     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3da:	88 89       	ldd	r24, Y+16	; 0x10
     3dc:	85 34       	cpi	r24, 0x45	; 69
     3de:	91 f4       	brne	.+36     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
        if (strstr(resposta, "Nao autorizado") != NULL) {
     3e0:	6d e4       	ldi	r22, 0x4D	; 77
     3e2:	71 e0       	ldi	r23, 0x01	; 1
     3e4:	ce 01       	movw	r24, r28
     3e6:	0f 96       	adiw	r24, 0x0f	; 15
     3e8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <strstr>
     3ec:	89 2b       	or	r24, r25
     3ee:	d1 f0       	breq	.+52     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
            // Se não for autorizado, limpa a senha armazenada
            memset(senha_validada, 0, sizeof(senha_validada));
     3f0:	87 e0       	ldi	r24, 0x07	; 7
     3f2:	ea e8       	ldi	r30, 0x8A	; 138
     3f4:	f3 e0       	ldi	r31, 0x03	; 3
     3f6:	df 01       	movw	r26, r30
     3f8:	1d 92       	st	X+, r1
     3fa:	8a 95       	dec	r24
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <validar_codigo_aluno+0xe6>
            return 0;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	12 c0       	rjmp	.+36     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
            return 1;
        }
    }
    
    // Se chegou aqui, houve algum erro, limpa a senha
    memset(senha_validada, 0, sizeof(senha_validada));
     404:	87 e0       	ldi	r24, 0x07	; 7
     406:	ea e8       	ldi	r30, 0x8A	; 138
     408:	f3 e0       	ldi	r31, 0x03	; 3
     40a:	df 01       	movw	r26, r30
     40c:	1d 92       	st	X+, r1
     40e:	8a 95       	dec	r24
     410:	e9 f7       	brne	.-6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
    return 0;
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	08 c0       	rjmp	.+16     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    }
    senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
    if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
        if (strstr(resposta, "Nao autorizado") != NULL) {
            // Se não for autorizado, limpa a senha armazenada
            memset(senha_validada, 0, sizeof(senha_validada));
            return 0;
        } else {
            return 1;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
    }
    
    // Se chegou aqui, houve algum erro, limpa a senha
    memset(senha_validada, 0, sizeof(senha_validada));
    return 0;
}
     428:	ae 96       	adiw	r28, 0x2e	; 46
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	08 95       	ret

00000442 <get_current_password>:

// Função para recuperar a senha validada
const char* get_current_password() {
    return senha_validada;
}
     442:	8a e8       	ldi	r24, 0x8A	; 138
     444:	93 e0       	ldi	r25, 0x03	; 3
     446:	08 95       	ret

00000448 <configurar_timer>:
void configurar_timer();
void resetar_timeout();
void aguardar_desbloqueio();

void configurar_timer() {
	DDRB |= (1 << LED_PIN); // Configura pino do LED como saída
     448:	84 b1       	in	r24, 0x04	; 4
     44a:	80 61       	ori	r24, 0x10	; 16
     44c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << LED_PIN); // Inicia com LED desligado
     44e:	85 b1       	in	r24, 0x05	; 5
     450:	8f 7e       	andi	r24, 0xEF	; 239
     452:	85 b9       	out	0x05, r24	; 5

	TCCR1A = 0; // Modo normal
     454:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // Modo CTC, prescaler 64
     458:	8b e0       	ldi	r24, 0x0B	; 11
     45a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz / 64 / 250 = 1ms)
     45e:	8a ef       	ldi	r24, 0xFA	; 250
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     466:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     46a:	08 95       	ret

0000046c <desabilitar_timer_timeout>:
	TIMSK1 |= (1 << OCIE1A); // Habilita interrupção por comparação
	resetar_timeout(); // Sempre reseta o timeout ao habilitar
}

void desabilitar_timer_timeout() {
	TIMSK1 &= ~(1 << OCIE1A); // Desabilita interrupção por comparação
     46c:	ef e6       	ldi	r30, 0x6F	; 111
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	8d 7f       	andi	r24, 0xFD	; 253
     474:	80 83       	st	Z, r24
	PORTB &= ~(1 << LED_PIN); // Garante que o LED esteja desligado
     476:	85 b1       	in	r24, 0x05	; 5
     478:	8f 7e       	andi	r24, 0xEF	; 239
     47a:	85 b9       	out	0x05, r24	; 5
	alerta_led = 0; // Desliga o alerta
     47c:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <alerta_led>
	timer_count = 0;
     480:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <timer_count>
     484:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <timer_count+0x1>
     488:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <timer_count+0x2>
     48c:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <timer_count+0x3>
     490:	08 95       	ret

00000492 <enviar_confirmacao_operacional>:
		setBlocked(1); // Bloqueia sistema por timeout
	}
}

// Envia mensagem de confirmação operacional "CO"
void enviar_confirmacao_operacional() {
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	00 d0       	rcall	.+0      	; 0x498 <enviar_confirmacao_operacional+0x6>
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
	char confirmacao[2];
	confirmacao[0] = 'C';
     49c:	83 e4       	ldi	r24, 0x43	; 67
     49e:	89 83       	std	Y+1, r24	; 0x01
	confirmacao[1] = 'O';
     4a0:	8f e4       	ldi	r24, 0x4F	; 79
     4a2:	8a 83       	std	Y+2, r24	; 0x02
	SerialEnviaChars(2, confirmacao); // Envia "CO"
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5f       	subi	r22, 0xFF	; 255
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 90 0b 	call	0x1720	; 0x1720 <SerialEnviaChars>
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <__vector_11>:
	PORTB &= ~(1 << LED_PIN); // Garante que o LED esteja desligado
	alerta_led = 0; // Desliga o alerta
	timer_count = 0;
}

ISR(TIMER1_COMPA_vect) {
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	2f 93       	push	r18
     4c8:	3f 93       	push	r19
     4ca:	4f 93       	push	r20
     4cc:	5f 93       	push	r21
     4ce:	6f 93       	push	r22
     4d0:	7f 93       	push	r23
     4d2:	8f 93       	push	r24
     4d4:	9f 93       	push	r25
     4d6:	af 93       	push	r26
     4d8:	bf 93       	push	r27
     4da:	ef 93       	push	r30
     4dc:	ff 93       	push	r31
	timer_count++;
     4de:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <timer_count>
     4e2:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <timer_count+0x1>
     4e6:	a0 91 95 03 	lds	r26, 0x0395	; 0x800395 <timer_count+0x2>
     4ea:	b0 91 96 03 	lds	r27, 0x0396	; 0x800396 <timer_count+0x3>
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	a1 1d       	adc	r26, r1
     4f2:	b1 1d       	adc	r27, r1
     4f4:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <timer_count>
     4f8:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <timer_count+0x1>
     4fc:	a0 93 95 03 	sts	0x0395, r26	; 0x800395 <timer_count+0x2>
     500:	b0 93 96 03 	sts	0x0396, r27	; 0x800396 <timer_count+0x3>

	// Verifica período de alerta
	if (timer_count >= TIMEOUT_ALERTA && timer_count < TIMEOUT_TOTAL) {
     504:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <timer_count>
     508:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <timer_count+0x1>
     50c:	a0 91 95 03 	lds	r26, 0x0395	; 0x800395 <timer_count+0x2>
     510:	b0 91 96 03 	lds	r27, 0x0396	; 0x800396 <timer_count+0x3>
     514:	80 35       	cpi	r24, 0x50	; 80
     516:	96 44       	sbci	r25, 0x46	; 70
     518:	a1 05       	cpc	r26, r1
     51a:	b1 05       	cpc	r27, r1
     51c:	a0 f1       	brcs	.+104    	; 0x586 <__vector_11+0xca>
     51e:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <timer_count>
     522:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <timer_count+0x1>
     526:	a0 91 95 03 	lds	r26, 0x0395	; 0x800395 <timer_count+0x2>
     52a:	b0 91 96 03 	lds	r27, 0x0396	; 0x800396 <timer_count+0x3>
     52e:	80 33       	cpi	r24, 0x30	; 48
     530:	95 47       	sbci	r25, 0x75	; 117
     532:	a1 05       	cpc	r26, r1
     534:	b1 05       	cpc	r27, r1
     536:	38 f5       	brcc	.+78     	; 0x586 <__vector_11+0xca>
		alerta_led = 1;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <alerta_led>

		// Pisca o LED 2 vezes por segundo
		if (timer_count % INTERVALO_PISCA == 0) {
     53e:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <timer_count>
     542:	70 91 94 03 	lds	r23, 0x0394	; 0x800394 <timer_count+0x1>
     546:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <timer_count+0x2>
     54a:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <timer_count+0x3>
     54e:	2a ef       	ldi	r18, 0xFA	; 250
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__udivmodsi4>
     55a:	67 2b       	or	r22, r23
     55c:	68 2b       	or	r22, r24
     55e:	69 2b       	or	r22, r25
     560:	91 f4       	brne	.+36     	; 0x586 <__vector_11+0xca>
			led_state = !led_state;
     562:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <led_state>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	91 11       	cpse	r25, r1
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <led_state>
			if (led_state) {
     570:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <led_state>
     574:	88 23       	and	r24, r24
     576:	21 f0       	breq	.+8      	; 0x580 <__vector_11+0xc4>
				PORTB |= (1 << LED_PIN); // Liga LED
     578:	85 b1       	in	r24, 0x05	; 5
     57a:	80 61       	ori	r24, 0x10	; 16
     57c:	85 b9       	out	0x05, r24	; 5
     57e:	03 c0       	rjmp	.+6      	; 0x586 <__vector_11+0xca>
				} else {
				PORTB &= ~(1 << LED_PIN); // Desliga LED
     580:	85 b1       	in	r24, 0x05	; 5
     582:	8f 7e       	andi	r24, 0xEF	; 239
     584:	85 b9       	out	0x05, r24	; 5
			}
		}
	}

	// Timeout completo (30 segundos)
	if (timer_count >= TIMEOUT_TOTAL) {
     586:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <timer_count>
     58a:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <timer_count+0x1>
     58e:	a0 91 95 03 	lds	r26, 0x0395	; 0x800395 <timer_count+0x2>
     592:	b0 91 96 03 	lds	r27, 0x0396	; 0x800396 <timer_count+0x3>
     596:	80 33       	cpi	r24, 0x30	; 48
     598:	95 47       	sbci	r25, 0x75	; 117
     59a:	a1 05       	cpc	r26, r1
     59c:	b1 05       	cpc	r27, r1
     59e:	a0 f0       	brcs	.+40     	; 0x5c8 <__vector_11+0x10c>
		enviar_confirmacao_operacional(); // Envia "CO"
     5a0:	0e 94 49 02 	call	0x492	; 0x492 <enviar_confirmacao_operacional>
		finalizar_sessao(); // Encerra a sessão
     5a4:	0e 94 19 0b 	call	0x1632	; 0x1632 <finalizar_sessao>
		timer_count = 0; // Reseta contador
     5a8:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <timer_count>
     5ac:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <timer_count+0x1>
     5b0:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <timer_count+0x2>
     5b4:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <timer_count+0x3>
		alerta_led = 0; // Desliga alerta
     5b8:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <alerta_led>
		PORTB &= ~(1 << LED_PIN); // Desliga LED
     5bc:	85 b1       	in	r24, 0x05	; 5
     5be:	8f 7e       	andi	r24, 0xEF	; 239
     5c0:	85 b9       	out	0x05, r24	; 5
		setBlocked(1); // Bloqueia sistema por timeout
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <setBlocked>
	}
}
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	7f 91       	pop	r23
     5d6:	6f 91       	pop	r22
     5d8:	5f 91       	pop	r21
     5da:	4f 91       	pop	r20
     5dc:	3f 91       	pop	r19
     5de:	2f 91       	pop	r18
     5e0:	0f 90       	pop	r0
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	0f 90       	pop	r0
     5e6:	1f 90       	pop	r1
     5e8:	18 95       	reti

000005ea <resetar_timeout>:
	SerialEnviaChars(2, confirmacao); // Envia "CO"
}

// Reseta contador de timeout e estado do LED
void resetar_timeout() {
	timer_count = 0;
     5ea:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <timer_count>
     5ee:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <timer_count+0x1>
     5f2:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <timer_count+0x2>
     5f6:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <timer_count+0x3>
	alerta_led = 0;
     5fa:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <alerta_led>
	PORTB &= ~(1 << LED_PIN); // Desliga LED
     5fe:	85 b1       	in	r24, 0x05	; 5
     600:	8f 7e       	andi	r24, 0xEF	; 239
     602:	85 b9       	out	0x05, r24	; 5
     604:	08 95       	ret

00000606 <habilitar_timer_timeout>:
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // Modo CTC, prescaler 64
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz / 64 / 250 = 1ms)
}

void habilitar_timer_timeout() {
	TIMSK1 |= (1 << OCIE1A); // Habilita interrupção por comparação
     606:	ef e6       	ldi	r30, 0x6F	; 111
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	82 60       	ori	r24, 0x02	; 2
     60e:	80 83       	st	Z, r24
	resetar_timeout(); // Sempre reseta o timeout ao habilitar
     610:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
     614:	08 95       	ret

00000616 <aguardar_desbloqueio>:
	PORTB &= ~(1 << LED_PIN); // Desliga LED
}

// Aguarda o desbloqueio do terminal
void aguardar_desbloqueio() {
	LCD_limpar();
     616:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
	LCD_Escrever_Linha(0, 4, "FORA  DE"); // Exibe "FORA DE OPERAÇÃO"
     61a:	4c e5       	ldi	r20, 0x5C	; 92
     61c:	51 e0       	ldi	r21, 0x01	; 1
     61e:	64 e0       	ldi	r22, 0x04	; 4
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 4, "OPERACAO");
     626:	45 e6       	ldi	r20, 0x65	; 101
     628:	51 e0       	ldi	r21, 0x01	; 1
     62a:	64 e0       	ldi	r22, 0x04	; 4
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
	while (isBlocked()) { // Espera sistema ser desbloqueado
     632:	12 c0       	rjmp	.+36     	; 0x658 <aguardar_desbloqueio+0x42>
		if (serial_response_pending) {
     634:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <serial_response_pending>
     638:	88 23       	and	r24, r24
     63a:	51 f0       	breq	.+20     	; 0x650 <aguardar_desbloqueio+0x3a>
			SerialEnviaChars(2, serial_response_char);
     63c:	66 ea       	ldi	r22, 0xA6	; 166
     63e:	73 e0       	ldi	r23, 0x03	; 3
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 90 0b 	call	0x1720	; 0x1720 <SerialEnviaChars>
			serial_response_pending = 0; // Limpa a flag
     648:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <serial_response_pending>
			resetar_timeout(); // Reseta timeout após interação serial (desbloqueio)
     64c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
		}
		delay1ms(200); // Pequeno atraso
     650:	88 ec       	ldi	r24, 0xC8	; 200
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
// Aguarda o desbloqueio do terminal
void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 4, "FORA  DE"); // Exibe "FORA DE OPERAÇÃO"
	LCD_Escrever_Linha(1, 4, "OPERACAO");
	while (isBlocked()) { // Espera sistema ser desbloqueado
     658:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     65c:	81 11       	cpse	r24, r1
     65e:	ea cf       	rjmp	.-44     	; 0x634 <aguardar_desbloqueio+0x1e>
			serial_response_pending = 0; // Limpa a flag
			resetar_timeout(); // Reseta timeout após interação serial (desbloqueio)
		}
		delay1ms(200); // Pequeno atraso
	}
	LCD_limpar(); // Limpa LCD após desbloqueio
     660:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     664:	08 95       	ret

00000666 <main>:
}

int main(void) {
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	66 97       	sbiw	r28, 0x16	; 22
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     67a:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <prepara_teclado>
	LCD_iniciar();
     67e:	0e 94 93 00 	call	0x126	; 0x126 <LCD_iniciar>
	initUART();
     682:	0e 94 81 0b 	call	0x1702	; 0x1702 <initUART>
	configurar_timer(); // Apenas configura, não habilita a interrupção ainda
     686:	0e 94 24 02 	call	0x448	; 0x448 <configurar_timer>
	sei(); // Habilita interrupções globais
     68a:	78 94       	sei

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
     68c:	88 e0       	ldi	r24, 0x08	; 8
     68e:	e0 e0       	ldi	r30, 0x00	; 0
     690:	f1 e0       	ldi	r31, 0x01	; 1
     692:	de 01       	movw	r26, r28
     694:	1f 96       	adiw	r26, 0x0f	; 15
     696:	01 90       	ld	r0, Z+
     698:	0d 92       	st	X+, r0
     69a:	8a 95       	dec	r24
     69c:	e1 f7       	brne	.-8      	; 0x696 <main+0x30>
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	17 c0       	rjmp	.+46     	; 0x6d0 <main+0x6a>
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break; // Sai se for bloqueado
			}
			if (!isBlocked()) {
				estado = ESTADO_CODIGO;
     6a2:	01 e0       	ldi	r16, 0x01	; 1
     6a4:	15 c0       	rjmp	.+42     	; 0x6d0 <main+0x6a>
			ler_codigo_aluno(codigo_aluno); // O cliente deve digitar seu código de aluno (6 dígitos)
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_SENHA;
     6a6:	02 e0       	ldi	r16, 0x02	; 2
     6a8:	13 c0       	rjmp	.+38     	; 0x6d0 <main+0x6a>
			ler_senha(senha_aluno);
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_VALIDACAO;
     6aa:	03 e0       	ldi	r16, 0x03	; 3
     6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <main+0x6a>
						delay1ms(1000);
						estado = ESTADO_TELA_INICIAL;
						break;
						} else {
						switch (tecla) {
							case '1': estado = ESTADO_SAQUE; break;
     6ae:	06 e0       	ldi	r16, 0x06	; 6
     6b0:	0f c0       	rjmp	.+30     	; 0x6d0 <main+0x6a>
			LCD_limpar();
			LCD_Escrever_Linha(0, 0, "1-Manualmente");
			LCD_Escrever_Linha(1, 0, "2-Codigo de barras");
			while(1) {
				if (isBlocked()) {
					estado = ESTADO_TELA_INICIAL;
     6b2:	00 e0       	ldi	r16, 0x00	; 0
     6b4:	0d c0       	rjmp	.+26     	; 0x6d0 <main+0x6a>
					break;
				}
				tecla = varredura();
				if (tecla == '1') {
					estado = ESTADO_PAGAMENTO_MANUAL;
     6b6:	07 e0       	ldi	r16, 0x07	; 7
     6b8:	0b c0       	rjmp	.+22     	; 0x6d0 <main+0x6a>
					break;
					} else if (tecla == '2') {
					estado = ESTADO_PAGAMENTO_BARCODE;
     6ba:	08 e0       	ldi	r16, 0x08	; 8
     6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <main+0x6a>
					break;
					} else if (tecla == '*') { // Cancel/Back
					estado = ESTADO_MENU;
     6be:	04 e0       	ldi	r16, 0x04	; 4
     6c0:	07 c0       	rjmp	.+14     	; 0x6d0 <main+0x6a>
			realizar_saque(); // Saque (máximo de R$1200,00)
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6c2:	04 e0       	ldi	r16, 0x04	; 4
     6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <main+0x6a>
			realizar_pagamento_manual();
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6c6:	04 e0       	ldi	r16, 0x04	; 4
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <main+0x6a>
			realizar_pagamento_barcode();
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6ca:	04 e0       	ldi	r16, 0x04	; 4
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <main+0x6a>
			consultar_saldo();
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6ce:	04 e0       	ldi	r16, 0x04	; 4

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		// Gerencia respostas da ISR e bloqueio (crítico)
		if (serial_response_pending) {
     6d0:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <serial_response_pending>
     6d4:	88 23       	and	r24, r24
     6d6:	51 f0       	breq	.+20     	; 0x6ec <main+0x86>
			SerialEnviaChars(2, serial_response_char);
     6d8:	66 ea       	ldi	r22, 0xA6	; 166
     6da:	73 e0       	ldi	r23, 0x03	; 3
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 90 0b 	call	0x1720	; 0x1720 <SerialEnviaChars>
			serial_response_pending = 0; // Limpa a flag após envio
     6e4:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <serial_response_pending>
			resetar_timeout(); // Reseta timeout após interação serial (útil se o timer estiver ativo)
     6e8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
		}

		// Sistema bloqueado por comando ST, SH ou timeout
		if (isBlocked()) {
     6ec:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     6f0:	88 23       	and	r24, r24
     6f2:	31 f0       	breq	.+12     	; 0x700 <main+0x9a>
			desabilitar_timer_timeout(); // Garante que o timer esteja desabilitado
     6f4:	0e 94 36 02 	call	0x46c	; 0x46c <desabilitar_timer_timeout>
			aguardar_desbloqueio();
     6f8:	0e 94 0b 03 	call	0x616	; 0x616 <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     6fc:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     6fe:	e8 cf       	rjmp	.-48     	; 0x6d0 <main+0x6a>
		}
		
		switch (estado) {
     700:	80 2f       	mov	r24, r16
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	8a 30       	cpi	r24, 0x0A	; 10
     706:	91 05       	cpc	r25, r1
     708:	18 f7       	brcc	.-58     	; 0x6d0 <main+0x6a>
     70a:	fc 01       	movw	r30, r24
     70c:	ec 5c       	subi	r30, 0xCC	; 204
     70e:	ff 4f       	sbci	r31, 0xFF	; 255
     710:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			desabilitar_timer_timeout(); // Desabilita o timer na tela inicial
     714:	0e 94 36 02 	call	0x46c	; 0x46c <desabilitar_timer_timeout>
			LCD_limpar();
     718:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
			mensagem_Inicial();
     71c:	0e 94 5d 00 	call	0xba	; 0xba <mensagem_Inicial>
			while (varredura() == 0) {
     720:	04 c0       	rjmp	.+8      	; 0x72a <main+0xc4>
				if (isBlocked()) break; // Sai se for bloqueado
     722:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     726:	81 11       	cpse	r24, r1
     728:	04 c0       	rjmp	.+8      	; 0x732 <main+0xcc>
		switch (estado) {
			case ESTADO_TELA_INICIAL:
			desabilitar_timer_timeout(); // Desabilita o timer na tela inicial
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     72a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
     72e:	88 23       	and	r24, r24
     730:	c1 f3       	breq	.-16     	; 0x722 <main+0xbc>
				if (isBlocked()) break; // Sai se for bloqueado
			}
			if (!isBlocked()) {
     732:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     736:	88 23       	and	r24, r24
     738:	09 f4       	brne	.+2      	; 0x73c <main+0xd6>
     73a:	b3 cf       	rjmp	.-154    	; 0x6a2 <main+0x3c>
     73c:	c9 cf       	rjmp	.-110    	; 0x6d0 <main+0x6a>
				estado = ESTADO_CODIGO;
			}
			break;

			case ESTADO_CODIGO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     73e:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			ler_codigo_aluno(codigo_aluno); // O cliente deve digitar seu código de aluno (6 dígitos)
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <ler_codigo_aluno>
			if (isBlocked()) {
     74a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     74e:	88 23       	and	r24, r24
     750:	09 f4       	brne	.+2      	; 0x754 <main+0xee>
     752:	a9 cf       	rjmp	.-174    	; 0x6a6 <main+0x40>
				estado = ESTADO_TELA_INICIAL;
     754:	00 e0       	ldi	r16, 0x00	; 0
     756:	bc cf       	rjmp	.-136    	; 0x6d0 <main+0x6a>
			}
			estado = ESTADO_SENHA;
			break;

			case ESTADO_SENHA:
			habilitar_timer_timeout(); // Habilita o timer aqui
     758:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			ler_senha(senha_aluno);
     75c:	ce 01       	movw	r24, r28
     75e:	08 96       	adiw	r24, 0x08	; 8
     760:	0e 94 42 01 	call	0x284	; 0x284 <ler_senha>
			if (isBlocked()) {
     764:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     768:	88 23       	and	r24, r24
     76a:	09 f4       	brne	.+2      	; 0x76e <main+0x108>
     76c:	9e cf       	rjmp	.-196    	; 0x6aa <main+0x44>
				estado = ESTADO_TELA_INICIAL;
     76e:	00 e0       	ldi	r16, 0x00	; 0
     770:	af cf       	rjmp	.-162    	; 0x6d0 <main+0x6a>
			}
			estado = ESTADO_VALIDACAO;
			break;

			case ESTADO_VALIDACAO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     772:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) { // O código será validado pelo servidor
     776:	be 01       	movw	r22, r28
     778:	68 5f       	subi	r22, 0xF8	; 248
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	ce 01       	movw	r24, r28
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	0e 94 89 01 	call	0x312	; 0x312 <validar_codigo_aluno>
     784:	89 2b       	or	r24, r25
     786:	a1 f0       	breq	.+40     	; 0x7b0 <main+0x14a>
				LCD_limpar();
     788:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "BEM VINDO(A)!");
     78c:	4e e6       	ldi	r20, 0x6E	; 110
     78e:	51 e0       	ldi	r21, 0x01	; 1
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "PROCESSANDO...");
     798:	4c e7       	ldi	r20, 0x7C	; 124
     79a:	51 e0       	ldi	r21, 0x01	; 1
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				delay1ms(2000);
     7a4:	80 ed       	ldi	r24, 0xD0	; 208
     7a6:	97 e0       	ldi	r25, 0x07	; 7
     7a8:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
				estado = ESTADO_MENU; // Após validado o cliente deve-se indicar as opções permitidas
     7ac:	04 e0       	ldi	r16, 0x04	; 4
     7ae:	90 cf       	rjmp	.-224    	; 0x6d0 <main+0x6a>
				} else {
				LCD_limpar();
     7b0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "CONTA INVALIDA!"); // Se o código não for válido o dispositivo exibe informação de conta inválida
     7b4:	4b e8       	ldi	r20, 0x8B	; 139
     7b6:	51 e0       	ldi	r21, 0x01	; 1
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "TENTE NOVAMENTE");
     7c0:	4b e9       	ldi	r20, 0x9B	; 155
     7c2:	51 e0       	ldi	r21, 0x01	; 1
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
				delay1ms(2000);
     7cc:	80 ed       	ldi	r24, 0xD0	; 208
     7ce:	97 e0       	ldi	r25, 0x07	; 7
     7d0:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
				estado = ESTADO_TELA_INICIAL; // E volta à tela inicial
     7d4:	00 e0       	ldi	r16, 0x00	; 0
     7d6:	7c cf       	rjmp	.-264    	; 0x6d0 <main+0x6a>
			}
			break;

			case ESTADO_MENU:
			habilitar_timer_timeout(); // Habilita o timer aqui
     7d8:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			LCD_limpar();
     7dc:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
			indice_menu = 0;
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     7e0:	4b ea       	ldi	r20, 0xAB	; 171
     7e2:	51 e0       	ldi	r21, 0x01	; 1
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes) {
				LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     7ec:	43 eb       	ldi	r20, 0xB3	; 179
     7ee:	51 e0       	ldi	r21, 0x01	; 1
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
			break;

			case ESTADO_MENU:
			habilitar_timer_timeout(); // Habilita o timer aqui
			LCD_limpar();
			indice_menu = 0;
     7f8:	e1 2c       	mov	r14, r1
     7fa:	f1 2c       	mov	r15, r1
				} else {
				LCD_Escrever_Linha(1, 0, " ");
			}

			while (1) {
				if (isBlocked()) break;
     7fc:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     800:	81 11       	cpse	r24, r1
     802:	66 cf       	rjmp	.-308    	; 0x6d0 <main+0x6a>

				tecla = varredura();
     804:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
     808:	18 2f       	mov	r17, r24
				if (tecla != 0) {
     80a:	88 23       	and	r24, r24
     80c:	b9 f3       	breq	.-18     	; 0x7fc <main+0x196>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
     80e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
					delay1ms(300); // Debounce
     812:	8c e2       	ldi	r24, 0x2C	; 44
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>

					if (tecla == 'B') { // Rolar para baixo
     81a:	12 34       	cpi	r17, 0x42	; 66
     81c:	c1 f5       	brne	.+112    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
						if (indice_menu < total_opcoes - 2) {
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	e8 16       	cp	r14, r24
     822:	f1 04       	cpc	r15, r1
     824:	5c f7       	brge	.-42     	; 0x7fc <main+0x196>
							indice_menu++;
     826:	67 01       	movw	r12, r14
     828:	9f ef       	ldi	r25, 0xFF	; 255
     82a:	c9 1a       	sub	r12, r25
     82c:	d9 0a       	sbc	r13, r25
							LCD_limpar();
     82e:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     832:	f6 01       	movw	r30, r12
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	8c 0f       	add	r24, r28
     83e:	9d 1f       	adc	r25, r29
     840:	e8 0f       	add	r30, r24
     842:	f9 1f       	adc	r31, r25
     844:	46 85       	ldd	r20, Z+14	; 0x0e
     846:	57 85       	ldd	r21, Z+15	; 0x0f
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
							if (indice_menu + 1 < total_opcoes) {
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	e9 0e       	add	r14, r25
     854:	f1 1c       	adc	r15, r1
     856:	84 e0       	ldi	r24, 0x04	; 4
     858:	e8 16       	cp	r14, r24
     85a:	f1 04       	cpc	r15, r1
     85c:	84 f4       	brge	.+32     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     85e:	ee 0c       	add	r14, r14
     860:	ff 1c       	adc	r15, r15
     862:	e1 e0       	ldi	r30, 0x01	; 1
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	ec 0f       	add	r30, r28
     868:	fd 1f       	adc	r31, r29
     86a:	ee 0d       	add	r30, r14
     86c:	ff 1d       	adc	r31, r15
     86e:	46 85       	ldd	r20, Z+14	; 0x0e
     870:	57 85       	ldd	r21, Z+15	; 0x0f
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
					delay1ms(300); // Debounce

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) {
							indice_menu++;
     87a:	76 01       	movw	r14, r12
     87c:	bf cf       	rjmp	.-130    	; 0x7fc <main+0x196>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							if (indice_menu + 1 < total_opcoes) {
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
     87e:	4f eb       	ldi	r20, 0xBF	; 191
     880:	51 e0       	ldi	r21, 0x01	; 1
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
					delay1ms(300); // Debounce

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) {
							indice_menu++;
     88a:	76 01       	movw	r14, r12
     88c:	b7 cf       	rjmp	.-146    	; 0x7fc <main+0x196>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
     88e:	11 34       	cpi	r17, 0x41	; 65
     890:	49 f5       	brne	.+82     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
						if (indice_menu > 0) {
     892:	1e 14       	cp	r1, r14
     894:	1f 04       	cpc	r1, r15
     896:	0c f0       	brlt	.+2      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
     898:	b1 cf       	rjmp	.-158    	; 0x7fc <main+0x196>
							indice_menu--;
     89a:	67 01       	movw	r12, r14
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	c9 1a       	sub	r12, r25
     8a0:	d1 08       	sbc	r13, r1
							LCD_limpar();
     8a2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     8a6:	f6 01       	movw	r30, r12
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	8c 0f       	add	r24, r28
     8b2:	9d 1f       	adc	r25, r29
     8b4:	e8 0f       	add	r30, r24
     8b6:	f9 1f       	adc	r31, r25
     8b8:	46 85       	ldd	r20, Z+14	; 0x0e
     8ba:	57 85       	ldd	r21, Z+15	; 0x0f
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     8c4:	ee 0c       	add	r14, r14
     8c6:	ff 1c       	adc	r15, r15
     8c8:	e1 e0       	ldi	r30, 0x01	; 1
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	ec 0f       	add	r30, r28
     8ce:	fd 1f       	adc	r31, r29
     8d0:	ee 0d       	add	r30, r14
     8d2:	ff 1d       	adc	r31, r15
     8d4:	46 85       	ldd	r20, Z+14	; 0x0e
     8d6:	57 85       	ldd	r21, Z+15	; 0x0f
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
						if (indice_menu > 0) {
							indice_menu--;
     8e0:	76 01       	movw	r14, r12
     8e2:	8c cf       	rjmp	.-232    	; 0x7fc <main+0x196>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
						}
						} else if (tecla == '*') { // Voltar para tela inicial
     8e4:	1a 32       	cpi	r17, 0x2A	; 42
     8e6:	71 f4       	brne	.+28     	; 0x904 <__stack+0x5>
						LCD_limpar();
     8e8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "VOLTANDO...");
     8ec:	41 ec       	ldi	r20, 0xC1	; 193
     8ee:	51 e0       	ldi	r21, 0x01	; 1
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
						delay1ms(1000);
     8f8:	88 ee       	ldi	r24, 0xE8	; 232
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
						estado = ESTADO_TELA_INICIAL;
     900:	00 e0       	ldi	r16, 0x00	; 0
						break;
     902:	e6 ce       	rjmp	.-564    	; 0x6d0 <main+0x6a>
						} else {
						switch (tecla) {
     904:	12 33       	cpi	r17, 0x32	; 50
     906:	51 f0       	breq	.+20     	; 0x91c <__stack+0x1d>
     908:	20 f4       	brcc	.+8      	; 0x912 <__stack+0x13>
     90a:	11 33       	cpi	r17, 0x31	; 49
     90c:	09 f4       	brne	.+2      	; 0x910 <__stack+0x11>
     90e:	cf ce       	rjmp	.-610    	; 0x6ae <main+0x48>
     910:	df ce       	rjmp	.-578    	; 0x6d0 <main+0x6a>
     912:	13 33       	cpi	r17, 0x33	; 51
     914:	29 f0       	breq	.+10     	; 0x920 <__stack+0x21>
     916:	14 33       	cpi	r17, 0x34	; 52
     918:	29 f0       	breq	.+10     	; 0x924 <__stack+0x25>
     91a:	da ce       	rjmp	.-588    	; 0x6d0 <main+0x6a>
							case '1': estado = ESTADO_SAQUE; break;
							case '2': estado = ESTADO_TIPO_PAGAMENTO; break; // New state for payment type
     91c:	05 e0       	ldi	r16, 0x05	; 5
     91e:	d8 ce       	rjmp	.-592    	; 0x6d0 <main+0x6a>
							case '3': estado = ESTADO_SALDO; break;
     920:	09 e0       	ldi	r16, 0x09	; 9
     922:	d6 ce       	rjmp	.-596    	; 0x6d0 <main+0x6a>
							case '4': // Sair
							finalizar_sessao();
     924:	0e 94 19 0b 	call	0x1632	; 0x1632 <finalizar_sessao>
							estado = ESTADO_TELA_INICIAL;
     928:	00 e0       	ldi	r16, 0x00	; 0
							break;
     92a:	d2 ce       	rjmp	.-604    	; 0x6d0 <main+0x6a>
				}
			}
			break;

			case ESTADO_TIPO_PAGAMENTO:
			habilitar_timer_timeout();
     92c:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			LCD_limpar();
     930:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "1-Manualmente");
     934:	4d ec       	ldi	r20, 0xCD	; 205
     936:	51 e0       	ldi	r21, 0x01	; 1
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "2-Codigo de barras");
     940:	4b ed       	ldi	r20, 0xDB	; 219
     942:	51 e0       	ldi	r21, 0x01	; 1
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
			while(1) {
				if (isBlocked()) {
     94c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     950:	81 11       	cpse	r24, r1
     952:	af ce       	rjmp	.-674    	; 0x6b2 <main+0x4c>
					estado = ESTADO_TELA_INICIAL;
					break;
				}
				tecla = varredura();
     954:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
				if (tecla == '1') {
     958:	81 33       	cpi	r24, 0x31	; 49
     95a:	09 f4       	brne	.+2      	; 0x95e <__stack+0x5f>
     95c:	ac ce       	rjmp	.-680    	; 0x6b6 <main+0x50>
					estado = ESTADO_PAGAMENTO_MANUAL;
					break;
					} else if (tecla == '2') {
     95e:	82 33       	cpi	r24, 0x32	; 50
     960:	09 f4       	brne	.+2      	; 0x964 <__stack+0x65>
     962:	ab ce       	rjmp	.-682    	; 0x6ba <main+0x54>
					estado = ESTADO_PAGAMENTO_BARCODE;
					break;
					} else if (tecla == '*') { // Cancel/Back
     964:	8a 32       	cpi	r24, 0x2A	; 42
     966:	09 f4       	brne	.+2      	; 0x96a <__stack+0x6b>
     968:	aa ce       	rjmp	.-684    	; 0x6be <main+0x58>
					estado = ESTADO_MENU;
					break;
				}
				delay1ms(100);
     96a:	84 e6       	ldi	r24, 0x64	; 100
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
			}
     972:	ec cf       	rjmp	.-40     	; 0x94c <__stack+0x4d>
			break;

			case ESTADO_SAQUE:
			habilitar_timer_timeout(); // Habilita o timer aqui
     974:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			realizar_saque(); // Saque (máximo de R$1200,00)
     978:	0e 94 49 06 	call	0xc92	; 0xc92 <realizar_saque>
			if (isBlocked()) {
     97c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     980:	88 23       	and	r24, r24
     982:	09 f4       	brne	.+2      	; 0x986 <__stack+0x87>
     984:	9e ce       	rjmp	.-708    	; 0x6c2 <main+0x5c>
				estado = ESTADO_TELA_INICIAL;
     986:	00 e0       	ldi	r16, 0x00	; 0
     988:	a3 ce       	rjmp	.-698    	; 0x6d0 <main+0x6a>
			}
			estado = ESTADO_MENU;
			break;

			case ESTADO_PAGAMENTO_MANUAL:
			habilitar_timer_timeout(); // Habilita o timer aqui
     98a:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			realizar_pagamento_manual();
     98e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <realizar_pagamento_manual>
			if (isBlocked()) {
     992:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     996:	88 23       	and	r24, r24
     998:	09 f4       	brne	.+2      	; 0x99c <__stack+0x9d>
     99a:	95 ce       	rjmp	.-726    	; 0x6c6 <main+0x60>
				estado = ESTADO_TELA_INICIAL;
     99c:	00 e0       	ldi	r16, 0x00	; 0
     99e:	98 ce       	rjmp	.-720    	; 0x6d0 <main+0x6a>
			}
			estado = ESTADO_MENU;
			break;

			case ESTADO_PAGAMENTO_BARCODE:
			habilitar_timer_timeout(); // Habilita o timer aqui
     9a0:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			realizar_pagamento_barcode();
     9a4:	0e 94 9a 08 	call	0x1134	; 0x1134 <realizar_pagamento_barcode>
			if (isBlocked()) {
     9a8:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     9ac:	88 23       	and	r24, r24
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	8c ce       	rjmp	.-744    	; 0x6ca <main+0x64>
				estado = ESTADO_TELA_INICIAL;
     9b2:	00 e0       	ldi	r16, 0x00	; 0
     9b4:	8d ce       	rjmp	.-742    	; 0x6d0 <main+0x6a>
			}
			estado = ESTADO_MENU;
			break;

			case ESTADO_SALDO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     9b6:	0e 94 03 03 	call	0x606	; 0x606 <habilitar_timer_timeout>
			consultar_saldo();
     9ba:	0e 94 78 07 	call	0xef0	; 0xef0 <consultar_saldo>
			if (isBlocked()) {
     9be:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     9c2:	88 23       	and	r24, r24
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	83 ce       	rjmp	.-762    	; 0x6ce <main+0x68>
				estado = ESTADO_TELA_INICIAL;
     9c8:	00 e0       	ldi	r16, 0x00	; 0
     9ca:	82 ce       	rjmp	.-764    	; 0x6d0 <main+0x6a>

000009cc <confirmar_senha>:
	if ((barcode_dv_char - '0') != expected_dv) {
		return 0;
	}

	return 1;
}
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	27 97       	sbiw	r28, 0x07	; 7
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	6c 01       	movw	r12, r24
     9ec:	fe 01       	movw	r30, r28
     9ee:	31 96       	adiw	r30, 0x01	; 1
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	df 01       	movw	r26, r30
     9f4:	1d 92       	st	X+, r1
     9f6:	8a 95       	dec	r24
     9f8:	e9 f7       	brne	.-6      	; 0x9f4 <confirmar_senha+0x28>
     9fa:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     9fe:	4d ef       	ldi	r20, 0xFD	; 253
     a00:	51 e0       	ldi	r21, 0x01	; 1
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     a0a:	4d e2       	ldi	r20, 0x2D	; 45
     a0c:	51 e0       	ldi	r21, 0x01	; 1
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     a16:	e1 2c       	mov	r14, r1
     a18:	f1 2c       	mov	r15, r1
     a1a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     a1e:	18 2f       	mov	r17, r24
     a20:	88 23       	and	r24, r24
     a22:	a1 f0       	breq	.+40     	; 0xa4c <confirmar_senha+0x80>
     a24:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     a28:	4f e0       	ldi	r20, 0x0F	; 15
     a2a:	52 e0       	ldi	r21, 0x02	; 2
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     a34:	4c e1       	ldi	r20, 0x1C	; 28
     a36:	52 e0       	ldi	r21, 0x02	; 2
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     a40:	80 ed       	ldi	r24, 0xD0	; 208
     a42:	97 e0       	ldi	r25, 0x07	; 7
     a44:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     a48:	10 e0       	ldi	r17, 0x00	; 0
     a4a:	71 c0       	rjmp	.+226    	; 0xb2e <confirmar_senha+0x162>
     a4c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
     a50:	90 ed       	ldi	r25, 0xD0	; 208
     a52:	98 0f       	add	r25, r24
     a54:	9a 30       	cpi	r25, 0x0A	; 10
     a56:	c8 f4       	brcc	.+50     	; 0xa8a <confirmar_senha+0xbe>
     a58:	b6 e0       	ldi	r27, 0x06	; 6
     a5a:	eb 16       	cp	r14, r27
     a5c:	f1 04       	cpc	r15, r1
     a5e:	ac f4       	brge	.+42     	; 0xa8a <confirmar_senha+0xbe>
     a60:	e1 e0       	ldi	r30, 0x01	; 1
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	ec 0f       	add	r30, r28
     a66:	fd 1f       	adc	r31, r29
     a68:	ee 0d       	add	r30, r14
     a6a:	ff 1d       	adc	r31, r15
     a6c:	80 83       	st	Z, r24
     a6e:	4a e2       	ldi	r20, 0x2A	; 42
     a70:	52 e0       	ldi	r21, 0x02	; 2
     a72:	6e 2d       	mov	r22, r14
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	e8 1a       	sub	r14, r24
     a7e:	f8 0a       	sbc	r15, r24
     a80:	88 ec       	ldi	r24, 0xC8	; 200
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     a88:	c8 cf       	rjmp	.-112    	; 0xa1a <confirmar_senha+0x4e>
     a8a:	83 32       	cpi	r24, 0x23	; 35
     a8c:	c9 f5       	brne	.+114    	; 0xb00 <confirmar_senha+0x134>
     a8e:	e1 e0       	ldi	r30, 0x01	; 1
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	ec 0f       	add	r30, r28
     a94:	fd 1f       	adc	r31, r29
     a96:	ee 0d       	add	r30, r14
     a98:	ff 1d       	adc	r31, r15
     a9a:	10 82       	st	Z, r1
     a9c:	b6 01       	movw	r22, r12
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <strcmp>
     aa6:	89 2b       	or	r24, r25
     aa8:	09 f4       	brne	.+2      	; 0xaac <confirmar_senha+0xe0>
     aaa:	40 c0       	rjmp	.+128    	; 0xb2c <confirmar_senha+0x160>
     aac:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     ab0:	4c e2       	ldi	r20, 0x2C	; 44
     ab2:	52 e0       	ldi	r21, 0x02	; 2
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     abc:	4d e3       	ldi	r20, 0x3D	; 61
     abe:	52 e0       	ldi	r21, 0x02	; 2
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ac8:	80 ed       	ldi	r24, 0xD0	; 208
     aca:	97 e0       	ldi	r25, 0x07	; 7
     acc:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     ad0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     ad4:	4d ef       	ldi	r20, 0xFD	; 253
     ad6:	51 e0       	ldi	r21, 0x01	; 1
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ae0:	4d e2       	ldi	r20, 0x2D	; 45
     ae2:	51 e0       	ldi	r21, 0x01	; 1
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     aec:	fe 01       	movw	r30, r28
     aee:	31 96       	adiw	r30, 0x01	; 1
     af0:	87 e0       	ldi	r24, 0x07	; 7
     af2:	df 01       	movw	r26, r30
     af4:	1d 92       	st	X+, r1
     af6:	8a 95       	dec	r24
     af8:	e9 f7       	brne	.-6      	; 0xaf4 <confirmar_senha+0x128>
     afa:	e1 2c       	mov	r14, r1
     afc:	f1 2c       	mov	r15, r1
     afe:	8d cf       	rjmp	.-230    	; 0xa1a <confirmar_senha+0x4e>
     b00:	8a 32       	cpi	r24, 0x2A	; 42
     b02:	09 f0       	breq	.+2      	; 0xb06 <confirmar_senha+0x13a>
     b04:	8a cf       	rjmp	.-236    	; 0xa1a <confirmar_senha+0x4e>
     b06:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     b0a:	4d e4       	ldi	r20, 0x4D	; 77
     b0c:	52 e0       	ldi	r21, 0x02	; 2
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b16:	46 e5       	ldi	r20, 0x56	; 86
     b18:	52 e0       	ldi	r21, 0x02	; 2
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b22:	80 ed       	ldi	r24, 0xD0	; 208
     b24:	97 e0       	ldi	r25, 0x07	; 7
     b26:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <confirmar_senha+0x162>
     b2c:	11 e0       	ldi	r17, 0x01	; 1
     b2e:	81 2f       	mov	r24, r17
     b30:	27 96       	adiw	r28, 0x07	; 7
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	08 95       	ret

00000b4c <perguntar_comprovante>:
     b4c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     b50:	40 e6       	ldi	r20, 0x60	; 96
     b52:	52 e0       	ldi	r21, 0x02	; 2
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b5c:	44 e7       	ldi	r20, 0x74	; 116
     b5e:	52 e0       	ldi	r21, 0x02	; 2
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b68:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     b6c:	88 23       	and	r24, r24
     b6e:	99 f0       	breq	.+38     	; 0xb96 <perguntar_comprovante+0x4a>
     b70:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     b74:	4f e0       	ldi	r20, 0x0F	; 15
     b76:	52 e0       	ldi	r21, 0x02	; 2
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b80:	4c e1       	ldi	r20, 0x1C	; 28
     b82:	52 e0       	ldi	r21, 0x02	; 2
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     b8c:	80 ed       	ldi	r24, 0xD0	; 208
     b8e:	97 e0       	ldi	r25, 0x07	; 7
     b90:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     b94:	08 95       	ret
     b96:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
     b9a:	81 33       	cpi	r24, 0x31	; 49
     b9c:	99 f4       	brne	.+38     	; 0xbc4 <perguntar_comprovante+0x78>
     b9e:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	52 e0       	ldi	r21, 0x02	; 2
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     bae:	4f e8       	ldi	r20, 0x8F	; 143
     bb0:	52 e0       	ldi	r21, 0x02	; 2
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     bba:	80 ed       	ldi	r24, 0xD0	; 208
     bbc:	97 e0       	ldi	r25, 0x07	; 7
     bbe:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     bc2:	08 95       	ret
     bc4:	82 33       	cpi	r24, 0x32	; 50
     bc6:	81 f6       	brne	.-96     	; 0xb68 <perguntar_comprovante+0x1c>
     bc8:	08 95       	ret

00000bca <enviar_mensagem_saque>:
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	bc 01       	movw	r22, r24
     be0:	ed b6       	in	r14, 0x3d	; 61
     be2:	fe b6       	in	r15, 0x3e	; 62
     be4:	fc 01       	movw	r30, r24
     be6:	01 90       	ld	r0, Z+
     be8:	00 20       	and	r0, r0
     bea:	e9 f7       	brne	.-6      	; 0xbe6 <enviar_mensagem_saque+0x1c>
     bec:	31 97       	sbiw	r30, 0x01	; 1
     bee:	af 01       	movw	r20, r30
     bf0:	48 1b       	sub	r20, r24
     bf2:	59 0b       	sbc	r21, r25
     bf4:	6a 01       	movw	r12, r20
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	c8 0e       	add	r12, r24
     bfa:	d1 1c       	adc	r13, r1
     bfc:	ed b7       	in	r30, 0x3d	; 61
     bfe:	fe b7       	in	r31, 0x3e	; 62
     c00:	ec 19       	sub	r30, r12
     c02:	fd 09       	sbc	r31, r13
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	fe bf       	out	0x3e, r31	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	ed bf       	out	0x3d, r30	; 61
     c0e:	0d b7       	in	r16, 0x3d	; 61
     c10:	1e b7       	in	r17, 0x3e	; 62
     c12:	0f 5f       	subi	r16, 0xFF	; 255
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	83 e4       	ldi	r24, 0x43	; 67
     c18:	81 83       	std	Z+1, r24	; 0x01
     c1a:	83 e5       	ldi	r24, 0x53	; 83
     c1c:	f8 01       	movw	r30, r16
     c1e:	81 83       	std	Z+1, r24	; 0x01
     c20:	42 83       	std	Z+2, r20	; 0x02
     c22:	8d b7       	in	r24, 0x3d	; 61
     c24:	9e b7       	in	r25, 0x3e	; 62
     c26:	04 96       	adiw	r24, 0x04	; 4
     c28:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <memcpy>
     c2c:	b8 01       	movw	r22, r16
     c2e:	c6 01       	movw	r24, r12
     c30:	0e 94 90 0b 	call	0x1720	; 0x1720 <SerialEnviaChars>
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	fe be       	out	0x3e, r15	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	ed be       	out	0x3d, r14	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	08 95       	ret

00000c50 <receber_resposta_saque>:
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	00 d0       	rcall	.+0      	; 0xc56 <receber_resposta_saque+0x6>
     c56:	00 d0       	rcall	.+0      	; 0xc58 <receber_resposta_saque+0x8>
     c58:	1f 92       	push	r1
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	be 01       	movw	r22, r28
     c60:	6f 5f       	subi	r22, 0xFF	; 255
     c62:	7f 4f       	sbci	r23, 0xFF	; 255
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SerialRecebeChars>
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	83 35       	cpi	r24, 0x53	; 83
     c70:	29 f4       	brne	.+10     	; 0xc7c <receber_resposta_saque+0x2c>
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	83 35       	cpi	r24, 0x53	; 83
     c76:	21 f4       	brne	.+8      	; 0xc80 <receber_resposta_saque+0x30>
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <receber_resposta_saque+0x32>
     c7c:	85 e4       	ldi	r24, 0x45	; 69
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <receber_resposta_saque+0x32>
     c80:	85 e4       	ldi	r24, 0x45	; 69
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <realizar_saque>:
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	29 97       	sbiw	r28, 0x09	; 9
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	fe 01       	movw	r30, r28
     cac:	31 96       	adiw	r30, 0x01	; 1
     cae:	87 e0       	ldi	r24, 0x07	; 7
     cb0:	df 01       	movw	r26, r30
     cb2:	1d 92       	st	X+, r1
     cb4:	8a 95       	dec	r24
     cb6:	e9 f7       	brne	.-6      	; 0xcb2 <realizar_saque+0x20>
     cb8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     cbc:	4f e9       	ldi	r20, 0x9F	; 159
     cbe:	52 e0       	ldi	r21, 0x02	; 2
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     cc8:	4f ea       	ldi	r20, 0xAF	; 175
     cca:	52 e0       	ldi	r21, 0x02	; 2
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     cd4:	00 e0       	ldi	r16, 0x00	; 0
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     cdc:	88 23       	and	r24, r24
     cde:	99 f0       	breq	.+38     	; 0xd06 <realizar_saque+0x74>
     ce0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     ce4:	4f e0       	ldi	r20, 0x0F	; 15
     ce6:	52 e0       	ldi	r21, 0x02	; 2
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     cf0:	4c e1       	ldi	r20, 0x1C	; 28
     cf2:	52 e0       	ldi	r21, 0x02	; 2
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     cfc:	80 ed       	ldi	r24, 0xD0	; 208
     cfe:	97 e0       	ldi	r25, 0x07	; 7
     d00:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     d04:	ea c0       	rjmp	.+468    	; 0xeda <realizar_saque+0x248>
     d06:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
     d0a:	90 ed       	ldi	r25, 0xD0	; 208
     d0c:	98 0f       	add	r25, r24
     d0e:	9a 30       	cpi	r25, 0x0A	; 10
     d10:	d8 f4       	brcc	.+54     	; 0xd48 <realizar_saque+0xb6>
     d12:	06 30       	cpi	r16, 0x06	; 6
     d14:	11 05       	cpc	r17, r1
     d16:	c4 f4       	brge	.+48     	; 0xd48 <realizar_saque+0xb6>
     d18:	e1 e0       	ldi	r30, 0x01	; 1
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	ec 0f       	add	r30, r28
     d1e:	fd 1f       	adc	r31, r29
     d20:	e0 0f       	add	r30, r16
     d22:	f1 1f       	adc	r31, r17
     d24:	80 83       	st	Z, r24
     d26:	88 87       	std	Y+8, r24	; 0x08
     d28:	19 86       	std	Y+9, r1	; 0x09
     d2a:	62 e0       	ldi	r22, 0x02	; 2
     d2c:	60 0f       	add	r22, r16
     d2e:	ae 01       	movw	r20, r28
     d30:	48 5f       	subi	r20, 0xF8	; 248
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     d3a:	0f 5f       	subi	r16, 0xFF	; 255
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	88 ec       	ldi	r24, 0xC8	; 200
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     d46:	c8 cf       	rjmp	.-112    	; 0xcd8 <realizar_saque+0x46>
     d48:	83 32       	cpi	r24, 0x23	; 35
     d4a:	09 f0       	breq	.+2      	; 0xd4e <realizar_saque+0xbc>
     d4c:	b1 c0       	rjmp	.+354    	; 0xeb0 <realizar_saque+0x21e>
     d4e:	10 16       	cp	r1, r16
     d50:	11 06       	cpc	r1, r17
     d52:	0c f0       	brlt	.+2      	; 0xd56 <realizar_saque+0xc4>
     d54:	ad c0       	rjmp	.+346    	; 0xeb0 <realizar_saque+0x21e>
     d56:	e1 e0       	ldi	r30, 0x01	; 1
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	ec 0f       	add	r30, r28
     d5c:	fd 1f       	adc	r31, r29
     d5e:	e0 0f       	add	r30, r16
     d60:	f1 1f       	adc	r31, r17
     d62:	10 82       	st	Z, r1
     d64:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     d68:	88 23       	and	r24, r24
     d6a:	99 f0       	breq	.+38     	; 0xd92 <realizar_saque+0x100>
     d6c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     d70:	4f e0       	ldi	r20, 0x0F	; 15
     d72:	52 e0       	ldi	r21, 0x02	; 2
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     d7c:	4c e1       	ldi	r20, 0x1C	; 28
     d7e:	52 e0       	ldi	r21, 0x02	; 2
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     d88:	80 ed       	ldi	r24, 0xD0	; 208
     d8a:	97 e0       	ldi	r25, 0x07	; 7
     d8c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     d90:	a4 c0       	rjmp	.+328    	; 0xeda <realizar_saque+0x248>
     d92:	ce 01       	movw	r24, r28
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <atol>
     d9a:	61 3c       	cpi	r22, 0xC1	; 193
     d9c:	74 4d       	sbci	r23, 0xD4	; 212
     d9e:	81 40       	sbci	r24, 0x01	; 1
     da0:	91 05       	cpc	r25, r1
     da2:	54 f1       	brlt	.+84     	; 0xdf8 <realizar_saque+0x166>
     da4:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     da8:	42 eb       	ldi	r20, 0xB2	; 178
     daa:	52 e0       	ldi	r21, 0x02	; 2
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     db4:	40 ec       	ldi	r20, 0xC0	; 192
     db6:	52 e0       	ldi	r21, 0x02	; 2
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     dc0:	80 ed       	ldi	r24, 0xD0	; 208
     dc2:	97 e0       	ldi	r25, 0x07	; 7
     dc4:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     dc8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     dcc:	4f e9       	ldi	r20, 0x9F	; 159
     dce:	52 e0       	ldi	r21, 0x02	; 2
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     dd8:	4f ea       	ldi	r20, 0xAF	; 175
     dda:	52 e0       	ldi	r21, 0x02	; 2
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     de4:	fe 01       	movw	r30, r28
     de6:	31 96       	adiw	r30, 0x01	; 1
     de8:	87 e0       	ldi	r24, 0x07	; 7
     dea:	df 01       	movw	r26, r30
     dec:	1d 92       	st	X+, r1
     dee:	8a 95       	dec	r24
     df0:	e9 f7       	brne	.-6      	; 0xdec <realizar_saque+0x15a>
     df2:	00 e0       	ldi	r16, 0x00	; 0
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	70 cf       	rjmp	.-288    	; 0xcd8 <realizar_saque+0x46>
     df8:	0e 94 21 02 	call	0x442	; 0x442 <get_current_password>
     dfc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <confirmar_senha>
     e00:	88 23       	and	r24, r24
     e02:	09 f4       	brne	.+2      	; 0xe06 <realizar_saque+0x174>
     e04:	6a c0       	rjmp	.+212    	; 0xeda <realizar_saque+0x248>
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	0e 94 e5 05 	call	0xbca	; 0xbca <enviar_mensagem_saque>
     e0e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     e12:	88 23       	and	r24, r24
     e14:	99 f0       	breq	.+38     	; 0xe3c <realizar_saque+0x1aa>
     e16:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     e1a:	4f e0       	ldi	r20, 0x0F	; 15
     e1c:	52 e0       	ldi	r21, 0x02	; 2
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e26:	4c e1       	ldi	r20, 0x1C	; 28
     e28:	52 e0       	ldi	r21, 0x02	; 2
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e32:	80 ed       	ldi	r24, 0xD0	; 208
     e34:	97 e0       	ldi	r25, 0x07	; 7
     e36:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     e3a:	4f c0       	rjmp	.+158    	; 0xeda <realizar_saque+0x248>
     e3c:	0e 94 28 06 	call	0xc50	; 0xc50 <receber_resposta_saque>
     e40:	18 2f       	mov	r17, r24
     e42:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     e46:	1f 34       	cpi	r17, 0x4F	; 79
     e48:	99 f4       	brne	.+38     	; 0xe70 <realizar_saque+0x1de>
     e4a:	4d ea       	ldi	r20, 0xAD	; 173
     e4c:	51 e0       	ldi	r21, 0x01	; 1
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e56:	4b ec       	ldi	r20, 0xCB	; 203
     e58:	52 e0       	ldi	r21, 0x02	; 2
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e62:	80 ed       	ldi	r24, 0xD0	; 208
     e64:	97 e0       	ldi	r25, 0x07	; 7
     e66:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     e6a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <perguntar_comprovante>
     e6e:	1b c0       	rjmp	.+54     	; 0xea6 <realizar_saque+0x214>
     e70:	19 34       	cpi	r17, 0x49	; 73
     e72:	69 f4       	brne	.+26     	; 0xe8e <realizar_saque+0x1fc>
     e74:	40 ef       	ldi	r20, 0xF0	; 240
     e76:	51 e0       	ldi	r21, 0x01	; 1
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e80:	46 ed       	ldi	r20, 0xD6	; 214
     e82:	52 e0       	ldi	r21, 0x02	; 2
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e8c:	0c c0       	rjmp	.+24     	; 0xea6 <realizar_saque+0x214>
     e8e:	43 ee       	ldi	r20, 0xE3	; 227
     e90:	52 e0       	ldi	r21, 0x02	; 2
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     e9a:	4b ee       	ldi	r20, 0xEB	; 235
     e9c:	52 e0       	ldi	r21, 0x02	; 2
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ea6:	88 eb       	ldi	r24, 0xB8	; 184
     ea8:	9b e0       	ldi	r25, 0x0B	; 11
     eaa:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     eae:	15 c0       	rjmp	.+42     	; 0xeda <realizar_saque+0x248>
     eb0:	8a 32       	cpi	r24, 0x2A	; 42
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <realizar_saque+0x224>
     eb4:	11 cf       	rjmp	.-478    	; 0xcd8 <realizar_saque+0x46>
     eb6:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     eba:	4d e4       	ldi	r20, 0x4D	; 77
     ebc:	52 e0       	ldi	r21, 0x02	; 2
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ec6:	46 e5       	ldi	r20, 0x56	; 86
     ec8:	52 e0       	ldi	r21, 0x02	; 2
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ed2:	80 ed       	ldi	r24, 0xD0	; 208
     ed4:	97 e0       	ldi	r25, 0x07	; 7
     ed6:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     eda:	29 96       	adiw	r28, 0x09	; 9
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <consultar_saldo>:
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	a9 97       	sbiw	r28, 0x29	; 41
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	0e 94 21 02 	call	0x442	; 0x442 <get_current_password>
     f10:	0e 94 e6 04 	call	0x9cc	; 0x9cc <confirmar_senha>
     f14:	81 11       	cpse	r24, r1
     f16:	13 c0       	rjmp	.+38     	; 0xf3e <consultar_saldo+0x4e>
     f18:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     f1c:	4d e4       	ldi	r20, 0x4D	; 77
     f1e:	52 e0       	ldi	r21, 0x02	; 2
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     f28:	46 e5       	ldi	r20, 0x56	; 86
     f2a:	52 e0       	ldi	r21, 0x02	; 2
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     f34:	80 ed       	ldi	r24, 0xD0	; 208
     f36:	97 e0       	ldi	r25, 0x07	; 7
     f38:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     f3c:	ee c0       	rjmp	.+476    	; 0x111a <consultar_saldo+0x22a>
     f3e:	83 e4       	ldi	r24, 0x43	; 67
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	86 e5       	ldi	r24, 0x56	; 86
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     f4a:	88 23       	and	r24, r24
     f4c:	99 f0       	breq	.+38     	; 0xf74 <consultar_saldo+0x84>
     f4e:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     f52:	4f e0       	ldi	r20, 0x0F	; 15
     f54:	52 e0       	ldi	r21, 0x02	; 2
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     f5e:	4c e1       	ldi	r20, 0x1C	; 28
     f60:	52 e0       	ldi	r21, 0x02	; 2
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     f6a:	80 ed       	ldi	r24, 0xD0	; 208
     f6c:	97 e0       	ldi	r25, 0x07	; 7
     f6e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     f72:	d3 c0       	rjmp	.+422    	; 0x111a <consultar_saldo+0x22a>
     f74:	be 01       	movw	r22, r28
     f76:	6f 5f       	subi	r22, 0xFF	; 255
     f78:	7f 4f       	sbci	r23, 0xFF	; 255
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 90 0b 	call	0x1720	; 0x1720 <SerialEnviaChars>
     f82:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     f86:	88 23       	and	r24, r24
     f88:	99 f0       	breq	.+38     	; 0xfb0 <consultar_saldo+0xc0>
     f8a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     f8e:	4f e0       	ldi	r20, 0x0F	; 15
     f90:	52 e0       	ldi	r21, 0x02	; 2
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     f9a:	4c e1       	ldi	r20, 0x1C	; 28
     f9c:	52 e0       	ldi	r21, 0x02	; 2
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     fa6:	80 ed       	ldi	r24, 0xD0	; 208
     fa8:	97 e0       	ldi	r25, 0x07	; 7
     faa:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
     fae:	b5 c0       	rjmp	.+362    	; 0x111a <consultar_saldo+0x22a>
     fb0:	be 01       	movw	r22, r28
     fb2:	6d 5f       	subi	r22, 0xFD	; 253
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	83 e0       	ldi	r24, 0x03	; 3
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SerialRecebeChars>
     fbe:	1e 82       	std	Y+6, r1	; 0x06
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	83 35       	cpi	r24, 0x53	; 83
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <consultar_saldo+0xd8>
     fc6:	97 c0       	rjmp	.+302    	; 0x10f6 <consultar_saldo+0x206>
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	86 35       	cpi	r24, 0x56	; 86
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <consultar_saldo+0xe0>
     fce:	93 c0       	rjmp	.+294    	; 0x10f6 <consultar_saldo+0x206>
     fd0:	0d 81       	ldd	r16, Y+5	; 0x05
     fd2:	fe 01       	movw	r30, r28
     fd4:	7a 96       	adiw	r30, 0x1a	; 26
     fd6:	80 e1       	ldi	r24, 0x10	; 16
     fd8:	df 01       	movw	r26, r30
     fda:	1d 92       	st	X+, r1
     fdc:	8a 95       	dec	r24
     fde:	e9 f7       	brne	.-6      	; 0xfda <consultar_saldo+0xea>
     fe0:	00 31       	cpi	r16, 0x10	; 16
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <consultar_saldo+0xf6>
     fe4:	0f e0       	ldi	r16, 0x0F	; 15
     fe6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
     fea:	88 23       	and	r24, r24
     fec:	99 f0       	breq	.+38     	; 0x1014 <consultar_saldo+0x124>
     fee:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
     ff2:	4f e0       	ldi	r20, 0x0F	; 15
     ff4:	52 e0       	ldi	r21, 0x02	; 2
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
     ffe:	4c e1       	ldi	r20, 0x1C	; 28
    1000:	52 e0       	ldi	r21, 0x02	; 2
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    100a:	80 ed       	ldi	r24, 0xD0	; 208
    100c:	97 e0       	ldi	r25, 0x07	; 7
    100e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    1012:	83 c0       	rjmp	.+262    	; 0x111a <consultar_saldo+0x22a>
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	7e 01       	movw	r14, r28
    1018:	ba e1       	ldi	r27, 0x1A	; 26
    101a:	eb 0e       	add	r14, r27
    101c:	f1 1c       	adc	r15, r1
    101e:	b7 01       	movw	r22, r14
    1020:	c8 01       	movw	r24, r16
    1022:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SerialRecebeChars>
    1026:	f7 01       	movw	r30, r14
    1028:	e0 0f       	add	r30, r16
    102a:	f1 1f       	adc	r31, r17
    102c:	10 82       	st	Z, r1
    102e:	f7 01       	movw	r30, r14
    1030:	01 90       	ld	r0, Z+
    1032:	00 20       	and	r0, r0
    1034:	e9 f7       	brne	.-6      	; 0x1030 <consultar_saldo+0x140>
    1036:	31 97       	sbiw	r30, 0x01	; 1
    1038:	ee 19       	sub	r30, r14
    103a:	ff 09       	sbc	r31, r15
    103c:	e2 30       	cpi	r30, 0x02	; 2
    103e:	f1 05       	cpc	r31, r1
    1040:	44 f1       	brlt	.+80     	; 0x1092 <consultar_saldo+0x1a2>
    1042:	7e 01       	movw	r14, r28
    1044:	86 e0       	ldi	r24, 0x06	; 6
    1046:	e8 0e       	add	r14, r24
    1048:	f1 1c       	adc	r15, r1
    104a:	82 e5       	ldi	r24, 0x52	; 82
    104c:	94 e2       	ldi	r25, 0x24	; 36
    104e:	9f 83       	std	Y+7, r25	; 0x07
    1050:	8e 83       	std	Y+6, r24	; 0x06
    1052:	d7 01       	movw	r26, r14
    1054:	12 96       	adiw	r26, 0x02	; 2
    1056:	1c 92       	st	X, r1
    1058:	8f 01       	movw	r16, r30
    105a:	02 50       	subi	r16, 0x02	; 2
    105c:	11 09       	sbc	r17, r1
    105e:	a8 01       	movw	r20, r16
    1060:	be 01       	movw	r22, r28
    1062:	66 5e       	subi	r22, 0xE6	; 230
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	c7 01       	movw	r24, r14
    1068:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <strncat>
    106c:	f7 01       	movw	r30, r14
    106e:	01 90       	ld	r0, Z+
    1070:	00 20       	and	r0, r0
    1072:	e9 f7       	brne	.-6      	; 0x106e <consultar_saldo+0x17e>
    1074:	31 97       	sbiw	r30, 0x01	; 1
    1076:	8e e2       	ldi	r24, 0x2E	; 46
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
    107e:	6a e1       	ldi	r22, 0x1A	; 26
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	6c 0f       	add	r22, r28
    1084:	7d 1f       	adc	r23, r29
    1086:	60 0f       	add	r22, r16
    1088:	71 1f       	adc	r23, r17
    108a:	c7 01       	movw	r24, r14
    108c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <strcat>
    1090:	1c c0       	rjmp	.+56     	; 0x10ca <consultar_saldo+0x1da>
    1092:	31 97       	sbiw	r30, 0x01	; 1
    1094:	89 f4       	brne	.+34     	; 0x10b8 <consultar_saldo+0x1c8>
    1096:	86 e0       	ldi	r24, 0x06	; 6
    1098:	e4 ef       	ldi	r30, 0xF4	; 244
    109a:	f2 e0       	ldi	r31, 0x02	; 2
    109c:	de 01       	movw	r26, r28
    109e:	16 96       	adiw	r26, 0x06	; 6
    10a0:	01 90       	ld	r0, Z+
    10a2:	0d 92       	st	X+, r0
    10a4:	8a 95       	dec	r24
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <consultar_saldo+0x1b0>
    10a8:	be 01       	movw	r22, r28
    10aa:	66 5e       	subi	r22, 0xE6	; 230
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	ce 01       	movw	r24, r28
    10b0:	06 96       	adiw	r24, 0x06	; 6
    10b2:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <strcat>
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <consultar_saldo+0x1da>
    10b8:	87 e0       	ldi	r24, 0x07	; 7
    10ba:	ea ef       	ldi	r30, 0xFA	; 250
    10bc:	f2 e0       	ldi	r31, 0x02	; 2
    10be:	de 01       	movw	r26, r28
    10c0:	16 96       	adiw	r26, 0x06	; 6
    10c2:	01 90       	ld	r0, Z+
    10c4:	0d 92       	st	X+, r0
    10c6:	8a 95       	dec	r24
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <consultar_saldo+0x1d2>
    10ca:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    10d0:	53 e0       	ldi	r21, 0x03	; 3
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    10da:	ae 01       	movw	r20, r28
    10dc:	4a 5f       	subi	r20, 0xFA	; 250
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    10e8:	88 eb       	ldi	r24, 0xB8	; 184
    10ea:	9b e0       	ldi	r25, 0x0B	; 11
    10ec:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    10f0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <perguntar_comprovante>
    10f4:	12 c0       	rjmp	.+36     	; 0x111a <consultar_saldo+0x22a>
    10f6:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    10fa:	4e e0       	ldi	r20, 0x0E	; 14
    10fc:	53 e0       	ldi	r21, 0x03	; 3
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1106:	4c e1       	ldi	r20, 0x1C	; 28
    1108:	53 e0       	ldi	r21, 0x03	; 3
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1112:	88 eb       	ldi	r24, 0xB8	; 184
    1114:	9b e0       	ldi	r25, 0x0B	; 11
    1116:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    111a:	a9 96       	adiw	r28, 0x29	; 41
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	08 95       	ret

00001134 <realizar_pagamento_barcode>:
    1134:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    1138:	43 e2       	ldi	r20, 0x23	; 35
    113a:	53 e0       	ldi	r21, 0x03	; 3
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1144:	4f e8       	ldi	r20, 0x8F	; 143
    1146:	52 e0       	ldi	r21, 0x02	; 2
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1150:	80 ed       	ldi	r24, 0xD0	; 208
    1152:	97 e0       	ldi	r25, 0x07	; 7
    1154:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    1158:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
    115c:	88 23       	and	r24, r24
    115e:	91 f0       	breq	.+36     	; 0x1184 <realizar_pagamento_barcode+0x50>
    1160:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    1164:	4f e0       	ldi	r20, 0x0F	; 15
    1166:	52 e0       	ldi	r21, 0x02	; 2
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1170:	4c e1       	ldi	r20, 0x1C	; 28
    1172:	52 e0       	ldi	r21, 0x02	; 2
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    117c:	80 ed       	ldi	r24, 0xD0	; 208
    117e:	97 e0       	ldi	r25, 0x07	; 7
    1180:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    1184:	08 95       	ret

00001186 <enviar_mensagem_pagamento>:
    1186:	2f 92       	push	r2
    1188:	3f 92       	push	r3
    118a:	4f 92       	push	r4
    118c:	5f 92       	push	r5
    118e:	6f 92       	push	r6
    1190:	7f 92       	push	r7
    1192:	8f 92       	push	r8
    1194:	9f 92       	push	r9
    1196:	af 92       	push	r10
    1198:	bf 92       	push	r11
    119a:	cf 92       	push	r12
    119c:	df 92       	push	r13
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	fc 01       	movw	r30, r24
    11b0:	4b 01       	movw	r8, r22
    11b2:	3a 01       	movw	r6, r20
    11b4:	2d b6       	in	r2, 0x3d	; 61
    11b6:	3e b6       	in	r3, 0x3e	; 62
    11b8:	dc 01       	movw	r26, r24
    11ba:	0d 90       	ld	r0, X+
    11bc:	00 20       	and	r0, r0
    11be:	e9 f7       	brne	.-6      	; 0x11ba <enviar_mensagem_pagamento+0x34>
    11c0:	11 97       	sbiw	r26, 0x01	; 1
    11c2:	8d 01       	movw	r16, r26
    11c4:	08 1b       	sub	r16, r24
    11c6:	19 0b       	sbc	r17, r25
    11c8:	db 01       	movw	r26, r22
    11ca:	0d 90       	ld	r0, X+
    11cc:	00 20       	and	r0, r0
    11ce:	e9 f7       	brne	.-6      	; 0x11ca <enviar_mensagem_pagamento+0x44>
    11d0:	11 97       	sbiw	r26, 0x01	; 1
    11d2:	7d 01       	movw	r14, r26
    11d4:	e6 1a       	sub	r14, r22
    11d6:	f7 0a       	sbc	r15, r23
    11d8:	da 01       	movw	r26, r20
    11da:	0d 90       	ld	r0, X+
    11dc:	00 20       	and	r0, r0
    11de:	e9 f7       	brne	.-6      	; 0x11da <enviar_mensagem_pagamento+0x54>
    11e0:	11 97       	sbiw	r26, 0x01	; 1
    11e2:	6d 01       	movw	r12, r26
    11e4:	c4 1a       	sub	r12, r20
    11e6:	d5 0a       	sbc	r13, r21
    11e8:	98 01       	movw	r18, r16
    11ea:	2e 0d       	add	r18, r14
    11ec:	3f 1d       	adc	r19, r15
    11ee:	2c 0d       	add	r18, r12
    11f0:	3d 1d       	adc	r19, r13
    11f2:	29 01       	movw	r4, r18
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	48 0e       	add	r4, r24
    11f8:	51 1c       	adc	r5, r1
    11fa:	ad b7       	in	r26, 0x3d	; 61
    11fc:	be b7       	in	r27, 0x3e	; 62
    11fe:	a4 19       	sub	r26, r4
    1200:	b5 09       	sbc	r27, r5
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	be bf       	out	0x3e, r27	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	ad bf       	out	0x3d, r26	; 61
    120c:	8d b7       	in	r24, 0x3d	; 61
    120e:	9e b7       	in	r25, 0x3e	; 62
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	5c 01       	movw	r10, r24
    1214:	83 e4       	ldi	r24, 0x43	; 67
    1216:	11 96       	adiw	r26, 0x01	; 1
    1218:	8c 93       	st	X, r24
    121a:	80 e5       	ldi	r24, 0x50	; 80
    121c:	d5 01       	movw	r26, r10
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	8c 93       	st	X, r24
    1222:	11 97       	sbiw	r26, 0x01	; 1
    1224:	12 96       	adiw	r26, 0x02	; 2
    1226:	2c 93       	st	X, r18
    1228:	8d b7       	in	r24, 0x3d	; 61
    122a:	9e b7       	in	r25, 0x3e	; 62
    122c:	04 96       	adiw	r24, 0x04	; 4
    122e:	a8 01       	movw	r20, r16
    1230:	bf 01       	movw	r22, r30
    1232:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <memcpy>
    1236:	0d 5f       	subi	r16, 0xFD	; 253
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	a7 01       	movw	r20, r14
    123c:	b4 01       	movw	r22, r8
    123e:	c5 01       	movw	r24, r10
    1240:	80 0f       	add	r24, r16
    1242:	91 1f       	adc	r25, r17
    1244:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <memcpy>
    1248:	c7 01       	movw	r24, r14
    124a:	80 0f       	add	r24, r16
    124c:	91 1f       	adc	r25, r17
    124e:	a6 01       	movw	r20, r12
    1250:	b3 01       	movw	r22, r6
    1252:	8a 0d       	add	r24, r10
    1254:	9b 1d       	adc	r25, r11
    1256:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <memcpy>
    125a:	b5 01       	movw	r22, r10
    125c:	c2 01       	movw	r24, r4
    125e:	0e 94 90 0b 	call	0x1720	; 0x1720 <SerialEnviaChars>
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	3e be       	out	0x3e, r3	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	2d be       	out	0x3d, r2	; 61
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	cf 90       	pop	r12
    127c:	bf 90       	pop	r11
    127e:	af 90       	pop	r10
    1280:	9f 90       	pop	r9
    1282:	8f 90       	pop	r8
    1284:	7f 90       	pop	r7
    1286:	6f 90       	pop	r6
    1288:	5f 90       	pop	r5
    128a:	4f 90       	pop	r4
    128c:	3f 90       	pop	r3
    128e:	2f 90       	pop	r2
    1290:	08 95       	ret

00001292 <receber_resposta_pagamento>:
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	00 d0       	rcall	.+0      	; 0x1298 <receber_resposta_pagamento+0x6>
    1298:	00 d0       	rcall	.+0      	; 0x129a <receber_resposta_pagamento+0x8>
    129a:	1f 92       	push	r1
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	be 01       	movw	r22, r28
    12a2:	6f 5f       	subi	r22, 0xFF	; 255
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	83 e0       	ldi	r24, 0x03	; 3
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SerialRecebeChars>
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	83 35       	cpi	r24, 0x53	; 83
    12b2:	29 f4       	brne	.+10     	; 0x12be <receber_resposta_pagamento+0x2c>
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 35       	cpi	r24, 0x50	; 80
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <receber_resposta_pagamento+0x30>
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <receber_resposta_pagamento+0x32>
    12be:	85 e4       	ldi	r24, 0x45	; 69
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <receber_resposta_pagamento+0x32>
    12c2:	85 e4       	ldi	r24, 0x45	; 69
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <realizar_pagamento_manual>:
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	62 97       	sbiw	r28, 0x12	; 18
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	19 82       	std	Y+1, r1	; 0x01
    12ee:	1a 82       	std	Y+2, r1	; 0x02
    12f0:	1b 82       	std	Y+3, r1	; 0x03
    12f2:	1c 82       	std	Y+4, r1	; 0x04
    12f4:	fe 01       	movw	r30, r28
    12f6:	35 96       	adiw	r30, 0x05	; 5
    12f8:	85 e0       	ldi	r24, 0x05	; 5
    12fa:	df 01       	movw	r26, r30
    12fc:	1d 92       	st	X+, r1
    12fe:	8a 95       	dec	r24
    1300:	e9 f7       	brne	.-6      	; 0x12fc <realizar_pagamento_manual+0x28>
    1302:	35 96       	adiw	r30, 0x05	; 5
    1304:	87 e0       	ldi	r24, 0x07	; 7
    1306:	df 01       	movw	r26, r30
    1308:	1d 92       	st	X+, r1
    130a:	8a 95       	dec	r24
    130c:	e9 f7       	brne	.-6      	; 0x1308 <realizar_pagamento_manual+0x34>
    130e:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    1312:	4e e2       	ldi	r20, 0x2E	; 46
    1314:	53 e0       	ldi	r21, 0x03	; 3
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    131e:	40 e3       	ldi	r20, 0x30	; 48
    1320:	51 e0       	ldi	r21, 0x01	; 1
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	49 c0       	rjmp	.+146    	; 0x13c2 <realizar_pagamento_manual+0xee>
    1330:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
    1334:	88 23       	and	r24, r24
    1336:	99 f0       	breq	.+38     	; 0x135e <realizar_pagamento_manual+0x8a>
    1338:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    133c:	4f e0       	ldi	r20, 0x0F	; 15
    133e:	52 e0       	ldi	r21, 0x02	; 2
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1348:	4c e1       	ldi	r20, 0x1C	; 28
    134a:	52 e0       	ldi	r21, 0x02	; 2
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1354:	80 ed       	ldi	r24, 0xD0	; 208
    1356:	97 e0       	ldi	r25, 0x07	; 7
    1358:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    135c:	5f c1       	rjmp	.+702    	; 0x161c <realizar_pagamento_manual+0x348>
    135e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
    1362:	90 ed       	ldi	r25, 0xD0	; 208
    1364:	98 0f       	add	r25, r24
    1366:	9a 30       	cpi	r25, 0x0A	; 10
    1368:	b8 f4       	brcc	.+46     	; 0x1398 <realizar_pagamento_manual+0xc4>
    136a:	e1 e0       	ldi	r30, 0x01	; 1
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	ec 0f       	add	r30, r28
    1370:	fd 1f       	adc	r31, r29
    1372:	e0 0f       	add	r30, r16
    1374:	f1 1f       	adc	r31, r17
    1376:	80 83       	st	Z, r24
    1378:	89 8b       	std	Y+17, r24	; 0x11
    137a:	1a 8a       	std	Y+18, r1	; 0x12
    137c:	ae 01       	movw	r20, r28
    137e:	4f 5e       	subi	r20, 0xEF	; 239
    1380:	5f 4f       	sbci	r21, 0xFF	; 255
    1382:	60 2f       	mov	r22, r16
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    138a:	0f 5f       	subi	r16, 0xFF	; 255
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	88 ec       	ldi	r24, 0xC8	; 200
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    1396:	15 c0       	rjmp	.+42     	; 0x13c2 <realizar_pagamento_manual+0xee>
    1398:	8a 32       	cpi	r24, 0x2A	; 42
    139a:	99 f4       	brne	.+38     	; 0x13c2 <realizar_pagamento_manual+0xee>
    139c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    13a0:	4d e4       	ldi	r20, 0x4D	; 77
    13a2:	52 e0       	ldi	r21, 0x02	; 2
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    13ac:	46 e5       	ldi	r20, 0x56	; 86
    13ae:	52 e0       	ldi	r21, 0x02	; 2
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    13b8:	80 ed       	ldi	r24, 0xD0	; 208
    13ba:	97 e0       	ldi	r25, 0x07	; 7
    13bc:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    13c0:	2d c1       	rjmp	.+602    	; 0x161c <realizar_pagamento_manual+0x348>
    13c2:	03 30       	cpi	r16, 0x03	; 3
    13c4:	11 05       	cpc	r17, r1
    13c6:	0c f4       	brge	.+2      	; 0x13ca <realizar_pagamento_manual+0xf6>
    13c8:	b3 cf       	rjmp	.-154    	; 0x1330 <realizar_pagamento_manual+0x5c>
    13ca:	1c 82       	std	Y+4, r1	; 0x04
    13cc:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    13d0:	4e e3       	ldi	r20, 0x3E	; 62
    13d2:	53 e0       	ldi	r21, 0x03	; 3
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    13dc:	4f e2       	ldi	r20, 0x2F	; 47
    13de:	51 e0       	ldi	r21, 0x01	; 1
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    13e8:	00 e0       	ldi	r16, 0x00	; 0
    13ea:	10 e0       	ldi	r17, 0x00	; 0
    13ec:	49 c0       	rjmp	.+146    	; 0x1480 <realizar_pagamento_manual+0x1ac>
    13ee:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
    13f2:	88 23       	and	r24, r24
    13f4:	99 f0       	breq	.+38     	; 0x141c <realizar_pagamento_manual+0x148>
    13f6:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    13fa:	4f e0       	ldi	r20, 0x0F	; 15
    13fc:	52 e0       	ldi	r21, 0x02	; 2
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1406:	4c e1       	ldi	r20, 0x1C	; 28
    1408:	52 e0       	ldi	r21, 0x02	; 2
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1412:	80 ed       	ldi	r24, 0xD0	; 208
    1414:	97 e0       	ldi	r25, 0x07	; 7
    1416:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    141a:	00 c1       	rjmp	.+512    	; 0x161c <realizar_pagamento_manual+0x348>
    141c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
    1420:	90 ed       	ldi	r25, 0xD0	; 208
    1422:	98 0f       	add	r25, r24
    1424:	9a 30       	cpi	r25, 0x0A	; 10
    1426:	b8 f4       	brcc	.+46     	; 0x1456 <realizar_pagamento_manual+0x182>
    1428:	e5 e0       	ldi	r30, 0x05	; 5
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	ec 0f       	add	r30, r28
    142e:	fd 1f       	adc	r31, r29
    1430:	e0 0f       	add	r30, r16
    1432:	f1 1f       	adc	r31, r17
    1434:	80 83       	st	Z, r24
    1436:	89 8b       	std	Y+17, r24	; 0x11
    1438:	1a 8a       	std	Y+18, r1	; 0x12
    143a:	ae 01       	movw	r20, r28
    143c:	4f 5e       	subi	r20, 0xEF	; 239
    143e:	5f 4f       	sbci	r21, 0xFF	; 255
    1440:	60 2f       	mov	r22, r16
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1448:	0f 5f       	subi	r16, 0xFF	; 255
    144a:	1f 4f       	sbci	r17, 0xFF	; 255
    144c:	88 ec       	ldi	r24, 0xC8	; 200
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    1454:	15 c0       	rjmp	.+42     	; 0x1480 <realizar_pagamento_manual+0x1ac>
    1456:	8a 32       	cpi	r24, 0x2A	; 42
    1458:	99 f4       	brne	.+38     	; 0x1480 <realizar_pagamento_manual+0x1ac>
    145a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    145e:	4d e4       	ldi	r20, 0x4D	; 77
    1460:	52 e0       	ldi	r21, 0x02	; 2
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    146a:	46 e5       	ldi	r20, 0x56	; 86
    146c:	52 e0       	ldi	r21, 0x02	; 2
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1476:	80 ed       	ldi	r24, 0xD0	; 208
    1478:	97 e0       	ldi	r25, 0x07	; 7
    147a:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    147e:	ce c0       	rjmp	.+412    	; 0x161c <realizar_pagamento_manual+0x348>
    1480:	04 30       	cpi	r16, 0x04	; 4
    1482:	11 05       	cpc	r17, r1
    1484:	0c f4       	brge	.+2      	; 0x1488 <realizar_pagamento_manual+0x1b4>
    1486:	b3 cf       	rjmp	.-154    	; 0x13ee <realizar_pagamento_manual+0x11a>
    1488:	19 86       	std	Y+9, r1	; 0x09
    148a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    148e:	41 e5       	ldi	r20, 0x51	; 81
    1490:	53 e0       	ldi	r21, 0x03	; 3
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    149a:	4f ea       	ldi	r20, 0xAF	; 175
    149c:	52 e0       	ldi	r21, 0x02	; 2
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    14a6:	00 e0       	ldi	r16, 0x00	; 0
    14a8:	10 e0       	ldi	r17, 0x00	; 0
    14aa:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
    14ae:	88 23       	and	r24, r24
    14b0:	99 f0       	breq	.+38     	; 0x14d8 <realizar_pagamento_manual+0x204>
    14b2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    14b6:	4f e0       	ldi	r20, 0x0F	; 15
    14b8:	52 e0       	ldi	r21, 0x02	; 2
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    14c2:	4c e1       	ldi	r20, 0x1C	; 28
    14c4:	52 e0       	ldi	r21, 0x02	; 2
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    14ce:	80 ed       	ldi	r24, 0xD0	; 208
    14d0:	97 e0       	ldi	r25, 0x07	; 7
    14d2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    14d6:	a2 c0       	rjmp	.+324    	; 0x161c <realizar_pagamento_manual+0x348>
    14d8:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <varredura>
    14dc:	90 ed       	ldi	r25, 0xD0	; 208
    14de:	98 0f       	add	r25, r24
    14e0:	9a 30       	cpi	r25, 0x0A	; 10
    14e2:	d8 f4       	brcc	.+54     	; 0x151a <realizar_pagamento_manual+0x246>
    14e4:	06 30       	cpi	r16, 0x06	; 6
    14e6:	11 05       	cpc	r17, r1
    14e8:	c4 f4       	brge	.+48     	; 0x151a <realizar_pagamento_manual+0x246>
    14ea:	ea e0       	ldi	r30, 0x0A	; 10
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	ec 0f       	add	r30, r28
    14f0:	fd 1f       	adc	r31, r29
    14f2:	e0 0f       	add	r30, r16
    14f4:	f1 1f       	adc	r31, r17
    14f6:	80 83       	st	Z, r24
    14f8:	89 8b       	std	Y+17, r24	; 0x11
    14fa:	1a 8a       	std	Y+18, r1	; 0x12
    14fc:	62 e0       	ldi	r22, 0x02	; 2
    14fe:	60 0f       	add	r22, r16
    1500:	ae 01       	movw	r20, r28
    1502:	4f 5e       	subi	r20, 0xEF	; 239
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    150c:	0f 5f       	subi	r16, 0xFF	; 255
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	88 ec       	ldi	r24, 0xC8	; 200
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    1518:	c8 cf       	rjmp	.-112    	; 0x14aa <realizar_pagamento_manual+0x1d6>
    151a:	83 32       	cpi	r24, 0x23	; 35
    151c:	09 f0       	breq	.+2      	; 0x1520 <realizar_pagamento_manual+0x24c>
    151e:	69 c0       	rjmp	.+210    	; 0x15f2 <realizar_pagamento_manual+0x31e>
    1520:	ea e0       	ldi	r30, 0x0A	; 10
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	ec 0f       	add	r30, r28
    1526:	fd 1f       	adc	r31, r29
    1528:	e0 0f       	add	r30, r16
    152a:	f1 1f       	adc	r31, r17
    152c:	10 82       	st	Z, r1
    152e:	0e 94 21 02 	call	0x442	; 0x442 <get_current_password>
    1532:	0e 94 e6 04 	call	0x9cc	; 0x9cc <confirmar_senha>
    1536:	88 23       	and	r24, r24
    1538:	09 f4       	brne	.+2      	; 0x153c <realizar_pagamento_manual+0x268>
    153a:	70 c0       	rjmp	.+224    	; 0x161c <realizar_pagamento_manual+0x348>
    153c:	ae 01       	movw	r20, r28
    153e:	46 5f       	subi	r20, 0xF6	; 246
    1540:	5f 4f       	sbci	r21, 0xFF	; 255
    1542:	be 01       	movw	r22, r28
    1544:	6b 5f       	subi	r22, 0xFB	; 251
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	ce 01       	movw	r24, r28
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	0e 94 c3 08 	call	0x1186	; 0x1186 <enviar_mensagem_pagamento>
    1550:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
    1554:	88 23       	and	r24, r24
    1556:	99 f0       	breq	.+38     	; 0x157e <realizar_pagamento_manual+0x2aa>
    1558:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    155c:	4f e0       	ldi	r20, 0x0F	; 15
    155e:	52 e0       	ldi	r21, 0x02	; 2
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1568:	4c e1       	ldi	r20, 0x1C	; 28
    156a:	52 e0       	ldi	r21, 0x02	; 2
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1574:	80 ed       	ldi	r24, 0xD0	; 208
    1576:	97 e0       	ldi	r25, 0x07	; 7
    1578:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    157c:	4f c0       	rjmp	.+158    	; 0x161c <realizar_pagamento_manual+0x348>
    157e:	0e 94 49 09 	call	0x1292	; 0x1292 <receber_resposta_pagamento>
    1582:	18 2f       	mov	r17, r24
    1584:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    1588:	1f 34       	cpi	r17, 0x4F	; 79
    158a:	99 f4       	brne	.+38     	; 0x15b2 <realizar_pagamento_manual+0x2de>
    158c:	45 eb       	ldi	r20, 0xB5	; 181
    158e:	51 e0       	ldi	r21, 0x01	; 1
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1598:	4b ec       	ldi	r20, 0xCB	; 203
    159a:	52 e0       	ldi	r21, 0x02	; 2
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    15a4:	80 ed       	ldi	r24, 0xD0	; 208
    15a6:	97 e0       	ldi	r25, 0x07	; 7
    15a8:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    15ac:	0e 94 a6 05 	call	0xb4c	; 0xb4c <perguntar_comprovante>
    15b0:	1b c0       	rjmp	.+54     	; 0x15e8 <realizar_pagamento_manual+0x314>
    15b2:	19 34       	cpi	r17, 0x49	; 73
    15b4:	69 f4       	brne	.+26     	; 0x15d0 <realizar_pagamento_manual+0x2fc>
    15b6:	40 ef       	ldi	r20, 0xF0	; 240
    15b8:	51 e0       	ldi	r21, 0x01	; 1
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    15c2:	46 ed       	ldi	r20, 0xD6	; 214
    15c4:	52 e0       	ldi	r21, 0x02	; 2
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    15ce:	0c c0       	rjmp	.+24     	; 0x15e8 <realizar_pagamento_manual+0x314>
    15d0:	43 ee       	ldi	r20, 0xE3	; 227
    15d2:	52 e0       	ldi	r21, 0x02	; 2
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    15dc:	4b ee       	ldi	r20, 0xEB	; 235
    15de:	52 e0       	ldi	r21, 0x02	; 2
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    15e8:	88 eb       	ldi	r24, 0xB8	; 184
    15ea:	9b e0       	ldi	r25, 0x0B	; 11
    15ec:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    15f0:	15 c0       	rjmp	.+42     	; 0x161c <realizar_pagamento_manual+0x348>
    15f2:	8a 32       	cpi	r24, 0x2A	; 42
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <realizar_pagamento_manual+0x324>
    15f6:	59 cf       	rjmp	.-334    	; 0x14aa <realizar_pagamento_manual+0x1d6>
    15f8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
    15fc:	4d e4       	ldi	r20, 0x4D	; 77
    15fe:	52 e0       	ldi	r21, 0x02	; 2
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1608:	46 e5       	ldi	r20, 0x56	; 86
    160a:	52 e0       	ldi	r21, 0x02	; 2
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
    1614:	80 ed       	ldi	r24, 0xD0	; 208
    1616:	97 e0       	ldi	r25, 0x07	; 7
    1618:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    161c:	62 96       	adiw	r28, 0x12	; 18
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	08 95       	ret

00001632 <finalizar_sessao>:

void finalizar_sessao(void) {
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	00 d0       	rcall	.+0      	; 0x1638 <finalizar_sessao+0x6>
    1638:	00 d0       	rcall	.+0      	; 0x163a <finalizar_sessao+0x8>
    163a:	1f 92       	push	r1
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
	char mensagem[2] = {'C', 'F'};
    1640:	83 e4       	ldi	r24, 0x43	; 67
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	86 e4       	ldi	r24, 0x46	; 70
    1646:	8a 83       	std	Y+2, r24	; 0x02
	if (isBlocked()) {
    1648:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
    164c:	88 23       	and	r24, r24
    164e:	99 f0       	breq	.+38     	; 0x1676 <finalizar_sessao+0x44>
		LCD_limpar();
    1650:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
    1654:	40 e6       	ldi	r20, 0x60	; 96
    1656:	53 e0       	ldi	r21, 0x03	; 3
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
    1660:	4b e6       	ldi	r20, 0x6B	; 107
    1662:	53 e0       	ldi	r21, 0x03	; 3
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		delay1ms(2000);
    166c:	80 ed       	ldi	r24, 0xD0	; 208
    166e:	97 e0       	ldi	r25, 0x07	; 7
    1670:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
		return;
    1674:	38 c0       	rjmp	.+112    	; 0x16e6 <finalizar_sessao+0xb4>
	}
	SerialEnviaChars(2, mensagem);
    1676:	be 01       	movw	r22, r28
    1678:	6f 5f       	subi	r22, 0xFF	; 255
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 90 0b 	call	0x1720	; 0x1720 <SerialEnviaChars>

	char resposta[3];
	if (isBlocked()) {
    1684:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <isBlocked>
    1688:	88 23       	and	r24, r24
    168a:	99 f0       	breq	.+38     	; 0x16b2 <finalizar_sessao+0x80>
		LCD_limpar();
    168c:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
    1690:	40 e6       	ldi	r20, 0x60	; 96
    1692:	53 e0       	ldi	r21, 0x03	; 3
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
    169c:	4b e6       	ldi	r20, 0x6B	; 107
    169e:	53 e0       	ldi	r21, 0x03	; 3
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
		delay1ms(2000);
    16a8:	80 ed       	ldi	r24, 0xD0	; 208
    16aa:	97 e0       	ldi	r25, 0x07	; 7
    16ac:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
		return;
    16b0:	1a c0       	rjmp	.+52     	; 0x16e6 <finalizar_sessao+0xb4>
	}
	SerialRecebeChars(2, resposta);
    16b2:	be 01       	movw	r22, r28
    16b4:	6d 5f       	subi	r22, 0xFD	; 253
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SerialRecebeChars>
	resposta[2] = '\0';
    16c0:	1d 82       	std	Y+5, r1	; 0x05

	LCD_limpar();
    16c2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_limpar>
	
	LCD_Escrever_Linha(0, 0, "Sessao");
    16c6:	47 e7       	ldi	r20, 0x77	; 119
    16c8:	53 e0       	ldi	r21, 0x03	; 3
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "Finalizada!");
    16d2:	4e e7       	ldi	r20, 0x7E	; 126
    16d4:	53 e0       	ldi	r21, 0x03	; 3
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Escrever_Linha>
	
	delay1ms(2000);
    16de:	80 ed       	ldi	r24, 0xD0	; 208
    16e0:	97 e0       	ldi	r25, 0x07	; 7
    16e2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <isBlocked>:
	if (uart_head >= uart_tail) {
		return uart_head - uart_tail;
		} else {
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}
    16f6:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <blocked>
    16fa:	08 95       	ret

000016fc <setBlocked>:
    16fc:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <blocked>
    1700:	08 95       	ret

00001702 <initUART>:
    1702:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1706:	83 e3       	ldi	r24, 0x33	; 51
    1708:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    170c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1710:	88 e9       	ldi	r24, 0x98	; 152
    1712:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1716:	86 e0       	ldi	r24, 0x06	; 6
    1718:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    171c:	78 94       	sei
    171e:	08 95       	ret

00001720 <SerialEnviaChars>:
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	8c 01       	movw	r16, r24
    172e:	7b 01       	movw	r14, r22
    1730:	c0 e0       	ldi	r28, 0x00	; 0
    1732:	d0 e0       	ldi	r29, 0x00	; 0
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <SerialEnviaChars+0x34>
    1736:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    173a:	85 ff       	sbrs	r24, 5
    173c:	fc cf       	rjmp	.-8      	; 0x1736 <SerialEnviaChars+0x16>
    173e:	f7 01       	movw	r30, r14
    1740:	ec 0f       	add	r30, r28
    1742:	fd 1f       	adc	r31, r29
    1744:	80 81       	ld	r24, Z
    1746:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    174a:	84 e1       	ldi	r24, 0x14	; 20
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    1752:	21 96       	adiw	r28, 0x01	; 1
    1754:	c0 17       	cp	r28, r16
    1756:	d1 07       	cpc	r29, r17
    1758:	74 f3       	brlt	.-36     	; 0x1736 <SerialEnviaChars+0x16>
    175a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    175e:	86 ff       	sbrs	r24, 6
    1760:	fc cf       	rjmp	.-8      	; 0x175a <SerialEnviaChars+0x3a>
    1762:	e0 ec       	ldi	r30, 0xC0	; 192
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	80 64       	ori	r24, 0x40	; 64
    176a:	80 83       	st	Z, r24
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	08 95       	ret

0000177a <__vector_18>:
    177a:	1f 92       	push	r1
    177c:	0f 92       	push	r0
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	0f 92       	push	r0
    1782:	11 24       	eor	r1, r1
    1784:	2f 93       	push	r18
    1786:	3f 93       	push	r19
    1788:	4f 93       	push	r20
    178a:	5f 93       	push	r21
    178c:	6f 93       	push	r22
    178e:	7f 93       	push	r23
    1790:	8f 93       	push	r24
    1792:	9f 93       	push	r25
    1794:	af 93       	push	r26
    1796:	bf 93       	push	r27
    1798:	ef 93       	push	r30
    179a:	ff 93       	push	r31
    179c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    17a0:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <sh_bytes_count>
    17a4:	9f ef       	ldi	r25, 0xFF	; 255
    17a6:	9e 0f       	add	r25, r30
    17a8:	95 30       	cpi	r25, 0x05	; 5
    17aa:	08 f5       	brcc	.+66     	; 0x17ee <__vector_18+0x74>
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	9e 0f       	add	r25, r30
    17b0:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <sh_bytes_count>
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	e5 56       	subi	r30, 0x65	; 101
    17b8:	fc 4f       	sbci	r31, 0xFC	; 252
    17ba:	80 83       	st	Z, r24
    17bc:	96 30       	cpi	r25, 0x06	; 6
    17be:	09 f0       	breq	.+2      	; 0x17c2 <__vector_18+0x48>
    17c0:	05 c1       	rjmp	.+522    	; 0x19cc <__vector_18+0x252>
    17c2:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <sh_command_bytes_received+0x4>
    17c6:	98 50       	subi	r25, 0x08	; 8
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	9c 30       	cpi	r25, 0x0C	; 12
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <__vector_18+0x56>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <setBlocked>
    17d4:	e6 ea       	ldi	r30, 0xA6	; 166
    17d6:	f3 e0       	ldi	r31, 0x03	; 3
    17d8:	83 e4       	ldi	r24, 0x43	; 67
    17da:	80 83       	st	Z, r24
    17dc:	88 e4       	ldi	r24, 0x48	; 72
    17de:	81 83       	std	Z+1, r24	; 0x01
    17e0:	12 82       	std	Z+2, r1	; 0x02
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <serial_response_pending>
    17e8:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <sh_bytes_count>
    17ec:	ef c0       	rjmp	.+478    	; 0x19cc <__vector_18+0x252>
    17ee:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <waiting_for_second_byte>
    17f2:	99 23       	and	r25, r25
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <__vector_18+0x7e>
    17f6:	c0 c0       	rjmp	.+384    	; 0x1978 <__vector_18+0x1fe>
    17f8:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <first_byte_of_potential_command>
    17fc:	93 35       	cpi	r25, 0x53	; 83
    17fe:	09 f0       	breq	.+2      	; 0x1802 <__vector_18+0x88>
    1800:	72 c0       	rjmp	.+228    	; 0x18e6 <__vector_18+0x16c>
    1802:	84 35       	cpi	r24, 0x54	; 84
    1804:	71 f4       	brne	.+28     	; 0x1822 <__vector_18+0xa8>
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <setBlocked>
    180c:	e6 ea       	ldi	r30, 0xA6	; 166
    180e:	f3 e0       	ldi	r31, 0x03	; 3
    1810:	83 e4       	ldi	r24, 0x43	; 67
    1812:	80 83       	st	Z, r24
    1814:	84 e5       	ldi	r24, 0x54	; 84
    1816:	81 83       	std	Z+1, r24	; 0x01
    1818:	12 82       	std	Z+2, r1	; 0x02
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <serial_response_pending>
    1820:	a6 c0       	rjmp	.+332    	; 0x196e <__vector_18+0x1f4>
    1822:	8c 34       	cpi	r24, 0x4C	; 76
    1824:	71 f4       	brne	.+28     	; 0x1842 <__vector_18+0xc8>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <setBlocked>
    182c:	e6 ea       	ldi	r30, 0xA6	; 166
    182e:	f3 e0       	ldi	r31, 0x03	; 3
    1830:	83 e4       	ldi	r24, 0x43	; 67
    1832:	80 83       	st	Z, r24
    1834:	8c e4       	ldi	r24, 0x4C	; 76
    1836:	81 83       	std	Z+1, r24	; 0x01
    1838:	12 82       	std	Z+2, r1	; 0x02
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <serial_response_pending>
    1840:	96 c0       	rjmp	.+300    	; 0x196e <__vector_18+0x1f4>
    1842:	88 34       	cpi	r24, 0x48	; 72
    1844:	51 f4       	brne	.+20     	; 0x185a <__vector_18+0xe0>
    1846:	eb e9       	ldi	r30, 0x9B	; 155
    1848:	f3 e0       	ldi	r31, 0x03	; 3
    184a:	83 e5       	ldi	r24, 0x53	; 83
    184c:	80 83       	st	Z, r24
    184e:	88 e4       	ldi	r24, 0x48	; 72
    1850:	81 83       	std	Z+1, r24	; 0x01
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <sh_bytes_count>
    1858:	8a c0       	rjmp	.+276    	; 0x196e <__vector_18+0x1f4>
    185a:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <uart_head>
    185e:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <uart_head+0x1>
    1862:	2f 5f       	subi	r18, 0xFF	; 255
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	2f 77       	andi	r18, 0x7F	; 127
    1868:	30 78       	andi	r19, 0x80	; 128
    186a:	33 23       	and	r19, r19
    186c:	34 f4       	brge	.+12     	; 0x187a <__vector_18+0x100>
    186e:	21 50       	subi	r18, 0x01	; 1
    1870:	31 09       	sbc	r19, r1
    1872:	20 68       	ori	r18, 0x80	; 128
    1874:	3f 6f       	ori	r19, 0xFF	; 255
    1876:	2f 5f       	subi	r18, 0xFF	; 255
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
    187a:	40 91 a2 03 	lds	r20, 0x03A2	; 0x8003a2 <uart_tail>
    187e:	50 91 a3 03 	lds	r21, 0x03A3	; 0x8003a3 <uart_tail+0x1>
    1882:	24 17       	cp	r18, r20
    1884:	35 07       	cpc	r19, r21
    1886:	59 f0       	breq	.+22     	; 0x189e <__vector_18+0x124>
    1888:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <uart_head>
    188c:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <uart_head+0x1>
    1890:	e7 55       	subi	r30, 0x57	; 87
    1892:	fc 4f       	sbci	r31, 0xFC	; 252
    1894:	90 83       	st	Z, r25
    1896:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <uart_head+0x1>
    189a:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <uart_head>
    189e:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <uart_head>
    18a2:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <uart_head+0x1>
    18a6:	2f 5f       	subi	r18, 0xFF	; 255
    18a8:	3f 4f       	sbci	r19, 0xFF	; 255
    18aa:	2f 77       	andi	r18, 0x7F	; 127
    18ac:	30 78       	andi	r19, 0x80	; 128
    18ae:	33 23       	and	r19, r19
    18b0:	34 f4       	brge	.+12     	; 0x18be <__vector_18+0x144>
    18b2:	21 50       	subi	r18, 0x01	; 1
    18b4:	31 09       	sbc	r19, r1
    18b6:	20 68       	ori	r18, 0x80	; 128
    18b8:	3f 6f       	ori	r19, 0xFF	; 255
    18ba:	2f 5f       	subi	r18, 0xFF	; 255
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	40 91 a2 03 	lds	r20, 0x03A2	; 0x8003a2 <uart_tail>
    18c2:	50 91 a3 03 	lds	r21, 0x03A3	; 0x8003a3 <uart_tail+0x1>
    18c6:	24 17       	cp	r18, r20
    18c8:	35 07       	cpc	r19, r21
    18ca:	09 f4       	brne	.+2      	; 0x18ce <__vector_18+0x154>
    18cc:	50 c0       	rjmp	.+160    	; 0x196e <__vector_18+0x1f4>
    18ce:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <uart_head>
    18d2:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <uart_head+0x1>
    18d6:	e7 55       	subi	r30, 0x57	; 87
    18d8:	fc 4f       	sbci	r31, 0xFC	; 252
    18da:	80 83       	st	Z, r24
    18dc:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <uart_head+0x1>
    18e0:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <uart_head>
    18e4:	44 c0       	rjmp	.+136    	; 0x196e <__vector_18+0x1f4>
    18e6:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <uart_head>
    18ea:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <uart_head+0x1>
    18ee:	2f 5f       	subi	r18, 0xFF	; 255
    18f0:	3f 4f       	sbci	r19, 0xFF	; 255
    18f2:	2f 77       	andi	r18, 0x7F	; 127
    18f4:	30 78       	andi	r19, 0x80	; 128
    18f6:	33 23       	and	r19, r19
    18f8:	34 f4       	brge	.+12     	; 0x1906 <__vector_18+0x18c>
    18fa:	21 50       	subi	r18, 0x01	; 1
    18fc:	31 09       	sbc	r19, r1
    18fe:	20 68       	ori	r18, 0x80	; 128
    1900:	3f 6f       	ori	r19, 0xFF	; 255
    1902:	2f 5f       	subi	r18, 0xFF	; 255
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	40 91 a2 03 	lds	r20, 0x03A2	; 0x8003a2 <uart_tail>
    190a:	50 91 a3 03 	lds	r21, 0x03A3	; 0x8003a3 <uart_tail+0x1>
    190e:	24 17       	cp	r18, r20
    1910:	35 07       	cpc	r19, r21
    1912:	59 f0       	breq	.+22     	; 0x192a <__vector_18+0x1b0>
    1914:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <uart_head>
    1918:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <uart_head+0x1>
    191c:	e7 55       	subi	r30, 0x57	; 87
    191e:	fc 4f       	sbci	r31, 0xFC	; 252
    1920:	90 83       	st	Z, r25
    1922:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <uart_head+0x1>
    1926:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <uart_head>
    192a:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <uart_head>
    192e:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <uart_head+0x1>
    1932:	2f 5f       	subi	r18, 0xFF	; 255
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	2f 77       	andi	r18, 0x7F	; 127
    1938:	30 78       	andi	r19, 0x80	; 128
    193a:	33 23       	and	r19, r19
    193c:	34 f4       	brge	.+12     	; 0x194a <__vector_18+0x1d0>
    193e:	21 50       	subi	r18, 0x01	; 1
    1940:	31 09       	sbc	r19, r1
    1942:	20 68       	ori	r18, 0x80	; 128
    1944:	3f 6f       	ori	r19, 0xFF	; 255
    1946:	2f 5f       	subi	r18, 0xFF	; 255
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	40 91 a2 03 	lds	r20, 0x03A2	; 0x8003a2 <uart_tail>
    194e:	50 91 a3 03 	lds	r21, 0x03A3	; 0x8003a3 <uart_tail+0x1>
    1952:	24 17       	cp	r18, r20
    1954:	35 07       	cpc	r19, r21
    1956:	59 f0       	breq	.+22     	; 0x196e <__vector_18+0x1f4>
    1958:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <uart_head>
    195c:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <uart_head+0x1>
    1960:	e7 55       	subi	r30, 0x57	; 87
    1962:	fc 4f       	sbci	r31, 0xFC	; 252
    1964:	80 83       	st	Z, r24
    1966:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <uart_head+0x1>
    196a:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <uart_head>
    196e:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <waiting_for_second_byte>
    1972:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <first_byte_of_potential_command>
    1976:	2a c0       	rjmp	.+84     	; 0x19cc <__vector_18+0x252>
    1978:	83 35       	cpi	r24, 0x53	; 83
    197a:	31 f4       	brne	.+12     	; 0x1988 <__vector_18+0x20e>
    197c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <first_byte_of_potential_command>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <waiting_for_second_byte>
    1986:	22 c0       	rjmp	.+68     	; 0x19cc <__vector_18+0x252>
    1988:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <uart_head>
    198c:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <uart_head+0x1>
    1990:	2f 5f       	subi	r18, 0xFF	; 255
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	2f 77       	andi	r18, 0x7F	; 127
    1996:	30 78       	andi	r19, 0x80	; 128
    1998:	33 23       	and	r19, r19
    199a:	34 f4       	brge	.+12     	; 0x19a8 <__vector_18+0x22e>
    199c:	21 50       	subi	r18, 0x01	; 1
    199e:	31 09       	sbc	r19, r1
    19a0:	20 68       	ori	r18, 0x80	; 128
    19a2:	3f 6f       	ori	r19, 0xFF	; 255
    19a4:	2f 5f       	subi	r18, 0xFF	; 255
    19a6:	3f 4f       	sbci	r19, 0xFF	; 255
    19a8:	40 91 a2 03 	lds	r20, 0x03A2	; 0x8003a2 <uart_tail>
    19ac:	50 91 a3 03 	lds	r21, 0x03A3	; 0x8003a3 <uart_tail+0x1>
    19b0:	24 17       	cp	r18, r20
    19b2:	35 07       	cpc	r19, r21
    19b4:	59 f0       	breq	.+22     	; 0x19cc <__vector_18+0x252>
    19b6:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <uart_head>
    19ba:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <uart_head+0x1>
    19be:	e7 55       	subi	r30, 0x57	; 87
    19c0:	fc 4f       	sbci	r31, 0xFC	; 252
    19c2:	80 83       	st	Z, r24
    19c4:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <uart_head+0x1>
    19c8:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <uart_head>
    19cc:	ff 91       	pop	r31
    19ce:	ef 91       	pop	r30
    19d0:	bf 91       	pop	r27
    19d2:	af 91       	pop	r26
    19d4:	9f 91       	pop	r25
    19d6:	8f 91       	pop	r24
    19d8:	7f 91       	pop	r23
    19da:	6f 91       	pop	r22
    19dc:	5f 91       	pop	r21
    19de:	4f 91       	pop	r20
    19e0:	3f 91       	pop	r19
    19e2:	2f 91       	pop	r18
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	0f 90       	pop	r0
    19ea:	1f 90       	pop	r1
    19ec:	18 95       	reti

000019ee <uart_buffer_empty>:
    19ee:	40 91 a4 03 	lds	r20, 0x03A4	; 0x8003a4 <uart_head>
    19f2:	50 91 a5 03 	lds	r21, 0x03A5	; 0x8003a5 <uart_head+0x1>
    19f6:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <uart_tail>
    19fa:	30 91 a3 03 	lds	r19, 0x03A3	; 0x8003a3 <uart_tail+0x1>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	42 17       	cp	r20, r18
    1a02:	53 07       	cpc	r21, r19
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <uart_buffer_empty+0x1a>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	08 95       	ret

00001a0c <uart_buffer_read_char>:

int uart_buffer_read_char(char *c) {
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) return 0;
    1a12:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <uart_buffer_empty>
    1a16:	89 2b       	or	r24, r25
    1a18:	e1 f4       	brne	.+56     	; 0x1a52 <uart_buffer_read_char+0x46>
	*c = uart_buffer[uart_tail];
    1a1a:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <uart_tail>
    1a1e:	f0 91 a3 03 	lds	r31, 0x03A3	; 0x8003a3 <uart_tail+0x1>
    1a22:	e7 55       	subi	r30, 0x57	; 87
    1a24:	fc 4f       	sbci	r31, 0xFC	; 252
    1a26:	80 81       	ld	r24, Z
    1a28:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
    1a2a:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <uart_tail>
    1a2e:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <uart_tail+0x1>
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	8f 77       	andi	r24, 0x7F	; 127
    1a36:	90 78       	andi	r25, 0x80	; 128
    1a38:	99 23       	and	r25, r25
    1a3a:	24 f4       	brge	.+8      	; 0x1a44 <uart_buffer_read_char+0x38>
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	80 68       	ori	r24, 0x80	; 128
    1a40:	9f 6f       	ori	r25, 0xFF	; 255
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <uart_tail+0x1>
    1a48:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <uart_tail>
	return 1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <uart_buffer_read_char+0x4a>
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}

int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) return 0;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <SerialRecebeChars>:

void SerialRecebeChars(int sizeS, char* string) {
    1a5c:	af 92       	push	r10
    1a5e:	bf 92       	push	r11
    1a60:	cf 92       	push	r12
    1a62:	df 92       	push	r13
    1a64:	ef 92       	push	r14
    1a66:	ff 92       	push	r15
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	1f 92       	push	r1
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	6c 01       	movw	r12, r24
    1a78:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
    1a7a:	e1 2c       	mov	r14, r1
    1a7c:	f1 2c       	mov	r15, r1
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
    1a7e:	00 e0       	ldi	r16, 0x00	; 0
    1a80:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100; // 1 segundo de timeout

	while (received < sizeS && timeout_count < timeout_limit) {
    1a82:	20 c0       	rjmp	.+64     	; 0x1ac4 <SerialRecebeChars+0x68>
		char c;
		// Permite ao main loop enviar ACK mesmo com bloqueio
		if (serial_response_pending) {
    1a84:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <serial_response_pending>
    1a88:	88 23       	and	r24, r24
    1a8a:	29 f0       	breq	.+10     	; 0x1a96 <SerialRecebeChars+0x3a>
			delay1ms(10); // Pequeno atraso para o main loop
    1a8c:	8a e0       	ldi	r24, 0x0A	; 10
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
    1a94:	17 c0       	rjmp	.+46     	; 0x1ac4 <SerialRecebeChars+0x68>
			continue; // Tenta novamente
		}

		if (uart_buffer_read_char(&c)) {
    1a96:	ce 01       	movw	r24, r28
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <uart_buffer_read_char>
    1a9e:	89 2b       	or	r24, r25
    1aa0:	51 f0       	breq	.+20     	; 0x1ab6 <SerialRecebeChars+0x5a>
			string[received++] = c;
    1aa2:	f5 01       	movw	r30, r10
    1aa4:	e0 0f       	add	r30, r16
    1aa6:	f1 1f       	adc	r31, r17
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	80 83       	st	Z, r24
    1aac:	0f 5f       	subi	r16, 0xFF	; 255
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0; // Reseta timeout
    1ab0:	e1 2c       	mov	r14, r1
    1ab2:	f1 2c       	mov	r15, r1
    1ab4:	07 c0       	rjmp	.+14     	; 0x1ac4 <SerialRecebeChars+0x68>
			} else {
			delay1ms(10); // Espera por dados
    1ab6:	8a e0       	ldi	r24, 0x0A	; 10
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delay1ms>
			timeout_count++;
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	e8 1a       	sub	r14, r24
    1ac2:	f8 0a       	sbc	r15, r24
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100; // 1 segundo de timeout

	while (received < sizeS && timeout_count < timeout_limit) {
    1ac4:	0c 15       	cp	r16, r12
    1ac6:	1d 05       	cpc	r17, r13
    1ac8:	24 f4       	brge	.+8      	; 0x1ad2 <SerialRecebeChars+0x76>
    1aca:	84 e6       	ldi	r24, 0x64	; 100
    1acc:	e8 16       	cp	r14, r24
    1ace:	f1 04       	cpc	r15, r1
    1ad0:	cc f2       	brlt	.-78     	; 0x1a84 <SerialRecebeChars+0x28>
			} else {
			delay1ms(10); // Espera por dados
			timeout_count++;
		}
	}
	string[received] = '\0'; // Termina a string
    1ad2:	f5 01       	movw	r30, r10
    1ad4:	e0 0f       	add	r30, r16
    1ad6:	f1 1f       	adc	r31, r17
    1ad8:	10 82       	st	Z, r1
}
    1ada:	0f 90       	pop	r0
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	ef 90       	pop	r14
    1ae8:	df 90       	pop	r13
    1aea:	cf 90       	pop	r12
    1aec:	bf 90       	pop	r11
    1aee:	af 90       	pop	r10
    1af0:	08 95       	ret

00001af2 <prepara_teclado>:
    1af2:	84 b1       	in	r24, 0x04	; 4
    1af4:	83 60       	ori	r24, 0x03	; 3
    1af6:	84 b9       	out	0x04, r24	; 4
    1af8:	8a b1       	in	r24, 0x0a	; 10
    1afa:	80 6c       	ori	r24, 0xC0	; 192
    1afc:	8a b9       	out	0x0a, r24	; 10
    1afe:	8a b1       	in	r24, 0x0a	; 10
    1b00:	83 7c       	andi	r24, 0xC3	; 195
    1b02:	8a b9       	out	0x0a, r24	; 10
    1b04:	8b b1       	in	r24, 0x0b	; 11
    1b06:	8c 63       	ori	r24, 0x3C	; 60
    1b08:	8b b9       	out	0x0b, r24	; 11
    1b0a:	08 95       	ret

00001b0c <atraso_debounce>:
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <atraso_debounce+0x6>
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	1a 82       	std	Y+2, r1	; 0x02
    1b18:	19 82       	std	Y+1, r1	; 0x01
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <atraso_debounce+0x1a>
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	88 3e       	cpi	r24, 0xE8	; 232
    1b2c:	93 40       	sbci	r25, 0x03	; 3
    1b2e:	b0 f3       	brcs	.-20     	; 0x1b1c <atraso_debounce+0x10>
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	08 95       	ret

00001b3a <debounce>:
    1b3a:	1f 93       	push	r17
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	18 2f       	mov	r17, r24
    1b42:	c0 e0       	ldi	r28, 0x00	; 0
    1b44:	d0 e0       	ldi	r29, 0x00	; 0
    1b46:	12 c0       	rjmp	.+36     	; 0x1b6c <debounce+0x32>
    1b48:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <atraso_debounce>
    1b4c:	29 b1       	in	r18, 0x09	; 9
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	01 2e       	mov	r0, r17
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <debounce+0x20>
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	0a 94       	dec	r0
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <debounce+0x1c>
    1b5e:	82 23       	and	r24, r18
    1b60:	d8 13       	cpse	r29, r24
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <debounce+0x2e>
    1b64:	cf 5f       	subi	r28, 0xFF	; 255
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <debounce+0x30>
    1b68:	c0 e0       	ldi	r28, 0x00	; 0
    1b6a:	d8 2f       	mov	r29, r24
    1b6c:	c7 30       	cpi	r28, 0x07	; 7
    1b6e:	61 f7       	brne	.-40     	; 0x1b48 <debounce+0xe>
    1b70:	8d 2f       	mov	r24, r29
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	08 95       	ret

00001b7a <varredura>:
    1b7a:	cf 93       	push	r28
    1b7c:	85 b1       	in	r24, 0x05	; 5
    1b7e:	83 60       	ori	r24, 0x03	; 3
    1b80:	85 b9       	out	0x05, r24	; 5
    1b82:	8b b1       	in	r24, 0x0b	; 11
    1b84:	80 6c       	ori	r24, 0xC0	; 192
    1b86:	8b b9       	out	0x0b, r24	; 11
    1b88:	85 b1       	in	r24, 0x05	; 5
    1b8a:	8d 7f       	andi	r24, 0xFD	; 253
    1b8c:	85 b9       	out	0x05, r24	; 5
    1b8e:	85 e0       	ldi	r24, 0x05	; 5
    1b90:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1b94:	81 11       	cpse	r24, r1
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <varredura+0x26>
    1b98:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1b9c:	c1 e3       	ldi	r28, 0x31	; 49
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <varredura+0x28>
    1ba0:	c0 e0       	ldi	r28, 0x00	; 0
    1ba2:	84 e0       	ldi	r24, 0x04	; 4
    1ba4:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1ba8:	81 11       	cpse	r24, r1
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <varredura+0x38>
    1bac:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1bb0:	c2 e3       	ldi	r28, 0x32	; 50
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1bb8:	81 11       	cpse	r24, r1
    1bba:	03 c0       	rjmp	.+6      	; 0x1bc2 <varredura+0x48>
    1bbc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1bc0:	c3 e3       	ldi	r28, 0x33	; 51
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1bc8:	81 11       	cpse	r24, r1
    1bca:	03 c0       	rjmp	.+6      	; 0x1bd2 <varredura+0x58>
    1bcc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1bd0:	c1 e4       	ldi	r28, 0x41	; 65
    1bd2:	85 b1       	in	r24, 0x05	; 5
    1bd4:	82 60       	ori	r24, 0x02	; 2
    1bd6:	85 b9       	out	0x05, r24	; 5
    1bd8:	85 b1       	in	r24, 0x05	; 5
    1bda:	8e 7f       	andi	r24, 0xFE	; 254
    1bdc:	85 b9       	out	0x05, r24	; 5
    1bde:	85 e0       	ldi	r24, 0x05	; 5
    1be0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1be4:	81 11       	cpse	r24, r1
    1be6:	03 c0       	rjmp	.+6      	; 0x1bee <varredura+0x74>
    1be8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1bec:	c4 e3       	ldi	r28, 0x34	; 52
    1bee:	84 e0       	ldi	r24, 0x04	; 4
    1bf0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1bf4:	81 11       	cpse	r24, r1
    1bf6:	03 c0       	rjmp	.+6      	; 0x1bfe <varredura+0x84>
    1bf8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1bfc:	c5 e3       	ldi	r28, 0x35	; 53
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1c04:	81 11       	cpse	r24, r1
    1c06:	03 c0       	rjmp	.+6      	; 0x1c0e <varredura+0x94>
    1c08:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1c0c:	c6 e3       	ldi	r28, 0x36	; 54
    1c0e:	82 e0       	ldi	r24, 0x02	; 2
    1c10:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1c14:	81 11       	cpse	r24, r1
    1c16:	03 c0       	rjmp	.+6      	; 0x1c1e <varredura+0xa4>
    1c18:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1c1c:	c2 e4       	ldi	r28, 0x42	; 66
    1c1e:	85 b1       	in	r24, 0x05	; 5
    1c20:	81 60       	ori	r24, 0x01	; 1
    1c22:	85 b9       	out	0x05, r24	; 5
    1c24:	8b b1       	in	r24, 0x0b	; 11
    1c26:	8f 77       	andi	r24, 0x7F	; 127
    1c28:	8b b9       	out	0x0b, r24	; 11
    1c2a:	85 e0       	ldi	r24, 0x05	; 5
    1c2c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1c30:	81 11       	cpse	r24, r1
    1c32:	03 c0       	rjmp	.+6      	; 0x1c3a <varredura+0xc0>
    1c34:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1c38:	c7 e3       	ldi	r28, 0x37	; 55
    1c3a:	84 e0       	ldi	r24, 0x04	; 4
    1c3c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1c40:	81 11       	cpse	r24, r1
    1c42:	03 c0       	rjmp	.+6      	; 0x1c4a <varredura+0xd0>
    1c44:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1c48:	c8 e3       	ldi	r28, 0x38	; 56
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1c50:	81 11       	cpse	r24, r1
    1c52:	03 c0       	rjmp	.+6      	; 0x1c5a <varredura+0xe0>
    1c54:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1c58:	c9 e3       	ldi	r28, 0x39	; 57
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1c60:	81 11       	cpse	r24, r1
    1c62:	03 c0       	rjmp	.+6      	; 0x1c6a <varredura+0xf0>
    1c64:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1c68:	c3 e4       	ldi	r28, 0x43	; 67
    1c6a:	8b b1       	in	r24, 0x0b	; 11
    1c6c:	80 68       	ori	r24, 0x80	; 128
    1c6e:	8b b9       	out	0x0b, r24	; 11
    1c70:	8b b1       	in	r24, 0x0b	; 11
    1c72:	8f 7b       	andi	r24, 0xBF	; 191
    1c74:	8b b9       	out	0x0b, r24	; 11
    1c76:	85 e0       	ldi	r24, 0x05	; 5
    1c78:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1c7c:	81 11       	cpse	r24, r1
    1c7e:	03 c0       	rjmp	.+6      	; 0x1c86 <varredura+0x10c>
    1c80:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1c84:	ca e2       	ldi	r28, 0x2A	; 42
    1c86:	84 e0       	ldi	r24, 0x04	; 4
    1c88:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	03 c0       	rjmp	.+6      	; 0x1c96 <varredura+0x11c>
    1c90:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1c94:	c0 e3       	ldi	r28, 0x30	; 48
    1c96:	83 e0       	ldi	r24, 0x03	; 3
    1c98:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1c9c:	81 11       	cpse	r24, r1
    1c9e:	03 c0       	rjmp	.+6      	; 0x1ca6 <varredura+0x12c>
    1ca0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1ca4:	c3 e2       	ldi	r28, 0x23	; 35
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <debounce>
    1cac:	81 11       	cpse	r24, r1
    1cae:	03 c0       	rjmp	.+6      	; 0x1cb6 <varredura+0x13c>
    1cb0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <resetar_timeout>
    1cb4:	c4 e4       	ldi	r28, 0x44	; 68
    1cb6:	8b b1       	in	r24, 0x0b	; 11
    1cb8:	80 64       	ori	r24, 0x40	; 64
    1cba:	8b b9       	out	0x0b, r24	; 11
    1cbc:	8c 2f       	mov	r24, r28
    1cbe:	cf 91       	pop	r28
    1cc0:	08 95       	ret

00001cc2 <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    1cc2:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    1cc4:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    1cc6:	85 e0       	ldi	r24, 0x05	; 5
    1cc8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    1cca:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    1cce:	81 ef       	ldi	r24, 0xF1	; 241
    1cd0:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	08 c0       	rjmp	.+16     	; 0x1ce8 <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    1cd8:	a9 9b       	sbis	0x15, 1	; 21
    1cda:	fe cf       	rjmp	.-4      	; 0x1cd8 <delay1ms+0x16>
		TCNT0 = 241;
    1cdc:	91 ef       	ldi	r25, 0xF1	; 241
    1cde:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    1ce0:	92 e0       	ldi	r25, 0x02	; 2
    1ce2:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	24 17       	cp	r18, r20
    1cea:	35 07       	cpc	r19, r21
    1cec:	ac f3       	brlt	.-22     	; 0x1cd8 <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    1cee:	15 bc       	out	0x25, r1	; 37
    1cf0:	08 95       	ret

00001cf2 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    1cf2:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    1cf4:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    1cfa:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    1cfe:	85 ef       	ldi	r24, 0xF5	; 245
    1d00:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	09 c0       	rjmp	.+18     	; 0x1d1a <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    1d08:	a9 9b       	sbis	0x15, 1	; 21
    1d0a:	fe cf       	rjmp	.-4      	; 0x1d08 <delay1us+0x16>
		TCNT0 = 245;
    1d0c:	95 ef       	ldi	r25, 0xF5	; 245
    1d0e:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    1d10:	95 b3       	in	r25, 0x15	; 21
    1d12:	92 60       	ori	r25, 0x02	; 2
    1d14:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    1d16:	2f 5f       	subi	r18, 0xFF	; 255
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1a:	24 17       	cp	r18, r20
    1d1c:	35 07       	cpc	r19, r21
    1d1e:	a4 f3       	brlt	.-24     	; 0x1d08 <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    1d20:	15 bc       	out	0x25, r1	; 37
    1d22:	08 95       	ret

00001d24 <__udivmodsi4>:
    1d24:	a1 e2       	ldi	r26, 0x21	; 33
    1d26:	1a 2e       	mov	r1, r26
    1d28:	aa 1b       	sub	r26, r26
    1d2a:	bb 1b       	sub	r27, r27
    1d2c:	fd 01       	movw	r30, r26
    1d2e:	0d c0       	rjmp	.+26     	; 0x1d4a <__udivmodsi4_ep>

00001d30 <__udivmodsi4_loop>:
    1d30:	aa 1f       	adc	r26, r26
    1d32:	bb 1f       	adc	r27, r27
    1d34:	ee 1f       	adc	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	a2 17       	cp	r26, r18
    1d3a:	b3 07       	cpc	r27, r19
    1d3c:	e4 07       	cpc	r30, r20
    1d3e:	f5 07       	cpc	r31, r21
    1d40:	20 f0       	brcs	.+8      	; 0x1d4a <__udivmodsi4_ep>
    1d42:	a2 1b       	sub	r26, r18
    1d44:	b3 0b       	sbc	r27, r19
    1d46:	e4 0b       	sbc	r30, r20
    1d48:	f5 0b       	sbc	r31, r21

00001d4a <__udivmodsi4_ep>:
    1d4a:	66 1f       	adc	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	88 1f       	adc	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	1a 94       	dec	r1
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <__udivmodsi4_loop>
    1d56:	60 95       	com	r22
    1d58:	70 95       	com	r23
    1d5a:	80 95       	com	r24
    1d5c:	90 95       	com	r25
    1d5e:	9b 01       	movw	r18, r22
    1d60:	ac 01       	movw	r20, r24
    1d62:	bd 01       	movw	r22, r26
    1d64:	cf 01       	movw	r24, r30
    1d66:	08 95       	ret

00001d68 <__tablejump2__>:
    1d68:	ee 0f       	add	r30, r30
    1d6a:	ff 1f       	adc	r31, r31
    1d6c:	05 90       	lpm	r0, Z+
    1d6e:	f4 91       	lpm	r31, Z
    1d70:	e0 2d       	mov	r30, r0
    1d72:	09 94       	ijmp

00001d74 <atol>:
    1d74:	1f 93       	push	r17
    1d76:	fc 01       	movw	r30, r24
    1d78:	99 27       	eor	r25, r25
    1d7a:	88 27       	eor	r24, r24
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	e8 94       	clt
    1d80:	11 91       	ld	r17, Z+
    1d82:	10 32       	cpi	r17, 0x20	; 32
    1d84:	e9 f3       	breq	.-6      	; 0x1d80 <atol+0xc>
    1d86:	19 30       	cpi	r17, 0x09	; 9
    1d88:	10 f0       	brcs	.+4      	; 0x1d8e <atol+0x1a>
    1d8a:	1e 30       	cpi	r17, 0x0E	; 14
    1d8c:	c8 f3       	brcs	.-14     	; 0x1d80 <atol+0xc>
    1d8e:	1b 32       	cpi	r17, 0x2B	; 43
    1d90:	51 f0       	breq	.+20     	; 0x1da6 <atol+0x32>
    1d92:	1d 32       	cpi	r17, 0x2D	; 45
    1d94:	49 f4       	brne	.+18     	; 0x1da8 <atol+0x34>
    1d96:	68 94       	set
    1d98:	06 c0       	rjmp	.+12     	; 0x1da6 <atol+0x32>
    1d9a:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__mulsi_const_10>
    1d9e:	61 0f       	add	r22, r17
    1da0:	71 1d       	adc	r23, r1
    1da2:	81 1d       	adc	r24, r1
    1da4:	91 1d       	adc	r25, r1
    1da6:	11 91       	ld	r17, Z+
    1da8:	10 53       	subi	r17, 0x30	; 48
    1daa:	1a 30       	cpi	r17, 0x0A	; 10
    1dac:	b0 f3       	brcs	.-20     	; 0x1d9a <atol+0x26>
    1dae:	3e f4       	brtc	.+14     	; 0x1dbe <atol+0x4a>
    1db0:	90 95       	com	r25
    1db2:	80 95       	com	r24
    1db4:	70 95       	com	r23
    1db6:	61 95       	neg	r22
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	8f 4f       	sbci	r24, 0xFF	; 255
    1dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbe:	1f 91       	pop	r17
    1dc0:	08 95       	ret

00001dc2 <memcpy>:
    1dc2:	fb 01       	movw	r30, r22
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <memcpy+0xa>
    1dc8:	01 90       	ld	r0, Z+
    1dca:	0d 92       	st	X+, r0
    1dcc:	41 50       	subi	r20, 0x01	; 1
    1dce:	50 40       	sbci	r21, 0x00	; 0
    1dd0:	d8 f7       	brcc	.-10     	; 0x1dc8 <memcpy+0x6>
    1dd2:	08 95       	ret

00001dd4 <strcat>:
    1dd4:	fb 01       	movw	r30, r22
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	0d 90       	ld	r0, X+
    1dda:	00 20       	and	r0, r0
    1ddc:	e9 f7       	brne	.-6      	; 0x1dd8 <strcat+0x4>
    1dde:	11 97       	sbiw	r26, 0x01	; 1
    1de0:	01 90       	ld	r0, Z+
    1de2:	0d 92       	st	X+, r0
    1de4:	00 20       	and	r0, r0
    1de6:	e1 f7       	brne	.-8      	; 0x1de0 <strcat+0xc>
    1de8:	08 95       	ret

00001dea <strcmp>:
    1dea:	fb 01       	movw	r30, r22
    1dec:	dc 01       	movw	r26, r24
    1dee:	8d 91       	ld	r24, X+
    1df0:	01 90       	ld	r0, Z+
    1df2:	80 19       	sub	r24, r0
    1df4:	01 10       	cpse	r0, r1
    1df6:	d9 f3       	breq	.-10     	; 0x1dee <strcmp+0x4>
    1df8:	99 0b       	sbc	r25, r25
    1dfa:	08 95       	ret

00001dfc <strncat>:
    1dfc:	fb 01       	movw	r30, r22
    1dfe:	dc 01       	movw	r26, r24
    1e00:	0d 90       	ld	r0, X+
    1e02:	00 20       	and	r0, r0
    1e04:	e9 f7       	brne	.-6      	; 0x1e00 <strncat+0x4>
    1e06:	11 97       	sbiw	r26, 0x01	; 1
    1e08:	41 50       	subi	r20, 0x01	; 1
    1e0a:	50 40       	sbci	r21, 0x00	; 0
    1e0c:	28 f0       	brcs	.+10     	; 0x1e18 <strncat+0x1c>
    1e0e:	01 90       	ld	r0, Z+
    1e10:	00 20       	and	r0, r0
    1e12:	0d 92       	st	X+, r0
    1e14:	c9 f7       	brne	.-14     	; 0x1e08 <strncat+0xc>
    1e16:	08 95       	ret
    1e18:	1c 92       	st	X, r1
    1e1a:	08 95       	ret

00001e1c <strncpy>:
    1e1c:	fb 01       	movw	r30, r22
    1e1e:	dc 01       	movw	r26, r24
    1e20:	41 50       	subi	r20, 0x01	; 1
    1e22:	50 40       	sbci	r21, 0x00	; 0
    1e24:	48 f0       	brcs	.+18     	; 0x1e38 <strncpy+0x1c>
    1e26:	01 90       	ld	r0, Z+
    1e28:	0d 92       	st	X+, r0
    1e2a:	00 20       	and	r0, r0
    1e2c:	c9 f7       	brne	.-14     	; 0x1e20 <strncpy+0x4>
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <strncpy+0x16>
    1e30:	1d 92       	st	X+, r1
    1e32:	41 50       	subi	r20, 0x01	; 1
    1e34:	50 40       	sbci	r21, 0x00	; 0
    1e36:	e0 f7       	brcc	.-8      	; 0x1e30 <strncpy+0x14>
    1e38:	08 95       	ret

00001e3a <strstr>:
    1e3a:	fb 01       	movw	r30, r22
    1e3c:	51 91       	ld	r21, Z+
    1e3e:	55 23       	and	r21, r21
    1e40:	a9 f0       	breq	.+42     	; 0x1e6c <strstr+0x32>
    1e42:	bf 01       	movw	r22, r30
    1e44:	dc 01       	movw	r26, r24
    1e46:	4d 91       	ld	r20, X+
    1e48:	45 17       	cp	r20, r21
    1e4a:	41 11       	cpse	r20, r1
    1e4c:	e1 f7       	brne	.-8      	; 0x1e46 <strstr+0xc>
    1e4e:	59 f4       	brne	.+22     	; 0x1e66 <strstr+0x2c>
    1e50:	cd 01       	movw	r24, r26
    1e52:	01 90       	ld	r0, Z+
    1e54:	00 20       	and	r0, r0
    1e56:	49 f0       	breq	.+18     	; 0x1e6a <strstr+0x30>
    1e58:	4d 91       	ld	r20, X+
    1e5a:	40 15       	cp	r20, r0
    1e5c:	41 11       	cpse	r20, r1
    1e5e:	c9 f3       	breq	.-14     	; 0x1e52 <strstr+0x18>
    1e60:	fb 01       	movw	r30, r22
    1e62:	41 11       	cpse	r20, r1
    1e64:	ef cf       	rjmp	.-34     	; 0x1e44 <strstr+0xa>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	08 95       	ret

00001e6e <__mulsi_const_10>:
    1e6e:	59 2f       	mov	r21, r25
    1e70:	48 2f       	mov	r20, r24
    1e72:	37 2f       	mov	r19, r23
    1e74:	26 2f       	mov	r18, r22
    1e76:	66 0f       	add	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	88 1f       	adc	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	66 0f       	add	r22, r22
    1e80:	77 1f       	adc	r23, r23
    1e82:	88 1f       	adc	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	62 0f       	add	r22, r18
    1e88:	73 1f       	adc	r23, r19
    1e8a:	84 1f       	adc	r24, r20
    1e8c:	95 1f       	adc	r25, r21
    1e8e:	66 0f       	add	r22, r22
    1e90:	77 1f       	adc	r23, r23
    1e92:	88 1f       	adc	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	08 95       	ret

00001e98 <_exit>:
    1e98:	f8 94       	cli

00001e9a <__stop_program>:
    1e9a:	ff cf       	rjmp	.-2      	; 0x1e9a <__stop_program>
