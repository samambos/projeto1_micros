
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fe  00800100  000015d2  00001666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000094  008002fe  008002fe  00001864  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000331b  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fdf  00000000  00000000  00004df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000189f  00000000  00000000  00005dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000604  00000000  00000000  00007678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009eb  00000000  00000000  00007c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000186c  00000000  00000000  00008667  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00009ed3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_11>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_18>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	2e 03       	fmul	r18, r22
      6a:	42 03       	mulsu	r20, r18
      6c:	4d 03       	fmul	r20, r21
      6e:	58 03       	fmul	r21, r16
      70:	8b 03       	fmulsu	r16, r19
      72:	4f 04       	cpc	r4, r15
      74:	55 04       	cpc	r5, r5
      76:	6b 04       	cpc	r6, r11

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	12 e0       	ldi	r17, 0x02	; 2
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e2 ed       	ldi	r30, 0xD2	; 210
      8c:	f5 e1       	ldi	r31, 0x15	; 21
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	ae 3f       	cpi	r26, 0xFE	; 254
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	23 e0       	ldi	r18, 0x03	; 3
      9c:	ae ef       	ldi	r26, 0xFE	; 254
      9e:	b2 e0       	ldi	r27, 0x02	; 2
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a2 39       	cpi	r26, 0x92	; 146
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <main>
      ae:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <mensagem_Inicial>:
      b6:	48 e0       	ldi	r20, 0x08	; 8
      b8:	51 e0       	ldi	r21, 0x01	; 1
      ba:	63 e0       	ldi	r22, 0x03	; 3
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
      c2:	43 e1       	ldi	r20, 0x13	; 19
      c4:	51 e0       	ldi	r21, 0x01	; 1
      c6:	61 e0       	ldi	r22, 0x01	; 1
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
      ce:	88 eb       	ldi	r24, 0xB8	; 184
      d0:	9b e0       	ldi	r25, 0x0B	; 11
      d2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
      d6:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
      da:	42 e2       	ldi	r20, 0x22	; 34
      dc:	51 e0       	ldi	r21, 0x01	; 1
      de:	62 e0       	ldi	r22, 0x02	; 2
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
      e6:	40 e3       	ldi	r20, 0x30	; 48
      e8:	51 e0       	ldi	r21, 0x01	; 1
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
      f2:	08 95       	ret

000000f4 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      f4:	cf 93       	push	r28
      f6:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      f8:	88 b1       	in	r24, 0x08	; 8
      fa:	80 7f       	andi	r24, 0xF0	; 240
      fc:	9c 2f       	mov	r25, r28
      fe:	92 95       	swap	r25
     100:	9f 70       	andi	r25, 0x0F	; 15
     102:	89 2b       	or	r24, r25
     104:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
     106:	88 b1       	in	r24, 0x08	; 8
     108:	8f 7d       	andi	r24, 0xDF	; 223
     10a:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
     10c:	88 b1       	in	r24, 0x08	; 8
     10e:	80 61       	ori	r24, 0x10	; 16
     110:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     112:	88 b1       	in	r24, 0x08	; 8
     114:	8f 7e       	andi	r24, 0xEF	; 239
     116:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
     118:	84 e6       	ldi	r24, 0x64	; 100
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
     120:	88 b1       	in	r24, 0x08	; 8
     122:	80 7f       	andi	r24, 0xF0	; 240
     124:	cf 70       	andi	r28, 0x0F	; 15
     126:	c8 2b       	or	r28, r24
     128:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     12a:	88 b1       	in	r24, 0x08	; 8
     12c:	80 61       	ori	r24, 0x10	; 16
     12e:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     130:	88 b1       	in	r24, 0x08	; 8
     132:	8f 7e       	andi	r24, 0xEF	; 239
     134:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
}
     13e:	cf 91       	pop	r28
     140:	08 95       	ret

00000142 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     146:	8a e0       	ldi	r24, 0x0A	; 10
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     154:	88 e2       	ldi	r24, 0x28	; 40
     156:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     15a:	8c e0       	ldi	r24, 0x0C	; 12
     15c:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     160:	86 e0       	ldi	r24, 0x06	; 6
     162:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
     16c:	08 95       	ret

0000016e <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     174:	80 e8       	ldi	r24, 0x80	; 128
     176:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
     17a:	08 95       	ret

0000017c <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	ec 01       	movw	r28, r24
	while(*texto) {
     182:	23 c0       	rjmp	.+70     	; 0x1ca <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     184:	98 b1       	in	r25, 0x08	; 8
     186:	90 7f       	andi	r25, 0xF0	; 240
     188:	82 95       	swap	r24
     18a:	8f 70       	andi	r24, 0x0F	; 15
     18c:	89 2b       	or	r24, r25
     18e:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     190:	88 b1       	in	r24, 0x08	; 8
     192:	80 62       	ori	r24, 0x20	; 32
     194:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     196:	88 b1       	in	r24, 0x08	; 8
     198:	80 61       	ori	r24, 0x10	; 16
     19a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	8f 7e       	andi	r24, 0xEF	; 239
     1a0:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     1a2:	88 ec       	ldi	r24, 0xC8	; 200
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     1aa:	98 b1       	in	r25, 0x08	; 8
     1ac:	89 91       	ld	r24, Y+
     1ae:	90 7f       	andi	r25, 0xF0	; 240
     1b0:	8f 70       	andi	r24, 0x0F	; 15
     1b2:	89 2b       	or	r24, r25
     1b4:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     1b6:	88 b1       	in	r24, 0x08	; 8
     1b8:	80 61       	ori	r24, 0x10	; 16
     1ba:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     1bc:	88 b1       	in	r24, 0x08	; 8
     1be:	8f 7e       	andi	r24, 0xEF	; 239
     1c0:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1ca:	88 81       	ld	r24, Y
     1cc:	81 11       	cpse	r24, r1
     1ce:	da cf       	rjmp	.-76     	; 0x184 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1dc:	81 11       	cpse	r24, r1
     1de:	08 c0       	rjmp	.+16     	; 0x1f0 <LCD_Escrever_Linha+0x1a>
     1e0:	60 31       	cpi	r22, 0x10	; 16
     1e2:	30 f4       	brcc	.+12     	; 0x1f0 <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1e4:	86 2f       	mov	r24, r22
     1e6:	8f 70       	andi	r24, 0x0F	; 15
     1e8:	80 68       	ori	r24, 0x80	; 128
     1ea:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
     1ee:	09 c0       	rjmp	.+18     	; 0x202 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	39 f4       	brne	.+14     	; 0x202 <LCD_Escrever_Linha+0x2c>
     1f4:	60 31       	cpi	r22, 0x10	; 16
     1f6:	28 f4       	brcc	.+10     	; 0x202 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1f8:	86 2f       	mov	r24, r22
     1fa:	8f 70       	andi	r24, 0x0F	; 15
     1fc:	80 6c       	ori	r24, 0xC0	; 192
     1fe:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     202:	ce 01       	movw	r24, r28
     204:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     208:	80 e8       	ldi	r24, 0x80	; 128
     20a:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_cmd>
}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <ler_codigo_aluno>:
     214:	ef 92       	push	r14
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	00 d0       	rcall	.+0      	; 0x222 <ler_codigo_aluno+0xe>
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	7c 01       	movw	r14, r24
     228:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     22c:	4f e3       	ldi	r20, 0x3F	; 63
     22e:	51 e0       	ldi	r21, 0x01	; 1
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     238:	4e e4       	ldi	r20, 0x4E	; 78
     23a:	51 e0       	ldi	r21, 0x01	; 1
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	10 e0       	ldi	r17, 0x00	; 0
     248:	1d c0       	rjmp	.+58     	; 0x284 <ler_codigo_aluno+0x70>
     24a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     24e:	89 2b       	or	r24, r25
     250:	f1 f4       	brne	.+60     	; 0x28e <ler_codigo_aluno+0x7a>
     252:	0e 94 a6 09 	call	0x134c	; 0x134c <varredura>
     256:	90 ed       	ldi	r25, 0xD0	; 208
     258:	98 0f       	add	r25, r24
     25a:	9a 30       	cpi	r25, 0x0A	; 10
     25c:	98 f4       	brcc	.+38     	; 0x284 <ler_codigo_aluno+0x70>
     25e:	f7 01       	movw	r30, r14
     260:	e0 0f       	add	r30, r16
     262:	f1 1f       	adc	r31, r17
     264:	80 83       	st	Z, r24
     266:	89 83       	std	Y+1, r24	; 0x01
     268:	1a 82       	std	Y+2, r1	; 0x02
     26a:	ae 01       	movw	r20, r28
     26c:	4f 5f       	subi	r20, 0xFF	; 255
     26e:	5f 4f       	sbci	r21, 0xFF	; 255
     270:	60 2f       	mov	r22, r16
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     278:	0f 5f       	subi	r16, 0xFF	; 255
     27a:	1f 4f       	sbci	r17, 0xFF	; 255
     27c:	88 ec       	ldi	r24, 0xC8	; 200
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     284:	06 30       	cpi	r16, 0x06	; 6
     286:	11 05       	cpc	r17, r1
     288:	04 f3       	brlt	.-64     	; 0x24a <ler_codigo_aluno+0x36>
     28a:	f7 01       	movw	r30, r14
     28c:	16 82       	std	Z+6, r1	; 0x06
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	ff 90       	pop	r15
     29c:	ef 90       	pop	r14
     29e:	08 95       	ret

000002a0 <ler_senha>:
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <ler_senha+0xe>
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	7c 01       	movw	r14, r24
     2b4:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     2b8:	45 e5       	ldi	r20, 0x55	; 85
     2ba:	51 e0       	ldi	r21, 0x01	; 1
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     2c4:	4e e4       	ldi	r20, 0x4E	; 78
     2c6:	51 e0       	ldi	r21, 0x01	; 1
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     2d0:	00 e0       	ldi	r16, 0x00	; 0
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	1e c0       	rjmp	.+60     	; 0x312 <ler_senha+0x72>
     2d6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     2da:	89 2b       	or	r24, r25
     2dc:	f9 f4       	brne	.+62     	; 0x31c <ler_senha+0x7c>
     2de:	0e 94 a6 09 	call	0x134c	; 0x134c <varredura>
     2e2:	90 ed       	ldi	r25, 0xD0	; 208
     2e4:	98 0f       	add	r25, r24
     2e6:	9a 30       	cpi	r25, 0x0A	; 10
     2e8:	a0 f4       	brcc	.+40     	; 0x312 <ler_senha+0x72>
     2ea:	f7 01       	movw	r30, r14
     2ec:	e0 0f       	add	r30, r16
     2ee:	f1 1f       	adc	r31, r17
     2f0:	80 83       	st	Z, r24
     2f2:	8a e2       	ldi	r24, 0x2A	; 42
     2f4:	89 83       	std	Y+1, r24	; 0x01
     2f6:	1a 82       	std	Y+2, r1	; 0x02
     2f8:	ae 01       	movw	r20, r28
     2fa:	4f 5f       	subi	r20, 0xFF	; 255
     2fc:	5f 4f       	sbci	r21, 0xFF	; 255
     2fe:	60 2f       	mov	r22, r16
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     306:	0f 5f       	subi	r16, 0xFF	; 255
     308:	1f 4f       	sbci	r17, 0xFF	; 255
     30a:	88 ec       	ldi	r24, 0xC8	; 200
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     312:	06 30       	cpi	r16, 0x06	; 6
     314:	11 05       	cpc	r17, r1
     316:	fc f2       	brlt	.-66     	; 0x2d6 <ler_senha+0x36>
     318:	f7 01       	movw	r30, r14
     31a:	16 82       	std	Z+6, r1	; 0x06
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	08 95       	ret

0000032e <validar_codigo_aluno>:
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	ae 97       	sbiw	r28, 0x2e	; 46
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
     342:	dc 01       	movw	r26, r24
     344:	0d 90       	ld	r0, X+
     346:	00 20       	and	r0, r0
     348:	e9 f7       	brne	.-6      	; 0x344 <validar_codigo_aluno+0x16>
     34a:	11 97       	sbiw	r26, 0x01	; 1
     34c:	a8 1b       	sub	r26, r24
     34e:	b9 0b       	sbc	r27, r25
     350:	16 97       	sbiw	r26, 0x06	; 6
     352:	09 f0       	breq	.+2      	; 0x356 <validar_codigo_aluno+0x28>
     354:	50 c0       	rjmp	.+160    	; 0x3f6 <validar_codigo_aluno+0xc8>
     356:	db 01       	movw	r26, r22
     358:	0d 90       	ld	r0, X+
     35a:	00 20       	and	r0, r0
     35c:	e9 f7       	brne	.-6      	; 0x358 <validar_codigo_aluno+0x2a>
     35e:	11 97       	sbiw	r26, 0x01	; 1
     360:	a6 1b       	sub	r26, r22
     362:	b7 0b       	sbc	r27, r23
     364:	16 97       	sbiw	r26, 0x06	; 6
     366:	09 f0       	breq	.+2      	; 0x36a <validar_codigo_aluno+0x3c>
     368:	49 c0       	rjmp	.+146    	; 0x3fc <validar_codigo_aluno+0xce>
     36a:	fc 01       	movw	r30, r24
     36c:	83 e4       	ldi	r24, 0x43	; 67
     36e:	89 83       	std	Y+1, r24	; 0x01
     370:	85 e4       	ldi	r24, 0x45	; 69
     372:	8a 83       	std	Y+2, r24	; 0x02
     374:	86 e0       	ldi	r24, 0x06	; 6
     376:	de 01       	movw	r26, r28
     378:	13 96       	adiw	r26, 0x03	; 3
     37a:	01 90       	ld	r0, Z+
     37c:	0d 92       	st	X+, r0
     37e:	8a 95       	dec	r24
     380:	e1 f7       	brne	.-8      	; 0x37a <validar_codigo_aluno+0x4c>
     382:	86 e0       	ldi	r24, 0x06	; 6
     384:	fb 01       	movw	r30, r22
     386:	de 01       	movw	r26, r28
     388:	19 96       	adiw	r26, 0x09	; 9
     38a:	01 90       	ld	r0, Z+
     38c:	0d 92       	st	X+, r0
     38e:	8a 95       	dec	r24
     390:	e1 f7       	brne	.-8      	; 0x38a <validar_codigo_aluno+0x5c>
     392:	be 01       	movw	r22, r28
     394:	6f 5f       	subi	r22, 0xFF	; 255
     396:	7f 4f       	sbci	r23, 0xFF	; 255
     398:	8e e0       	ldi	r24, 0x0E	; 14
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 76 07 	call	0xeec	; 0xeec <SerialEnviaChars>
     3a0:	be 01       	movw	r22, r28
     3a2:	61 5f       	subi	r22, 0xF1	; 241
     3a4:	7f 4f       	sbci	r23, 0xFF	; 255
     3a6:	80 e2       	ldi	r24, 0x20	; 32
     3a8:	fb 01       	movw	r30, r22
     3aa:	11 92       	st	Z+, r1
     3ac:	8a 95       	dec	r24
     3ae:	e9 f7       	brne	.-6      	; 0x3aa <validar_codigo_aluno+0x7c>
     3b0:	8f e1       	ldi	r24, 0x1F	; 31
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 1e 09 	call	0x123c	; 0x123c <SerialRecebeChars>
     3b8:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     3bc:	43 e6       	ldi	r20, 0x63	; 99
     3be:	51 e0       	ldi	r21, 0x01	; 1
     3c0:	64 e0       	ldi	r22, 0x04	; 4
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     3c8:	80 ed       	ldi	r24, 0xD0	; 208
     3ca:	97 e0       	ldi	r25, 0x07	; 7
     3cc:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     3d0:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     3d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d6:	83 35       	cpi	r24, 0x53	; 83
     3d8:	a1 f4       	brne	.+40     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3da:	88 89       	ldd	r24, Y+16	; 0x10
     3dc:	85 34       	cpi	r24, 0x45	; 69
     3de:	a1 f4       	brne	.+40     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     3e0:	6e e6       	ldi	r22, 0x6E	; 110
     3e2:	71 e0       	ldi	r23, 0x01	; 1
     3e4:	ce 01       	movw	r24, r28
     3e6:	0f 96       	adiw	r24, 0x0f	; 15
     3e8:	0e 94 cd 0a 	call	0x159a	; 0x159a <strstr>
     3ec:	89 2b       	or	r24, r25
     3ee:	79 f0       	breq	.+30     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e c0       	rjmp	.+28     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0b c0       	rjmp	.+22     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	08 c0       	rjmp	.+16     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	05 c0       	rjmp	.+10     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	ae 96       	adiw	r28, 0x2e	; 46
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <configurar_timer>:
void resetar_timeout();

// Configuração do Timer para interrupção periódica
void configurar_timer() {
	// Configurar o pino do LED como saída
	DDRB |= (1 << LED_PIN);
     424:	84 b1       	in	r24, 0x04	; 4
     426:	80 61       	ori	r24, 0x10	; 16
     428:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << LED_PIN); // Inicia com LED desligado
     42a:	85 b1       	in	r24, 0x05	; 5
     42c:	8f 7e       	andi	r24, 0xEF	; 239
     42e:	85 b9       	out	0x05, r24	; 5
	
	// Configurar o Timer1 para gerar interrupção a cada 1ms
	TCCR1A = 0; // Modo normal
     430:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // CTC mode, prescaler 64
     434:	8b e0       	ldi	r24, 0x0B	; 11
     436:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz/64/250 = 1ms)
     43a:	8a ef       	ldi	r24, 0xFA	; 250
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     442:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A); // Habilitar interrupção por comparação
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     44c:	08 95       	ret

0000044e <enviar_confirmacao_operacional>:
		PORTB &= ~(1 << LED_PIN); // Desliga LED
	}
}

// Função para enviar a mensagem de confirmação operacional
void enviar_confirmacao_operacional() {
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	00 d0       	rcall	.+0      	; 0x454 <enviar_confirmacao_operacional+0x6>
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
	char confirmacao[2];
	confirmacao[0]='C';
     458:	83 e4       	ldi	r24, 0x43	; 67
     45a:	89 83       	std	Y+1, r24	; 0x01
	confirmacao[1]='O';
     45c:	8f e4       	ldi	r24, 0x4F	; 79
     45e:	8a 83       	std	Y+2, r24	; 0x02
	SerialEnviaChars(2, confirmacao);
     460:	be 01       	movw	r22, r28
     462:	6f 5f       	subi	r22, 0xFF	; 255
     464:	7f 4f       	sbci	r23, 0xFF	; 255
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 76 07 	call	0xeec	; 0xeec <SerialEnviaChars>
}
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <__vector_11>:
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // CTC mode, prescaler 64
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz/64/250 = 1ms)
	TIMSK1 = (1 << OCIE1A); // Habilitar interrupção por comparação
}

ISR(TIMER1_COMPA_vect) {
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	2f 93       	push	r18
     484:	3f 93       	push	r19
     486:	4f 93       	push	r20
     488:	5f 93       	push	r21
     48a:	6f 93       	push	r22
     48c:	7f 93       	push	r23
     48e:	8f 93       	push	r24
     490:	9f 93       	push	r25
     492:	af 93       	push	r26
     494:	bf 93       	push	r27
     496:	ef 93       	push	r30
     498:	ff 93       	push	r31
	timer_count++;
     49a:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <timer_count>
     49e:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <timer_count+0x1>
     4a2:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <timer_count+0x2>
     4a6:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <timer_count+0x3>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	a1 1d       	adc	r26, r1
     4ae:	b1 1d       	adc	r27, r1
     4b0:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <timer_count>
     4b4:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <timer_count+0x1>
     4b8:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <timer_count+0x2>
     4bc:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <timer_count+0x3>
	
	// Verifica se está no período de alerta (últimos 12 segundos)
	if (timer_count >= TIMEOUT_ALERTA && timer_count < TIMEOUT_TOTAL) {
     4c0:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <timer_count>
     4c4:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <timer_count+0x1>
     4c8:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <timer_count+0x2>
     4cc:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <timer_count+0x3>
     4d0:	80 35       	cpi	r24, 0x50	; 80
     4d2:	96 44       	sbci	r25, 0x46	; 70
     4d4:	a1 05       	cpc	r26, r1
     4d6:	b1 05       	cpc	r27, r1
     4d8:	a0 f1       	brcs	.+104    	; 0x542 <__vector_11+0xca>
     4da:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <timer_count>
     4de:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <timer_count+0x1>
     4e2:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <timer_count+0x2>
     4e6:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <timer_count+0x3>
     4ea:	80 33       	cpi	r24, 0x30	; 48
     4ec:	95 47       	sbci	r25, 0x75	; 117
     4ee:	a1 05       	cpc	r26, r1
     4f0:	b1 05       	cpc	r27, r1
     4f2:	38 f5       	brcc	.+78     	; 0x542 <__vector_11+0xca>
		alerta_led = 1;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <alerta_led>
		
		// Piscar o LED a cada 250ms (2 vezes por segundo)
		if (timer_count % INTERVALO_PISCA == 0) {
     4fa:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <timer_count>
     4fe:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <timer_count+0x1>
     502:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <timer_count+0x2>
     506:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <timer_count+0x3>
     50a:	2a ef       	ldi	r18, 0xFA	; 250
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__udivmodsi4>
     516:	67 2b       	or	r22, r23
     518:	68 2b       	or	r22, r24
     51a:	69 2b       	or	r22, r25
     51c:	91 f4       	brne	.+36     	; 0x542 <__vector_11+0xca>
			led_state = !led_state;
     51e:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <__data_end>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	91 11       	cpse	r25, r1
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <__data_end>
			if (led_state) {
     52c:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__data_end>
     530:	88 23       	and	r24, r24
     532:	21 f0       	breq	.+8      	; 0x53c <__vector_11+0xc4>
				PORTB |= (1 << LED_PIN);  // Liga LED
     534:	85 b1       	in	r24, 0x05	; 5
     536:	80 61       	ori	r24, 0x10	; 16
     538:	85 b9       	out	0x05, r24	; 5
     53a:	03 c0       	rjmp	.+6      	; 0x542 <__vector_11+0xca>
				} else {
				PORTB &= ~(1 << LED_PIN); // Desliga LED
     53c:	85 b1       	in	r24, 0x05	; 5
     53e:	8f 7e       	andi	r24, 0xEF	; 239
     540:	85 b9       	out	0x05, r24	; 5
			}
		}
	}
	
	// Timeout completo (30 segundos)
	if (timer_count >= TIMEOUT_TOTAL) {
     542:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <timer_count>
     546:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <timer_count+0x1>
     54a:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <timer_count+0x2>
     54e:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <timer_count+0x3>
     552:	80 33       	cpi	r24, 0x30	; 48
     554:	95 47       	sbci	r25, 0x75	; 117
     556:	a1 05       	cpc	r26, r1
     558:	b1 05       	cpc	r27, r1
     55a:	88 f0       	brcs	.+34     	; 0x57e <__vector_11+0x106>
		enviar_confirmacao_operacional();
     55c:	0e 94 27 02 	call	0x44e	; 0x44e <enviar_confirmacao_operacional>
		finalizar_sessao();
     560:	0e 94 f2 06 	call	0xde4	; 0xde4 <finalizar_sessao>
		timer_count = 0;
     564:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <timer_count>
     568:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <timer_count+0x1>
     56c:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <timer_count+0x2>
     570:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <timer_count+0x3>
		alerta_led = 0;
     574:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <alerta_led>
		PORTB &= ~(1 << LED_PIN); // Desliga LED
     578:	85 b1       	in	r24, 0x05	; 5
     57a:	8f 7e       	andi	r24, 0xEF	; 239
     57c:	85 b9       	out	0x05, r24	; 5
	}
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	7f 91       	pop	r23
     58c:	6f 91       	pop	r22
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <resetar_timeout>:
	SerialEnviaChars(2, confirmacao);
}

// Função para resetar o contador de timeout
void resetar_timeout() {
	timer_count = 0;
     5a0:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <timer_count>
     5a4:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <timer_count+0x1>
     5a8:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <timer_count+0x2>
     5ac:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <timer_count+0x3>
	alerta_led = 0;
     5b0:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <alerta_led>
	PORTB &= ~(1 << LED_PIN); // Desliga LED
     5b4:	85 b1       	in	r24, 0x05	; 5
     5b6:	8f 7e       	andi	r24, 0xEF	; 239
     5b8:	85 b9       	out	0x05, r24	; 5
     5ba:	08 95       	ret

000005bc <aguardar_desbloqueio>:
}

void aguardar_desbloqueio() {
	LCD_limpar();
     5bc:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
     5c0:	4d e7       	ldi	r20, 0x7D	; 125
     5c2:	51 e0       	ldi	r21, 0x01	; 1
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
     5cc:	4a e8       	ldi	r20, 0x8A	; 138
     5ce:	51 e0       	ldi	r21, 0x01	; 1
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
	while (isBlocked()) {
     5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <aguardar_desbloqueio+0x26>
		delay1ms(200);
     5da:	88 ec       	ldi	r24, 0xC8	; 200
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>

void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
	while (isBlocked()) {
     5e2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     5e6:	89 2b       	or	r24, r25
     5e8:	c1 f7       	brne	.-16     	; 0x5da <aguardar_desbloqueio+0x1e>
		delay1ms(200);
	}
	LCD_limpar();
     5ea:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     5ee:	08 95       	ret

000005f0 <main>:
}

int main(void) {
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	66 97       	sbiw	r28, 0x16	; 22
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     604:	0e 94 62 09 	call	0x12c4	; 0x12c4 <prepara_teclado>
	LCD_iniciar();
     608:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_iniciar>
	initUART();
     60c:	0e 94 67 07 	call	0xece	; 0xece <initUART>
	configurar_timer();
     610:	0e 94 12 02 	call	0x424	; 0x424 <configurar_timer>
	sei(); // Habilitar interrupções globais
     614:	78 94       	sei

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
     616:	88 e0       	ldi	r24, 0x08	; 8
     618:	e0 e0       	ldi	r30, 0x00	; 0
     61a:	f1 e0       	ldi	r31, 0x01	; 1
     61c:	de 01       	movw	r26, r28
     61e:	1f 96       	adiw	r26, 0x0f	; 15
     620:	01 90       	ld	r0, Z+
     622:	0d 92       	st	X+, r0
     624:	8a 95       	dec	r24
     626:	e1 f7       	brne	.-8      	; 0x620 <main+0x30>
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     628:	00 e0       	ldi	r16, 0x00	; 0
		"2-Pagamento",
		"3-Saldo",
		"4-Sair"
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
     62a:	e1 2c       	mov	r14, r1
     62c:	f1 2c       	mov	r15, r1
     62e:	07 c0       	rjmp	.+14     	; 0x63e <main+0x4e>
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     630:	01 e0       	ldi	r16, 0x01	; 1
     632:	05 c0       	rjmp	.+10     	; 0x63e <main+0x4e>
			break;

			case ESTADO_CODIGO:
			resetar_timeout();
			ler_codigo_aluno(codigo_aluno);
			if (!isBlocked()) estado = ESTADO_SENHA;
     634:	02 e0       	ldi	r16, 0x02	; 2
     636:	03 c0       	rjmp	.+6      	; 0x63e <main+0x4e>
			break;

			case ESTADO_SENHA:
			resetar_timeout();
			ler_senha(senha_aluno);
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     638:	03 e0       	ldi	r16, 0x03	; 3
     63a:	01 c0       	rjmp	.+2      	; 0x63e <main+0x4e>
						estado = ESTADO_TELA_INICIAL;
						break; // Sai do loop while para mudar de estado
						} else {
						// Lida com a seleção das opções 1, 2, 3, 4
						switch (tecla) {
							case '1': estado = ESTADO_SAQUE; break;
     63c:	05 e0       	ldi	r16, 0x05	; 5
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		if (isBlocked()) {
     63e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     642:	89 2b       	or	r24, r25
     644:	21 f0       	breq	.+8      	; 0x64e <main+0x5e>
			aguardar_desbloqueio();
     646:	0e 94 de 02 	call	0x5bc	; 0x5bc <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     64a:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     64c:	f8 cf       	rjmp	.-16     	; 0x63e <main+0x4e>
		}

		switch (estado) {
     64e:	80 2f       	mov	r24, r16
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	fc 01       	movw	r30, r24
     654:	ec 5c       	subi	r30, 0xCC	; 204
     656:	ff 4f       	sbci	r31, 0xFF	; 255
     658:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			resetar_timeout();
     65c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
			LCD_limpar();
     660:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
			mensagem_Inicial();
     664:	0e 94 5b 00 	call	0xb6	; 0xb6 <mensagem_Inicial>
			while (varredura() == 0) {
     668:	04 c0       	rjmp	.+8      	; 0x672 <main+0x82>
				if (isBlocked()) break;
     66a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     66e:	89 2b       	or	r24, r25
     670:	21 f4       	brne	.+8      	; 0x67a <main+0x8a>
		switch (estado) {
			case ESTADO_TELA_INICIAL:
			resetar_timeout();
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     672:	0e 94 a6 09 	call	0x134c	; 0x134c <varredura>
     676:	88 23       	and	r24, r24
     678:	c1 f3       	breq	.-16     	; 0x66a <main+0x7a>
				if (isBlocked()) break;
			}
			if (!isBlocked()) estado = ESTADO_CODIGO;
     67a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     67e:	89 2b       	or	r24, r25
     680:	b9 f2       	breq	.-82     	; 0x630 <main+0x40>
     682:	dd cf       	rjmp	.-70     	; 0x63e <main+0x4e>
			break;

			case ESTADO_CODIGO:
			resetar_timeout();
     684:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
			ler_codigo_aluno(codigo_aluno);
     688:	ce 01       	movw	r24, r28
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	0e 94 0a 01 	call	0x214	; 0x214 <ler_codigo_aluno>
			if (!isBlocked()) estado = ESTADO_SENHA;
     690:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     694:	89 2b       	or	r24, r25
     696:	71 f2       	breq	.-100    	; 0x634 <main+0x44>
     698:	d2 cf       	rjmp	.-92     	; 0x63e <main+0x4e>
			break;

			case ESTADO_SENHA:
			resetar_timeout();
     69a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
			ler_senha(senha_aluno);
     69e:	ce 01       	movw	r24, r28
     6a0:	08 96       	adiw	r24, 0x08	; 8
     6a2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ler_senha>
			if (!isBlocked()) estado = ESTADO_VALIDACAO;
     6a6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     6aa:	89 2b       	or	r24, r25
     6ac:	29 f2       	breq	.-118    	; 0x638 <main+0x48>
     6ae:	c7 cf       	rjmp	.-114    	; 0x63e <main+0x4e>
			break;

			case ESTADO_VALIDACAO:
			resetar_timeout();
     6b0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
     6b4:	be 01       	movw	r22, r28
     6b6:	68 5f       	subi	r22, 0xF8	; 248
     6b8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	0e 94 97 01 	call	0x32e	; 0x32e <validar_codigo_aluno>
     6c2:	89 2b       	or	r24, r25
     6c4:	a1 f0       	breq	.+40     	; 0x6ee <main+0xfe>
				LCD_limpar();
     6c6:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "BEM VINDO(A)!");
     6ca:	47 e9       	ldi	r20, 0x97	; 151
     6cc:	51 e0       	ldi	r21, 0x01	; 1
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "PROCESSANDO...");
     6d6:	45 ea       	ldi	r20, 0xA5	; 165
     6d8:	51 e0       	ldi	r21, 0x01	; 1
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				delay1ms(2000);
     6e2:	80 ed       	ldi	r24, 0xD0	; 208
     6e4:	97 e0       	ldi	r25, 0x07	; 7
     6e6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
				estado = ESTADO_MENU;
     6ea:	04 e0       	ldi	r16, 0x04	; 4
     6ec:	a8 cf       	rjmp	.-176    	; 0x63e <main+0x4e>
				} else {
				LCD_limpar();
     6ee:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "CONTA INVALIDA!");
     6f2:	44 eb       	ldi	r20, 0xB4	; 180
     6f4:	51 e0       	ldi	r21, 0x01	; 1
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "TENTE NOVAMENTE");
     6fe:	44 ec       	ldi	r20, 0xC4	; 196
     700:	51 e0       	ldi	r21, 0x01	; 1
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				delay1ms(2000);
     70a:	80 ed       	ldi	r24, 0xD0	; 208
     70c:	97 e0       	ldi	r25, 0x07	; 7
     70e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     712:	00 e0       	ldi	r16, 0x00	; 0
     714:	94 cf       	rjmp	.-216    	; 0x63e <main+0x4e>
			}
			break;

			case ESTADO_MENU:
			resetar_timeout();
     716:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
			// Exibe as opções iniciais do menu
			LCD_limpar();
     71a:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     71e:	f7 01       	movw	r30, r14
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	8c 0f       	add	r24, r28
     72a:	9d 1f       	adc	r25, r29
     72c:	e8 0f       	add	r30, r24
     72e:	f9 1f       	adc	r31, r25
     730:	46 85       	ldd	r20, Z+14	; 0x0e
     732:	57 85       	ldd	r21, Z+15	; 0x0f
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes) {
     73c:	c7 01       	movw	r24, r14
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	84 30       	cpi	r24, 0x04	; 4
     742:	91 05       	cpc	r25, r1
     744:	7c f4       	brge	.+30     	; 0x764 <main+0x174>
				LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	e1 e0       	ldi	r30, 0x01	; 1
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	ec 0f       	add	r30, r28
     750:	fd 1f       	adc	r31, r29
     752:	e8 0f       	add	r30, r24
     754:	f9 1f       	adc	r31, r25
     756:	46 85       	ldd	r20, Z+14	; 0x0e
     758:	57 85       	ldd	r21, Z+15	; 0x0f
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     762:	06 c0       	rjmp	.+12     	; 0x770 <main+0x180>
				} else {
				LCD_Escrever_Linha(1, 0, " ");
     764:	44 ed       	ldi	r20, 0xD4	; 212
     766:	51 e0       	ldi	r21, 0x01	; 1
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			}

			while (1) { // Permanece neste loop até uma seleção ou saída válida
				if (isBlocked()) break;
     770:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     774:	89 2b       	or	r24, r25
     776:	09 f0       	breq	.+2      	; 0x77a <main+0x18a>
     778:	62 cf       	rjmp	.-316    	; 0x63e <main+0x4e>

				tecla = varredura();
     77a:	0e 94 a6 09 	call	0x134c	; 0x134c <varredura>
     77e:	18 2f       	mov	r17, r24
				if (tecla != 0) {
     780:	88 23       	and	r24, r24
     782:	b1 f3       	breq	.-20     	; 0x770 <main+0x180>
					delay1ms(300); // Debounce delay
     784:	8c e2       	ldi	r24, 0x2C	; 44
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>

					if (tecla == 'B') { // Rolar para baixo
     78c:	12 34       	cpi	r17, 0x42	; 66
     78e:	c1 f5       	brne	.+112    	; 0x800 <__DATA_REGION_LENGTH__>
						if (indice_menu < total_opcoes - 2) { // Garante que não ultrapasse os limites para a segunda linha
     790:	92 e0       	ldi	r25, 0x02	; 2
     792:	e9 16       	cp	r14, r25
     794:	f1 04       	cpc	r15, r1
     796:	64 f7       	brge	.-40     	; 0x770 <main+0x180>
							indice_menu++;
     798:	67 01       	movw	r12, r14
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	c8 1a       	sub	r12, r24
     79e:	d8 0a       	sbc	r13, r24
							LCD_limpar();
     7a0:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     7a4:	f6 01       	movw	r30, r12
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	8c 0f       	add	r24, r28
     7b0:	9d 1f       	adc	r25, r29
     7b2:	e8 0f       	add	r30, r24
     7b4:	f9 1f       	adc	r31, r25
     7b6:	46 85       	ldd	r20, Z+14	; 0x0e
     7b8:	57 85       	ldd	r21, Z+15	; 0x0f
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
							if (indice_menu + 1 < total_opcoes) {
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	e9 0e       	add	r14, r25
     7c6:	f1 1c       	adc	r15, r1
     7c8:	84 e0       	ldi	r24, 0x04	; 4
     7ca:	e8 16       	cp	r14, r24
     7cc:	f1 04       	cpc	r15, r1
     7ce:	84 f4       	brge	.+32     	; 0x7f0 <main+0x200>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	e1 e0       	ldi	r30, 0x01	; 1
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	ec 0f       	add	r30, r28
     7da:	fd 1f       	adc	r31, r29
     7dc:	ee 0d       	add	r30, r14
     7de:	ff 1d       	adc	r31, r15
     7e0:	46 85       	ldd	r20, Z+14	; 0x0e
     7e2:	57 85       	ldd	r21, Z+15	; 0x0f
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				if (tecla != 0) {
					delay1ms(300); // Debounce delay

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) { // Garante que não ultrapasse os limites para a segunda linha
							indice_menu++;
     7ec:	76 01       	movw	r14, r12
     7ee:	c0 cf       	rjmp	.-128    	; 0x770 <main+0x180>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							if (indice_menu + 1 < total_opcoes) {
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
     7f0:	44 ed       	ldi	r20, 0xD4	; 212
     7f2:	51 e0       	ldi	r21, 0x01	; 1
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
				if (tecla != 0) {
					delay1ms(300); // Debounce delay

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) { // Garante que não ultrapasse os limites para a segunda linha
							indice_menu++;
     7fc:	76 01       	movw	r14, r12
     7fe:	b8 cf       	rjmp	.-144    	; 0x770 <main+0x180>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
     800:	11 34       	cpi	r17, 0x41	; 65
     802:	49 f5       	brne	.+82     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
						if (indice_menu > 0) {
     804:	1e 14       	cp	r1, r14
     806:	1f 04       	cpc	r1, r15
     808:	0c f0       	brlt	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80a:	b2 cf       	rjmp	.-156    	; 0x770 <main+0x180>
							indice_menu--;
     80c:	67 01       	movw	r12, r14
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	c9 1a       	sub	r12, r25
     812:	d1 08       	sbc	r13, r1
							LCD_limpar();
     814:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     818:	f6 01       	movw	r30, r12
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	8c 0f       	add	r24, r28
     824:	9d 1f       	adc	r25, r29
     826:	e8 0f       	add	r30, r24
     828:	f9 1f       	adc	r31, r25
     82a:	46 85       	ldd	r20, Z+14	; 0x0e
     82c:	57 85       	ldd	r21, Z+15	; 0x0f
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     836:	ee 0c       	add	r14, r14
     838:	ff 1c       	adc	r15, r15
     83a:	e1 e0       	ldi	r30, 0x01	; 1
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	ec 0f       	add	r30, r28
     840:	fd 1f       	adc	r31, r29
     842:	ee 0d       	add	r30, r14
     844:	ff 1d       	adc	r31, r15
     846:	46 85       	ldd	r20, Z+14	; 0x0e
     848:	57 85       	ldd	r21, Z+15	; 0x0f
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
						if (indice_menu > 0) {
							indice_menu--;
     852:	76 01       	movw	r14, r12
     854:	8d cf       	rjmp	.-230    	; 0x770 <main+0x180>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
						}
						} else if (tecla == '*') {
     856:	1a 32       	cpi	r17, 0x2A	; 42
     858:	71 f4       	brne	.+28     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
						LCD_limpar();
     85a:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "VOLTANDO...");
     85e:	46 ed       	ldi	r20, 0xD6	; 214
     860:	51 e0       	ldi	r21, 0x01	; 1
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
						delay1ms(1000);
     86a:	88 ee       	ldi	r24, 0xE8	; 232
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
						estado = ESTADO_TELA_INICIAL;
     872:	00 e0       	ldi	r16, 0x00	; 0
						break; // Sai do loop while para mudar de estado
     874:	e4 ce       	rjmp	.-568    	; 0x63e <main+0x4e>
						} else {
						// Lida com a seleção das opções 1, 2, 3, 4
						switch (tecla) {
     876:	12 33       	cpi	r17, 0x32	; 50
     878:	51 f0       	breq	.+20     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     87a:	20 f4       	brcc	.+8      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
     87c:	11 33       	cpi	r17, 0x31	; 49
     87e:	09 f4       	brne	.+2      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     880:	dd ce       	rjmp	.-582    	; 0x63c <main+0x4c>
     882:	dd ce       	rjmp	.-582    	; 0x63e <main+0x4e>
     884:	13 33       	cpi	r17, 0x33	; 51
     886:	29 f0       	breq	.+10     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     888:	14 33       	cpi	r17, 0x34	; 52
     88a:	29 f0       	breq	.+10     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
     88c:	d8 ce       	rjmp	.-592    	; 0x63e <main+0x4e>
							case '1': estado = ESTADO_SAQUE; break;
							case '2': estado = ESTADO_PAGAMENTO; break;
     88e:	06 e0       	ldi	r16, 0x06	; 6
     890:	d6 ce       	rjmp	.-596    	; 0x63e <main+0x4e>
							case '3': estado = ESTADO_SALDO; break;
     892:	07 e0       	ldi	r16, 0x07	; 7
     894:	d4 ce       	rjmp	.-600    	; 0x63e <main+0x4e>
							case '4':
							finalizar_sessao();
     896:	0e 94 f2 06 	call	0xde4	; 0xde4 <finalizar_sessao>
							estado = ESTADO_TELA_INICIAL;
     89a:	00 e0       	ldi	r16, 0x00	; 0
							break;
     89c:	d0 ce       	rjmp	.-608    	; 0x63e <main+0x4e>
				}
			}
			break; // Sai do switch case para ESTADO_MENU

			case ESTADO_SAQUE:
			resetar_timeout();
     89e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
			realizar_saque();
     8a2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <realizar_saque>
			estado = ESTADO_MENU;
     8a6:	04 e0       	ldi	r16, 0x04	; 4
			break;
     8a8:	ca ce       	rjmp	.-620    	; 0x63e <main+0x4e>

			case ESTADO_PAGAMENTO:
			resetar_timeout();
     8aa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
			LCD_limpar();
     8ae:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Pagamento");
     8b2:	4f ef       	ldi	r20, 0xFF	; 255
     8b4:	51 e0       	ldi	r21, 0x01	; 1
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
     8be:	42 ee       	ldi	r20, 0xE2	; 226
     8c0:	51 e0       	ldi	r21, 0x01	; 1
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
			delay1ms(2000);
     8ca:	80 ed       	ldi	r24, 0xD0	; 208
     8cc:	97 e0       	ldi	r25, 0x07	; 7
     8ce:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
			estado = ESTADO_MENU;
     8d2:	04 e0       	ldi	r16, 0x04	; 4
			break;
     8d4:	b4 ce       	rjmp	.-664    	; 0x63e <main+0x4e>

			case ESTADO_SALDO:
			resetar_timeout();
     8d6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
			consultar_saldo();
     8da:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <consultar_saldo>
			estado = ESTADO_MENU;
     8de:	04 e0       	ldi	r16, 0x04	; 4
			break;
     8e0:	ae ce       	rjmp	.-676    	; 0x63e <main+0x4e>

000008e2 <enviar_mensagem_saque>:
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	bc 01       	movw	r22, r24
     8f8:	ed b6       	in	r14, 0x3d	; 61
     8fa:	fe b6       	in	r15, 0x3e	; 62
     8fc:	fc 01       	movw	r30, r24
     8fe:	01 90       	ld	r0, Z+
     900:	00 20       	and	r0, r0
     902:	e9 f7       	brne	.-6      	; 0x8fe <enviar_mensagem_saque+0x1c>
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	af 01       	movw	r20, r30
     908:	48 1b       	sub	r20, r24
     90a:	59 0b       	sbc	r21, r25
     90c:	6a 01       	movw	r12, r20
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	c8 0e       	add	r12, r24
     912:	d1 1c       	adc	r13, r1
     914:	ed b7       	in	r30, 0x3d	; 61
     916:	fe b7       	in	r31, 0x3e	; 62
     918:	ec 19       	sub	r30, r12
     91a:	fd 09       	sbc	r31, r13
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	fe bf       	out	0x3e, r31	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	ed bf       	out	0x3d, r30	; 61
     926:	0d b7       	in	r16, 0x3d	; 61
     928:	1e b7       	in	r17, 0x3e	; 62
     92a:	0f 5f       	subi	r16, 0xFF	; 255
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	83 e4       	ldi	r24, 0x43	; 67
     930:	81 83       	std	Z+1, r24	; 0x01
     932:	83 e5       	ldi	r24, 0x53	; 83
     934:	f8 01       	movw	r30, r16
     936:	81 83       	std	Z+1, r24	; 0x01
     938:	42 83       	std	Z+2, r20	; 0x02
     93a:	8d b7       	in	r24, 0x3d	; 61
     93c:	9e b7       	in	r25, 0x3e	; 62
     93e:	04 96       	adiw	r24, 0x04	; 4
     940:	0e 94 be 0a 	call	0x157c	; 0x157c <strncpy>
     944:	b8 01       	movw	r22, r16
     946:	c6 01       	movw	r24, r12
     948:	0e 94 76 07 	call	0xeec	; 0xeec <SerialEnviaChars>
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	fe be       	out	0x3e, r15	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	ed be       	out	0x3d, r14	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	08 95       	ret

00000968 <receber_resposta_servidor>:
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	00 d0       	rcall	.+0      	; 0x96e <receber_resposta_servidor+0x6>
     96e:	00 d0       	rcall	.+0      	; 0x970 <receber_resposta_servidor+0x8>
     970:	1f 92       	push	r1
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	be 01       	movw	r22, r28
     978:	6f 5f       	subi	r22, 0xFF	; 255
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 1e 09 	call	0x123c	; 0x123c <SerialRecebeChars>
     984:	1c 82       	std	Y+4, r1	; 0x04
     986:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     98a:	ae 01       	movw	r20, r28
     98c:	4f 5f       	subi	r20, 0xFF	; 255
     98e:	5f 4f       	sbci	r21, 0xFF	; 255
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     998:	80 ed       	ldi	r24, 0xD0	; 208
     99a:	97 e0       	ldi	r25, 0x07	; 7
     99c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	83 35       	cpi	r24, 0x53	; 83
     9a4:	29 f4       	brne	.+10     	; 0x9b0 <receber_resposta_servidor+0x48>
     9a6:	8a 81       	ldd	r24, Y+2	; 0x02
     9a8:	83 35       	cpi	r24, 0x53	; 83
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <receber_resposta_servidor+0x4c>
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <receber_resposta_servidor+0x4e>
     9b0:	85 e4       	ldi	r24, 0x45	; 69
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <receber_resposta_servidor+0x4e>
     9b4:	85 e4       	ldi	r24, 0x45	; 69
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <realizar_saque>:
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	29 97       	sbiw	r28, 0x09	; 9
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	fe 01       	movw	r30, r28
     9e0:	31 96       	adiw	r30, 0x01	; 1
     9e2:	87 e0       	ldi	r24, 0x07	; 7
     9e4:	df 01       	movw	r26, r30
     9e6:	1d 92       	st	X+, r1
     9e8:	8a 95       	dec	r24
     9ea:	e9 f7       	brne	.-6      	; 0x9e6 <realizar_saque+0x20>
     9ec:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     9f0:	48 e1       	ldi	r20, 0x18	; 24
     9f2:	52 e0       	ldi	r21, 0x02	; 2
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     9fc:	48 e2       	ldi	r20, 0x28	; 40
     9fe:	52 e0       	ldi	r21, 0x02	; 2
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     a08:	00 e0       	ldi	r16, 0x00	; 0
     a0a:	10 e0       	ldi	r17, 0x00	; 0
     a0c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     a10:	89 2b       	or	r24, r25
     a12:	99 f0       	breq	.+38     	; 0xa3a <realizar_saque+0x74>
     a14:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     a18:	4b e2       	ldi	r20, 0x2B	; 43
     a1a:	52 e0       	ldi	r21, 0x02	; 2
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     a24:	48 e3       	ldi	r20, 0x38	; 56
     a26:	52 e0       	ldi	r21, 0x02	; 2
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     a30:	88 ec       	ldi	r24, 0xC8	; 200
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     a38:	c3 c0       	rjmp	.+390    	; 0xbc0 <realizar_saque+0x1fa>
     a3a:	0e 94 a6 09 	call	0x134c	; 0x134c <varredura>
     a3e:	90 ed       	ldi	r25, 0xD0	; 208
     a40:	98 0f       	add	r25, r24
     a42:	9a 30       	cpi	r25, 0x0A	; 10
     a44:	d8 f4       	brcc	.+54     	; 0xa7c <realizar_saque+0xb6>
     a46:	06 30       	cpi	r16, 0x06	; 6
     a48:	11 05       	cpc	r17, r1
     a4a:	c4 f4       	brge	.+48     	; 0xa7c <realizar_saque+0xb6>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	ec 0f       	add	r30, r28
     a52:	fd 1f       	adc	r31, r29
     a54:	e0 0f       	add	r30, r16
     a56:	f1 1f       	adc	r31, r17
     a58:	80 83       	st	Z, r24
     a5a:	88 87       	std	Y+8, r24	; 0x08
     a5c:	19 86       	std	Y+9, r1	; 0x09
     a5e:	62 e0       	ldi	r22, 0x02	; 2
     a60:	60 0f       	add	r22, r16
     a62:	ae 01       	movw	r20, r28
     a64:	48 5f       	subi	r20, 0xF8	; 248
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     a6e:	0f 5f       	subi	r16, 0xFF	; 255
     a70:	1f 4f       	sbci	r17, 0xFF	; 255
     a72:	88 ec       	ldi	r24, 0xC8	; 200
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     a7a:	c8 cf       	rjmp	.-112    	; 0xa0c <realizar_saque+0x46>
     a7c:	83 32       	cpi	r24, 0x23	; 35
     a7e:	09 f0       	breq	.+2      	; 0xa82 <realizar_saque+0xbc>
     a80:	8a c0       	rjmp	.+276    	; 0xb96 <realizar_saque+0x1d0>
     a82:	10 16       	cp	r1, r16
     a84:	11 06       	cpc	r1, r17
     a86:	0c f0       	brlt	.+2      	; 0xa8a <realizar_saque+0xc4>
     a88:	86 c0       	rjmp	.+268    	; 0xb96 <realizar_saque+0x1d0>
     a8a:	e1 e0       	ldi	r30, 0x01	; 1
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	ec 0f       	add	r30, r28
     a90:	fd 1f       	adc	r31, r29
     a92:	e0 0f       	add	r30, r16
     a94:	f1 1f       	adc	r31, r17
     a96:	10 82       	st	Z, r1
     a98:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     a9c:	89 2b       	or	r24, r25
     a9e:	99 f0       	breq	.+38     	; 0xac6 <realizar_saque+0x100>
     aa0:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     aa4:	4b e2       	ldi	r20, 0x2B	; 43
     aa6:	52 e0       	ldi	r21, 0x02	; 2
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     ab0:	48 e3       	ldi	r20, 0x38	; 56
     ab2:	52 e0       	ldi	r21, 0x02	; 2
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     abc:	88 ec       	ldi	r24, 0xC8	; 200
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     ac4:	7d c0       	rjmp	.+250    	; 0xbc0 <realizar_saque+0x1fa>
     ac6:	06 30       	cpi	r16, 0x06	; 6
     ac8:	11 05       	cpc	r17, r1
     aca:	2c f1       	brlt	.+74     	; 0xb16 <realizar_saque+0x150>
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	81 33       	cpi	r24, 0x31	; 49
     ad0:	11 f5       	brne	.+68     	; 0xb16 <realizar_saque+0x150>
     ad2:	8a 81       	ldd	r24, Y+2	; 0x02
     ad4:	82 33       	cpi	r24, 0x32	; 50
     ad6:	f8 f0       	brcs	.+62     	; 0xb16 <realizar_saque+0x150>
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	80 33       	cpi	r24, 0x30	; 48
     adc:	e0 f0       	brcs	.+56     	; 0xb16 <realizar_saque+0x150>
     ade:	8c 81       	ldd	r24, Y+4	; 0x04
     ae0:	80 33       	cpi	r24, 0x30	; 48
     ae2:	c8 f0       	brcs	.+50     	; 0xb16 <realizar_saque+0x150>
     ae4:	8d 81       	ldd	r24, Y+5	; 0x05
     ae6:	80 33       	cpi	r24, 0x30	; 48
     ae8:	b0 f0       	brcs	.+44     	; 0xb16 <realizar_saque+0x150>
     aea:	8e 81       	ldd	r24, Y+6	; 0x06
     aec:	80 33       	cpi	r24, 0x30	; 48
     aee:	98 f0       	brcs	.+38     	; 0xb16 <realizar_saque+0x150>
     af0:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     af4:	46 e4       	ldi	r20, 0x46	; 70
     af6:	52 e0       	ldi	r21, 0x02	; 2
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     b00:	44 e5       	ldi	r20, 0x54	; 84
     b02:	52 e0       	ldi	r21, 0x02	; 2
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     b0c:	80 ed       	ldi	r24, 0xD0	; 208
     b0e:	97 e0       	ldi	r25, 0x07	; 7
     b10:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     b14:	55 c0       	rjmp	.+170    	; 0xbc0 <realizar_saque+0x1fa>
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <enviar_mensagem_saque>
     b1e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     b22:	89 2b       	or	r24, r25
     b24:	99 f0       	breq	.+38     	; 0xb4c <realizar_saque+0x186>
     b26:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     b2a:	4b e2       	ldi	r20, 0x2B	; 43
     b2c:	52 e0       	ldi	r21, 0x02	; 2
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     b36:	48 e3       	ldi	r20, 0x38	; 56
     b38:	52 e0       	ldi	r21, 0x02	; 2
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     b42:	80 ed       	ldi	r24, 0xD0	; 208
     b44:	97 e0       	ldi	r25, 0x07	; 7
     b46:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     b4a:	3a c0       	rjmp	.+116    	; 0xbc0 <realizar_saque+0x1fa>
     b4c:	0e 94 b4 04 	call	0x968	; 0x968 <receber_resposta_servidor>
     b50:	18 2f       	mov	r17, r24
     b52:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     b56:	1f 34       	cpi	r17, 0x4F	; 79
     b58:	69 f4       	brne	.+26     	; 0xb74 <realizar_saque+0x1ae>
     b5a:	47 ef       	ldi	r20, 0xF7	; 247
     b5c:	51 e0       	ldi	r21, 0x01	; 1
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     b66:	4f e5       	ldi	r20, 0x5F	; 95
     b68:	52 e0       	ldi	r21, 0x02	; 2
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     b72:	0c c0       	rjmp	.+24     	; 0xb8c <realizar_saque+0x1c6>
     b74:	4b e0       	ldi	r20, 0x0B	; 11
     b76:	52 e0       	ldi	r21, 0x02	; 2
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     b80:	4a e6       	ldi	r20, 0x6A	; 106
     b82:	52 e0       	ldi	r21, 0x02	; 2
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     b8c:	88 eb       	ldi	r24, 0xB8	; 184
     b8e:	9b e0       	ldi	r25, 0x0B	; 11
     b90:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     b94:	15 c0       	rjmp	.+42     	; 0xbc0 <realizar_saque+0x1fa>
     b96:	8a 32       	cpi	r24, 0x2A	; 42
     b98:	09 f0       	breq	.+2      	; 0xb9c <realizar_saque+0x1d6>
     b9a:	38 cf       	rjmp	.-400    	; 0xa0c <realizar_saque+0x46>
     b9c:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     ba0:	47 e7       	ldi	r20, 0x77	; 119
     ba2:	52 e0       	ldi	r21, 0x02	; 2
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     bac:	40 e8       	ldi	r20, 0x80	; 128
     bae:	52 e0       	ldi	r21, 0x02	; 2
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     bb8:	80 ed       	ldi	r24, 0xD0	; 208
     bba:	97 e0       	ldi	r25, 0x07	; 7
     bbc:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     bc0:	29 96       	adiw	r28, 0x09	; 9
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <consultar_saldo>:
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	a9 97       	sbiw	r28, 0x29	; 41
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	83 e4       	ldi	r24, 0x43	; 67
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	86 e5       	ldi	r24, 0x56	; 86
     bf8:	8a 83       	std	Y+2, r24	; 0x02
     bfa:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     bfe:	89 2b       	or	r24, r25
     c00:	99 f0       	breq	.+38     	; 0xc28 <consultar_saldo+0x52>
     c02:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     c06:	4b e2       	ldi	r20, 0x2B	; 43
     c08:	52 e0       	ldi	r21, 0x02	; 2
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     c12:	48 e3       	ldi	r20, 0x38	; 56
     c14:	52 e0       	ldi	r21, 0x02	; 2
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     c1e:	80 ed       	ldi	r24, 0xD0	; 208
     c20:	97 e0       	ldi	r25, 0x07	; 7
     c22:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     c26:	d1 c0       	rjmp	.+418    	; 0xdca <consultar_saldo+0x1f4>
     c28:	be 01       	movw	r22, r28
     c2a:	6f 5f       	subi	r22, 0xFF	; 255
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 76 07 	call	0xeec	; 0xeec <SerialEnviaChars>
     c36:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     c3a:	89 2b       	or	r24, r25
     c3c:	99 f0       	breq	.+38     	; 0xc64 <consultar_saldo+0x8e>
     c3e:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     c42:	4b e2       	ldi	r20, 0x2B	; 43
     c44:	52 e0       	ldi	r21, 0x02	; 2
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     c4e:	48 e3       	ldi	r20, 0x38	; 56
     c50:	52 e0       	ldi	r21, 0x02	; 2
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     c5a:	80 ed       	ldi	r24, 0xD0	; 208
     c5c:	97 e0       	ldi	r25, 0x07	; 7
     c5e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     c62:	b3 c0       	rjmp	.+358    	; 0xdca <consultar_saldo+0x1f4>
     c64:	be 01       	movw	r22, r28
     c66:	6d 5f       	subi	r22, 0xFD	; 253
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 1e 09 	call	0x123c	; 0x123c <SerialRecebeChars>
     c72:	1e 82       	std	Y+6, r1	; 0x06
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	83 35       	cpi	r24, 0x53	; 83
     c78:	09 f0       	breq	.+2      	; 0xc7c <consultar_saldo+0xa6>
     c7a:	95 c0       	rjmp	.+298    	; 0xda6 <consultar_saldo+0x1d0>
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	86 35       	cpi	r24, 0x56	; 86
     c80:	09 f0       	breq	.+2      	; 0xc84 <consultar_saldo+0xae>
     c82:	91 c0       	rjmp	.+290    	; 0xda6 <consultar_saldo+0x1d0>
     c84:	0d 81       	ldd	r16, Y+5	; 0x05
     c86:	fe 01       	movw	r30, r28
     c88:	7a 96       	adiw	r30, 0x1a	; 26
     c8a:	80 e1       	ldi	r24, 0x10	; 16
     c8c:	df 01       	movw	r26, r30
     c8e:	1d 92       	st	X+, r1
     c90:	8a 95       	dec	r24
     c92:	e9 f7       	brne	.-6      	; 0xc8e <consultar_saldo+0xb8>
     c94:	00 31       	cpi	r16, 0x10	; 16
     c96:	08 f0       	brcs	.+2      	; 0xc9a <consultar_saldo+0xc4>
     c98:	0f e0       	ldi	r16, 0x0F	; 15
     c9a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     c9e:	89 2b       	or	r24, r25
     ca0:	99 f0       	breq	.+38     	; 0xcc8 <consultar_saldo+0xf2>
     ca2:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     ca6:	4b e2       	ldi	r20, 0x2B	; 43
     ca8:	52 e0       	ldi	r21, 0x02	; 2
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     cb2:	48 e3       	ldi	r20, 0x38	; 56
     cb4:	52 e0       	ldi	r21, 0x02	; 2
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     cbe:	80 ed       	ldi	r24, 0xD0	; 208
     cc0:	97 e0       	ldi	r25, 0x07	; 7
     cc2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     cc6:	81 c0       	rjmp	.+258    	; 0xdca <consultar_saldo+0x1f4>
     cc8:	10 e0       	ldi	r17, 0x00	; 0
     cca:	7e 01       	movw	r14, r28
     ccc:	ba e1       	ldi	r27, 0x1A	; 26
     cce:	eb 0e       	add	r14, r27
     cd0:	f1 1c       	adc	r15, r1
     cd2:	b7 01       	movw	r22, r14
     cd4:	c8 01       	movw	r24, r16
     cd6:	0e 94 1e 09 	call	0x123c	; 0x123c <SerialRecebeChars>
     cda:	f7 01       	movw	r30, r14
     cdc:	e0 0f       	add	r30, r16
     cde:	f1 1f       	adc	r31, r17
     ce0:	10 82       	st	Z, r1
     ce2:	f7 01       	movw	r30, r14
     ce4:	01 90       	ld	r0, Z+
     ce6:	00 20       	and	r0, r0
     ce8:	e9 f7       	brne	.-6      	; 0xce4 <consultar_saldo+0x10e>
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	ee 19       	sub	r30, r14
     cee:	ff 09       	sbc	r31, r15
     cf0:	e2 30       	cpi	r30, 0x02	; 2
     cf2:	f1 05       	cpc	r31, r1
     cf4:	44 f1       	brlt	.+80     	; 0xd46 <consultar_saldo+0x170>
     cf6:	7e 01       	movw	r14, r28
     cf8:	86 e0       	ldi	r24, 0x06	; 6
     cfa:	e8 0e       	add	r14, r24
     cfc:	f1 1c       	adc	r15, r1
     cfe:	82 e5       	ldi	r24, 0x52	; 82
     d00:	94 e2       	ldi	r25, 0x24	; 36
     d02:	9f 83       	std	Y+7, r25	; 0x07
     d04:	8e 83       	std	Y+6, r24	; 0x06
     d06:	d7 01       	movw	r26, r14
     d08:	12 96       	adiw	r26, 0x02	; 2
     d0a:	1c 92       	st	X, r1
     d0c:	8f 01       	movw	r16, r30
     d0e:	02 50       	subi	r16, 0x02	; 2
     d10:	11 09       	sbc	r17, r1
     d12:	a8 01       	movw	r20, r16
     d14:	be 01       	movw	r22, r28
     d16:	66 5e       	subi	r22, 0xE6	; 230
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	c7 01       	movw	r24, r14
     d1c:	0e 94 ae 0a 	call	0x155c	; 0x155c <strncat>
     d20:	f7 01       	movw	r30, r14
     d22:	01 90       	ld	r0, Z+
     d24:	00 20       	and	r0, r0
     d26:	e9 f7       	brne	.-6      	; 0xd22 <consultar_saldo+0x14c>
     d28:	31 97       	sbiw	r30, 0x01	; 1
     d2a:	8e e2       	ldi	r24, 0x2E	; 46
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	80 83       	st	Z, r24
     d32:	6a e1       	ldi	r22, 0x1A	; 26
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	6c 0f       	add	r22, r28
     d38:	7d 1f       	adc	r23, r29
     d3a:	60 0f       	add	r22, r16
     d3c:	71 1f       	adc	r23, r17
     d3e:	c7 01       	movw	r24, r14
     d40:	0e 94 a3 0a 	call	0x1546	; 0x1546 <strcat>
     d44:	1c c0       	rjmp	.+56     	; 0xd7e <consultar_saldo+0x1a8>
     d46:	31 97       	sbiw	r30, 0x01	; 1
     d48:	89 f4       	brne	.+34     	; 0xd6c <consultar_saldo+0x196>
     d4a:	86 e0       	ldi	r24, 0x06	; 6
     d4c:	ea e8       	ldi	r30, 0x8A	; 138
     d4e:	f2 e0       	ldi	r31, 0x02	; 2
     d50:	de 01       	movw	r26, r28
     d52:	16 96       	adiw	r26, 0x06	; 6
     d54:	01 90       	ld	r0, Z+
     d56:	0d 92       	st	X+, r0
     d58:	8a 95       	dec	r24
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <consultar_saldo+0x17e>
     d5c:	be 01       	movw	r22, r28
     d5e:	66 5e       	subi	r22, 0xE6	; 230
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	ce 01       	movw	r24, r28
     d64:	06 96       	adiw	r24, 0x06	; 6
     d66:	0e 94 a3 0a 	call	0x1546	; 0x1546 <strcat>
     d6a:	09 c0       	rjmp	.+18     	; 0xd7e <consultar_saldo+0x1a8>
     d6c:	87 e0       	ldi	r24, 0x07	; 7
     d6e:	e0 e9       	ldi	r30, 0x90	; 144
     d70:	f2 e0       	ldi	r31, 0x02	; 2
     d72:	de 01       	movw	r26, r28
     d74:	16 96       	adiw	r26, 0x06	; 6
     d76:	01 90       	ld	r0, Z+
     d78:	0d 92       	st	X+, r0
     d7a:	8a 95       	dec	r24
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <consultar_saldo+0x1a0>
     d7e:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     d82:	47 e9       	ldi	r20, 0x97	; 151
     d84:	52 e0       	ldi	r21, 0x02	; 2
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     d8e:	ae 01       	movw	r20, r28
     d90:	4a 5f       	subi	r20, 0xFA	; 250
     d92:	5f 4f       	sbci	r21, 0xFF	; 255
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     d9c:	88 eb       	ldi	r24, 0xB8	; 184
     d9e:	9b e0       	ldi	r25, 0x0B	; 11
     da0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     da4:	12 c0       	rjmp	.+36     	; 0xdca <consultar_saldo+0x1f4>
     da6:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     daa:	44 ea       	ldi	r20, 0xA4	; 164
     dac:	52 e0       	ldi	r21, 0x02	; 2
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     db6:	42 eb       	ldi	r20, 0xB2	; 178
     db8:	52 e0       	ldi	r21, 0x02	; 2
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     dc2:	88 eb       	ldi	r24, 0xB8	; 184
     dc4:	9b e0       	ldi	r25, 0x0B	; 11
     dc6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     dca:	a9 96       	adiw	r28, 0x29	; 41
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	08 95       	ret

00000de4 <finalizar_sessao>:
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	00 d0       	rcall	.+0      	; 0xdea <finalizar_sessao+0x6>
     dea:	00 d0       	rcall	.+0      	; 0xdec <finalizar_sessao+0x8>
     dec:	1f 92       	push	r1
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	83 e4       	ldi	r24, 0x43	; 67
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	86 e4       	ldi	r24, 0x46	; 70
     df8:	8a 83       	std	Y+2, r24	; 0x02
     dfa:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     dfe:	89 2b       	or	r24, r25
     e00:	99 f0       	breq	.+38     	; 0xe28 <finalizar_sessao+0x44>
     e02:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     e06:	49 eb       	ldi	r20, 0xB9	; 185
     e08:	52 e0       	ldi	r21, 0x02	; 2
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     e12:	44 ec       	ldi	r20, 0xC4	; 196
     e14:	52 e0       	ldi	r21, 0x02	; 2
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     e1e:	80 ed       	ldi	r24, 0xD0	; 208
     e20:	97 e0       	ldi	r25, 0x07	; 7
     e22:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     e26:	4b c0       	rjmp	.+150    	; 0xebe <finalizar_sessao+0xda>
     e28:	be 01       	movw	r22, r28
     e2a:	6f 5f       	subi	r22, 0xFF	; 255
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 76 07 	call	0xeec	; 0xeec <SerialEnviaChars>
     e36:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <isBlocked>
     e3a:	89 2b       	or	r24, r25
     e3c:	99 f0       	breq	.+38     	; 0xe64 <finalizar_sessao+0x80>
     e3e:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     e42:	49 eb       	ldi	r20, 0xB9	; 185
     e44:	52 e0       	ldi	r21, 0x02	; 2
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     e4e:	44 ec       	ldi	r20, 0xC4	; 196
     e50:	52 e0       	ldi	r21, 0x02	; 2
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     e5a:	80 ed       	ldi	r24, 0xD0	; 208
     e5c:	97 e0       	ldi	r25, 0x07	; 7
     e5e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     e62:	2d c0       	rjmp	.+90     	; 0xebe <finalizar_sessao+0xda>
     e64:	be 01       	movw	r22, r28
     e66:	6d 5f       	subi	r22, 0xFD	; 253
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 1e 09 	call	0x123c	; 0x123c <SerialRecebeChars>
     e72:	1d 82       	std	Y+5, r1	; 0x05
     e74:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_limpar>
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	83 35       	cpi	r24, 0x53	; 83
     e7c:	81 f4       	brne	.+32     	; 0xe9e <finalizar_sessao+0xba>
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	86 34       	cpi	r24, 0x46	; 70
     e82:	69 f4       	brne	.+26     	; 0xe9e <finalizar_sessao+0xba>
     e84:	40 ed       	ldi	r20, 0xD0	; 208
     e86:	52 e0       	ldi	r21, 0x02	; 2
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     e90:	47 ed       	ldi	r20, 0xD7	; 215
     e92:	52 e0       	ldi	r21, 0x02	; 2
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     e9c:	0c c0       	rjmp	.+24     	; 0xeb6 <finalizar_sessao+0xd2>
     e9e:	43 ee       	ldi	r20, 0xE3	; 227
     ea0:	52 e0       	ldi	r21, 0x02	; 2
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     eaa:	45 ef       	ldi	r20, 0xF5	; 245
     eac:	52 e0       	ldi	r21, 0x02	; 2
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_Escrever_Linha>
     eb6:	80 ed       	ldi	r24, 0xD0	; 208
     eb8:	97 e0       	ldi	r25, 0x07	; 7
     eba:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <initUART>:
     ece:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     ed2:	83 e3       	ldi	r24, 0x33	; 51
     ed4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     ed8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     edc:	88 e9       	ldi	r24, 0x98	; 152
     ede:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     ee2:	86 e0       	ldi	r24, 0x06	; 6
     ee4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     ee8:	78 94       	sei
     eea:	08 95       	ret

00000eec <SerialEnviaChars>:
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	8c 01       	movw	r16, r24
     efa:	7b 01       	movw	r14, r22
     efc:	c0 e0       	ldi	r28, 0x00	; 0
     efe:	d0 e0       	ldi	r29, 0x00	; 0
     f00:	0f c0       	rjmp	.+30     	; 0xf20 <SerialEnviaChars+0x34>
     f02:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     f06:	85 ff       	sbrs	r24, 5
     f08:	fc cf       	rjmp	.-8      	; 0xf02 <SerialEnviaChars+0x16>
     f0a:	f7 01       	movw	r30, r14
     f0c:	ec 0f       	add	r30, r28
     f0e:	fd 1f       	adc	r31, r29
     f10:	80 81       	ld	r24, Z
     f12:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f16:	84 e1       	ldi	r24, 0x14	; 20
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <delay1ms>
     f1e:	21 96       	adiw	r28, 0x01	; 1
     f20:	c0 17       	cp	r28, r16
     f22:	d1 07       	cpc	r29, r17
     f24:	74 f3       	brlt	.-36     	; 0xf02 <SerialEnviaChars+0x16>
     f26:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     f2a:	86 ff       	sbrs	r24, 6
     f2c:	fc cf       	rjmp	.-8      	; 0xf26 <SerialEnviaChars+0x3a>
     f2e:	e0 ec       	ldi	r30, 0xC0	; 192
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	80 83       	st	Z, r24
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	08 95       	ret

00000f46 <__vector_18>:
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <__vector_18+0x28>
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f76:	93 e4       	ldi	r25, 0x43	; 67
     f78:	99 83       	std	Y+1, r25	; 0x01
     f7a:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <sh_bytes_count>
     f7e:	9f ef       	ldi	r25, 0xFF	; 255
     f80:	9e 0f       	add	r25, r30
     f82:	95 30       	cpi	r25, 0x05	; 5
     f84:	00 f5       	brcc	.+64     	; 0xfc6 <__vector_18+0x80>
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	9e 0f       	add	r25, r30
     f8a:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <sh_bytes_count>
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	e9 5f       	subi	r30, 0xF9	; 249
     f92:	fc 4f       	sbci	r31, 0xFC	; 252
     f94:	80 83       	st	Z, r24
     f96:	96 30       	cpi	r25, 0x06	; 6
     f98:	09 f0       	breq	.+2      	; 0xf9c <__vector_18+0x56>
     f9a:	00 c1       	rjmp	.+512    	; 0x119c <__vector_18+0x256>
     f9c:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <sh_command_bytes_received+0x4>
     fa0:	89 50       	subi	r24, 0x09	; 9
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	8b 30       	cpi	r24, 0x0B	; 11
     fa6:	08 f4       	brcc	.+2      	; 0xfaa <__vector_18+0x64>
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <blocked>
     fae:	88 e4       	ldi	r24, 0x48	; 72
     fb0:	8a 83       	std	Y+2, r24	; 0x02
     fb2:	be 01       	movw	r22, r28
     fb4:	6f 5f       	subi	r22, 0xFF	; 255
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 76 07 	call	0xeec	; 0xeec <SerialEnviaChars>
     fc0:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <sh_bytes_count>
     fc4:	eb c0       	rjmp	.+470    	; 0x119c <__vector_18+0x256>
     fc6:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <waiting_for_second_byte>
     fca:	99 23       	and	r25, r25
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <__vector_18+0x8a>
     fce:	bc c0       	rjmp	.+376    	; 0x1148 <__vector_18+0x202>
     fd0:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <first_byte_of_potential_command>
     fd4:	93 35       	cpi	r25, 0x53	; 83
     fd6:	09 f0       	breq	.+2      	; 0xfda <__vector_18+0x94>
     fd8:	6e c0       	rjmp	.+220    	; 0x10b6 <__vector_18+0x170>
     fda:	84 35       	cpi	r24, 0x54	; 84
     fdc:	69 f4       	brne	.+26     	; 0xff8 <__vector_18+0xb2>
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <blocked>
     fe4:	84 e5       	ldi	r24, 0x54	; 84
     fe6:	8a 83       	std	Y+2, r24	; 0x02
     fe8:	be 01       	movw	r22, r28
     fea:	6f 5f       	subi	r22, 0xFF	; 255
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 76 07 	call	0xeec	; 0xeec <SerialEnviaChars>
     ff6:	a3 c0       	rjmp	.+326    	; 0x113e <__vector_18+0x1f8>
     ff8:	8c 34       	cpi	r24, 0x4C	; 76
     ffa:	59 f4       	brne	.+22     	; 0x1012 <__vector_18+0xcc>
     ffc:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <blocked>
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	be 01       	movw	r22, r28
    1004:	6f 5f       	subi	r22, 0xFF	; 255
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 76 07 	call	0xeec	; 0xeec <SerialEnviaChars>
    1010:	96 c0       	rjmp	.+300    	; 0x113e <__vector_18+0x1f8>
    1012:	88 34       	cpi	r24, 0x48	; 72
    1014:	51 f4       	brne	.+20     	; 0x102a <__vector_18+0xe4>
    1016:	e7 e0       	ldi	r30, 0x07	; 7
    1018:	f3 e0       	ldi	r31, 0x03	; 3
    101a:	83 e5       	ldi	r24, 0x53	; 83
    101c:	80 83       	st	Z, r24
    101e:	88 e4       	ldi	r24, 0x48	; 72
    1020:	81 83       	std	Z+1, r24	; 0x01
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <sh_bytes_count>
    1028:	8a c0       	rjmp	.+276    	; 0x113e <__vector_18+0x1f8>
    102a:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <uart_head>
    102e:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <uart_head+0x1>
    1032:	2f 5f       	subi	r18, 0xFF	; 255
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    1036:	2f 77       	andi	r18, 0x7F	; 127
    1038:	30 78       	andi	r19, 0x80	; 128
    103a:	33 23       	and	r19, r19
    103c:	34 f4       	brge	.+12     	; 0x104a <__vector_18+0x104>
    103e:	21 50       	subi	r18, 0x01	; 1
    1040:	31 09       	sbc	r19, r1
    1042:	20 68       	ori	r18, 0x80	; 128
    1044:	3f 6f       	ori	r19, 0xFF	; 255
    1046:	2f 5f       	subi	r18, 0xFF	; 255
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <uart_tail>
    104e:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <uart_tail+0x1>
    1052:	24 17       	cp	r18, r20
    1054:	35 07       	cpc	r19, r21
    1056:	59 f0       	breq	.+22     	; 0x106e <__vector_18+0x128>
    1058:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <uart_head>
    105c:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <uart_head+0x1>
    1060:	ee 5e       	subi	r30, 0xEE	; 238
    1062:	fc 4f       	sbci	r31, 0xFC	; 252
    1064:	90 83       	st	Z, r25
    1066:	30 93 11 03 	sts	0x0311, r19	; 0x800311 <uart_head+0x1>
    106a:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <uart_head>
    106e:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <uart_head>
    1072:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <uart_head+0x1>
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	2f 77       	andi	r18, 0x7F	; 127
    107c:	30 78       	andi	r19, 0x80	; 128
    107e:	33 23       	and	r19, r19
    1080:	34 f4       	brge	.+12     	; 0x108e <__vector_18+0x148>
    1082:	21 50       	subi	r18, 0x01	; 1
    1084:	31 09       	sbc	r19, r1
    1086:	20 68       	ori	r18, 0x80	; 128
    1088:	3f 6f       	ori	r19, 0xFF	; 255
    108a:	2f 5f       	subi	r18, 0xFF	; 255
    108c:	3f 4f       	sbci	r19, 0xFF	; 255
    108e:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <uart_tail>
    1092:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <uart_tail+0x1>
    1096:	24 17       	cp	r18, r20
    1098:	35 07       	cpc	r19, r21
    109a:	09 f4       	brne	.+2      	; 0x109e <__vector_18+0x158>
    109c:	50 c0       	rjmp	.+160    	; 0x113e <__vector_18+0x1f8>
    109e:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <uart_head>
    10a2:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <uart_head+0x1>
    10a6:	ee 5e       	subi	r30, 0xEE	; 238
    10a8:	fc 4f       	sbci	r31, 0xFC	; 252
    10aa:	80 83       	st	Z, r24
    10ac:	30 93 11 03 	sts	0x0311, r19	; 0x800311 <uart_head+0x1>
    10b0:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <uart_head>
    10b4:	44 c0       	rjmp	.+136    	; 0x113e <__vector_18+0x1f8>
    10b6:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <uart_head>
    10ba:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <uart_head+0x1>
    10be:	2f 5f       	subi	r18, 0xFF	; 255
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	2f 77       	andi	r18, 0x7F	; 127
    10c4:	30 78       	andi	r19, 0x80	; 128
    10c6:	33 23       	and	r19, r19
    10c8:	34 f4       	brge	.+12     	; 0x10d6 <__vector_18+0x190>
    10ca:	21 50       	subi	r18, 0x01	; 1
    10cc:	31 09       	sbc	r19, r1
    10ce:	20 68       	ori	r18, 0x80	; 128
    10d0:	3f 6f       	ori	r19, 0xFF	; 255
    10d2:	2f 5f       	subi	r18, 0xFF	; 255
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <uart_tail>
    10da:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <uart_tail+0x1>
    10de:	24 17       	cp	r18, r20
    10e0:	35 07       	cpc	r19, r21
    10e2:	59 f0       	breq	.+22     	; 0x10fa <__vector_18+0x1b4>
    10e4:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <uart_head>
    10e8:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <uart_head+0x1>
    10ec:	ee 5e       	subi	r30, 0xEE	; 238
    10ee:	fc 4f       	sbci	r31, 0xFC	; 252
    10f0:	90 83       	st	Z, r25
    10f2:	30 93 11 03 	sts	0x0311, r19	; 0x800311 <uart_head+0x1>
    10f6:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <uart_head>
    10fa:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <uart_head>
    10fe:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <uart_head+0x1>
    1102:	2f 5f       	subi	r18, 0xFF	; 255
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	2f 77       	andi	r18, 0x7F	; 127
    1108:	30 78       	andi	r19, 0x80	; 128
    110a:	33 23       	and	r19, r19
    110c:	34 f4       	brge	.+12     	; 0x111a <__vector_18+0x1d4>
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	31 09       	sbc	r19, r1
    1112:	20 68       	ori	r18, 0x80	; 128
    1114:	3f 6f       	ori	r19, 0xFF	; 255
    1116:	2f 5f       	subi	r18, 0xFF	; 255
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <uart_tail>
    111e:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <uart_tail+0x1>
    1122:	24 17       	cp	r18, r20
    1124:	35 07       	cpc	r19, r21
    1126:	59 f0       	breq	.+22     	; 0x113e <__vector_18+0x1f8>
    1128:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <uart_head>
    112c:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <uart_head+0x1>
    1130:	ee 5e       	subi	r30, 0xEE	; 238
    1132:	fc 4f       	sbci	r31, 0xFC	; 252
    1134:	80 83       	st	Z, r24
    1136:	30 93 11 03 	sts	0x0311, r19	; 0x800311 <uart_head+0x1>
    113a:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <uart_head>
    113e:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <waiting_for_second_byte>
    1142:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <first_byte_of_potential_command>
    1146:	2a c0       	rjmp	.+84     	; 0x119c <__vector_18+0x256>
    1148:	83 35       	cpi	r24, 0x53	; 83
    114a:	31 f4       	brne	.+12     	; 0x1158 <__vector_18+0x212>
    114c:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <first_byte_of_potential_command>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <waiting_for_second_byte>
    1156:	22 c0       	rjmp	.+68     	; 0x119c <__vector_18+0x256>
    1158:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <uart_head>
    115c:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <uart_head+0x1>
    1160:	2f 5f       	subi	r18, 0xFF	; 255
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	2f 77       	andi	r18, 0x7F	; 127
    1166:	30 78       	andi	r19, 0x80	; 128
    1168:	33 23       	and	r19, r19
    116a:	34 f4       	brge	.+12     	; 0x1178 <__vector_18+0x232>
    116c:	21 50       	subi	r18, 0x01	; 1
    116e:	31 09       	sbc	r19, r1
    1170:	20 68       	ori	r18, 0x80	; 128
    1172:	3f 6f       	ori	r19, 0xFF	; 255
    1174:	2f 5f       	subi	r18, 0xFF	; 255
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <uart_tail>
    117c:	50 91 0f 03 	lds	r21, 0x030F	; 0x80030f <uart_tail+0x1>
    1180:	24 17       	cp	r18, r20
    1182:	35 07       	cpc	r19, r21
    1184:	59 f0       	breq	.+22     	; 0x119c <__vector_18+0x256>
    1186:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <uart_head>
    118a:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <uart_head+0x1>
    118e:	ee 5e       	subi	r30, 0xEE	; 238
    1190:	fc 4f       	sbci	r31, 0xFC	; 252
    1192:	80 83       	st	Z, r24
    1194:	30 93 11 03 	sts	0x0311, r19	; 0x800311 <uart_head+0x1>
    1198:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <uart_head>
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	ff 91       	pop	r31
    11a6:	ef 91       	pop	r30
    11a8:	bf 91       	pop	r27
    11aa:	af 91       	pop	r26
    11ac:	9f 91       	pop	r25
    11ae:	8f 91       	pop	r24
    11b0:	7f 91       	pop	r23
    11b2:	6f 91       	pop	r22
    11b4:	5f 91       	pop	r21
    11b6:	4f 91       	pop	r20
    11b8:	3f 91       	pop	r19
    11ba:	2f 91       	pop	r18
    11bc:	0f 90       	pop	r0
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	0f 90       	pop	r0
    11c2:	1f 90       	pop	r1
    11c4:	18 95       	reti

000011c6 <isBlocked>:
    11c6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <blocked>
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	08 95       	ret

000011ce <uart_buffer_empty>:
    11ce:	40 91 10 03 	lds	r20, 0x0310	; 0x800310 <uart_head>
    11d2:	50 91 11 03 	lds	r21, 0x0311	; 0x800311 <uart_head+0x1>
    11d6:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <uart_tail>
    11da:	30 91 0f 03 	lds	r19, 0x030F	; 0x80030f <uart_tail+0x1>
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	42 17       	cp	r20, r18
    11e2:	53 07       	cpc	r21, r19
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <uart_buffer_empty+0x1a>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	08 95       	ret

000011ec <uart_buffer_read_char>:
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	ec 01       	movw	r28, r24
    11f2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <uart_buffer_empty>
    11f6:	89 2b       	or	r24, r25
    11f8:	e1 f4       	brne	.+56     	; 0x1232 <uart_buffer_read_char+0x46>
    11fa:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <uart_tail>
    11fe:	f0 91 0f 03 	lds	r31, 0x030F	; 0x80030f <uart_tail+0x1>
    1202:	ee 5e       	subi	r30, 0xEE	; 238
    1204:	fc 4f       	sbci	r31, 0xFC	; 252
    1206:	80 81       	ld	r24, Z
    1208:	88 83       	st	Y, r24
    120a:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <uart_tail>
    120e:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <uart_tail+0x1>
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	8f 77       	andi	r24, 0x7F	; 127
    1216:	90 78       	andi	r25, 0x80	; 128
    1218:	99 23       	and	r25, r25
    121a:	24 f4       	brge	.+8      	; 0x1224 <uart_buffer_read_char+0x38>
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	80 68       	ori	r24, 0x80	; 128
    1220:	9f 6f       	ori	r25, 0xFF	; 255
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <uart_tail+0x1>
    1228:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <uart_tail>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <uart_buffer_read_char+0x4a>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	08 95       	ret

0000123c <SerialRecebeChars>:
    123c:	af 92       	push	r10
    123e:	bf 92       	push	r11
    1240:	cf 92       	push	r12
    1242:	df 92       	push	r13
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	1f 92       	push	r1
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	6c 01       	movw	r12, r24
    1258:	5b 01       	movw	r10, r22
    125a:	e1 2c       	mov	r14, r1
    125c:	f1 2c       	mov	r15, r1
    125e:	00 e0       	ldi	r16, 0x00	; 0
    1260:	10 e0       	ldi	r17, 0x00	; 0
    1262:	19 c0       	rjmp	.+50     	; 0x1296 <SerialRecebeChars+0x5a>
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	0e 94 f6 08 	call	0x11ec	; 0x11ec <uart_buffer_read_char>
    126c:	89 2b       	or	r24, r25
    126e:	51 f0       	breq	.+20     	; 0x1284 <SerialRecebeChars+0x48>
    1270:	f5 01       	movw	r30, r10
    1272:	e0 0f       	add	r30, r16
    1274:	f1 1f       	adc	r31, r17
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	80 83       	st	Z, r24
    127a:	0f 5f       	subi	r16, 0xFF	; 255
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	e1 2c       	mov	r14, r1
    1280:	f1 2c       	mov	r15, r1
    1282:	09 c0       	rjmp	.+18     	; 0x1296 <SerialRecebeChars+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1284:	83 ec       	ldi	r24, 0xC3	; 195
    1286:	99 e0       	ldi	r25, 0x09	; 9
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <SerialRecebeChars+0x4c>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <SerialRecebeChars+0x52>
    128e:	00 00       	nop
    1290:	9f ef       	ldi	r25, 0xFF	; 255
    1292:	e9 1a       	sub	r14, r25
    1294:	f9 0a       	sbc	r15, r25
    1296:	0c 15       	cp	r16, r12
    1298:	1d 05       	cpc	r17, r13
    129a:	24 f4       	brge	.+8      	; 0x12a4 <SerialRecebeChars+0x68>
    129c:	84 e6       	ldi	r24, 0x64	; 100
    129e:	e8 16       	cp	r14, r24
    12a0:	f1 04       	cpc	r15, r1
    12a2:	04 f3       	brlt	.-64     	; 0x1264 <SerialRecebeChars+0x28>
    12a4:	f5 01       	movw	r30, r10
    12a6:	e0 0f       	add	r30, r16
    12a8:	f1 1f       	adc	r31, r17
    12aa:	10 82       	st	Z, r1
    12ac:	0f 90       	pop	r0
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	df 90       	pop	r13
    12bc:	cf 90       	pop	r12
    12be:	bf 90       	pop	r11
    12c0:	af 90       	pop	r10
    12c2:	08 95       	ret

000012c4 <prepara_teclado>:
    12c4:	84 b1       	in	r24, 0x04	; 4
    12c6:	83 60       	ori	r24, 0x03	; 3
    12c8:	84 b9       	out	0x04, r24	; 4
    12ca:	8a b1       	in	r24, 0x0a	; 10
    12cc:	80 6c       	ori	r24, 0xC0	; 192
    12ce:	8a b9       	out	0x0a, r24	; 10
    12d0:	8a b1       	in	r24, 0x0a	; 10
    12d2:	83 7c       	andi	r24, 0xC3	; 195
    12d4:	8a b9       	out	0x0a, r24	; 10
    12d6:	8b b1       	in	r24, 0x0b	; 11
    12d8:	8c 63       	ori	r24, 0x3C	; 60
    12da:	8b b9       	out	0x0b, r24	; 11
    12dc:	08 95       	ret

000012de <atraso_debounce>:
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <atraso_debounce+0x6>
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	1a 82       	std	Y+2, r1	; 0x02
    12ea:	19 82       	std	Y+1, r1	; 0x01
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <atraso_debounce+0x1a>
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	9a 81       	ldd	r25, Y+2	; 0x02
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	88 3e       	cpi	r24, 0xE8	; 232
    12fe:	93 40       	sbci	r25, 0x03	; 3
    1300:	b0 f3       	brcs	.-20     	; 0x12ee <atraso_debounce+0x10>
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <debounce>:
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	18 2f       	mov	r17, r24
    1314:	c0 e0       	ldi	r28, 0x00	; 0
    1316:	d0 e0       	ldi	r29, 0x00	; 0
    1318:	12 c0       	rjmp	.+36     	; 0x133e <debounce+0x32>
    131a:	0e 94 6f 09 	call	0x12de	; 0x12de <atraso_debounce>
    131e:	29 b1       	in	r18, 0x09	; 9
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	01 2e       	mov	r0, r17
    1326:	02 c0       	rjmp	.+4      	; 0x132c <debounce+0x20>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <debounce+0x1c>
    1330:	82 23       	and	r24, r18
    1332:	d8 13       	cpse	r29, r24
    1334:	02 c0       	rjmp	.+4      	; 0x133a <debounce+0x2e>
    1336:	cf 5f       	subi	r28, 0xFF	; 255
    1338:	01 c0       	rjmp	.+2      	; 0x133c <debounce+0x30>
    133a:	c0 e0       	ldi	r28, 0x00	; 0
    133c:	d8 2f       	mov	r29, r24
    133e:	c7 30       	cpi	r28, 0x07	; 7
    1340:	61 f7       	brne	.-40     	; 0x131a <debounce+0xe>
    1342:	8d 2f       	mov	r24, r29
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	08 95       	ret

0000134c <varredura>:
    134c:	cf 93       	push	r28
    134e:	85 b1       	in	r24, 0x05	; 5
    1350:	83 60       	ori	r24, 0x03	; 3
    1352:	85 b9       	out	0x05, r24	; 5
    1354:	8b b1       	in	r24, 0x0b	; 11
    1356:	80 6c       	ori	r24, 0xC0	; 192
    1358:	8b b9       	out	0x0b, r24	; 11
    135a:	85 b1       	in	r24, 0x05	; 5
    135c:	8d 7f       	andi	r24, 0xFD	; 253
    135e:	85 b9       	out	0x05, r24	; 5
    1360:	85 e0       	ldi	r24, 0x05	; 5
    1362:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    1366:	81 11       	cpse	r24, r1
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <varredura+0x26>
    136a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    136e:	c1 e3       	ldi	r28, 0x31	; 49
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <varredura+0x28>
    1372:	c0 e0       	ldi	r28, 0x00	; 0
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    137a:	81 11       	cpse	r24, r1
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <varredura+0x38>
    137e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    1382:	c2 e3       	ldi	r28, 0x32	; 50
    1384:	83 e0       	ldi	r24, 0x03	; 3
    1386:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    138a:	81 11       	cpse	r24, r1
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <varredura+0x48>
    138e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    1392:	c3 e3       	ldi	r28, 0x33	; 51
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    139a:	81 11       	cpse	r24, r1
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <varredura+0x58>
    139e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    13a2:	c1 e4       	ldi	r28, 0x41	; 65
    13a4:	85 b1       	in	r24, 0x05	; 5
    13a6:	82 60       	ori	r24, 0x02	; 2
    13a8:	85 b9       	out	0x05, r24	; 5
    13aa:	85 b1       	in	r24, 0x05	; 5
    13ac:	8e 7f       	andi	r24, 0xFE	; 254
    13ae:	85 b9       	out	0x05, r24	; 5
    13b0:	85 e0       	ldi	r24, 0x05	; 5
    13b2:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    13b6:	81 11       	cpse	r24, r1
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <varredura+0x74>
    13ba:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    13be:	c4 e3       	ldi	r28, 0x34	; 52
    13c0:	84 e0       	ldi	r24, 0x04	; 4
    13c2:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    13c6:	81 11       	cpse	r24, r1
    13c8:	03 c0       	rjmp	.+6      	; 0x13d0 <varredura+0x84>
    13ca:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    13ce:	c5 e3       	ldi	r28, 0x35	; 53
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    13d6:	81 11       	cpse	r24, r1
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <varredura+0x94>
    13da:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    13de:	c6 e3       	ldi	r28, 0x36	; 54
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    13e6:	81 11       	cpse	r24, r1
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <varredura+0xa4>
    13ea:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    13ee:	c2 e4       	ldi	r28, 0x42	; 66
    13f0:	85 b1       	in	r24, 0x05	; 5
    13f2:	81 60       	ori	r24, 0x01	; 1
    13f4:	85 b9       	out	0x05, r24	; 5
    13f6:	8b b1       	in	r24, 0x0b	; 11
    13f8:	8f 77       	andi	r24, 0x7F	; 127
    13fa:	8b b9       	out	0x0b, r24	; 11
    13fc:	85 e0       	ldi	r24, 0x05	; 5
    13fe:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    1402:	81 11       	cpse	r24, r1
    1404:	03 c0       	rjmp	.+6      	; 0x140c <varredura+0xc0>
    1406:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    140a:	c7 e3       	ldi	r28, 0x37	; 55
    140c:	84 e0       	ldi	r24, 0x04	; 4
    140e:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    1412:	81 11       	cpse	r24, r1
    1414:	03 c0       	rjmp	.+6      	; 0x141c <varredura+0xd0>
    1416:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    141a:	c8 e3       	ldi	r28, 0x38	; 56
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    1422:	81 11       	cpse	r24, r1
    1424:	03 c0       	rjmp	.+6      	; 0x142c <varredura+0xe0>
    1426:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    142a:	c9 e3       	ldi	r28, 0x39	; 57
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    1432:	81 11       	cpse	r24, r1
    1434:	03 c0       	rjmp	.+6      	; 0x143c <varredura+0xf0>
    1436:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    143a:	c3 e4       	ldi	r28, 0x43	; 67
    143c:	8b b1       	in	r24, 0x0b	; 11
    143e:	80 68       	ori	r24, 0x80	; 128
    1440:	8b b9       	out	0x0b, r24	; 11
    1442:	8b b1       	in	r24, 0x0b	; 11
    1444:	8f 7b       	andi	r24, 0xBF	; 191
    1446:	8b b9       	out	0x0b, r24	; 11
    1448:	85 e0       	ldi	r24, 0x05	; 5
    144a:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    144e:	81 11       	cpse	r24, r1
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <varredura+0x10c>
    1452:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    1456:	ca e2       	ldi	r28, 0x2A	; 42
    1458:	84 e0       	ldi	r24, 0x04	; 4
    145a:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    145e:	81 11       	cpse	r24, r1
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <varredura+0x11c>
    1462:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    1466:	c0 e3       	ldi	r28, 0x30	; 48
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    146e:	81 11       	cpse	r24, r1
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <varredura+0x12c>
    1472:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    1476:	c3 e2       	ldi	r28, 0x23	; 35
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	0e 94 86 09 	call	0x130c	; 0x130c <debounce>
    147e:	81 11       	cpse	r24, r1
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <varredura+0x13c>
    1482:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <resetar_timeout>
    1486:	c4 e4       	ldi	r28, 0x44	; 68
    1488:	8b b1       	in	r24, 0x0b	; 11
    148a:	80 64       	ori	r24, 0x40	; 64
    148c:	8b b9       	out	0x0b, r24	; 11
    148e:	8c 2f       	mov	r24, r28
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    1494:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    1496:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    1498:	85 e0       	ldi	r24, 0x05	; 5
    149a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    149c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    14a0:	81 ef       	ldi	r24, 0xF1	; 241
    14a2:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	08 c0       	rjmp	.+16     	; 0x14ba <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    14aa:	a9 9b       	sbis	0x15, 1	; 21
    14ac:	fe cf       	rjmp	.-4      	; 0x14aa <delay1ms+0x16>
		TCNT0 = 241;
    14ae:	91 ef       	ldi	r25, 0xF1	; 241
    14b0:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    14b2:	92 e0       	ldi	r25, 0x02	; 2
    14b4:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    14b6:	2f 5f       	subi	r18, 0xFF	; 255
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	24 17       	cp	r18, r20
    14bc:	35 07       	cpc	r19, r21
    14be:	ac f3       	brlt	.-22     	; 0x14aa <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    14c0:	15 bc       	out	0x25, r1	; 37
    14c2:	08 95       	ret

000014c4 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    14c4:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    14c6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    14cc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    14d0:	85 ef       	ldi	r24, 0xF5	; 245
    14d2:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    14da:	a9 9b       	sbis	0x15, 1	; 21
    14dc:	fe cf       	rjmp	.-4      	; 0x14da <delay1us+0x16>
		TCNT0 = 245;
    14de:	95 ef       	ldi	r25, 0xF5	; 245
    14e0:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    14e2:	95 b3       	in	r25, 0x15	; 21
    14e4:	92 60       	ori	r25, 0x02	; 2
    14e6:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    14e8:	2f 5f       	subi	r18, 0xFF	; 255
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	24 17       	cp	r18, r20
    14ee:	35 07       	cpc	r19, r21
    14f0:	a4 f3       	brlt	.-24     	; 0x14da <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    14f2:	15 bc       	out	0x25, r1	; 37
    14f4:	08 95       	ret

000014f6 <__udivmodsi4>:
    14f6:	a1 e2       	ldi	r26, 0x21	; 33
    14f8:	1a 2e       	mov	r1, r26
    14fa:	aa 1b       	sub	r26, r26
    14fc:	bb 1b       	sub	r27, r27
    14fe:	fd 01       	movw	r30, r26
    1500:	0d c0       	rjmp	.+26     	; 0x151c <__udivmodsi4_ep>

00001502 <__udivmodsi4_loop>:
    1502:	aa 1f       	adc	r26, r26
    1504:	bb 1f       	adc	r27, r27
    1506:	ee 1f       	adc	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	a2 17       	cp	r26, r18
    150c:	b3 07       	cpc	r27, r19
    150e:	e4 07       	cpc	r30, r20
    1510:	f5 07       	cpc	r31, r21
    1512:	20 f0       	brcs	.+8      	; 0x151c <__udivmodsi4_ep>
    1514:	a2 1b       	sub	r26, r18
    1516:	b3 0b       	sbc	r27, r19
    1518:	e4 0b       	sbc	r30, r20
    151a:	f5 0b       	sbc	r31, r21

0000151c <__udivmodsi4_ep>:
    151c:	66 1f       	adc	r22, r22
    151e:	77 1f       	adc	r23, r23
    1520:	88 1f       	adc	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	1a 94       	dec	r1
    1526:	69 f7       	brne	.-38     	; 0x1502 <__udivmodsi4_loop>
    1528:	60 95       	com	r22
    152a:	70 95       	com	r23
    152c:	80 95       	com	r24
    152e:	90 95       	com	r25
    1530:	9b 01       	movw	r18, r22
    1532:	ac 01       	movw	r20, r24
    1534:	bd 01       	movw	r22, r26
    1536:	cf 01       	movw	r24, r30
    1538:	08 95       	ret

0000153a <__tablejump2__>:
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	05 90       	lpm	r0, Z+
    1540:	f4 91       	lpm	r31, Z
    1542:	e0 2d       	mov	r30, r0
    1544:	09 94       	ijmp

00001546 <strcat>:
    1546:	fb 01       	movw	r30, r22
    1548:	dc 01       	movw	r26, r24
    154a:	0d 90       	ld	r0, X+
    154c:	00 20       	and	r0, r0
    154e:	e9 f7       	brne	.-6      	; 0x154a <strcat+0x4>
    1550:	11 97       	sbiw	r26, 0x01	; 1
    1552:	01 90       	ld	r0, Z+
    1554:	0d 92       	st	X+, r0
    1556:	00 20       	and	r0, r0
    1558:	e1 f7       	brne	.-8      	; 0x1552 <strcat+0xc>
    155a:	08 95       	ret

0000155c <strncat>:
    155c:	fb 01       	movw	r30, r22
    155e:	dc 01       	movw	r26, r24
    1560:	0d 90       	ld	r0, X+
    1562:	00 20       	and	r0, r0
    1564:	e9 f7       	brne	.-6      	; 0x1560 <strncat+0x4>
    1566:	11 97       	sbiw	r26, 0x01	; 1
    1568:	41 50       	subi	r20, 0x01	; 1
    156a:	50 40       	sbci	r21, 0x00	; 0
    156c:	28 f0       	brcs	.+10     	; 0x1578 <strncat+0x1c>
    156e:	01 90       	ld	r0, Z+
    1570:	00 20       	and	r0, r0
    1572:	0d 92       	st	X+, r0
    1574:	c9 f7       	brne	.-14     	; 0x1568 <strncat+0xc>
    1576:	08 95       	ret
    1578:	1c 92       	st	X, r1
    157a:	08 95       	ret

0000157c <strncpy>:
    157c:	fb 01       	movw	r30, r22
    157e:	dc 01       	movw	r26, r24
    1580:	41 50       	subi	r20, 0x01	; 1
    1582:	50 40       	sbci	r21, 0x00	; 0
    1584:	48 f0       	brcs	.+18     	; 0x1598 <strncpy+0x1c>
    1586:	01 90       	ld	r0, Z+
    1588:	0d 92       	st	X+, r0
    158a:	00 20       	and	r0, r0
    158c:	c9 f7       	brne	.-14     	; 0x1580 <strncpy+0x4>
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <strncpy+0x16>
    1590:	1d 92       	st	X+, r1
    1592:	41 50       	subi	r20, 0x01	; 1
    1594:	50 40       	sbci	r21, 0x00	; 0
    1596:	e0 f7       	brcc	.-8      	; 0x1590 <strncpy+0x14>
    1598:	08 95       	ret

0000159a <strstr>:
    159a:	fb 01       	movw	r30, r22
    159c:	51 91       	ld	r21, Z+
    159e:	55 23       	and	r21, r21
    15a0:	a9 f0       	breq	.+42     	; 0x15cc <strstr+0x32>
    15a2:	bf 01       	movw	r22, r30
    15a4:	dc 01       	movw	r26, r24
    15a6:	4d 91       	ld	r20, X+
    15a8:	45 17       	cp	r20, r21
    15aa:	41 11       	cpse	r20, r1
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <strstr+0xc>
    15ae:	59 f4       	brne	.+22     	; 0x15c6 <strstr+0x2c>
    15b0:	cd 01       	movw	r24, r26
    15b2:	01 90       	ld	r0, Z+
    15b4:	00 20       	and	r0, r0
    15b6:	49 f0       	breq	.+18     	; 0x15ca <strstr+0x30>
    15b8:	4d 91       	ld	r20, X+
    15ba:	40 15       	cp	r20, r0
    15bc:	41 11       	cpse	r20, r1
    15be:	c9 f3       	breq	.-14     	; 0x15b2 <strstr+0x18>
    15c0:	fb 01       	movw	r30, r22
    15c2:	41 11       	cpse	r20, r1
    15c4:	ef cf       	rjmp	.-34     	; 0x15a4 <strstr+0xa>
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	08 95       	ret

000015ce <_exit>:
    15ce:	f8 94       	cli

000015d0 <__stop_program>:
    15d0:	ff cf       	rjmp	.-2      	; 0x15d0 <__stop_program>
