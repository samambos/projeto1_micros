
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  00000d44  00000dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  0080026c  0080026c  00000f44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002185  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e40  00000000  00000000  000032d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e8  00000000  00000000  00004111  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  000051fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072b  00000000  00000000  00005668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000124c  00000000  00000000  00005d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006fdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c3 04 	jmp	0x986	; 0x986 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3f       	cpi	r26, 0xF0	; 240
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 02 	call	0x502	; 0x502 <main>
  9e:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mensagem_Inicial>:
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){

		LCD_texto_correndo(0, " Banco UFRGS ", 300, 0);
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	4c e2       	ldi	r20, 0x2C	; 44
  aa:	68 e0       	ldi	r22, 0x08	; 8
  ac:	71 e0       	ldi	r23, 0x01	; 1
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_texto_correndo>
		LCD_Escrever_Linha(1, 0, "Digite cartao: ");
  b4:	46 e1       	ldi	r20, 0x16	; 22
  b6:	51 e0       	ldi	r21, 0x01	; 1
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
  c0:	08 95       	ret

000000c2 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	9c 2f       	mov	r25, r28
  cc:	92 95       	swap	r25
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	89 2b       	or	r24, r25
  d2:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
  e6:	84 e6       	ldi	r24, 0x64	; 100
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 57 06 	call	0xcae	; 0xcae <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	cf 70       	andi	r28, 0x0F	; 15
  f4:	c8 2b       	or	r28, r24
  f6:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 13a:	08 95       	ret

0000013c <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 148:	08 95       	ret

0000014a <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	while(*texto) {
 150:	23 c0       	rjmp	.+70     	; 0x198 <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
 152:	98 b1       	in	r25, 0x08	; 8
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	89 2b       	or	r24, r25
 15c:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	80 62       	ori	r24, 0x20	; 32
 162:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 164:	88 b1       	in	r24, 0x08	; 8
 166:	80 61       	ori	r24, 0x10	; 16
 168:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 16a:	88 b1       	in	r24, 0x08	; 8
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
 170:	88 ec       	ldi	r24, 0xC8	; 200
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 57 06 	call	0xcae	; 0xcae <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
 178:	98 b1       	in	r25, 0x08	; 8
 17a:	89 91       	ld	r24, Y+
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	89 2b       	or	r24, r25
 182:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 184:	88 b1       	in	r24, 0x08	; 8
 186:	80 61       	ori	r24, 0x10	; 16
 188:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	da cf       	rjmp	.-76     	; 0x152 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
 1aa:	81 11       	cpse	r24, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <LCD_Escrever_Linha+0x1a>
 1ae:	60 31       	cpi	r22, 0x10	; 16
 1b0:	30 f4       	brcc	.+12     	; 0x1be <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
 1b2:	86 2f       	mov	r24, r22
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
 1c2:	60 31       	cpi	r22, 0x10	; 16
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
 1c6:	86 2f       	mov	r24, r22
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	80 6c       	ori	r24, 0xC0	; 192
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <LCD_texto_correndo>:

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
 1e2:	6f 92       	push	r6
 1e4:	7f 92       	push	r7
 1e6:	8f 92       	push	r8
 1e8:	9f 92       	push	r9
 1ea:	af 92       	push	r10
 1ec:	bf 92       	push	r11
 1ee:	cf 92       	push	r12
 1f0:	df 92       	push	r13
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	61 97       	sbiw	r28, 0x11	; 17
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	78 2e       	mov	r7, r24
 210:	4a 01       	movw	r8, r20
 212:	62 2e       	mov	r6, r18
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 214:	cd b6       	in	r12, 0x3d	; 61
 216:	de b6       	in	r13, 0x3e	; 62
	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
}

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
 218:	ad b6       	in	r10, 0x3d	; 61
 21a:	be b6       	in	r11, 0x3e	; 62
    uint8_t tamanho = strlen(texto);
 21c:	fb 01       	movw	r30, r22
 21e:	01 90       	ld	r0, Z+
 220:	00 20       	and	r0, r0
 222:	e9 f7       	brne	.-6      	; 0x21e <LCD_texto_correndo+0x3c>
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	e6 1b       	sub	r30, r22
 228:	f7 0b       	sbc	r31, r23
 22a:	0e 2f       	mov	r16, r30
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
 22c:	e1 31       	cpi	r30, 0x11	; 17
 22e:	28 f4       	brcc	.+10     	; 0x23a <LCD_texto_correndo+0x58>
        LCD_Escrever_Linha(linha, 0, texto);
 230:	ab 01       	movw	r20, r22
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
        return;
 238:	42 c0       	rjmp	.+132    	; 0x2be <LCD_texto_correndo+0xdc>
    }
    
    // Adiciona espaços no final para melhor visualização
    char texto_extendido[tamanho + 17];
 23a:	ff 27       	eor	r31, r31
 23c:	71 96       	adiw	r30, 0x11	; 17
 23e:	8d b7       	in	r24, 0x3d	; 61
 240:	9e b7       	in	r25, 0x3e	; 62
 242:	8e 1b       	sub	r24, r30
 244:	9f 0b       	sbc	r25, r31
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	9e bf       	out	0x3e, r25	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	8d bf       	out	0x3d, r24	; 61
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	7c 01       	movw	r14, r24
    strcpy(texto_extendido, texto);
 254:	0e 94 70 06 	call	0xce0	; 0xce0 <strcpy>
    strcat(texto_extendido, "                "); // 16 espaços
 258:	d7 01       	movw	r26, r14
 25a:	0d 90       	ld	r0, X+
 25c:	00 20       	and	r0, r0
 25e:	e9 f7       	brne	.-6      	; 0x25a <LCD_texto_correndo+0x78>
 260:	11 97       	sbiw	r26, 0x01	; 1
 262:	81 e1       	ldi	r24, 0x11	; 17
 264:	e6 e2       	ldi	r30, 0x26	; 38
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	01 90       	ld	r0, Z+
 26a:	0d 92       	st	X+, r0
 26c:	8a 95       	dec	r24
 26e:	e1 f7       	brne	.-8      	; 0x268 <LCD_texto_correndo+0x86>
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	1b c0       	rjmp	.+54     	; 0x2aa <LCD_texto_correndo+0xc8>
            // Copia 16 caracteres começando na posição i
            strncpy(buffer, &texto_extendido[i], 16);
 274:	40 e1       	ldi	r20, 0x10	; 16
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	b7 01       	movw	r22, r14
 27a:	61 0f       	add	r22, r17
 27c:	71 1d       	adc	r23, r1
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	0e 94 77 06 	call	0xcee	; 0xcee <strncpy>
            buffer[16] = '\0';
 286:	19 8a       	std	Y+17, r1	; 0x11
            
            LCD_Escrever_Linha(linha, 0, buffer);
 288:	ae 01       	movw	r20, r28
 28a:	4f 5f       	subi	r20, 0xFF	; 255
 28c:	5f 4f       	sbci	r21, 0xFF	; 255
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	87 2d       	mov	r24, r7
 292:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
            delay1ms(velocidade_ms);
 296:	c4 01       	movw	r24, r8
 298:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
 29c:	0e 94 bb 05 	call	0xb76	; 0xb76 <varredura>
 2a0:	89 2b       	or	r24, r25
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <LCD_texto_correndo+0xc6>
 2a4:	66 20       	and	r6, r6
 2a6:	59 f0       	breq	.+22     	; 0x2be <LCD_texto_correndo+0xdc>
    char texto_extendido[tamanho + 17];
    strcpy(texto_extendido, texto);
    strcat(texto_extendido, "                "); // 16 espaços
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
 2a8:	1f 5f       	subi	r17, 0xFF	; 255
 2aa:	01 17       	cp	r16, r17
 2ac:	18 f7       	brcc	.-58     	; 0x274 <LCD_texto_correndo+0x92>
            delay1ms(velocidade_ms);
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 2ae:	61 10       	cpse	r6, r1
 2b0:	df cf       	rjmp	.-66     	; 0x270 <LCD_texto_correndo+0x8e>
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	be be       	out	0x3e, r11	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	ad be       	out	0x3d, r10	; 61
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <LCD_texto_correndo+0xe6>
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
        LCD_Escrever_Linha(linha, 0, texto);
        return;
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	be be       	out	0x3e, r11	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	ad be       	out	0x3d, r10	; 61
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de be       	out	0x3e, r13	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd be       	out	0x3d, r12	; 61
 2d2:	61 96       	adiw	r28, 0x11	; 17
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	df 90       	pop	r13
 2ec:	cf 90       	pop	r12
 2ee:	bf 90       	pop	r11
 2f0:	af 90       	pop	r10
 2f2:	9f 90       	pop	r9
 2f4:	8f 90       	pop	r8
 2f6:	7f 90       	pop	r7
 2f8:	6f 90       	pop	r6
 2fa:	08 95       	ret

000002fc <ler_codigo_aluno>:
#include "teclado.h"
#include "caixa_inicial.h"
#include "operacao.h"

// Leitura do cÃ³digo do aluno
void ler_codigo_aluno(char* codigo) {
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	00 d0       	rcall	.+0      	; 0x30a <ler_codigo_aluno+0xe>
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
 310:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
 314:	47 e3       	ldi	r20, 0x37	; 55
 316:	51 e0       	ldi	r21, 0x01	; 1
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
 320:	46 e4       	ldi	r20, 0x46	; 70
 322:	51 e0       	ldi	r21, 0x01	; 1
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
#include "caixa_inicial.h"
#include "operacao.h"

// Leitura do cÃ³digo do aluno
void ler_codigo_aluno(char* codigo) {
	int pos = 0;
 32c:	00 e0       	ldi	r16, 0x00	; 0
 32e:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 330:	19 c0       	rjmp	.+50     	; 0x364 <ler_codigo_aluno+0x68>
		tecla = varredura();
 332:	0e 94 bb 05 	call	0xb76	; 0xb76 <varredura>
		if (tecla >= '0' && tecla <= '9') {
 336:	90 ed       	ldi	r25, 0xD0	; 208
 338:	98 0f       	add	r25, r24
 33a:	9a 30       	cpi	r25, 0x0A	; 10
 33c:	98 f4       	brcc	.+38     	; 0x364 <ler_codigo_aluno+0x68>
			codigo[pos] = tecla;
 33e:	f7 01       	movw	r30, r14
 340:	e0 0f       	add	r30, r16
 342:	f1 1f       	adc	r31, r17
 344:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
 34a:	ae 01       	movw	r20, r28
 34c:	4f 5f       	subi	r20, 0xFF	; 255
 34e:	5f 4f       	sbci	r21, 0xFF	; 255
 350:	60 2f       	mov	r22, r16
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 358:	0f 5f       	subi	r16, 0xFF	; 255
 35a:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
 35c:	88 ec       	ldi	r24, 0xC8	; 200
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 364:	06 30       	cpi	r16, 0x06	; 6
 366:	11 05       	cpc	r17, r1
 368:	24 f3       	brlt	.-56     	; 0x332 <ler_codigo_aluno+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	codigo[6] = '\0';
 36a:	f7 01       	movw	r30, r14
 36c:	16 82       	std	Z+6, r1	; 0x06
}
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	08 95       	ret

00000380 <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	00 d0       	rcall	.+0      	; 0x38e <ler_senha+0xe>
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
 394:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite senha:");
 398:	4d e4       	ldi	r20, 0x4D	; 77
 39a:	51 e0       	ldi	r21, 0x01	; 1
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
 3a4:	46 e4       	ldi	r20, 0x46	; 70
 3a6:	51 e0       	ldi	r21, 0x01	; 1
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
	int pos = 0;
 3b0:	00 e0       	ldi	r16, 0x00	; 0
 3b2:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 3b4:	1a c0       	rjmp	.+52     	; 0x3ea <ler_senha+0x6a>
		tecla = varredura();
 3b6:	0e 94 bb 05 	call	0xb76	; 0xb76 <varredura>
		if (tecla >= '0' && tecla <= '9') {
 3ba:	90 ed       	ldi	r25, 0xD0	; 208
 3bc:	98 0f       	add	r25, r24
 3be:	9a 30       	cpi	r25, 0x0A	; 10
 3c0:	a0 f4       	brcc	.+40     	; 0x3ea <ler_senha+0x6a>
			senha[pos] = tecla;
 3c2:	f7 01       	movw	r30, r14
 3c4:	e0 0f       	add	r30, r16
 3c6:	f1 1f       	adc	r31, r17
 3c8:	80 83       	st	Z, r24
			char temp[2] = { '*', '\0' };
 3ca:	8a e2       	ldi	r24, 0x2A	; 42
 3cc:	89 83       	std	Y+1, r24	; 0x01
 3ce:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
 3d0:	ae 01       	movw	r20, r28
 3d2:	4f 5f       	subi	r20, 0xFF	; 255
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	60 2f       	mov	r22, r16
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 3de:	0f 5f       	subi	r16, 0xFF	; 255
 3e0:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
 3e2:	88 ec       	ldi	r24, 0xC8	; 200
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 3ea:	06 30       	cpi	r16, 0x06	; 6
 3ec:	11 05       	cpc	r17, r1
 3ee:	1c f3       	brlt	.-58     	; 0x3b6 <ler_senha+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	senha[6] = '\0';
 3f0:	f7 01       	movw	r30, r14
 3f2:	16 82       	std	Z+6, r1	; 0x06
}
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	08 95       	ret

00000406 <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	a1 97       	sbiw	r28, 0x21	; 33
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	f8 94       	cli
 414:	de bf       	out	0x3e, r29	; 62
 416:	0f be       	out	0x3f, r0	; 63
 418:	cd bf       	out	0x3d, r28	; 61
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
 41a:	dc 01       	movw	r26, r24
 41c:	0d 90       	ld	r0, X+
 41e:	00 20       	and	r0, r0
 420:	e9 f7       	brne	.-6      	; 0x41c <validar_codigo_aluno+0x16>
 422:	11 97       	sbiw	r26, 0x01	; 1
 424:	a8 1b       	sub	r26, r24
 426:	b9 0b       	sbc	r27, r25
 428:	16 97       	sbiw	r26, 0x06	; 6
 42a:	09 f0       	breq	.+2      	; 0x42e <validar_codigo_aluno+0x28>
 42c:	53 c0       	rjmp	.+166    	; 0x4d4 <validar_codigo_aluno+0xce>
 42e:	db 01       	movw	r26, r22
 430:	0d 90       	ld	r0, X+
 432:	00 20       	and	r0, r0
 434:	e9 f7       	brne	.-6      	; 0x430 <validar_codigo_aluno+0x2a>
 436:	11 97       	sbiw	r26, 0x01	; 1
 438:	a6 1b       	sub	r26, r22
 43a:	b7 0b       	sbc	r27, r23
 43c:	16 97       	sbiw	r26, 0x06	; 6
 43e:	09 f0       	breq	.+2      	; 0x442 <validar_codigo_aluno+0x3c>
 440:	4c c0       	rjmp	.+152    	; 0x4da <validar_codigo_aluno+0xd4>
 442:	fc 01       	movw	r30, r24

	char mensagem[14];
	mensagem[0] = 'C';
 444:	83 e4       	ldi	r24, 0x43	; 67
 446:	89 83       	std	Y+1, r24	; 0x01
	mensagem[1] = 'E';
 448:	85 e4       	ldi	r24, 0x45	; 69
 44a:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(&mensagem[2], codigo, 6);
 44c:	86 e0       	ldi	r24, 0x06	; 6
 44e:	de 01       	movw	r26, r28
 450:	13 96       	adiw	r26, 0x03	; 3
 452:	01 90       	ld	r0, Z+
 454:	0d 92       	st	X+, r0
 456:	8a 95       	dec	r24
 458:	e1 f7       	brne	.-8      	; 0x452 <validar_codigo_aluno+0x4c>
	memcpy(&mensagem[8], senha, 6);
 45a:	86 e0       	ldi	r24, 0x06	; 6
 45c:	fb 01       	movw	r30, r22
 45e:	de 01       	movw	r26, r28
 460:	19 96       	adiw	r26, 0x09	; 9
 462:	01 90       	ld	r0, Z+
 464:	0d 92       	st	X+, r0
 466:	8a 95       	dec	r24
 468:	e1 f7       	brne	.-8      	; 0x462 <validar_codigo_aluno+0x5c>

	SerialEnviaChars(14, mensagem);
 46a:	be 01       	movw	r22, r28
 46c:	6f 5f       	subi	r22, 0xFF	; 255
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	8e e0       	ldi	r24, 0x0E	; 14
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 a6 04 	call	0x94c	; 0x94c <SerialEnviaChars>

	char resposta[19]; // +1 para \0
	SerialRecebeChars(18, resposta);
 478:	be 01       	movw	r22, r28
 47a:	61 5f       	subi	r22, 0xF1	; 241
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	82 e1       	ldi	r24, 0x12	; 18
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 33 05 	call	0xa66	; 0xa66 <SerialRecebeChars>
	resposta[18] = '\0';
 486:	19 a2       	std	Y+33, r1	; 0x21

	// -------- DEBUG: mostrar a resposta no LCD do serv no LCD --------------
	LCD_limpar();
 488:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Resp Servidor:");
 48c:	4b e5       	ldi	r20, 0x5B	; 91
 48e:	51 e0       	ldi	r21, 0x01	; 1
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, resposta);
 498:	ae 01       	movw	r20, r28
 49a:	41 5f       	subi	r20, 0xF1	; 241
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	delay1ms(2000);
 4a6:	80 ed       	ldi	r24, 0xD0	; 208
 4a8:	97 e0       	ldi	r25, 0x07	; 7
 4aa:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>
	LCD_limpar();
 4ae:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	// -------- DEBUG: mostrar a resposta no LCD do serv no LCD --------------

	if (resposta[0] == 'S' && resposta[1] == 'E') {
 4b2:	8f 85       	ldd	r24, Y+15	; 0x0f
 4b4:	83 35       	cpi	r24, 0x53	; 83
 4b6:	a1 f4       	brne	.+40     	; 0x4e0 <validar_codigo_aluno+0xda>
 4b8:	88 89       	ldd	r24, Y+16	; 0x10
 4ba:	85 34       	cpi	r24, 0x45	; 69
 4bc:	a1 f4       	brne	.+40     	; 0x4e6 <validar_codigo_aluno+0xe0>
		if (strstr(resposta, "Nao autorizado") != NULL) {
 4be:	6a e6       	ldi	r22, 0x6A	; 106
 4c0:	71 e0       	ldi	r23, 0x01	; 1
 4c2:	ce 01       	movw	r24, r28
 4c4:	0f 96       	adiw	r24, 0x0f	; 15
 4c6:	0e 94 86 06 	call	0xd0c	; 0xd0c <strstr>
 4ca:	89 2b       	or	r24, r25
 4cc:	79 f0       	breq	.+30     	; 0x4ec <validar_codigo_aluno+0xe6>
			return 0;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <validar_codigo_aluno+0xea>
	}
	senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <validar_codigo_aluno+0xea>
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	08 c0       	rjmp	.+16     	; 0x4f0 <validar_codigo_aluno+0xea>
			return 0;
			} else {
			return 1;
		}
	}
	return 0;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <validar_codigo_aluno+0xea>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <validar_codigo_aluno+0xea>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
		if (strstr(resposta, "Nao autorizado") != NULL) {
			return 0;
			} else {
			return 1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
 4f0:	a1 96       	adiw	r28, 0x21	; 33
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <main>:

// FunÃ§Ã£o principal
int main(void) {
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	66 97       	sbiw	r28, 0x16	; 22
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
 516:	0e 94 77 05 	call	0xaee	; 0xaee <prepara_teclado>
	LCD_iniciar();
 51a:	0e 94 88 00 	call	0x110	; 0x110 <LCD_iniciar>
	initUART();
 51e:	0e 94 97 04 	call	0x92e	; 0x92e <initUART>

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
 522:	88 e0       	ldi	r24, 0x08	; 8
 524:	e0 e0       	ldi	r30, 0x00	; 0
 526:	f1 e0       	ldi	r31, 0x01	; 1
 528:	de 01       	movw	r26, r28
 52a:	1f 96       	adiw	r26, 0x0f	; 15
 52c:	01 90       	ld	r0, Z+
 52e:	0d 92       	st	X+, r0
 530:	8a 95       	dec	r24
 532:	e1 f7       	brne	.-8      	; 0x52c <main+0x2a>
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	while (1) {
		mensagem_Inicial();
 534:	0e 94 53 00 	call	0xa6	; 0xa6 <mensagem_Inicial>

		while (varredura() == 0);
 538:	0e 94 bb 05 	call	0xb76	; 0xb76 <varredura>
 53c:	88 23       	and	r24, r24
 53e:	e1 f3       	breq	.-8      	; 0x538 <main+0x36>

		ler_codigo_aluno(codigo_aluno);
 540:	ce 01       	movw	r24, r28
 542:	01 96       	adiw	r24, 0x01	; 1
 544:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ler_codigo_aluno>
		ler_senha(senha_aluno);
 548:	ce 01       	movw	r24, r28
 54a:	08 96       	adiw	r24, 0x08	; 8
 54c:	0e 94 c0 01 	call	0x380	; 0x380 <ler_senha>

		if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
 550:	be 01       	movw	r22, r28
 552:	68 5f       	subi	r22, 0xF8	; 248
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	ce 01       	movw	r24, r28
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	0e 94 03 02 	call	0x406	; 0x406 <validar_codigo_aluno>
 55e:	89 2b       	or	r24, r25
 560:	09 f4       	brne	.+2      	; 0x564 <main+0x62>
 562:	cd c0       	rjmp	.+410    	; 0x6fe <main+0x1fc>
			LCD_limpar();
 564:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Codigo valido!");
 568:	49 e7       	ldi	r20, 0x79	; 121
 56a:	51 e0       	ldi	r21, 0x01	; 1
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Processando...");
 574:	48 e8       	ldi	r20, 0x88	; 136
 576:	51 e0       	ldi	r21, 0x01	; 1
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			delay1ms(2000);
 580:	80 ed       	ldi	r24, 0xD0	; 208
 582:	97 e0       	ldi	r25, 0x07	; 7
 584:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>

			int menu_ativo = 1;
 588:	cc 24       	eor	r12, r12
 58a:	c3 94       	inc	r12
 58c:	d1 2c       	mov	r13, r1
			indice_menu = 0;
 58e:	e1 2c       	mov	r14, r1
 590:	f1 2c       	mov	r15, r1

			while (menu_ativo) {
 592:	b0 c0       	rjmp	.+352    	; 0x6f4 <main+0x1f2>
				LCD_limpar();
 594:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
 598:	f7 01       	movw	r30, r14
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	8c 0f       	add	r24, r28
 5a4:	9d 1f       	adc	r25, r29
 5a6:	e8 0f       	add	r30, r24
 5a8:	f9 1f       	adc	r31, r25
 5aa:	46 85       	ldd	r20, Z+14	; 0x0e
 5ac:	57 85       	ldd	r21, Z+15	; 0x0f
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				if (indice_menu + 1 < total_opcoes) {
 5b6:	57 01       	movw	r10, r14
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
 5ba:	a9 1a       	sub	r10, r25
 5bc:	b9 0a       	sbc	r11, r25
 5be:	84 e0       	ldi	r24, 0x04	; 4
 5c0:	a8 16       	cp	r10, r24
 5c2:	b1 04       	cpc	r11, r1
 5c4:	84 f4       	brge	.+32     	; 0x5e6 <main+0xe4>
					LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
 5c6:	f5 01       	movw	r30, r10
 5c8:	ee 0f       	add	r30, r30
 5ca:	ff 1f       	adc	r31, r31
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	8c 0f       	add	r24, r28
 5d2:	9d 1f       	adc	r25, r29
 5d4:	e8 0f       	add	r30, r24
 5d6:	f9 1f       	adc	r31, r25
 5d8:	46 85       	ldd	r20, Z+14	; 0x0e
 5da:	57 85       	ldd	r21, Z+15	; 0x0f
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <main+0xf0>
					} else {
					LCD_Escrever_Linha(1, 0, " ");
 5e6:	45 e3       	ldi	r20, 0x35	; 53
 5e8:	51 e0       	ldi	r21, 0x01	; 1
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				}

				while ((tecla = varredura()) == 0);
 5f2:	0e 94 bb 05 	call	0xb76	; 0xb76 <varredura>
 5f6:	18 2f       	mov	r17, r24
 5f8:	88 23       	and	r24, r24
 5fa:	d9 f3       	breq	.-10     	; 0x5f2 <main+0xf0>
				delay1ms(300);
 5fc:	8c e2       	ldi	r24, 0x2C	; 44
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>

				if (tecla == 'B' && indice_menu < total_opcoes - 2) {
 604:	12 34       	cpi	r17, 0x42	; 66
 606:	29 f4       	brne	.+10     	; 0x612 <main+0x110>
 608:	92 e0       	ldi	r25, 0x02	; 2
 60a:	e9 16       	cp	r14, r25
 60c:	f1 04       	cpc	r15, r1
 60e:	0c f4       	brge	.+2      	; 0x612 <main+0x110>
 610:	70 c0       	rjmp	.+224    	; 0x6f2 <main+0x1f0>
					indice_menu++;
					} else if (tecla == 'A' && indice_menu > 0) {
 612:	11 34       	cpi	r17, 0x41	; 65
 614:	39 f4       	brne	.+14     	; 0x624 <main+0x122>
 616:	1e 14       	cp	r1, r14
 618:	1f 04       	cpc	r1, r15
 61a:	24 f4       	brge	.+8      	; 0x624 <main+0x122>
					indice_menu--;
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	e8 1a       	sub	r14, r24
 620:	f1 08       	sbc	r15, r1
 622:	68 c0       	rjmp	.+208    	; 0x6f4 <main+0x1f2>
					} else if (tecla == '*') {
 624:	1a 32       	cpi	r17, 0x2A	; 42
 626:	79 f4       	brne	.+30     	; 0x646 <main+0x144>
					LCD_limpar();
 628:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
					LCD_Escrever_Linha(0, 0, "Voltando...");
 62c:	47 e9       	ldi	r20, 0x97	; 151
 62e:	51 e0       	ldi	r21, 0x01	; 1
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
					delay1ms(1000);
 638:	88 ee       	ldi	r24, 0xE8	; 232
 63a:	93 e0       	ldi	r25, 0x03	; 3
 63c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>
					menu_ativo = 0;
 640:	c1 2c       	mov	r12, r1
 642:	d1 2c       	mov	r13, r1
 644:	57 c0       	rjmp	.+174    	; 0x6f4 <main+0x1f2>
					} else if (tecla == opcoes[indice_menu][0]) {
 646:	f7 01       	movw	r30, r14
 648:	ee 0f       	add	r30, r30
 64a:	ff 1f       	adc	r31, r31
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	8c 0f       	add	r24, r28
 652:	9d 1f       	adc	r25, r29
 654:	e8 0f       	add	r30, r24
 656:	f9 1f       	adc	r31, r25
 658:	06 84       	ldd	r0, Z+14	; 0x0e
 65a:	f7 85       	ldd	r31, Z+15	; 0x0f
 65c:	e0 2d       	mov	r30, r0
 65e:	80 81       	ld	r24, Z
 660:	18 13       	cpse	r17, r24
 662:	48 c0       	rjmp	.+144    	; 0x6f4 <main+0x1f2>
					switch (tecla) {
 664:	12 33       	cpi	r17, 0x32	; 50
 666:	61 f0       	breq	.+24     	; 0x680 <main+0x17e>
 668:	18 f4       	brcc	.+6      	; 0x670 <main+0x16e>
 66a:	11 33       	cpi	r17, 0x31	; 49
 66c:	31 f0       	breq	.+12     	; 0x67a <main+0x178>
 66e:	42 c0       	rjmp	.+132    	; 0x6f4 <main+0x1f2>
 670:	13 33       	cpi	r17, 0x33	; 51
 672:	c9 f0       	breq	.+50     	; 0x6a6 <main+0x1a4>
 674:	14 33       	cpi	r17, 0x34	; 52
 676:	51 f1       	breq	.+84     	; 0x6cc <main+0x1ca>
 678:	3d c0       	rjmp	.+122    	; 0x6f4 <main+0x1f2>
						case '1':
						realizar_saque();
 67a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <realizar_saque>
						break;
 67e:	3a c0       	rjmp	.+116    	; 0x6f4 <main+0x1f2>
						case '2':
						LCD_limpar();
 680:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Deposito");
 684:	40 ee       	ldi	r20, 0xE0	; 224
 686:	51 e0       	ldi	r21, 0x01	; 1
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 690:	43 ea       	ldi	r20, 0xA3	; 163
 692:	51 e0       	ldi	r21, 0x01	; 1
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 69c:	80 ed       	ldi	r24, 0xD0	; 208
 69e:	97 e0       	ldi	r25, 0x07	; 7
 6a0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>
						break;
 6a4:	27 c0       	rjmp	.+78     	; 0x6f4 <main+0x1f2>
						case '3':
						LCD_limpar();
 6a6:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Pagamento");
 6aa:	4b ee       	ldi	r20, 0xEB	; 235
 6ac:	51 e0       	ldi	r21, 0x01	; 1
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 6b6:	43 ea       	ldi	r20, 0xA3	; 163
 6b8:	51 e0       	ldi	r21, 0x01	; 1
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 6c2:	80 ed       	ldi	r24, 0xD0	; 208
 6c4:	97 e0       	ldi	r25, 0x07	; 7
 6c6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>
						break;
 6ca:	14 c0       	rjmp	.+40     	; 0x6f4 <main+0x1f2>
						case '4':
						LCD_limpar();
 6cc:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Saldo");
 6d0:	47 ef       	ldi	r20, 0xF7	; 247
 6d2:	51 e0       	ldi	r21, 0x01	; 1
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
 6dc:	43 ea       	ldi	r20, 0xA3	; 163
 6de:	51 e0       	ldi	r21, 0x01	; 1
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 6e8:	80 ed       	ldi	r24, 0xD0	; 208
 6ea:	97 e0       	ldi	r25, 0x07	; 7
 6ec:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>
						break;
 6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <main+0x1f2>

				while ((tecla = varredura()) == 0);
				delay1ms(300);

				if (tecla == 'B' && indice_menu < total_opcoes - 2) {
					indice_menu++;
 6f2:	75 01       	movw	r14, r10
			delay1ms(2000);

			int menu_ativo = 1;
			indice_menu = 0;

			while (menu_ativo) {
 6f4:	c1 14       	cp	r12, r1
 6f6:	d1 04       	cpc	r13, r1
 6f8:	09 f0       	breq	.+2      	; 0x6fc <main+0x1fa>
 6fa:	4c cf       	rjmp	.-360    	; 0x594 <main+0x92>
 6fc:	1b cf       	rjmp	.-458    	; 0x534 <main+0x32>
						break;
					}
				}
			}
			} else {
			LCD_limpar();
 6fe:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Conta invalida!");
 702:	46 eb       	ldi	r20, 0xB6	; 182
 704:	51 e0       	ldi	r21, 0x01	; 1
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Tente novamente");
 70e:	46 ec       	ldi	r20, 0xC6	; 198
 710:	51 e0       	ldi	r21, 0x01	; 1
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			delay1ms(2000);
 71a:	80 ed       	ldi	r24, 0xD0	; 208
 71c:	97 e0       	ldi	r25, 0x07	; 7
 71e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <delay1ms>
 722:	08 cf       	rjmp	.-496    	; 0x534 <main+0x32>

00000724 <enviar_mensagem_saque>:
		}
	}
}

// Função para enviar mensagem de saque para o servidor
void enviar_mensagem_saque(const char* valor) {
 724:	cf 92       	push	r12
 726:	df 92       	push	r13
 728:	ef 92       	push	r14
 72a:	ff 92       	push	r15
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
 738:	bc 01       	movw	r22, r24
	// Copia o valor para a mensagem
	strncpy(&mensagem[3], valor, tamanho_valor);
	
	// Envia a mensagem via serial
	SerialEnviaChars(tamanho_mensagem, mensagem);
}
 73a:	ed b6       	in	r14, 0x3d	; 61
 73c:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de saque para o servidor
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
 73e:	fc 01       	movw	r30, r24
 740:	01 90       	ld	r0, Z+
 742:	00 20       	and	r0, r0
 744:	e9 f7       	brne	.-6      	; 0x740 <enviar_mensagem_saque+0x1c>
 746:	31 97       	sbiw	r30, 0x01	; 1
 748:	af 01       	movw	r20, r30
 74a:	48 1b       	sub	r20, r24
 74c:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3; // 'C' + 'S' + n + valor
 74e:	6a 01       	movw	r12, r20
 750:	83 e0       	ldi	r24, 0x03	; 3
 752:	c8 0e       	add	r12, r24
 754:	d1 1c       	adc	r13, r1
	
	char mensagem[tamanho_mensagem];
 756:	ed b7       	in	r30, 0x3d	; 61
 758:	fe b7       	in	r31, 0x3e	; 62
 75a:	ec 19       	sub	r30, r12
 75c:	fd 09       	sbc	r31, r13
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	fe bf       	out	0x3e, r31	; 62
 764:	0f be       	out	0x3f, r0	; 63
 766:	ed bf       	out	0x3d, r30	; 61
 768:	0d b7       	in	r16, 0x3d	; 61
 76a:	1e b7       	in	r17, 0x3e	; 62
 76c:	0f 5f       	subi	r16, 0xFF	; 255
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// Monta a mensagem conforme o protocolo
	mensagem[0] = 'C'; // Comando
 770:	83 e4       	ldi	r24, 0x43	; 67
 772:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S'; // Subcomando (Saque)
 774:	83 e5       	ldi	r24, 0x53	; 83
 776:	f8 01       	movw	r30, r16
 778:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor; // Tamanho do valor
 77a:	42 83       	std	Z+2, r20	; 0x02
	
	// Copia o valor para a mensagem
	strncpy(&mensagem[3], valor, tamanho_valor);
 77c:	8d b7       	in	r24, 0x3d	; 61
 77e:	9e b7       	in	r25, 0x3e	; 62
 780:	04 96       	adiw	r24, 0x04	; 4
 782:	0e 94 77 06 	call	0xcee	; 0xcee <strncpy>
	
	// Envia a mensagem via serial
	SerialEnviaChars(tamanho_mensagem, mensagem);
 786:	b8 01       	movw	r22, r16
 788:	c6 01       	movw	r24, r12
 78a:	0e 94 a6 04 	call	0x94c	; 0x94c <SerialEnviaChars>
}
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	fe be       	out	0x3e, r15	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	ed be       	out	0x3d, r14	; 61
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	0f 91       	pop	r16
 7a0:	ff 90       	pop	r15
 7a2:	ef 90       	pop	r14
 7a4:	df 90       	pop	r13
 7a6:	cf 90       	pop	r12
 7a8:	08 95       	ret

000007aa <receber_resposta_servidor>:

// Função para receber resposta do servidor
char receber_resposta_servidor(void) {
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	00 d0       	rcall	.+0      	; 0x7b0 <receber_resposta_servidor+0x6>
 7b0:	1f 92       	push	r1
 7b2:	cd b7       	in	r28, 0x3d	; 61
 7b4:	de b7       	in	r29, 0x3e	; 62
	char resposta[3];
	
	// Aguarda a resposta do servidor (3 bytes)
	SerialRecebeChars(3, resposta);
 7b6:	be 01       	movw	r22, r28
 7b8:	6f 5f       	subi	r22, 0xFF	; 255
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	83 e0       	ldi	r24, 0x03	; 3
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 33 05 	call	0xa66	; 0xa66 <SerialRecebeChars>
	
	// Verifica se é uma resposta de saque
	if(resposta[0] == 'S' && resposta[1] == 'S') {
 7c4:	89 81       	ldd	r24, Y+1	; 0x01
 7c6:	83 35       	cpi	r24, 0x53	; 83
 7c8:	29 f4       	brne	.+10     	; 0x7d4 <receber_resposta_servidor+0x2a>
 7ca:	8a 81       	ldd	r24, Y+2	; 0x02
 7cc:	83 35       	cpi	r24, 0x53	; 83
 7ce:	21 f4       	brne	.+8      	; 0x7d8 <receber_resposta_servidor+0x2e>
		return resposta[2]; // Retorna 'O' ou 'I'
 7d0:	8b 81       	ldd	r24, Y+3	; 0x03
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <receber_resposta_servidor+0x30>
	}
	
	return 'E'; // Erro
 7d4:	85 e4       	ldi	r24, 0x45	; 69
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <receber_resposta_servidor+0x30>
 7d8:	85 e4       	ldi	r24, 0x45	; 69
 7da:	0f 90       	pop	r0
 7dc:	0f 90       	pop	r0
 7de:	0f 90       	pop	r0
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret

000007e6 <realizar_saque>:
#include "LCD.h"
#include "teclado.h"
#include <util/delay.h>

// Função para realizar um saque
void realizar_saque(void) {
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
 7f2:	2a 97       	sbiw	r28, 0x0a	; 10
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	f8 94       	cli
 7f8:	de bf       	out	0x3e, r29	; 62
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
 7fe:	fe 01       	movw	r30, r28
 800:	31 96       	adiw	r30, 0x01	; 1
 802:	89 e0       	ldi	r24, 0x09	; 9
 804:	df 01       	movw	r26, r30
 806:	1d 92       	st	X+, r1
 808:	8a 95       	dec	r24
 80a:	e9 f7       	brne	.-6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	int pos = 0;
	char tecla;
	
	// Solicita o valor do saque ao usuário
	LCD_limpar();
 80c:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
 810:	4d ef       	ldi	r20, 0xFD	; 253
 812:	51 e0       	ldi	r21, 0x01	; 1
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
 81c:	4d e0       	ldi	r20, 0x0D	; 13
 81e:	52 e0       	ldi	r21, 0x02	; 2
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
#include <util/delay.h>

// Função para realizar um saque
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
 828:	00 e0       	ldi	r16, 0x00	; 0
 82a:	10 e0       	ldi	r17, 0x00	; 0
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");
	
	while(1) {
		tecla = varredura();
 82c:	0e 94 bb 05 	call	0xb76	; 0xb76 <varredura>
 830:	8a 87       	std	Y+10, r24	; 0x0a
		
		// Se for dígito e ainda houver espaço
		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE-1)) {
 832:	90 ed       	ldi	r25, 0xD0	; 208
 834:	98 0f       	add	r25, r24
 836:	9a 30       	cpi	r25, 0x0A	; 10
 838:	d8 f4       	brcc	.+54     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 83a:	08 30       	cpi	r16, 0x08	; 8
 83c:	11 05       	cpc	r17, r1
 83e:	c4 f4       	brge	.+48     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
			valor_saque[pos] = tecla;
 840:	e1 e0       	ldi	r30, 0x01	; 1
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	ec 0f       	add	r30, r28
 846:	fd 1f       	adc	r31, r29
 848:	e0 0f       	add	r30, r16
 84a:	f1 1f       	adc	r31, r17
 84c:	80 83       	st	Z, r24
			LCD_Escrever_Linha(1, 2+pos, &tecla);
 84e:	62 e0       	ldi	r22, 0x02	; 2
 850:	60 0f       	add	r22, r16
 852:	ae 01       	movw	r20, r28
 854:	46 5f       	subi	r20, 0xF6	; 246
 856:	5f 4f       	sbci	r21, 0xFF	; 255
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 85e:	0f 5f       	subi	r16, 0xFF	; 255
 860:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 862:	8f e4       	ldi	r24, 0x4F	; 79
 864:	93 ec       	ldi	r25, 0xC3	; 195
 866:	01 97       	sbiw	r24, 0x01	; 1
 868:	f1 f7       	brne	.-4      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 86a:	00 c0       	rjmp	.+0      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 86c:	00 00       	nop
 86e:	de cf       	rjmp	.-68     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			_delay_ms(200); // Debounce
		}
		// Tecla enter (confirmar)
		else if(tecla == '#' && pos > 0) {
 870:	83 32       	cpi	r24, 0x23	; 35
 872:	c1 f5       	brne	.+112    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 874:	10 16       	cp	r1, r16
 876:	11 06       	cpc	r1, r17
 878:	ac f5       	brge	.+106    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
			valor_saque[pos] = '\0'; // Finaliza a string
 87a:	e1 e0       	ldi	r30, 0x01	; 1
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	ec 0f       	add	r30, r28
 880:	fd 1f       	adc	r31, r29
 882:	e0 0f       	add	r30, r16
 884:	f1 1f       	adc	r31, r17
 886:	10 82       	st	Z, r1
			
			// Envia a mensagem de saque para o servidor
			enviar_mensagem_saque(valor_saque);
 888:	ce 01       	movw	r24, r28
 88a:	01 96       	adiw	r24, 0x01	; 1
 88c:	0e 94 92 03 	call	0x724	; 0x724 <enviar_mensagem_saque>
			
			// Aguarda resposta do servidor
			char resposta = receber_resposta_servidor();
 890:	0e 94 d5 03 	call	0x7aa	; 0x7aa <receber_resposta_servidor>
 894:	18 2f       	mov	r17, r24
			
			LCD_limpar();
 896:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			if(resposta == 'O') { // OK
 89a:	1f 34       	cpi	r17, 0x4F	; 79
 89c:	69 f4       	brne	.+26     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
				LCD_Escrever_Linha(0, 0, "Saque realizado!");
 89e:	40 e1       	ldi	r20, 0x10	; 16
 8a0:	52 e0       	ldi	r21, 0x02	; 2
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Retire o dinheiro");
 8aa:	41 e2       	ldi	r20, 0x21	; 33
 8ac:	52 e0       	ldi	r21, 0x02	; 2
 8ae:	60 e0       	ldi	r22, 0x00	; 0
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 8b6:	0c c0       	rjmp	.+24     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
				} else { // Saldo Insuficiente
				LCD_Escrever_Linha(0, 0, "Saldo insuficiente");
 8b8:	43 e3       	ldi	r20, 0x33	; 51
 8ba:	52 e0       	ldi	r21, 0x02	; 2
 8bc:	60 e0       	ldi	r22, 0x00	; 0
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente outro valor");
 8c4:	46 e4       	ldi	r20, 0x46	; 70
 8c6:	52 e0       	ldi	r21, 0x02	; 2
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 8d0:	9f eb       	ldi	r25, 0xBF	; 191
 8d2:	a7 e2       	ldi	r26, 0x27	; 39
 8d4:	b9 e0       	ldi	r27, 0x09	; 9
 8d6:	91 50       	subi	r25, 0x01	; 1
 8d8:	a0 40       	sbci	r26, 0x00	; 0
 8da:	b0 40       	sbci	r27, 0x00	; 0
 8dc:	e1 f7       	brne	.-8      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8de:	00 c0       	rjmp	.+0      	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8e0:	00 00       	nop
 8e2:	1a c0       	rjmp	.+52     	; 0x918 <__stack+0x19>
			}
			_delay_ms(3000);
			break;
		}
		// Tecla cancelar
		else if(tecla == '*') {
 8e4:	8a 32       	cpi	r24, 0x2A	; 42
 8e6:	09 f0       	breq	.+2      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8e8:	a1 cf       	rjmp	.-190    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			LCD_limpar();
 8ea:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
 8ee:	48 e5       	ldi	r20, 0x58	; 88
 8f0:	52 e0       	ldi	r21, 0x02	; 2
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
 8fa:	41 e6       	ldi	r20, 0x61	; 97
 8fc:	52 e0       	ldi	r21, 0x02	; 2
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 906:	2f e7       	ldi	r18, 0x7F	; 127
 908:	8a e1       	ldi	r24, 0x1A	; 26
 90a:	96 e0       	ldi	r25, 0x06	; 6
 90c:	21 50       	subi	r18, 0x01	; 1
 90e:	80 40       	sbci	r24, 0x00	; 0
 910:	90 40       	sbci	r25, 0x00	; 0
 912:	e1 f7       	brne	.-8      	; 0x90c <__stack+0xd>
 914:	00 c0       	rjmp	.+0      	; 0x916 <__stack+0x17>
 916:	00 00       	nop
			_delay_ms(2000);
			break;
		}
	}
}
 918:	2a 96       	adiw	r28, 0x0a	; 10
 91a:	0f b6       	in	r0, 0x3f	; 63
 91c:	f8 94       	cli
 91e:	de bf       	out	0x3e, r29	; 62
 920:	0f be       	out	0x3f, r0	; 63
 922:	cd bf       	out	0x3d, r28	; 61
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	08 95       	ret

0000092e <initUART>:
	UCSR0A |= (1 << TXC0); // Limpa flag TXC
}

// Envia string null-terminated (mais comum)
void SerialEnviaString(char* str) {
	SerialEnviaChars(strlen(str), str);
 92e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 932:	83 e3       	ldi	r24, 0x33	; 51
 934:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 938:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 93c:	88 e9       	ldi	r24, 0x98	; 152
 93e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 942:	86 e0       	ldi	r24, 0x06	; 6
 944:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 948:	78 94       	sei
 94a:	08 95       	ret

0000094c <SerialEnviaChars>:
 94c:	ac 01       	movw	r20, r24
 94e:	20 e0       	ldi	r18, 0x00	; 0
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	0c c0       	rjmp	.+24     	; 0x96c <SerialEnviaChars+0x20>
 954:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 958:	95 ff       	sbrs	r25, 5
 95a:	fc cf       	rjmp	.-8      	; 0x954 <SerialEnviaChars+0x8>
 95c:	fb 01       	movw	r30, r22
 95e:	e2 0f       	add	r30, r18
 960:	f3 1f       	adc	r31, r19
 962:	90 81       	ld	r25, Z
 964:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 968:	2f 5f       	subi	r18, 0xFF	; 255
 96a:	3f 4f       	sbci	r19, 0xFF	; 255
 96c:	24 17       	cp	r18, r20
 96e:	35 07       	cpc	r19, r21
 970:	8c f3       	brlt	.-30     	; 0x954 <SerialEnviaChars+0x8>
 972:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 976:	86 ff       	sbrs	r24, 6
 978:	fc cf       	rjmp	.-8      	; 0x972 <SerialEnviaChars+0x26>
 97a:	e0 ec       	ldi	r30, 0xC0	; 192
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
 980:	80 64       	ori	r24, 0x40	; 64
 982:	80 83       	st	Z, r24
 984:	08 95       	ret

00000986 <__vector_18>:
}

// Buffer circular auxiliar para receber dados na ISR
ISR(USART_RX_vect) {
 986:	1f 92       	push	r1
 988:	0f 92       	push	r0
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	0f 92       	push	r0
 98e:	11 24       	eor	r1, r1
 990:	2f 93       	push	r18
 992:	3f 93       	push	r19
 994:	4f 93       	push	r20
 996:	8f 93       	push	r24
 998:	9f 93       	push	r25
 99a:	ef 93       	push	r30
 99c:	ff 93       	push	r31
	char received = UDR0;
 99e:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	int next_head = (uart_head + 1) % UART_BUFFER_SIZE;
 9a2:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <uart_head>
 9a6:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <uart_head+0x1>
 9aa:	01 96       	adiw	r24, 0x01	; 1
 9ac:	8f 77       	andi	r24, 0x7F	; 127
 9ae:	90 78       	andi	r25, 0x80	; 128
 9b0:	99 23       	and	r25, r25
 9b2:	24 f4       	brge	.+8      	; 0x9bc <__vector_18+0x36>
 9b4:	01 97       	sbiw	r24, 0x01	; 1
 9b6:	80 68       	ori	r24, 0x80	; 128
 9b8:	9f 6f       	ori	r25, 0xFF	; 255
 9ba:	01 96       	adiw	r24, 0x01	; 1
	if (next_head != uart_tail) { // evita overflow
 9bc:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <__data_end>
 9c0:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <__data_end+0x1>
 9c4:	82 17       	cp	r24, r18
 9c6:	93 07       	cpc	r25, r19
 9c8:	59 f0       	breq	.+22     	; 0x9e0 <__vector_18+0x5a>
		uart_buffer[uart_head] = received;
 9ca:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <uart_head>
 9ce:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <uart_head+0x1>
 9d2:	e0 59       	subi	r30, 0x90	; 144
 9d4:	fd 4f       	sbci	r31, 0xFD	; 253
 9d6:	40 83       	st	Z, r20
		uart_head = next_head;
 9d8:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <uart_head+0x1>
 9dc:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <uart_head>
	}
}
 9e0:	ff 91       	pop	r31
 9e2:	ef 91       	pop	r30
 9e4:	9f 91       	pop	r25
 9e6:	8f 91       	pop	r24
 9e8:	4f 91       	pop	r20
 9ea:	3f 91       	pop	r19
 9ec:	2f 91       	pop	r18
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	1f 90       	pop	r1
 9f6:	18 95       	reti

000009f8 <uart_buffer_empty>:

// Função auxiliar para verificar se buffer está vazio
int uart_buffer_empty() {
	return (uart_head == uart_tail);
 9f8:	40 91 6e 02 	lds	r20, 0x026E	; 0x80026e <uart_head>
 9fc:	50 91 6f 02 	lds	r21, 0x026F	; 0x80026f <uart_head+0x1>
 a00:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <__data_end>
 a04:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <__data_end+0x1>
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	42 17       	cp	r20, r18
 a0c:	53 07       	cpc	r21, r19
 a0e:	09 f0       	breq	.+2      	; 0xa12 <uart_buffer_empty+0x1a>
 a10:	80 e0       	ldi	r24, 0x00	; 0
}
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	08 95       	ret

00000a16 <uart_buffer_read_char>:

// Função auxiliar para ler um byte do buffer
int uart_buffer_read_char(char *c) {
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) {
 a1c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <uart_buffer_empty>
 a20:	89 2b       	or	r24, r25
 a22:	e1 f4       	brne	.+56     	; 0xa5c <uart_buffer_read_char+0x46>
		return 0; // nada para ler
	}
	*c = uart_buffer[uart_tail];
 a24:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <__data_end>
 a28:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <__data_end+0x1>
 a2c:	e0 59       	subi	r30, 0x90	; 144
 a2e:	fd 4f       	sbci	r31, 0xFD	; 253
 a30:	80 81       	ld	r24, Z
 a32:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
 a34:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
 a38:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__data_end+0x1>
 a3c:	01 96       	adiw	r24, 0x01	; 1
 a3e:	8f 77       	andi	r24, 0x7F	; 127
 a40:	90 78       	andi	r25, 0x80	; 128
 a42:	99 23       	and	r25, r25
 a44:	24 f4       	brge	.+8      	; 0xa4e <uart_buffer_read_char+0x38>
 a46:	01 97       	sbiw	r24, 0x01	; 1
 a48:	80 68       	ori	r24, 0x80	; 128
 a4a:	9f 6f       	ori	r25, 0xFF	; 255
 a4c:	01 96       	adiw	r24, 0x01	; 1
 a4e:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <__data_end+0x1>
 a52:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
	return 1;
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <uart_buffer_read_char+0x4a>
}

// Função auxiliar para ler um byte do buffer
int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) {
		return 0; // nada para ler
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	90 e0       	ldi	r25, 0x00	; 0
	}
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	08 95       	ret

00000a66 <SerialRecebeChars>:

// Recebe exatamente `sizeS` caracteres e termina com \0, com timeout (~1s)
// Timeout é em número de loops com delay curto (aprox. 10ms por loop)
void SerialRecebeChars(int sizeS, char* string) {
 a66:	af 92       	push	r10
 a68:	bf 92       	push	r11
 a6a:	cf 92       	push	r12
 a6c:	df 92       	push	r13
 a6e:	ef 92       	push	r14
 a70:	ff 92       	push	r15
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	1f 92       	push	r1
 a7c:	cd b7       	in	r28, 0x3d	; 61
 a7e:	de b7       	in	r29, 0x3e	; 62
 a80:	6c 01       	movw	r12, r24
 a82:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
 a84:	e1 2c       	mov	r14, r1
 a86:	f1 2c       	mov	r15, r1
}

// Recebe exatamente `sizeS` caracteres e termina com \0, com timeout (~1s)
// Timeout é em número de loops com delay curto (aprox. 10ms por loop)
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
 a88:	00 e0       	ldi	r16, 0x00	; 0
 a8a:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100; // ~1 segundo timeout (100 * 10ms)

	while (received < sizeS && timeout_count < timeout_limit) {
 a8c:	19 c0       	rjmp	.+50     	; 0xac0 <SerialRecebeChars+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
 a8e:	ce 01       	movw	r24, r28
 a90:	01 96       	adiw	r24, 0x01	; 1
 a92:	0e 94 0b 05 	call	0xa16	; 0xa16 <uart_buffer_read_char>
 a96:	89 2b       	or	r24, r25
 a98:	51 f0       	breq	.+20     	; 0xaae <SerialRecebeChars+0x48>
			string[received++] = c;
 a9a:	f5 01       	movw	r30, r10
 a9c:	e0 0f       	add	r30, r16
 a9e:	f1 1f       	adc	r31, r17
 aa0:	89 81       	ldd	r24, Y+1	; 0x01
 aa2:	80 83       	st	Z, r24
 aa4:	0f 5f       	subi	r16, 0xFF	; 255
 aa6:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0; // reinicia timeout ao receber caractere
 aa8:	e1 2c       	mov	r14, r1
 aaa:	f1 2c       	mov	r15, r1
 aac:	09 c0       	rjmp	.+18     	; 0xac0 <SerialRecebeChars+0x5a>
 aae:	8f e3       	ldi	r24, 0x3F	; 63
 ab0:	9c e9       	ldi	r25, 0x9C	; 156
 ab2:	01 97       	sbiw	r24, 0x01	; 1
 ab4:	f1 f7       	brne	.-4      	; 0xab2 <SerialRecebeChars+0x4c>
 ab6:	00 c0       	rjmp	.+0      	; 0xab8 <SerialRecebeChars+0x52>
 ab8:	00 00       	nop
			} else {
			_delay_ms(10);
			timeout_count++;
 aba:	9f ef       	ldi	r25, 0xFF	; 255
 abc:	e9 1a       	sub	r14, r25
 abe:	f9 0a       	sbc	r15, r25
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100; // ~1 segundo timeout (100 * 10ms)

	while (received < sizeS && timeout_count < timeout_limit) {
 ac0:	0c 15       	cp	r16, r12
 ac2:	1d 05       	cpc	r17, r13
 ac4:	24 f4       	brge	.+8      	; 0xace <SerialRecebeChars+0x68>
 ac6:	84 e6       	ldi	r24, 0x64	; 100
 ac8:	e8 16       	cp	r14, r24
 aca:	f1 04       	cpc	r15, r1
 acc:	04 f3       	brlt	.-64     	; 0xa8e <SerialRecebeChars+0x28>
			} else {
			_delay_ms(10);
			timeout_count++;
		}
	}
	string[received] = '\0';
 ace:	f5 01       	movw	r30, r10
 ad0:	e0 0f       	add	r30, r16
 ad2:	f1 1f       	adc	r31, r17
 ad4:	10 82       	st	Z, r1
}
 ad6:	0f 90       	pop	r0
 ad8:	df 91       	pop	r29
 ada:	cf 91       	pop	r28
 adc:	1f 91       	pop	r17
 ade:	0f 91       	pop	r16
 ae0:	ff 90       	pop	r15
 ae2:	ef 90       	pop	r14
 ae4:	df 90       	pop	r13
 ae6:	cf 90       	pop	r12
 ae8:	bf 90       	pop	r11
 aea:	af 90       	pop	r10
 aec:	08 95       	ret

00000aee <prepara_teclado>:
#define COL4 PD2    // Coluna 4 no PD2

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
 aee:	84 b1       	in	r24, 0x04	; 4
 af0:	83 60       	ori	r24, 0x03	; 3
 af2:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
 af4:	8a b1       	in	r24, 0x0a	; 10
 af6:	80 6c       	ori	r24, 0xC0	; 192
 af8:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4)); // PD5, PD4, PD3 e PD2 como entradas
 afa:	8a b1       	in	r24, 0x0a	; 10
 afc:	83 7c       	andi	r24, 0xC3	; 195
 afe:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);   // Habilitar resistores de Pull-up
 b00:	8b b1       	in	r24, 0x0b	; 11
 b02:	8c 63       	ori	r24, 0x3C	; 60
 b04:	8b b9       	out	0x0b, r24	; 11
 b06:	08 95       	ret

00000b08 <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
 b08:	cf 93       	push	r28
 b0a:	df 93       	push	r29
 b0c:	00 d0       	rcall	.+0      	; 0xb0e <atraso_debounce+0x6>
 b0e:	cd b7       	in	r28, 0x3d	; 61
 b10:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
 b12:	1a 82       	std	Y+2, r1	; 0x02
 b14:	19 82       	std	Y+1, r1	; 0x01
 b16:	05 c0       	rjmp	.+10     	; 0xb22 <atraso_debounce+0x1a>
 b18:	89 81       	ldd	r24, Y+1	; 0x01
 b1a:	9a 81       	ldd	r25, Y+2	; 0x02
 b1c:	01 96       	adiw	r24, 0x01	; 1
 b1e:	9a 83       	std	Y+2, r25	; 0x02
 b20:	89 83       	std	Y+1, r24	; 0x01
 b22:	89 81       	ldd	r24, Y+1	; 0x01
 b24:	9a 81       	ldd	r25, Y+2	; 0x02
 b26:	88 3e       	cpi	r24, 0xE8	; 232
 b28:	93 40       	sbci	r25, 0x03	; 3
 b2a:	b0 f3       	brcs	.-20     	; 0xb18 <atraso_debounce+0x10>
}
 b2c:	0f 90       	pop	r0
 b2e:	0f 90       	pop	r0
 b30:	df 91       	pop	r29
 b32:	cf 91       	pop	r28
 b34:	08 95       	ret

00000b36 <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
 b36:	1f 93       	push	r17
 b38:	cf 93       	push	r28
 b3a:	df 93       	push	r29
 b3c:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
 b3e:	c0 e0       	ldi	r28, 0x00	; 0
 b40:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 b42:	12 c0       	rjmp	.+36     	; 0xb68 <debounce+0x32>
        atraso_debounce();
 b44:	0e 94 84 05 	call	0xb08	; 0xb08 <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
 b48:	29 b1       	in	r18, 0x09	; 9
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	01 2e       	mov	r0, r17
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <debounce+0x20>
 b52:	88 0f       	add	r24, r24
 b54:	99 1f       	adc	r25, r25
 b56:	0a 94       	dec	r0
 b58:	e2 f7       	brpl	.-8      	; 0xb52 <debounce+0x1c>
 b5a:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
 b5c:	d8 13       	cpse	r29, r24
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <debounce+0x2e>
            counter++;
 b60:	cf 5f       	subi	r28, 0xFF	; 255
 b62:	01 c0       	rjmp	.+2      	; 0xb66 <debounce+0x30>
        } else {
            counter = 0;
 b64:	c0 e0       	ldi	r28, 0x00	; 0
 b66:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 b68:	c7 30       	cpi	r28, 0x07	; 7
 b6a:	61 f7       	brne	.-40     	; 0xb44 <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
 b6c:	8d 2f       	mov	r24, r29
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	1f 91       	pop	r17
 b74:	08 95       	ret

00000b76 <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
 b76:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
 b78:	85 b1       	in	r24, 0x05	; 5
 b7a:	83 60       	ori	r24, 0x03	; 3
 b7c:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
 b7e:	8b b1       	in	r24, 0x0b	; 11
 b80:	80 6c       	ori	r24, 0xC0	; 192
 b82:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
 b84:	85 b1       	in	r24, 0x05	; 5
 b86:	8d 7f       	andi	r24, 0xFD	; 253
 b88:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 b8a:	85 e0       	ldi	r24, 0x05	; 5
 b8c:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 b90:	88 23       	and	r24, r24
 b92:	11 f0       	breq	.+4      	; 0xb98 <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
 b94:	c0 e0       	ldi	r28, 0x00	; 0
 b96:	01 c0       	rjmp	.+2      	; 0xb9a <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 b98:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
 b9a:	84 e0       	ldi	r24, 0x04	; 4
 b9c:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 ba0:	81 11       	cpse	r24, r1
 ba2:	01 c0       	rjmp	.+2      	; 0xba6 <varredura+0x30>
 ba4:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
 ba6:	83 e0       	ldi	r24, 0x03	; 3
 ba8:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 bac:	81 11       	cpse	r24, r1
 bae:	01 c0       	rjmp	.+2      	; 0xbb2 <varredura+0x3c>
 bb0:	c3 e3       	ldi	r28, 0x33	; 51
	if (!debounce(COL4 - 0)) tecla = 'A'; 
 bb2:	82 e0       	ldi	r24, 0x02	; 2
 bb4:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 bb8:	81 11       	cpse	r24, r1
 bba:	01 c0       	rjmp	.+2      	; 0xbbe <varredura+0x48>
 bbc:	c1 e4       	ldi	r28, 0x41	; 65
    PORTB |= (1 << LIN1); // Desativa LIN1
 bbe:	85 b1       	in	r24, 0x05	; 5
 bc0:	82 60       	ori	r24, 0x02	; 2
 bc2:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
 bc4:	85 b1       	in	r24, 0x05	; 5
 bc6:	8e 7f       	andi	r24, 0xFE	; 254
 bc8:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
 bca:	85 e0       	ldi	r24, 0x05	; 5
 bcc:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 bd0:	81 11       	cpse	r24, r1
 bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <varredura+0x60>
 bd4:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
 bd6:	84 e0       	ldi	r24, 0x04	; 4
 bd8:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 bdc:	81 11       	cpse	r24, r1
 bde:	01 c0       	rjmp	.+2      	; 0xbe2 <varredura+0x6c>
 be0:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
 be2:	83 e0       	ldi	r24, 0x03	; 3
 be4:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 be8:	81 11       	cpse	r24, r1
 bea:	01 c0       	rjmp	.+2      	; 0xbee <varredura+0x78>
 bec:	c6 e3       	ldi	r28, 0x36	; 54
	if (!debounce(COL4 - 0)) tecla = 'B'; 
 bee:	82 e0       	ldi	r24, 0x02	; 2
 bf0:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 bf4:	81 11       	cpse	r24, r1
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <varredura+0x84>
 bf8:	c2 e4       	ldi	r28, 0x42	; 66
    PORTB |= (1 << LIN2); // Desativa LIN2
 bfa:	85 b1       	in	r24, 0x05	; 5
 bfc:	81 60       	ori	r24, 0x01	; 1
 bfe:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
 c00:	8b b1       	in	r24, 0x0b	; 11
 c02:	8f 77       	andi	r24, 0x7F	; 127
 c04:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
 c06:	85 e0       	ldi	r24, 0x05	; 5
 c08:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 c0c:	81 11       	cpse	r24, r1
 c0e:	01 c0       	rjmp	.+2      	; 0xc12 <varredura+0x9c>
 c10:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
 c12:	84 e0       	ldi	r24, 0x04	; 4
 c14:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 c18:	81 11       	cpse	r24, r1
 c1a:	01 c0       	rjmp	.+2      	; 0xc1e <varredura+0xa8>
 c1c:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
 c1e:	83 e0       	ldi	r24, 0x03	; 3
 c20:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 c24:	81 11       	cpse	r24, r1
 c26:	01 c0       	rjmp	.+2      	; 0xc2a <varredura+0xb4>
 c28:	c9 e3       	ldi	r28, 0x39	; 57
	if (!debounce(COL4 - 0)) tecla = 'C'; 
 c2a:	82 e0       	ldi	r24, 0x02	; 2
 c2c:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 c30:	81 11       	cpse	r24, r1
 c32:	01 c0       	rjmp	.+2      	; 0xc36 <varredura+0xc0>
 c34:	c3 e4       	ldi	r28, 0x43	; 67
    PORTD |= (1 << LIN3); // Desativa LIN3
 c36:	8b b1       	in	r24, 0x0b	; 11
 c38:	80 68       	ori	r24, 0x80	; 128
 c3a:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
 c3c:	8b b1       	in	r24, 0x0b	; 11
 c3e:	8f 7b       	andi	r24, 0xBF	; 191
 c40:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
 c42:	85 e0       	ldi	r24, 0x05	; 5
 c44:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 c48:	81 11       	cpse	r24, r1
 c4a:	01 c0       	rjmp	.+2      	; 0xc4e <varredura+0xd8>
 c4c:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
 c4e:	84 e0       	ldi	r24, 0x04	; 4
 c50:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 c54:	81 11       	cpse	r24, r1
 c56:	01 c0       	rjmp	.+2      	; 0xc5a <varredura+0xe4>
 c58:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
 c5a:	83 e0       	ldi	r24, 0x03	; 3
 c5c:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 c60:	81 11       	cpse	r24, r1
 c62:	01 c0       	rjmp	.+2      	; 0xc66 <varredura+0xf0>
 c64:	c3 e2       	ldi	r28, 0x23	; 35
	if (!debounce(COL4 - 0)) tecla = 'D'; 
 c66:	82 e0       	ldi	r24, 0x02	; 2
 c68:	0e 94 9b 05 	call	0xb36	; 0xb36 <debounce>
 c6c:	81 11       	cpse	r24, r1
 c6e:	01 c0       	rjmp	.+2      	; 0xc72 <varredura+0xfc>
 c70:	c4 e4       	ldi	r28, 0x44	; 68
    PORTD |= (1 << LIN4); // Desativa LIN4
 c72:	8b b1       	in	r24, 0x0b	; 11
 c74:	80 64       	ori	r24, 0x40	; 64
 c76:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
 c78:	8c 2f       	mov	r24, r28
 c7a:	cf 91       	pop	r28
 c7c:	08 95       	ret

00000c7e <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
 c7e:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
 c80:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
 c82:	85 e0       	ldi	r24, 0x05	; 5
 c84:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 c86:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
 c8a:	81 ef       	ldi	r24, 0xF1	; 241
 c8c:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
 c8e:	20 e0       	ldi	r18, 0x00	; 0
 c90:	30 e0       	ldi	r19, 0x00	; 0
 c92:	08 c0       	rjmp	.+16     	; 0xca4 <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 c94:	a9 9b       	sbis	0x15, 1	; 21
 c96:	fe cf       	rjmp	.-4      	; 0xc94 <delay1ms+0x16>
		TCNT0 = 241;
 c98:	91 ef       	ldi	r25, 0xF1	; 241
 c9a:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
 c9c:	92 e0       	ldi	r25, 0x02	; 2
 c9e:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
 ca0:	2f 5f       	subi	r18, 0xFF	; 255
 ca2:	3f 4f       	sbci	r19, 0xFF	; 255
 ca4:	24 17       	cp	r18, r20
 ca6:	35 07       	cpc	r19, r21
 ca8:	ac f3       	brlt	.-22     	; 0xc94 <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 caa:	15 bc       	out	0x25, r1	; 37
 cac:	08 95       	ret

00000cae <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
 cae:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
 cb0:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
 cb2:	81 e0       	ldi	r24, 0x01	; 1
 cb4:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 cb6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
 cba:	85 ef       	ldi	r24, 0xF5	; 245
 cbc:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
 cbe:	20 e0       	ldi	r18, 0x00	; 0
 cc0:	30 e0       	ldi	r19, 0x00	; 0
 cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 cc4:	a9 9b       	sbis	0x15, 1	; 21
 cc6:	fe cf       	rjmp	.-4      	; 0xcc4 <delay1us+0x16>
		TCNT0 = 245;
 cc8:	95 ef       	ldi	r25, 0xF5	; 245
 cca:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
 ccc:	95 b3       	in	r25, 0x15	; 21
 cce:	92 60       	ori	r25, 0x02	; 2
 cd0:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
 cd2:	2f 5f       	subi	r18, 0xFF	; 255
 cd4:	3f 4f       	sbci	r19, 0xFF	; 255
 cd6:	24 17       	cp	r18, r20
 cd8:	35 07       	cpc	r19, r21
 cda:	a4 f3       	brlt	.-24     	; 0xcc4 <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 cdc:	15 bc       	out	0x25, r1	; 37
 cde:	08 95       	ret

00000ce0 <strcpy>:
 ce0:	fb 01       	movw	r30, r22
 ce2:	dc 01       	movw	r26, r24
 ce4:	01 90       	ld	r0, Z+
 ce6:	0d 92       	st	X+, r0
 ce8:	00 20       	and	r0, r0
 cea:	e1 f7       	brne	.-8      	; 0xce4 <strcpy+0x4>
 cec:	08 95       	ret

00000cee <strncpy>:
 cee:	fb 01       	movw	r30, r22
 cf0:	dc 01       	movw	r26, r24
 cf2:	41 50       	subi	r20, 0x01	; 1
 cf4:	50 40       	sbci	r21, 0x00	; 0
 cf6:	48 f0       	brcs	.+18     	; 0xd0a <strncpy+0x1c>
 cf8:	01 90       	ld	r0, Z+
 cfa:	0d 92       	st	X+, r0
 cfc:	00 20       	and	r0, r0
 cfe:	c9 f7       	brne	.-14     	; 0xcf2 <strncpy+0x4>
 d00:	01 c0       	rjmp	.+2      	; 0xd04 <strncpy+0x16>
 d02:	1d 92       	st	X+, r1
 d04:	41 50       	subi	r20, 0x01	; 1
 d06:	50 40       	sbci	r21, 0x00	; 0
 d08:	e0 f7       	brcc	.-8      	; 0xd02 <strncpy+0x14>
 d0a:	08 95       	ret

00000d0c <strstr>:
 d0c:	fb 01       	movw	r30, r22
 d0e:	51 91       	ld	r21, Z+
 d10:	55 23       	and	r21, r21
 d12:	a9 f0       	breq	.+42     	; 0xd3e <strstr+0x32>
 d14:	bf 01       	movw	r22, r30
 d16:	dc 01       	movw	r26, r24
 d18:	4d 91       	ld	r20, X+
 d1a:	45 17       	cp	r20, r21
 d1c:	41 11       	cpse	r20, r1
 d1e:	e1 f7       	brne	.-8      	; 0xd18 <strstr+0xc>
 d20:	59 f4       	brne	.+22     	; 0xd38 <strstr+0x2c>
 d22:	cd 01       	movw	r24, r26
 d24:	01 90       	ld	r0, Z+
 d26:	00 20       	and	r0, r0
 d28:	49 f0       	breq	.+18     	; 0xd3c <strstr+0x30>
 d2a:	4d 91       	ld	r20, X+
 d2c:	40 15       	cp	r20, r0
 d2e:	41 11       	cpse	r20, r1
 d30:	c9 f3       	breq	.-14     	; 0xd24 <strstr+0x18>
 d32:	fb 01       	movw	r30, r22
 d34:	41 11       	cpse	r20, r1
 d36:	ef cf       	rjmp	.-34     	; 0xd16 <strstr+0xa>
 d38:	81 e0       	ldi	r24, 0x01	; 1
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	01 97       	sbiw	r24, 0x01	; 1
 d3e:	08 95       	ret

00000d40 <_exit>:
 d40:	f8 94       	cli

00000d42 <__stop_program>:
 d42:	ff cf       	rjmp	.-2      	; 0xd42 <__stop_program>
