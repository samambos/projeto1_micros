
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000238  00800100  00001928  000019bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001928  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009f  00800338  00800338  00001bf4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036f3  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc6  00000000  00000000  00005597  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ade  00000000  00000000  0000655d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  0000803c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a98  00000000  00000000  000086e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019c8  00000000  00000000  00009178  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000ab40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_11>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__vector_18>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	79 03       	fmul	r23, r17
      6a:	8d 03       	fmulsu	r16, r21
      6c:	9a 03       	fmulsu	r17, r18
      6e:	a7 03       	fmuls	r18, r23
      70:	da 03       	fmulsu	r21, r18
      72:	84 04       	cpc	r8, r4
      74:	8f 04       	cpc	r8, r15
      76:	a5 04       	cpc	r10, r5

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	13 e0       	ldi	r17, 0x03	; 3
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e8 e2       	ldi	r30, 0x28	; 40
      8c:	f9 e1       	ldi	r31, 0x19	; 25
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a8 33       	cpi	r26, 0x38	; 56
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	23 e0       	ldi	r18, 0x03	; 3
      9c:	a8 e3       	ldi	r26, 0x38	; 56
      9e:	b3 e0       	ldi	r27, 0x03	; 3
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a7 3d       	cpi	r26, 0xD7	; 215
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 31 03 	call	0x662	; 0x662 <main>
      ae:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <mensagem_Inicial>:
*/
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){
		LCD_limpar();
      b6:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0,1,"DIGITE QUALQUER");
      ba:	48 e0       	ldi	r20, 0x08	; 8
      bc:	51 e0       	ldi	r21, 0x01	; 1
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1,5, "TECLA");
      c6:	48 e1       	ldi	r20, 0x18	; 24
      c8:	51 e0       	ldi	r21, 0x01	; 1
      ca:	65 e0       	ldi	r22, 0x05	; 5
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
      d2:	08 95       	ret

000000d4 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
      d4:	cf 93       	push	r28
      d6:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
      d8:	88 b1       	in	r24, 0x08	; 8
      da:	80 7f       	andi	r24, 0xF0	; 240
      dc:	9c 2f       	mov	r25, r28
      de:	92 95       	swap	r25
      e0:	9f 70       	andi	r25, 0x0F	; 15
      e2:	89 2b       	or	r24, r25
      e4:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
      e6:	88 b1       	in	r24, 0x08	; 8
      e8:	8f 7d       	andi	r24, 0xDF	; 223
      ea:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
      ec:	88 b1       	in	r24, 0x08	; 8
      ee:	80 61       	ori	r24, 0x10	; 16
      f0:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
      f2:	88 b1       	in	r24, 0x08	; 8
      f4:	8f 7e       	andi	r24, 0xEF	; 239
      f6:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
      f8:	84 e6       	ldi	r24, 0x64	; 100
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 c8 0b 	call	0x1790	; 0x1790 <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
     100:	88 b1       	in	r24, 0x08	; 8
     102:	80 7f       	andi	r24, 0xF0	; 240
     104:	cf 70       	andi	r28, 0x0F	; 15
     106:	c8 2b       	or	r28, r24
     108:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
     10a:	88 b1       	in	r24, 0x08	; 8
     10c:	80 61       	ori	r24, 0x10	; 16
     10e:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
     110:	88 b1       	in	r24, 0x08	; 8
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
}
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
     126:	8a e0       	ldi	r24, 0x0A	; 10
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
     134:	88 e2       	ldi	r24, 0x28	; 40
     136:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
     13a:	8c e0       	ldi	r24, 0x0C	; 12
     13c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
     140:	86 e0       	ldi	r24, 0x06	; 6
     142:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     14c:	08 95       	ret

0000014e <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
     154:	80 e8       	ldi	r24, 0x80	; 128
     156:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     15a:	08 95       	ret

0000015c <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	ec 01       	movw	r28, r24
	while(*texto) {
     162:	23 c0       	rjmp	.+70     	; 0x1aa <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
     164:	98 b1       	in	r25, 0x08	; 8
     166:	90 7f       	andi	r25, 0xF0	; 240
     168:	82 95       	swap	r24
     16a:	8f 70       	andi	r24, 0x0F	; 15
     16c:	89 2b       	or	r24, r25
     16e:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
     170:	88 b1       	in	r24, 0x08	; 8
     172:	80 62       	ori	r24, 0x20	; 32
     174:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     176:	88 b1       	in	r24, 0x08	; 8
     178:	80 61       	ori	r24, 0x10	; 16
     17a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     17c:	88 b1       	in	r24, 0x08	; 8
     17e:	8f 7e       	andi	r24, 0xEF	; 239
     180:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
     182:	88 ec       	ldi	r24, 0xC8	; 200
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 c8 0b 	call	0x1790	; 0x1790 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
     18a:	98 b1       	in	r25, 0x08	; 8
     18c:	89 91       	ld	r24, Y+
     18e:	90 7f       	andi	r25, 0xF0	; 240
     190:	8f 70       	andi	r24, 0x0F	; 15
     192:	89 2b       	or	r24, r25
     194:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
     196:	88 b1       	in	r24, 0x08	; 8
     198:	80 61       	ori	r24, 0x10	; 16
     19a:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	8f 7e       	andi	r24, 0xEF	; 239
     1a0:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
     1aa:	88 81       	ld	r24, Y
     1ac:	81 11       	cpse	r24, r1
     1ae:	da cf       	rjmp	.-76     	; 0x164 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
     1bc:	81 11       	cpse	r24, r1
     1be:	08 c0       	rjmp	.+16     	; 0x1d0 <LCD_Escrever_Linha+0x1a>
     1c0:	60 31       	cpi	r22, 0x10	; 16
     1c2:	30 f4       	brcc	.+12     	; 0x1d0 <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
     1c4:	86 2f       	mov	r24, r22
     1c6:	8f 70       	andi	r24, 0x0F	; 15
     1c8:	80 68       	ori	r24, 0x80	; 128
     1ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
     1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	39 f4       	brne	.+14     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
     1d4:	60 31       	cpi	r22, 0x10	; 16
     1d6:	28 f4       	brcc	.+10     	; 0x1e2 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
     1d8:	86 2f       	mov	r24, r22
     1da:	8f 70       	andi	r24, 0x0F	; 15
     1dc:	80 6c       	ori	r24, 0xC0	; 192
     1de:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
     1e2:	ce 01       	movw	r24, r28
     1e4:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
     1e8:	80 e8       	ldi	r24, 0x80	; 128
     1ea:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_cmd>
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <ler_codigo_aluno>:

// Variável global para armazenar a senha validada
static char senha_validada[7] = {0};

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	00 d0       	rcall	.+0      	; 0x202 <ler_codigo_aluno+0xe>
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	7c 01       	movw	r14, r24
    int pos = 0;
    char tecla;

    LCD_limpar();
     208:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
     20c:	4e e1       	ldi	r20, 0x1E	; 30
     20e:	51 e0       	ldi	r21, 0x01	; 1
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
    LCD_Escrever_Linha(1, 0, "______");
     218:	4d e2       	ldi	r20, 0x2D	; 45
     21a:	51 e0       	ldi	r21, 0x01	; 1
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
// Variável global para armazenar a senha validada
static char senha_validada[7] = {0};

// Leitura do código do aluno
void ler_codigo_aluno(char* codigo) {
    int pos = 0;
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	10 e0       	ldi	r17, 0x00	; 0

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     228:	1d c0       	rjmp	.+58     	; 0x264 <ler_codigo_aluno+0x70>
        if (isBlocked()) return;
     22a:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     22e:	81 11       	cpse	r24, r1
     230:	1e c0       	rjmp	.+60     	; 0x26e <ler_codigo_aluno+0x7a>
        tecla = varredura();
     232:	0e 94 0c 0b 	call	0x1618	; 0x1618 <varredura>
        if (tecla >= '0' && tecla <= '9') {
     236:	90 ed       	ldi	r25, 0xD0	; 208
     238:	98 0f       	add	r25, r24
     23a:	9a 30       	cpi	r25, 0x0A	; 10
     23c:	98 f4       	brcc	.+38     	; 0x264 <ler_codigo_aluno+0x70>
            codigo[pos] = tecla;
     23e:	f7 01       	movw	r30, r14
     240:	e0 0f       	add	r30, r16
     242:	f1 1f       	adc	r31, r17
     244:	80 83       	st	Z, r24
            char temp[2] = { tecla, '\0' };
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Escrever_Linha(1, pos, temp);
     24a:	ae 01       	movw	r20, r28
     24c:	4f 5f       	subi	r20, 0xFF	; 255
     24e:	5f 4f       	sbci	r21, 0xFF	; 255
     250:	60 2f       	mov	r22, r16
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
            pos++;
     258:	0f 5f       	subi	r16, 0xFF	; 255
     25a:	1f 4f       	sbci	r17, 0xFF	; 255
            delay1ms(200);
     25c:	88 ec       	ldi	r24, 0xC8	; 200
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite codigo:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     264:	06 30       	cpi	r16, 0x06	; 6
     266:	11 05       	cpc	r17, r1
     268:	04 f3       	brlt	.-64     	; 0x22a <ler_codigo_aluno+0x36>
            LCD_Escrever_Linha(1, pos, temp);
            pos++;
            delay1ms(200);
        }
    }
    codigo[6] = '\0';
     26a:	f7 01       	movw	r30, r14
     26c:	16 82       	std	Z+6, r1	; 0x06
}
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	08 95       	ret

00000280 <ler_senha>:

// Leitura da senha do aluno
void ler_senha(char* senha) {
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <ler_senha+0xe>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	7c 01       	movw	r14, r24
    int pos = 0;
    char tecla;

    LCD_limpar();
     294:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
    LCD_Escrever_Linha(0, 0, "Digite senha:");
     298:	44 e3       	ldi	r20, 0x34	; 52
     29a:	51 e0       	ldi	r21, 0x01	; 1
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
    LCD_Escrever_Linha(1, 0, "______");
     2a4:	4d e2       	ldi	r20, 0x2D	; 45
     2a6:	51 e0       	ldi	r21, 0x01	; 1
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
    codigo[6] = '\0';
}

// Leitura da senha do aluno
void ler_senha(char* senha) {
    int pos = 0;
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	10 e0       	ldi	r17, 0x00	; 0

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite senha:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     2b4:	1e c0       	rjmp	.+60     	; 0x2f2 <ler_senha+0x72>
        if (isBlocked()) return;
     2b6:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     2ba:	81 11       	cpse	r24, r1
     2bc:	1f c0       	rjmp	.+62     	; 0x2fc <ler_senha+0x7c>
        tecla = varredura();
     2be:	0e 94 0c 0b 	call	0x1618	; 0x1618 <varredura>
        if (tecla >= '0' && tecla <= '9') {
     2c2:	90 ed       	ldi	r25, 0xD0	; 208
     2c4:	98 0f       	add	r25, r24
     2c6:	9a 30       	cpi	r25, 0x0A	; 10
     2c8:	a0 f4       	brcc	.+40     	; 0x2f2 <ler_senha+0x72>
            senha[pos] = tecla;
     2ca:	f7 01       	movw	r30, r14
     2cc:	e0 0f       	add	r30, r16
     2ce:	f1 1f       	adc	r31, r17
     2d0:	80 83       	st	Z, r24
            char temp[2] = { '*', '\0' };
     2d2:	8a e2       	ldi	r24, 0x2A	; 42
     2d4:	89 83       	std	Y+1, r24	; 0x01
     2d6:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Escrever_Linha(1, pos, temp);
     2d8:	ae 01       	movw	r20, r28
     2da:	4f 5f       	subi	r20, 0xFF	; 255
     2dc:	5f 4f       	sbci	r21, 0xFF	; 255
     2de:	60 2f       	mov	r22, r16
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
            pos++;
     2e6:	0f 5f       	subi	r16, 0xFF	; 255
     2e8:	1f 4f       	sbci	r17, 0xFF	; 255
            delay1ms(200);
     2ea:	88 ec       	ldi	r24, 0xC8	; 200
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>

    LCD_limpar();
    LCD_Escrever_Linha(0, 0, "Digite senha:");
    LCD_Escrever_Linha(1, 0, "______");

    while (pos < 6) {
     2f2:	06 30       	cpi	r16, 0x06	; 6
     2f4:	11 05       	cpc	r17, r1
     2f6:	fc f2       	brlt	.-66     	; 0x2b6 <ler_senha+0x36>
            LCD_Escrever_Linha(1, pos, temp);
            pos++;
            delay1ms(200);
        }
    }
    senha[6] = '\0';
     2f8:	f7 01       	movw	r30, r14
     2fa:	16 82       	std	Z+6, r1	; 0x06
}
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	08 95       	ret

0000030e <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	ae 97       	sbiw	r28, 0x2e	; 46
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
    if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     32a:	dc 01       	movw	r26, r24
     32c:	0d 90       	ld	r0, X+
     32e:	00 20       	and	r0, r0
     330:	e9 f7       	brne	.-6      	; 0x32c <validar_codigo_aluno+0x1e>
     332:	11 97       	sbiw	r26, 0x01	; 1
     334:	a8 1b       	sub	r26, r24
     336:	b9 0b       	sbc	r27, r25
     338:	16 97       	sbiw	r26, 0x06	; 6
     33a:	09 f0       	breq	.+2      	; 0x33e <validar_codigo_aluno+0x30>
     33c:	6b c0       	rjmp	.+214    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     33e:	db 01       	movw	r26, r22
     340:	0d 90       	ld	r0, X+
     342:	00 20       	and	r0, r0
     344:	e9 f7       	brne	.-6      	; 0x340 <validar_codigo_aluno+0x32>
     346:	11 97       	sbiw	r26, 0x01	; 1
     348:	a6 1b       	sub	r26, r22
     34a:	b7 0b       	sbc	r27, r23
     34c:	16 97       	sbiw	r26, 0x06	; 6
     34e:	09 f0       	breq	.+2      	; 0x352 <validar_codigo_aluno+0x44>
     350:	64 c0       	rjmp	.+200    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     352:	7b 01       	movw	r14, r22
     354:	8c 01       	movw	r16, r24

    // Armazena a senha antes de validar 
    strncpy(senha_validada, senha, 6);
     356:	46 e0       	ldi	r20, 0x06	; 6
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	88 e3       	ldi	r24, 0x38	; 56
     35c:	93 e0       	ldi	r25, 0x03	; 3
     35e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <strncpy>
    senha_validada[6] = '\0';
     362:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <__data_end+0x6>

    char mensagem[14];
    mensagem[0] = 'C';
     366:	83 e4       	ldi	r24, 0x43	; 67
     368:	89 83       	std	Y+1, r24	; 0x01
    mensagem[1] = 'E';
     36a:	85 e4       	ldi	r24, 0x45	; 69
     36c:	8a 83       	std	Y+2, r24	; 0x02
    memcpy(&mensagem[2], codigo, 6);
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	f8 01       	movw	r30, r16
     372:	de 01       	movw	r26, r28
     374:	13 96       	adiw	r26, 0x03	; 3
     376:	01 90       	ld	r0, Z+
     378:	0d 92       	st	X+, r0
     37a:	8a 95       	dec	r24
     37c:	e1 f7       	brne	.-8      	; 0x376 <validar_codigo_aluno+0x68>
    memcpy(&mensagem[8], senha, 6);
     37e:	86 e0       	ldi	r24, 0x06	; 6
     380:	f7 01       	movw	r30, r14
     382:	de 01       	movw	r26, r28
     384:	19 96       	adiw	r26, 0x09	; 9
     386:	01 90       	ld	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	8a 95       	dec	r24
     38c:	e1 f7       	brne	.-8      	; 0x386 <validar_codigo_aluno+0x78>

    SerialEnviaChars(14, mensagem);
     38e:	be 01       	movw	r22, r28
     390:	6f 5f       	subi	r22, 0xFF	; 255
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	8e e0       	ldi	r24, 0x0E	; 14
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 df 08 	call	0x11be	; 0x11be <SerialEnviaChars>

    char resposta[32];
    memset(resposta, 0, sizeof(resposta));
     39c:	be 01       	movw	r22, r28
     39e:	61 5f       	subi	r22, 0xF1	; 241
     3a0:	7f 4f       	sbci	r23, 0xFF	; 255
     3a2:	80 e2       	ldi	r24, 0x20	; 32
     3a4:	db 01       	movw	r26, r22
     3a6:	1d 92       	st	X+, r1
     3a8:	8a 95       	dec	r24
     3aa:	e9 f7       	brne	.-6      	; 0x3a6 <validar_codigo_aluno+0x98>

    SerialRecebeChars(31, resposta);
     3ac:	8f e1       	ldi	r24, 0x1F	; 31
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <SerialRecebeChars>

    LCD_limpar();
     3b4:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
    LCD_Escrever_Linha(0, 3, "Aguarde...");
     3b8:	42 e4       	ldi	r20, 0x42	; 66
     3ba:	51 e0       	ldi	r21, 0x01	; 1
     3bc:	63 e0       	ldi	r22, 0x03	; 3
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
    delay1ms(1000);
     3c4:	88 ee       	ldi	r24, 0xE8	; 232
     3c6:	93 e0       	ldi	r25, 0x03	; 3
     3c8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
    LCD_limpar();
     3cc:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>

    if (resposta[0] == 'S' && resposta[1] == 'E') {
     3d0:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d2:	83 35       	cpi	r24, 0x53	; 83
     3d4:	a9 f4       	brne	.+42     	; 0x400 <__EEPROM_REGION_LENGTH__>
     3d6:	88 89       	ldd	r24, Y+16	; 0x10
     3d8:	85 34       	cpi	r24, 0x45	; 69
     3da:	91 f4       	brne	.+36     	; 0x400 <__EEPROM_REGION_LENGTH__>
        if (strstr(resposta, "Nao autorizado") != NULL) {
     3dc:	6d e4       	ldi	r22, 0x4D	; 77
     3de:	71 e0       	ldi	r23, 0x01	; 1
     3e0:	ce 01       	movw	r24, r28
     3e2:	0f 96       	adiw	r24, 0x0f	; 15
     3e4:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <strstr>
     3e8:	89 2b       	or	r24, r25
     3ea:	d1 f0       	breq	.+52     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
            // Se não for autorizado, limpa a senha armazenada
            memset(senha_validada, 0, sizeof(senha_validada));
     3ec:	87 e0       	ldi	r24, 0x07	; 7
     3ee:	e8 e3       	ldi	r30, 0x38	; 56
     3f0:	f3 e0       	ldi	r31, 0x03	; 3
     3f2:	df 01       	movw	r26, r30
     3f4:	1d 92       	st	X+, r1
     3f6:	8a 95       	dec	r24
     3f8:	e9 f7       	brne	.-6      	; 0x3f4 <validar_codigo_aluno+0xe6>
            return 0;
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	12 c0       	rjmp	.+36     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
            return 1;
        }
    }
    
    // Se chegou aqui, houve algum erro, limpa a senha
    memset(senha_validada, 0, sizeof(senha_validada));
     400:	87 e0       	ldi	r24, 0x07	; 7
     402:	e8 e3       	ldi	r30, 0x38	; 56
     404:	f3 e0       	ldi	r31, 0x03	; 3
     406:	df 01       	movw	r26, r30
     408:	1d 92       	st	X+, r1
     40a:	8a 95       	dec	r24
     40c:	e9 f7       	brne	.-6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
    return 0;
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	08 c0       	rjmp	.+16     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
    }
    senha[6] = '\0';
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
    if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	05 c0       	rjmp	.+10     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
        if (strstr(resposta, "Nao autorizado") != NULL) {
            // Se não for autorizado, limpa a senha armazenada
            memset(senha_validada, 0, sizeof(senha_validada));
            return 0;
        } else {
            return 1;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
    }
    
    // Se chegou aqui, houve algum erro, limpa a senha
    memset(senha_validada, 0, sizeof(senha_validada));
    return 0;
}
     424:	ae 96       	adiw	r28, 0x2e	; 46
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	08 95       	ret

0000043e <get_current_password>:

// Função para recuperar a senha validada
const char* get_current_password() {
    return senha_validada;
}
     43e:	88 e3       	ldi	r24, 0x38	; 56
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	08 95       	ret

00000444 <configurar_timer>:
void configurar_timer();
void resetar_timeout();
void aguardar_desbloqueio();

void configurar_timer() {
	DDRB |= (1 << LED_PIN); // Configura pino do LED como saída
     444:	84 b1       	in	r24, 0x04	; 4
     446:	80 61       	ori	r24, 0x10	; 16
     448:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << LED_PIN); // Inicia com LED desligado
     44a:	85 b1       	in	r24, 0x05	; 5
     44c:	8f 7e       	andi	r24, 0xEF	; 239
     44e:	85 b9       	out	0x05, r24	; 5

	TCCR1A = 0; // Modo normal
     450:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // Modo CTC, prescaler 64
     454:	8b e0       	ldi	r24, 0x0B	; 11
     456:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz / 64 / 250 = 1ms)
     45a:	8a ef       	ldi	r24, 0xFA	; 250
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     462:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     466:	08 95       	ret

00000468 <desabilitar_timer_timeout>:
	TIMSK1 |= (1 << OCIE1A); // Habilita interrupção por comparação
	resetar_timeout(); // Sempre reseta o timeout ao habilitar
}

void desabilitar_timer_timeout() {
	TIMSK1 &= ~(1 << OCIE1A); // Desabilita interrupção por comparação
     468:	ef e6       	ldi	r30, 0x6F	; 111
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	8d 7f       	andi	r24, 0xFD	; 253
     470:	80 83       	st	Z, r24
	PORTB &= ~(1 << LED_PIN); // Garante que o LED esteja desligado
     472:	85 b1       	in	r24, 0x05	; 5
     474:	8f 7e       	andi	r24, 0xEF	; 239
     476:	85 b9       	out	0x05, r24	; 5
	alerta_led = 0; // Desliga o alerta
     478:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <alerta_led>
	timer_count = 0; 
     47c:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <timer_count>
     480:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <timer_count+0x1>
     484:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <timer_count+0x2>
     488:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <timer_count+0x3>
     48c:	08 95       	ret

0000048e <enviar_confirmacao_operacional>:
		setBlocked(1); // Bloqueia sistema por timeout
	}
}

// Envia mensagem de confirmação operacional "CO"
void enviar_confirmacao_operacional() {
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	00 d0       	rcall	.+0      	; 0x494 <enviar_confirmacao_operacional+0x6>
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
	char confirmacao[2];
	confirmacao[0] = 'C';
     498:	83 e4       	ldi	r24, 0x43	; 67
     49a:	89 83       	std	Y+1, r24	; 0x01
	confirmacao[1] = 'O';
     49c:	8f e4       	ldi	r24, 0x4F	; 79
     49e:	8a 83       	std	Y+2, r24	; 0x02
	SerialEnviaChars(2, confirmacao); // Envia "CO"
     4a0:	be 01       	movw	r22, r28
     4a2:	6f 5f       	subi	r22, 0xFF	; 255
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 df 08 	call	0x11be	; 0x11be <SerialEnviaChars>
}
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <__vector_11>:
	PORTB &= ~(1 << LED_PIN); // Garante que o LED esteja desligado
	alerta_led = 0; // Desliga o alerta
	timer_count = 0; 
}

ISR(TIMER1_COMPA_vect) {
     4b8:	1f 92       	push	r1
     4ba:	0f 92       	push	r0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	2f 93       	push	r18
     4c4:	3f 93       	push	r19
     4c6:	4f 93       	push	r20
     4c8:	5f 93       	push	r21
     4ca:	6f 93       	push	r22
     4cc:	7f 93       	push	r23
     4ce:	8f 93       	push	r24
     4d0:	9f 93       	push	r25
     4d2:	af 93       	push	r26
     4d4:	bf 93       	push	r27
     4d6:	ef 93       	push	r30
     4d8:	ff 93       	push	r31
	timer_count++;
     4da:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <timer_count>
     4de:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <timer_count+0x1>
     4e2:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <timer_count+0x2>
     4e6:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <timer_count+0x3>
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	a1 1d       	adc	r26, r1
     4ee:	b1 1d       	adc	r27, r1
     4f0:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <timer_count>
     4f4:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <timer_count+0x1>
     4f8:	a0 93 43 03 	sts	0x0343, r26	; 0x800343 <timer_count+0x2>
     4fc:	b0 93 44 03 	sts	0x0344, r27	; 0x800344 <timer_count+0x3>

	// Verifica período de alerta
	if (timer_count >= TIMEOUT_ALERTA && timer_count < TIMEOUT_TOTAL) {
     500:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <timer_count>
     504:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <timer_count+0x1>
     508:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <timer_count+0x2>
     50c:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <timer_count+0x3>
     510:	80 35       	cpi	r24, 0x50	; 80
     512:	96 44       	sbci	r25, 0x46	; 70
     514:	a1 05       	cpc	r26, r1
     516:	b1 05       	cpc	r27, r1
     518:	a0 f1       	brcs	.+104    	; 0x582 <__vector_11+0xca>
     51a:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <timer_count>
     51e:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <timer_count+0x1>
     522:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <timer_count+0x2>
     526:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <timer_count+0x3>
     52a:	80 33       	cpi	r24, 0x30	; 48
     52c:	95 47       	sbci	r25, 0x75	; 117
     52e:	a1 05       	cpc	r26, r1
     530:	b1 05       	cpc	r27, r1
     532:	38 f5       	brcc	.+78     	; 0x582 <__vector_11+0xca>
		alerta_led = 1;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <alerta_led>

		// Pisca o LED 2 vezes por segundo
		if (timer_count % INTERVALO_PISCA == 0) {
     53a:	60 91 41 03 	lds	r22, 0x0341	; 0x800341 <timer_count>
     53e:	70 91 42 03 	lds	r23, 0x0342	; 0x800342 <timer_count+0x1>
     542:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <timer_count+0x2>
     546:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <timer_count+0x3>
     54a:	2a ef       	ldi	r18, 0xFA	; 250
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__udivmodsi4>
     556:	67 2b       	or	r22, r23
     558:	68 2b       	or	r22, r24
     55a:	69 2b       	or	r22, r25
     55c:	91 f4       	brne	.+36     	; 0x582 <__vector_11+0xca>
			led_state = !led_state;
     55e:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <led_state>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	91 11       	cpse	r25, r1
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <led_state>
			if (led_state) {
     56c:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <led_state>
     570:	88 23       	and	r24, r24
     572:	21 f0       	breq	.+8      	; 0x57c <__vector_11+0xc4>
				PORTB |= (1 << LED_PIN); // Liga LED
     574:	85 b1       	in	r24, 0x05	; 5
     576:	80 61       	ori	r24, 0x10	; 16
     578:	85 b9       	out	0x05, r24	; 5
     57a:	03 c0       	rjmp	.+6      	; 0x582 <__vector_11+0xca>
				} else {
				PORTB &= ~(1 << LED_PIN); // Desliga LED
     57c:	85 b1       	in	r24, 0x05	; 5
     57e:	8f 7e       	andi	r24, 0xEF	; 239
     580:	85 b9       	out	0x05, r24	; 5
			}
		}
	}

	// Timeout completo (30 segundos)
	if (timer_count >= TIMEOUT_TOTAL) {
     582:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <timer_count>
     586:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <timer_count+0x1>
     58a:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <timer_count+0x2>
     58e:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <timer_count+0x3>
     592:	80 33       	cpi	r24, 0x30	; 48
     594:	95 47       	sbci	r25, 0x75	; 117
     596:	a1 05       	cpc	r26, r1
     598:	b1 05       	cpc	r27, r1
     59a:	a0 f0       	brcs	.+40     	; 0x5c4 <__vector_11+0x10c>
		enviar_confirmacao_operacional(); // Envia "CO"
     59c:	0e 94 47 02 	call	0x48e	; 0x48e <enviar_confirmacao_operacional>
		finalizar_sessao(); // Encerra a sessão
     5a0:	0e 94 55 08 	call	0x10aa	; 0x10aa <finalizar_sessao>
		timer_count = 0; // Reseta contador
     5a4:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <timer_count>
     5a8:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <timer_count+0x1>
     5ac:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <timer_count+0x2>
     5b0:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <timer_count+0x3>
		alerta_led = 0; // Desliga alerta
     5b4:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <alerta_led>
		PORTB &= ~(1 << LED_PIN); // Desliga LED
     5b8:	85 b1       	in	r24, 0x05	; 5
     5ba:	8f 7e       	andi	r24, 0xEF	; 239
     5bc:	85 b9       	out	0x05, r24	; 5
		setBlocked(1); // Bloqueia sistema por timeout
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	0e 94 cd 08 	call	0x119a	; 0x119a <setBlocked>
	}
}
     5c4:	ff 91       	pop	r31
     5c6:	ef 91       	pop	r30
     5c8:	bf 91       	pop	r27
     5ca:	af 91       	pop	r26
     5cc:	9f 91       	pop	r25
     5ce:	8f 91       	pop	r24
     5d0:	7f 91       	pop	r23
     5d2:	6f 91       	pop	r22
     5d4:	5f 91       	pop	r21
     5d6:	4f 91       	pop	r20
     5d8:	3f 91       	pop	r19
     5da:	2f 91       	pop	r18
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	0f 90       	pop	r0
     5e2:	1f 90       	pop	r1
     5e4:	18 95       	reti

000005e6 <resetar_timeout>:
	SerialEnviaChars(2, confirmacao); // Envia "CO"
}

// Reseta contador de timeout e estado do LED
void resetar_timeout() {
	timer_count = 0;
     5e6:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <timer_count>
     5ea:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <timer_count+0x1>
     5ee:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <timer_count+0x2>
     5f2:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <timer_count+0x3>
	alerta_led = 0;
     5f6:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <alerta_led>
	PORTB &= ~(1 << LED_PIN); // Desliga LED
     5fa:	85 b1       	in	r24, 0x05	; 5
     5fc:	8f 7e       	andi	r24, 0xEF	; 239
     5fe:	85 b9       	out	0x05, r24	; 5
     600:	08 95       	ret

00000602 <habilitar_timer_timeout>:
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS11); // Modo CTC, prescaler 64
	OCR1A = 250; // Valor para interrupção a cada 1ms (16MHz / 64 / 250 = 1ms)
}

void habilitar_timer_timeout() {
	TIMSK1 |= (1 << OCIE1A); // Habilita interrupção por comparação
     602:	ef e6       	ldi	r30, 0x6F	; 111
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	80 83       	st	Z, r24
	resetar_timeout(); // Sempre reseta o timeout ao habilitar
     60c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
     610:	08 95       	ret

00000612 <aguardar_desbloqueio>:
	PORTB &= ~(1 << LED_PIN); // Desliga LED
}

// Aguarda o desbloqueio do terminal
void aguardar_desbloqueio() {
	LCD_limpar();
     612:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 4, "FORA  DE"); // Exibe "FORA DE OPERAÇÃO"
     616:	4c e5       	ldi	r20, 0x5C	; 92
     618:	51 e0       	ldi	r21, 0x01	; 1
     61a:	64 e0       	ldi	r22, 0x04	; 4
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 4, "OPERACAO");
     622:	45 e6       	ldi	r20, 0x65	; 101
     624:	51 e0       	ldi	r21, 0x01	; 1
     626:	64 e0       	ldi	r22, 0x04	; 4
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	while (isBlocked()) { // Espera sistema ser desbloqueado
     62e:	12 c0       	rjmp	.+36     	; 0x654 <aguardar_desbloqueio+0x42>
		if (serial_response_pending) {
     630:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <serial_response_pending>
     634:	88 23       	and	r24, r24
     636:	51 f0       	breq	.+20     	; 0x64c <aguardar_desbloqueio+0x3a>
			SerialEnviaChars(2, serial_response_char);
     638:	64 e5       	ldi	r22, 0x54	; 84
     63a:	73 e0       	ldi	r23, 0x03	; 3
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 df 08 	call	0x11be	; 0x11be <SerialEnviaChars>
			serial_response_pending = 0; // Limpa a flag
     644:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <serial_response_pending>
			resetar_timeout(); // Reseta timeout após interação serial (desbloqueio)
     648:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
		}
		delay1ms(200); // Pequeno atraso
     64c:	88 ec       	ldi	r24, 0xC8	; 200
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
// Aguarda o desbloqueio do terminal
void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 4, "FORA  DE"); // Exibe "FORA DE OPERAÇÃO"
	LCD_Escrever_Linha(1, 4, "OPERACAO");
	while (isBlocked()) { // Espera sistema ser desbloqueado
     654:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     658:	81 11       	cpse	r24, r1
     65a:	ea cf       	rjmp	.-44     	; 0x630 <aguardar_desbloqueio+0x1e>
			serial_response_pending = 0; // Limpa a flag
			resetar_timeout(); // Reseta timeout após interação serial (desbloqueio)
		}
		delay1ms(200); // Pequeno atraso
	}
	LCD_limpar(); // Limpa LCD após desbloqueio
     65c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
     660:	08 95       	ret

00000662 <main>:
}

int main(void) {
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	66 97       	sbiw	r28, 0x16	; 22
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
     676:	0e 94 c8 0a 	call	0x1590	; 0x1590 <prepara_teclado>
	LCD_iniciar();
     67a:	0e 94 91 00 	call	0x122	; 0x122 <LCD_iniciar>
	initUART();
     67e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <initUART>
	configurar_timer(); // Apenas configura, não habilita a interrupção ainda
     682:	0e 94 22 02 	call	0x444	; 0x444 <configurar_timer>
	sei(); // Habilita interrupções globais
     686:	78 94       	sei

	char codigo_aluno[7];
	char senha_aluno[7];

	const char* opcoes[] = {
     688:	88 e0       	ldi	r24, 0x08	; 8
     68a:	e0 e0       	ldi	r30, 0x00	; 0
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	de 01       	movw	r26, r28
     690:	1f 96       	adiw	r26, 0x0f	; 15
     692:	01 90       	ld	r0, Z+
     694:	0d 92       	st	X+, r0
     696:	8a 95       	dec	r24
     698:	e1 f7       	brne	.-8      	; 0x692 <main+0x30>
	};
	const int total_opcoes = 4;
	int indice_menu = 0;
	char tecla;

	Estado estado = ESTADO_TELA_INICIAL;
     69a:	00 e0       	ldi	r16, 0x00	; 0
     69c:	0b c0       	rjmp	.+22     	; 0x6b4 <main+0x52>
			mensagem_Inicial();
			while (varredura() == 0) {
				if (isBlocked()) break; // Sai se for bloqueado
			}
			if (!isBlocked()) {
				estado = ESTADO_CODIGO;
     69e:	01 e0       	ldi	r16, 0x01	; 1
     6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <main+0x52>
			ler_codigo_aluno(codigo_aluno);
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_SENHA;
     6a2:	02 e0       	ldi	r16, 0x02	; 2
     6a4:	07 c0       	rjmp	.+14     	; 0x6b4 <main+0x52>
			ler_senha(senha_aluno);
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_VALIDACAO;
     6a6:	03 e0       	ldi	r16, 0x03	; 3
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <main+0x52>
						delay1ms(1000);
						estado = ESTADO_TELA_INICIAL;
						break;
						} else {
						switch (tecla) {
							case '1': estado = ESTADO_SAQUE; break;
     6aa:	05 e0       	ldi	r16, 0x05	; 5
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <main+0x52>
			realizar_saque();
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6ae:	04 e0       	ldi	r16, 0x04	; 4
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <main+0x52>
			consultar_saldo();
			if (isBlocked()) {
				estado = ESTADO_TELA_INICIAL;
				break;
			}
			estado = ESTADO_MENU;
     6b2:	04 e0       	ldi	r16, 0x04	; 4

	Estado estado = ESTADO_TELA_INICIAL;

	while (1) {
		// Gerencia respostas da ISR e bloqueio (crítico)
		if (serial_response_pending) {
     6b4:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <serial_response_pending>
     6b8:	88 23       	and	r24, r24
     6ba:	51 f0       	breq	.+20     	; 0x6d0 <main+0x6e>
			SerialEnviaChars(2, serial_response_char);
     6bc:	64 e5       	ldi	r22, 0x54	; 84
     6be:	73 e0       	ldi	r23, 0x03	; 3
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 df 08 	call	0x11be	; 0x11be <SerialEnviaChars>
			serial_response_pending = 0; // Limpa a flag após envio
     6c8:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <serial_response_pending>
			resetar_timeout(); // Reseta timeout após interação serial (útil se o timer estiver ativo)
     6cc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
		}

		// Sistema bloqueado por comando ST, SH ou timeout
		if (isBlocked()) {
     6d0:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     6d4:	88 23       	and	r24, r24
     6d6:	31 f0       	breq	.+12     	; 0x6e4 <main+0x82>
			desabilitar_timer_timeout(); // Garante que o timer esteja desabilitado
     6d8:	0e 94 34 02 	call	0x468	; 0x468 <desabilitar_timer_timeout>
			aguardar_desbloqueio();
     6dc:	0e 94 09 03 	call	0x612	; 0x612 <aguardar_desbloqueio>
			estado = ESTADO_TELA_INICIAL;
     6e0:	00 e0       	ldi	r16, 0x00	; 0
			continue;
     6e2:	e8 cf       	rjmp	.-48     	; 0x6b4 <main+0x52>
		}
		
		switch (estado) {
     6e4:	80 2f       	mov	r24, r16
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	ec 5c       	subi	r30, 0xCC	; 204
     6ec:	ff 4f       	sbci	r31, 0xFF	; 255
     6ee:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__tablejump2__>
			case ESTADO_TELA_INICIAL:
			desabilitar_timer_timeout(); // Desabilita o timer na tela inicial
     6f2:	0e 94 34 02 	call	0x468	; 0x468 <desabilitar_timer_timeout>
			LCD_limpar();
     6f6:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			mensagem_Inicial();
     6fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <mensagem_Inicial>
			while (varredura() == 0) {
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <main+0xa6>
				if (isBlocked()) break; // Sai se for bloqueado
     700:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     704:	81 11       	cpse	r24, r1
     706:	04 c0       	rjmp	.+8      	; 0x710 <main+0xae>
		switch (estado) {
			case ESTADO_TELA_INICIAL:
			desabilitar_timer_timeout(); // Desabilita o timer na tela inicial
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
     708:	0e 94 0c 0b 	call	0x1618	; 0x1618 <varredura>
     70c:	88 23       	and	r24, r24
     70e:	c1 f3       	breq	.-16     	; 0x700 <main+0x9e>
				if (isBlocked()) break; // Sai se for bloqueado
			}
			if (!isBlocked()) {
     710:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     714:	88 23       	and	r24, r24
     716:	19 f2       	breq	.-122    	; 0x69e <main+0x3c>
     718:	cd cf       	rjmp	.-102    	; 0x6b4 <main+0x52>
				estado = ESTADO_CODIGO;
			}
			break;

			case ESTADO_CODIGO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     71a:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			ler_codigo_aluno(codigo_aluno);
     71e:	ce 01       	movw	r24, r28
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ler_codigo_aluno>
			if (isBlocked()) {
     726:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     72a:	88 23       	and	r24, r24
     72c:	09 f4       	brne	.+2      	; 0x730 <main+0xce>
     72e:	b9 cf       	rjmp	.-142    	; 0x6a2 <main+0x40>
				estado = ESTADO_TELA_INICIAL;
     730:	00 e0       	ldi	r16, 0x00	; 0
     732:	c0 cf       	rjmp	.-128    	; 0x6b4 <main+0x52>
			}
			estado = ESTADO_SENHA;
			break;

			case ESTADO_SENHA:
			habilitar_timer_timeout(); // Habilita o timer aqui
     734:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			ler_senha(senha_aluno);
     738:	ce 01       	movw	r24, r28
     73a:	08 96       	adiw	r24, 0x08	; 8
     73c:	0e 94 40 01 	call	0x280	; 0x280 <ler_senha>
			if (isBlocked()) {
     740:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     744:	88 23       	and	r24, r24
     746:	09 f4       	brne	.+2      	; 0x74a <main+0xe8>
     748:	ae cf       	rjmp	.-164    	; 0x6a6 <main+0x44>
				estado = ESTADO_TELA_INICIAL;
     74a:	00 e0       	ldi	r16, 0x00	; 0
     74c:	b3 cf       	rjmp	.-154    	; 0x6b4 <main+0x52>
			}
			estado = ESTADO_VALIDACAO;
			break;

			case ESTADO_VALIDACAO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     74e:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			if (validar_codigo_aluno(codigo_aluno, senha_aluno)) {
     752:	be 01       	movw	r22, r28
     754:	68 5f       	subi	r22, 0xF8	; 248
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	0e 94 87 01 	call	0x30e	; 0x30e <validar_codigo_aluno>
     760:	89 2b       	or	r24, r25
     762:	a1 f0       	breq	.+40     	; 0x78c <main+0x12a>
				LCD_limpar();
     764:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "BEM VINDO(A)!");
     768:	4e e6       	ldi	r20, 0x6E	; 110
     76a:	51 e0       	ldi	r21, 0x01	; 1
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "PROCESSANDO...");
     774:	4c e7       	ldi	r20, 0x7C	; 124
     776:	51 e0       	ldi	r21, 0x01	; 1
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     780:	80 ed       	ldi	r24, 0xD0	; 208
     782:	97 e0       	ldi	r25, 0x07	; 7
     784:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
				estado = ESTADO_MENU;
     788:	04 e0       	ldi	r16, 0x04	; 4
     78a:	94 cf       	rjmp	.-216    	; 0x6b4 <main+0x52>
				} else {
				LCD_limpar();
     78c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "CONTA INVALIDA!");
     790:	4b e8       	ldi	r20, 0x8B	; 139
     792:	51 e0       	ldi	r21, 0x01	; 1
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "TENTE NOVAMENTE");
     79c:	4b e9       	ldi	r20, 0x9B	; 155
     79e:	51 e0       	ldi	r21, 0x01	; 1
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     7a8:	80 ed       	ldi	r24, 0xD0	; 208
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
				estado = ESTADO_TELA_INICIAL;
     7b0:	00 e0       	ldi	r16, 0x00	; 0
     7b2:	80 cf       	rjmp	.-256    	; 0x6b4 <main+0x52>
			}
			break;

			case ESTADO_MENU:
			habilitar_timer_timeout(); // Habilita o timer aqui
     7b4:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			LCD_limpar();
     7b8:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			indice_menu = 0;
			LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     7bc:	4b ea       	ldi	r20, 0xAB	; 171
     7be:	51 e0       	ldi	r21, 0x01	; 1
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			if (indice_menu + 1 < total_opcoes) {
				LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     7c8:	43 eb       	ldi	r20, 0xB3	; 179
     7ca:	51 e0       	ldi	r21, 0x01	; 1
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			break;

			case ESTADO_MENU:
			habilitar_timer_timeout(); // Habilita o timer aqui
			LCD_limpar();
			indice_menu = 0;
     7d4:	e1 2c       	mov	r14, r1
     7d6:	f1 2c       	mov	r15, r1
				} else {
				LCD_Escrever_Linha(1, 0, " ");
			}

			while (1) {
				if (isBlocked()) break;
     7d8:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     7dc:	81 11       	cpse	r24, r1
     7de:	6a cf       	rjmp	.-300    	; 0x6b4 <main+0x52>

				tecla = varredura();
     7e0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <varredura>
     7e4:	18 2f       	mov	r17, r24
				if (tecla != 0) {
     7e6:	88 23       	and	r24, r24
     7e8:	b9 f3       	breq	.-18     	; 0x7d8 <main+0x176>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
     7ea:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
					delay1ms(300); // Debounce
     7ee:	8c e2       	ldi	r24, 0x2C	; 44
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>

					if (tecla == 'B') { // Rolar para baixo
     7f6:	12 34       	cpi	r17, 0x42	; 66
     7f8:	c1 f5       	brne	.+112    	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
						if (indice_menu < total_opcoes - 2) {
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	e8 16       	cp	r14, r24
     7fe:	f1 04       	cpc	r15, r1
     800:	5c f7       	brge	.-42     	; 0x7d8 <main+0x176>
							indice_menu++;
     802:	67 01       	movw	r12, r14
     804:	9f ef       	ldi	r25, 0xFF	; 255
     806:	c9 1a       	sub	r12, r25
     808:	d9 0a       	sbc	r13, r25
							LCD_limpar();
     80a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     80e:	f6 01       	movw	r30, r12
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	8c 0f       	add	r24, r28
     81a:	9d 1f       	adc	r25, r29
     81c:	e8 0f       	add	r30, r24
     81e:	f9 1f       	adc	r31, r25
     820:	46 85       	ldd	r20, Z+14	; 0x0e
     822:	57 85       	ldd	r21, Z+15	; 0x0f
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
							if (indice_menu + 1 < total_opcoes) {
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	e9 0e       	add	r14, r25
     830:	f1 1c       	adc	r15, r1
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	e8 16       	cp	r14, r24
     836:	f1 04       	cpc	r15, r1
     838:	84 f4       	brge	.+32     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     83a:	ee 0c       	add	r14, r14
     83c:	ff 1c       	adc	r15, r15
     83e:	e1 e0       	ldi	r30, 0x01	; 1
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	ec 0f       	add	r30, r28
     844:	fd 1f       	adc	r31, r29
     846:	ee 0d       	add	r30, r14
     848:	ff 1d       	adc	r31, r15
     84a:	46 85       	ldd	r20, Z+14	; 0x0e
     84c:	57 85       	ldd	r21, Z+15	; 0x0f
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
					delay1ms(300); // Debounce

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) {
							indice_menu++;
     856:	76 01       	movw	r14, r12
     858:	bf cf       	rjmp	.-130    	; 0x7d8 <main+0x176>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							if (indice_menu + 1 < total_opcoes) {
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
     85a:	4f eb       	ldi	r20, 0xBF	; 191
     85c:	51 e0       	ldi	r21, 0x01	; 1
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
					resetar_timeout(); // Reseta o timeout a cada tecla pressionada no menu
					delay1ms(300); // Debounce

					if (tecla == 'B') { // Rolar para baixo
						if (indice_menu < total_opcoes - 2) {
							indice_menu++;
     866:	76 01       	movw	r14, r12
     868:	b7 cf       	rjmp	.-146    	; 0x7d8 <main+0x176>
								LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
								} else {
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
     86a:	11 34       	cpi	r17, 0x41	; 65
     86c:	49 f5       	brne	.+82     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
						if (indice_menu > 0) {
     86e:	1e 14       	cp	r1, r14
     870:	1f 04       	cpc	r1, r15
     872:	0c f0       	brlt	.+2      	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     874:	b1 cf       	rjmp	.-158    	; 0x7d8 <main+0x176>
							indice_menu--;
     876:	67 01       	movw	r12, r14
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	c9 1a       	sub	r12, r25
     87c:	d1 08       	sbc	r13, r1
							LCD_limpar();
     87e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
     882:	f6 01       	movw	r30, r12
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	8c 0f       	add	r24, r28
     88e:	9d 1f       	adc	r25, r29
     890:	e8 0f       	add	r30, r24
     892:	f9 1f       	adc	r31, r25
     894:	46 85       	ldd	r20, Z+14	; 0x0e
     896:	57 85       	ldd	r21, Z+15	; 0x0f
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
     8a0:	ee 0c       	add	r14, r14
     8a2:	ff 1c       	adc	r15, r15
     8a4:	e1 e0       	ldi	r30, 0x01	; 1
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	ec 0f       	add	r30, r28
     8aa:	fd 1f       	adc	r31, r29
     8ac:	ee 0d       	add	r30, r14
     8ae:	ff 1d       	adc	r31, r15
     8b0:	46 85       	ldd	r20, Z+14	; 0x0e
     8b2:	57 85       	ldd	r21, Z+15	; 0x0f
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
								LCD_Escrever_Linha(1, 0, " ");
							}
						}
						} else if (tecla == 'A') { // Rolar para cima
						if (indice_menu > 0) {
							indice_menu--;
     8bc:	76 01       	movw	r14, r12
     8be:	8c cf       	rjmp	.-232    	; 0x7d8 <main+0x176>
							LCD_limpar();
							LCD_Escrever_Linha(0, 0, opcoes[indice_menu]);
							LCD_Escrever_Linha(1, 0, opcoes[indice_menu + 1]);
						}
						} else if (tecla == '*') { // Voltar para tela inicial
     8c0:	1a 32       	cpi	r17, 0x2A	; 42
     8c2:	71 f4       	brne	.+28     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
						LCD_limpar();
     8c4:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "VOLTANDO...");
     8c8:	41 ec       	ldi	r20, 0xC1	; 193
     8ca:	51 e0       	ldi	r21, 0x01	; 1
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
						delay1ms(1000);
     8d4:	88 ee       	ldi	r24, 0xE8	; 232
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
						estado = ESTADO_TELA_INICIAL;
     8dc:	00 e0       	ldi	r16, 0x00	; 0
						break;
     8de:	ea ce       	rjmp	.-556    	; 0x6b4 <main+0x52>
						} else {
						switch (tecla) {
     8e0:	12 33       	cpi	r17, 0x32	; 50
     8e2:	51 f0       	breq	.+20     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     8e4:	20 f4       	brcc	.+8      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     8e6:	11 33       	cpi	r17, 0x31	; 49
     8e8:	09 f4       	brne	.+2      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
     8ea:	df ce       	rjmp	.-578    	; 0x6aa <main+0x48>
     8ec:	e3 ce       	rjmp	.-570    	; 0x6b4 <main+0x52>
     8ee:	13 33       	cpi	r17, 0x33	; 51
     8f0:	29 f0       	breq	.+10     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
     8f2:	14 33       	cpi	r17, 0x34	; 52
     8f4:	29 f0       	breq	.+10     	; 0x900 <__stack+0x1>
     8f6:	de ce       	rjmp	.-580    	; 0x6b4 <main+0x52>
							case '1': estado = ESTADO_SAQUE; break;
							case '2': estado = ESTADO_PAGAMENTO; break;
     8f8:	06 e0       	ldi	r16, 0x06	; 6
     8fa:	dc ce       	rjmp	.-584    	; 0x6b4 <main+0x52>
							case '3': estado = ESTADO_SALDO; break;
     8fc:	07 e0       	ldi	r16, 0x07	; 7
     8fe:	da ce       	rjmp	.-588    	; 0x6b4 <main+0x52>
							case '4': // Sair
							finalizar_sessao();
     900:	0e 94 55 08 	call	0x10aa	; 0x10aa <finalizar_sessao>
							estado = ESTADO_TELA_INICIAL;
     904:	00 e0       	ldi	r16, 0x00	; 0
							break;
     906:	d6 ce       	rjmp	.-596    	; 0x6b4 <main+0x52>
				}
			}
			break;

			case ESTADO_SAQUE:
			habilitar_timer_timeout(); // Habilita o timer aqui
     908:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			realizar_saque();
     90c:	0e 94 13 06 	call	0xc26	; 0xc26 <realizar_saque>
			if (isBlocked()) {
     910:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     914:	88 23       	and	r24, r24
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
     918:	ca ce       	rjmp	.-620    	; 0x6ae <main+0x4c>
				estado = ESTADO_TELA_INICIAL;
     91a:	00 e0       	ldi	r16, 0x00	; 0
     91c:	cb ce       	rjmp	.-618    	; 0x6b4 <main+0x52>
			}
			estado = ESTADO_MENU;
			break;

			case ESTADO_PAGAMENTO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     91e:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			LCD_limpar();
     922:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Pagamento");
     926:	45 eb       	ldi	r20, 0xB5	; 181
     928:	51 e0       	ldi	r21, 0x01	; 1
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "Em desenvolvimento");
     932:	4d ec       	ldi	r20, 0xCD	; 205
     934:	51 e0       	ldi	r21, 0x01	; 1
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     93e:	80 ed       	ldi	r24, 0xD0	; 208
     940:	97 e0       	ldi	r25, 0x07	; 7
     942:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
			estado = ESTADO_MENU;
     946:	04 e0       	ldi	r16, 0x04	; 4
			break;
     948:	b5 ce       	rjmp	.-662    	; 0x6b4 <main+0x52>

			case ESTADO_SALDO:
			habilitar_timer_timeout(); // Habilita o timer aqui
     94a:	0e 94 01 03 	call	0x602	; 0x602 <habilitar_timer_timeout>
			consultar_saldo();
     94e:	0e 94 33 07 	call	0xe66	; 0xe66 <consultar_saldo>
			if (isBlocked()) {
     952:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     956:	88 23       	and	r24, r24
     958:	09 f4       	brne	.+2      	; 0x95c <__stack+0x5d>
     95a:	ab ce       	rjmp	.-682    	; 0x6b2 <main+0x50>
				estado = ESTADO_TELA_INICIAL;
     95c:	00 e0       	ldi	r16, 0x00	; 0
     95e:	aa ce       	rjmp	.-684    	; 0x6b4 <main+0x52>

00000960 <confirmar_senha>:
#include "LCD.h"
#include "teclado.h"
#include "serial.h"
#include "timers.h"

uint8_t confirmar_senha(const char* senha_atual) {
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	27 97       	sbiw	r28, 0x07	; 7
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	6c 01       	movw	r12, r24
	char senha_confirmacao[7] = {0};
     980:	fe 01       	movw	r30, r28
     982:	31 96       	adiw	r30, 0x01	; 1
     984:	87 e0       	ldi	r24, 0x07	; 7
     986:	df 01       	movw	r26, r30
     988:	1d 92       	st	X+, r1
     98a:	8a 95       	dec	r24
     98c:	e9 f7       	brne	.-6      	; 0x988 <confirmar_senha+0x28>
	int pos = 0;
	char tecla;

	LCD_limpar();
     98e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Confirme a senha:");
     992:	4f ee       	ldi	r20, 0xEF	; 239
     994:	51 e0       	ldi	r21, 0x01	; 1
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
     99e:	4d e2       	ldi	r20, 0x2D	; 45
     9a0:	51 e0       	ldi	r21, 0x01	; 1
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
#include "serial.h"
#include "timers.h"

uint8_t confirmar_senha(const char* senha_atual) {
	char senha_confirmacao[7] = {0};
	int pos = 0;
     9aa:	e1 2c       	mov	r14, r1
     9ac:	f1 2c       	mov	r15, r1
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Confirme a senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while(1) {
		if (isBlocked()) {
     9ae:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     9b2:	18 2f       	mov	r17, r24
     9b4:	88 23       	and	r24, r24
     9b6:	a1 f0       	breq	.+40     	; 0x9e0 <confirmar_senha+0x80>
			LCD_limpar();
     9b8:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	52 e0       	ldi	r21, 0x02	; 2
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     9c8:	4e e0       	ldi	r20, 0x0E	; 14
     9ca:	52 e0       	ldi	r21, 0x02	; 2
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     9d4:	80 ed       	ldi	r24, 0xD0	; 208
     9d6:	97 e0       	ldi	r25, 0x07	; 7
     9d8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
			return 0;
     9dc:	10 e0       	ldi	r17, 0x00	; 0
     9de:	71 c0       	rjmp	.+226    	; 0xac2 <confirmar_senha+0x162>
		}

		tecla = varredura();
     9e0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < 6) {
     9e4:	90 ed       	ldi	r25, 0xD0	; 208
     9e6:	98 0f       	add	r25, r24
     9e8:	9a 30       	cpi	r25, 0x0A	; 10
     9ea:	c8 f4       	brcc	.+50     	; 0xa1e <confirmar_senha+0xbe>
     9ec:	b6 e0       	ldi	r27, 0x06	; 6
     9ee:	eb 16       	cp	r14, r27
     9f0:	f1 04       	cpc	r15, r1
     9f2:	ac f4       	brge	.+42     	; 0xa1e <confirmar_senha+0xbe>
			senha_confirmacao[pos] = tecla;
     9f4:	e1 e0       	ldi	r30, 0x01	; 1
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	ec 0f       	add	r30, r28
     9fa:	fd 1f       	adc	r31, r29
     9fc:	ee 0d       	add	r30, r14
     9fe:	ff 1d       	adc	r31, r15
     a00:	80 83       	st	Z, r24
			LCD_Escrever_Linha(1, pos, "*");
     a02:	4c e1       	ldi	r20, 0x1C	; 28
     a04:	52 e0       	ldi	r21, 0x02	; 2
     a06:	6e 2d       	mov	r22, r14
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	e8 1a       	sub	r14, r24
     a12:	f8 0a       	sbc	r15, r24
			delay1ms(200);
     a14:	88 ec       	ldi	r24, 0xC8	; 200
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
     a1c:	c8 cf       	rjmp	.-112    	; 0x9ae <confirmar_senha+0x4e>
			} else if(tecla == '#') {
     a1e:	83 32       	cpi	r24, 0x23	; 35
     a20:	c9 f5       	brne	.+114    	; 0xa94 <confirmar_senha+0x134>
			senha_confirmacao[pos] = '\0';
     a22:	e1 e0       	ldi	r30, 0x01	; 1
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	ec 0f       	add	r30, r28
     a28:	fd 1f       	adc	r31, r29
     a2a:	ee 0d       	add	r30, r14
     a2c:	ff 1d       	adc	r31, r15
     a2e:	10 82       	st	Z, r1
			
			if(strcmp(senha_confirmacao, senha_atual) == 0) {
     a30:	b6 01       	movw	r22, r12
     a32:	ce 01       	movw	r24, r28
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	0e 94 3b 0c 	call	0x1876	; 0x1876 <strcmp>
     a3a:	89 2b       	or	r24, r25
     a3c:	09 f4       	brne	.+2      	; 0xa40 <confirmar_senha+0xe0>
     a3e:	40 c0       	rjmp	.+128    	; 0xac0 <confirmar_senha+0x160>
				return 1;
				} else {
				LCD_limpar();
     a40:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Senha incorreta!");
     a44:	4e e1       	ldi	r20, 0x1E	; 30
     a46:	52 e0       	ldi	r21, 0x02	; 2
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente novamente");
     a50:	4f e2       	ldi	r20, 0x2F	; 47
     a52:	52 e0       	ldi	r21, 0x02	; 2
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     a5c:	80 ed       	ldi	r24, 0xD0	; 208
     a5e:	97 e0       	ldi	r25, 0x07	; 7
     a60:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
				
				LCD_limpar();
     a64:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Confirme a senha:");
     a68:	4f ee       	ldi	r20, 0xEF	; 239
     a6a:	51 e0       	ldi	r21, 0x01	; 1
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "______");
     a74:	4d e2       	ldi	r20, 0x2D	; 45
     a76:	51 e0       	ldi	r21, 0x01	; 1
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				pos = 0;
				memset(senha_confirmacao, 0, sizeof(senha_confirmacao));
     a80:	fe 01       	movw	r30, r28
     a82:	31 96       	adiw	r30, 0x01	; 1
     a84:	87 e0       	ldi	r24, 0x07	; 7
     a86:	df 01       	movw	r26, r30
     a88:	1d 92       	st	X+, r1
     a8a:	8a 95       	dec	r24
     a8c:	e9 f7       	brne	.-6      	; 0xa88 <confirmar_senha+0x128>
				delay1ms(2000);
				
				LCD_limpar();
				LCD_Escrever_Linha(0, 0, "Confirme a senha:");
				LCD_Escrever_Linha(1, 0, "______");
				pos = 0;
     a8e:	e1 2c       	mov	r14, r1
     a90:	f1 2c       	mov	r15, r1
     a92:	8d cf       	rjmp	.-230    	; 0x9ae <confirmar_senha+0x4e>
				memset(senha_confirmacao, 0, sizeof(senha_confirmacao));
			}
			} else if(tecla == '*') {
     a94:	8a 32       	cpi	r24, 0x2A	; 42
     a96:	09 f0       	breq	.+2      	; 0xa9a <confirmar_senha+0x13a>
     a98:	8a cf       	rjmp	.-236    	; 0x9ae <confirmar_senha+0x4e>
			LCD_limpar();
     a9a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
     a9e:	4f e3       	ldi	r20, 0x3F	; 63
     aa0:	52 e0       	ldi	r21, 0x02	; 2
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
     aaa:	48 e4       	ldi	r20, 0x48	; 72
     aac:	52 e0       	ldi	r21, 0x02	; 2
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     ab6:	80 ed       	ldi	r24, 0xD0	; 208
     ab8:	97 e0       	ldi	r25, 0x07	; 7
     aba:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
			return 0;
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <confirmar_senha+0x162>
			delay1ms(200);
			} else if(tecla == '#') {
			senha_confirmacao[pos] = '\0';
			
			if(strcmp(senha_confirmacao, senha_atual) == 0) {
				return 1;
     ac0:	11 e0       	ldi	r17, 0x01	; 1
			LCD_Escrever_Linha(1, 0, "cancelada");
			delay1ms(2000);
			return 0;
		}
	}
}
     ac2:	81 2f       	mov	r24, r17
     ac4:	27 96       	adiw	r28, 0x07	; 7
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	08 95       	ret

00000ae0 <perguntar_comprovante>:

// Pergunta sobre comprovante
void perguntar_comprovante() {
	LCD_limpar();
     ae0:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Deseja comprovante?");
     ae4:	42 e5       	ldi	r20, 0x52	; 82
     ae6:	52 e0       	ldi	r21, 0x02	; 2
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "1-Sim 2-Nao");
     af0:	46 e6       	ldi	r20, 0x66	; 102
     af2:	52 e0       	ldi	r21, 0x02	; 2
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>

	while(1) {
		if (isBlocked()) {
     afc:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     b00:	88 23       	and	r24, r24
     b02:	99 f0       	breq	.+38     	; 0xb2a <perguntar_comprovante+0x4a>
			LCD_limpar();
     b04:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	52 e0       	ldi	r21, 0x02	; 2
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     b14:	4e e0       	ldi	r20, 0x0E	; 14
     b16:	52 e0       	ldi	r21, 0x02	; 2
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     b20:	80 ed       	ldi	r24, 0xD0	; 208
     b22:	97 e0       	ldi	r25, 0x07	; 7
     b24:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
			return;
     b28:	08 95       	ret
		}

		char tecla = varredura();
     b2a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <varredura>
		if(tecla == '1') {
     b2e:	81 33       	cpi	r24, 0x31	; 49
     b30:	99 f4       	brne	.+38     	; 0xb58 <perguntar_comprovante+0x78>
			LCD_limpar();
     b32:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Comprovante em");
     b36:	42 e7       	ldi	r20, 0x72	; 114
     b38:	52 e0       	ldi	r21, 0x02	; 2
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "desenvolvimento");
     b42:	40 ed       	ldi	r20, 0xD0	; 208
     b44:	51 e0       	ldi	r21, 0x01	; 1
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     b4e:	80 ed       	ldi	r24, 0xD0	; 208
     b50:	97 e0       	ldi	r25, 0x07	; 7
     b52:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
			return;
     b56:	08 95       	ret
			} else if(tecla == '2') {
     b58:	82 33       	cpi	r24, 0x32	; 50
     b5a:	81 f6       	brne	.-96     	; 0xafc <perguntar_comprovante+0x1c>
     b5c:	08 95       	ret

00000b5e <enviar_mensagem_saque>:
		}
	}
}

// Envia mensagem de saque
void enviar_mensagem_saque(const char* valor) {
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	bc 01       	movw	r22, r24
	mensagem[0] = 'C';
	mensagem[1] = 'S';
	mensagem[2] = (char)tamanho_valor;
	strncpy(&mensagem[3], valor, tamanho_valor);
	SerialEnviaChars(tamanho_mensagem, mensagem);
}
     b74:	ed b6       	in	r14, 0x3d	; 61
     b76:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Envia mensagem de saque
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
     b78:	fc 01       	movw	r30, r24
     b7a:	01 90       	ld	r0, Z+
     b7c:	00 20       	and	r0, r0
     b7e:	e9 f7       	brne	.-6      	; 0xb7a <enviar_mensagem_saque+0x1c>
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	af 01       	movw	r20, r30
     b84:	48 1b       	sub	r20, r24
     b86:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3;
     b88:	6a 01       	movw	r12, r20
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	c8 0e       	add	r12, r24
     b8e:	d1 1c       	adc	r13, r1

	char mensagem[tamanho_mensagem];
     b90:	ed b7       	in	r30, 0x3d	; 61
     b92:	fe b7       	in	r31, 0x3e	; 62
     b94:	ec 19       	sub	r30, r12
     b96:	fd 09       	sbc	r31, r13
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	fe bf       	out	0x3e, r31	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	ed bf       	out	0x3d, r30	; 61
     ba2:	0d b7       	in	r16, 0x3d	; 61
     ba4:	1e b7       	in	r17, 0x3e	; 62
     ba6:	0f 5f       	subi	r16, 0xFF	; 255
     ba8:	1f 4f       	sbci	r17, 0xFF	; 255
	mensagem[0] = 'C';
     baa:	83 e4       	ldi	r24, 0x43	; 67
     bac:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S';
     bae:	83 e5       	ldi	r24, 0x53	; 83
     bb0:	f8 01       	movw	r30, r16
     bb2:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor;
     bb4:	42 83       	std	Z+2, r20	; 0x02
	strncpy(&mensagem[3], valor, tamanho_valor);
     bb6:	8d b7       	in	r24, 0x3d	; 61
     bb8:	9e b7       	in	r25, 0x3e	; 62
     bba:	04 96       	adiw	r24, 0x04	; 4
     bbc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <strncpy>
	SerialEnviaChars(tamanho_mensagem, mensagem);
     bc0:	b8 01       	movw	r22, r16
     bc2:	c6 01       	movw	r24, r12
     bc4:	0e 94 df 08 	call	0x11be	; 0x11be <SerialEnviaChars>
}
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	fe be       	out	0x3e, r15	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	ed be       	out	0x3d, r14	; 61
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	08 95       	ret

00000be4 <receber_resposta_servidor>:

// Recebe resposta do servidor
char receber_resposta_servidor(void) {
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	00 d0       	rcall	.+0      	; 0xbea <receber_resposta_servidor+0x6>
     bea:	00 d0       	rcall	.+0      	; 0xbec <receber_resposta_servidor+0x8>
     bec:	1f 92       	push	r1
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	char resposta[5];

	SerialRecebeChars(3, resposta);
     bf2:	be 01       	movw	r22, r28
     bf4:	6f 5f       	subi	r22, 0xFF	; 255
     bf6:	7f 4f       	sbci	r23, 0xFF	; 255
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <SerialRecebeChars>
	resposta[3] = '\0';

	if(resposta[0] == 'S' && resposta[1] == 'S') {
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	83 35       	cpi	r24, 0x53	; 83
     c04:	29 f4       	brne	.+10     	; 0xc10 <receber_resposta_servidor+0x2c>
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	83 35       	cpi	r24, 0x53	; 83
     c0a:	21 f4       	brne	.+8      	; 0xc14 <receber_resposta_servidor+0x30>
		return resposta[2];
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <receber_resposta_servidor+0x32>
	}

	return 'E';
     c10:	85 e4       	ldi	r24, 0x45	; 69
     c12:	01 c0       	rjmp	.+2      	; 0xc16 <receber_resposta_servidor+0x32>
     c14:	85 e4       	ldi	r24, 0x45	; 69
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <realizar_saque>:
		}
	}
}

// Realiza um saque (máximo de R$1200,00)
void realizar_saque(void) {
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	29 97       	sbiw	r28, 0x09	; 9
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
     c3e:	fe 01       	movw	r30, r28
     c40:	31 96       	adiw	r30, 0x01	; 1
     c42:	87 e0       	ldi	r24, 0x07	; 7
     c44:	df 01       	movw	r26, r30
     c46:	1d 92       	st	X+, r1
     c48:	8a 95       	dec	r24
     c4a:	e9 f7       	brne	.-6      	; 0xc46 <realizar_saque+0x20>
	int pos = 0;
	char tecla;

	LCD_limpar();
     c4c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
     c50:	41 e8       	ldi	r20, 0x81	; 129
     c52:	52 e0       	ldi	r21, 0x02	; 2
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
     c5c:	41 e9       	ldi	r20, 0x91	; 145
     c5e:	52 e0       	ldi	r21, 0x02	; 2
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
}

// Realiza um saque (máximo de R$1200,00)
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
     c68:	00 e0       	ldi	r16, 0x00	; 0
     c6a:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");

	while(1) {
		// Verifica bloqueio durante a entrada do valor
		if (isBlocked()) {
     c6c:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     c70:	88 23       	and	r24, r24
     c72:	99 f0       	breq	.+38     	; 0xc9a <realizar_saque+0x74>
			LCD_limpar();
     c74:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	52 e0       	ldi	r21, 0x02	; 2
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     c84:	4e e0       	ldi	r20, 0x0E	; 14
     c86:	52 e0       	ldi	r21, 0x02	; 2
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     c90:	80 ed       	ldi	r24, 0xD0	; 208
     c92:	97 e0       	ldi	r25, 0x07	; 7
     c94:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
			return;
     c98:	db c0       	rjmp	.+438    	; 0xe50 <realizar_saque+0x22a>
		}

		tecla = varredura();
     c9a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <varredura>

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     c9e:	90 ed       	ldi	r25, 0xD0	; 208
     ca0:	98 0f       	add	r25, r24
     ca2:	9a 30       	cpi	r25, 0x0A	; 10
     ca4:	d8 f4       	brcc	.+54     	; 0xcdc <realizar_saque+0xb6>
     ca6:	06 30       	cpi	r16, 0x06	; 6
     ca8:	11 05       	cpc	r17, r1
     caa:	c4 f4       	brge	.+48     	; 0xcdc <realizar_saque+0xb6>
			valor_saque[pos] = tecla;
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	ec 0f       	add	r30, r28
     cb2:	fd 1f       	adc	r31, r29
     cb4:	e0 0f       	add	r30, r16
     cb6:	f1 1f       	adc	r31, r17
     cb8:	80 83       	st	Z, r24
			char str[2] = {tecla, '\0'};
     cba:	88 87       	std	Y+8, r24	; 0x08
     cbc:	19 86       	std	Y+9, r1	; 0x09
			LCD_Escrever_Linha(1, 2 + pos, str);
     cbe:	62 e0       	ldi	r22, 0x02	; 2
     cc0:	60 0f       	add	r22, r16
     cc2:	ae 01       	movw	r20, r28
     cc4:	48 5f       	subi	r20, 0xF8	; 248
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			pos++;
     cce:	0f 5f       	subi	r16, 0xFF	; 255
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
     cd2:	88 ec       	ldi	r24, 0xC8	; 200
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
			return;
		}

		tecla = varredura();

		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE - 1)) {
     cda:	c8 cf       	rjmp	.-112    	; 0xc6c <realizar_saque+0x46>
			valor_saque[pos] = tecla;
			char str[2] = {tecla, '\0'};
			LCD_Escrever_Linha(1, 2 + pos, str);
			pos++;
			delay1ms(200);
			} else if(tecla == '#' && pos > 0) {
     cdc:	83 32       	cpi	r24, 0x23	; 35
     cde:	09 f0       	breq	.+2      	; 0xce2 <realizar_saque+0xbc>
     ce0:	a2 c0       	rjmp	.+324    	; 0xe26 <realizar_saque+0x200>
     ce2:	10 16       	cp	r1, r16
     ce4:	11 06       	cpc	r1, r17
     ce6:	0c f0       	brlt	.+2      	; 0xcea <realizar_saque+0xc4>
     ce8:	9e c0       	rjmp	.+316    	; 0xe26 <realizar_saque+0x200>
			valor_saque[pos] = '\0';
     cea:	e1 e0       	ldi	r30, 0x01	; 1
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	ec 0f       	add	r30, r28
     cf0:	fd 1f       	adc	r31, r29
     cf2:	e0 0f       	add	r30, r16
     cf4:	f1 1f       	adc	r31, r17
     cf6:	10 82       	st	Z, r1

			// Verifica bloqueio antes de enviar a mensagem
			if (isBlocked()) {
     cf8:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     cfc:	88 23       	and	r24, r24
     cfe:	99 f0       	breq	.+38     	; 0xd26 <realizar_saque+0x100>
				LCD_limpar();
     d00:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	52 e0       	ldi	r21, 0x02	; 2
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     d10:	4e e0       	ldi	r20, 0x0E	; 14
     d12:	52 e0       	ldi	r21, 0x02	; 2
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     d1c:	80 ed       	ldi	r24, 0xD0	; 208
     d1e:	97 e0       	ldi	r25, 0x07	; 7
     d20:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
				return;
     d24:	95 c0       	rjmp	.+298    	; 0xe50 <realizar_saque+0x22a>
			}
			
			long valor_numerico = atol(valor_saque);
     d26:	ce 01       	movw	r24, r28
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	0e 94 09 0c 	call	0x1812	; 0x1812 <atol>
			if (valor_numerico > 120000L) { // Limite de R$1200,00
     d2e:	61 3c       	cpi	r22, 0xC1	; 193
     d30:	74 4d       	sbci	r23, 0xD4	; 212
     d32:	81 40       	sbci	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	54 f1       	brlt	.+84     	; 0xd8c <realizar_saque+0x166>
				LCD_limpar();
     d38:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Limite máximo");
     d3c:	44 e9       	ldi	r20, 0x94	; 148
     d3e:	52 e0       	ldi	r21, 0x02	; 2
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "R$ 1200,00");
     d48:	42 ea       	ldi	r20, 0xA2	; 162
     d4a:	52 e0       	ldi	r21, 0x02	; 2
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     d54:	80 ed       	ldi	r24, 0xD0	; 208
     d56:	97 e0       	ldi	r25, 0x07	; 7
     d58:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
				
				LCD_limpar();
     d5c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Valor do saque:");
     d60:	41 e8       	ldi	r20, 0x81	; 129
     d62:	52 e0       	ldi	r21, 0x02	; 2
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "R$");
     d6c:	41 e9       	ldi	r20, 0x91	; 145
     d6e:	52 e0       	ldi	r21, 0x02	; 2
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				pos = 0;
				memset(valor_saque, 0, sizeof(valor_saque));
     d78:	fe 01       	movw	r30, r28
     d7a:	31 96       	adiw	r30, 0x01	; 1
     d7c:	87 e0       	ldi	r24, 0x07	; 7
     d7e:	df 01       	movw	r26, r30
     d80:	1d 92       	st	X+, r1
     d82:	8a 95       	dec	r24
     d84:	e9 f7       	brne	.-6      	; 0xd80 <realizar_saque+0x15a>
				delay1ms(2000);
				
				LCD_limpar();
				LCD_Escrever_Linha(0, 0, "Valor do saque:");
				LCD_Escrever_Linha(1, 0, "R$");
				pos = 0;
     d86:	00 e0       	ldi	r16, 0x00	; 0
     d88:	10 e0       	ldi	r17, 0x00	; 0
				memset(valor_saque, 0, sizeof(valor_saque));
				continue;
     d8a:	70 cf       	rjmp	.-288    	; 0xc6c <realizar_saque+0x46>
			}
			
			// Confirmação de senha antes de prosseguir
			if(!confirmar_senha(get_current_password())) {
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <get_current_password>
     d90:	0e 94 b0 04 	call	0x960	; 0x960 <confirmar_senha>
     d94:	88 23       	and	r24, r24
     d96:	09 f4       	brne	.+2      	; 0xd9a <realizar_saque+0x174>
     d98:	5b c0       	rjmp	.+182    	; 0xe50 <realizar_saque+0x22a>
				break; // Sai se a senha não for confirmada
			}
			
			enviar_mensagem_saque(valor_saque);
     d9a:	ce 01       	movw	r24, r28
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	0e 94 af 05 	call	0xb5e	; 0xb5e <enviar_mensagem_saque>
			
			// Verifica bloqueio antes de receber resposta
			if (isBlocked()) {
     da2:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     da6:	88 23       	and	r24, r24
     da8:	99 f0       	breq	.+38     	; 0xdd0 <realizar_saque+0x1aa>
				LCD_limpar();
     daa:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	52 e0       	ldi	r21, 0x02	; 2
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     dba:	4e e0       	ldi	r20, 0x0E	; 14
     dbc:	52 e0       	ldi	r21, 0x02	; 2
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     dc6:	80 ed       	ldi	r24, 0xD0	; 208
     dc8:	97 e0       	ldi	r25, 0x07	; 7
     dca:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
				return;
     dce:	40 c0       	rjmp	.+128    	; 0xe50 <realizar_saque+0x22a>
			}
			
			char resposta = receber_resposta_servidor();
     dd0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <receber_resposta_servidor>
     dd4:	18 2f       	mov	r17, r24

			LCD_limpar();
     dd6:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			if(resposta == 'O') {
     dda:	1f 34       	cpi	r17, 0x4F	; 79
     ddc:	99 f4       	brne	.+38     	; 0xe04 <realizar_saque+0x1de>
				LCD_Escrever_Linha(0, 0, "Saque");
     dde:	4d ea       	ldi	r20, 0xAD	; 173
     de0:	51 e0       	ldi	r21, 0x01	; 1
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Realizado!");
     dea:	4d ea       	ldi	r20, 0xAD	; 173
     dec:	52 e0       	ldi	r21, 0x02	; 2
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				delay1ms(2000);
     df6:	80 ed       	ldi	r24, 0xD0	; 208
     df8:	97 e0       	ldi	r25, 0x07	; 7
     dfa:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
				perguntar_comprovante();
     dfe:	0e 94 70 05 	call	0xae0	; 0xae0 <perguntar_comprovante>
     e02:	0c c0       	rjmp	.+24     	; 0xe1c <realizar_saque+0x1f6>
				} else {
				LCD_Escrever_Linha(0, 0, "Saldo");
     e04:	42 ee       	ldi	r20, 0xE2	; 226
     e06:	51 e0       	ldi	r21, 0x01	; 1
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "insuficiente");
     e10:	48 eb       	ldi	r20, 0xB8	; 184
     e12:	52 e0       	ldi	r21, 0x02	; 2
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			}
			delay1ms(3000);
     e1c:	88 eb       	ldi	r24, 0xB8	; 184
     e1e:	9b e0       	ldi	r25, 0x0B	; 11
     e20:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
			break;
     e24:	15 c0       	rjmp	.+42     	; 0xe50 <realizar_saque+0x22a>
			} else if(tecla == '*') {
     e26:	8a 32       	cpi	r24, 0x2A	; 42
     e28:	09 f0       	breq	.+2      	; 0xe2c <realizar_saque+0x206>
     e2a:	20 cf       	rjmp	.-448    	; 0xc6c <realizar_saque+0x46>
			LCD_limpar();
     e2c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
     e30:	4f e3       	ldi	r20, 0x3F	; 63
     e32:	52 e0       	ldi	r21, 0x02	; 2
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
     e3c:	48 e4       	ldi	r20, 0x48	; 72
     e3e:	52 e0       	ldi	r21, 0x02	; 2
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     e48:	80 ed       	ldi	r24, 0xD0	; 208
     e4a:	97 e0       	ldi	r25, 0x07	; 7
     e4c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
			break;
		}
	}
}
     e50:	29 96       	adiw	r28, 0x09	; 9
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <consultar_saldo>:

	return 'E';
}

// Consulta saldo
void consultar_saldo(void) {
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	a9 97       	sbiw	r28, 0x29	; 41
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
	// Primeiro verifica a senha
	if(!confirmar_senha(get_current_password())) {
     e82:	0e 94 1f 02 	call	0x43e	; 0x43e <get_current_password>
     e86:	0e 94 b0 04 	call	0x960	; 0x960 <confirmar_senha>
     e8a:	81 11       	cpse	r24, r1
     e8c:	13 c0       	rjmp	.+38     	; 0xeb4 <consultar_saldo+0x4e>
		LCD_limpar();
     e8e:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Operacao");
     e92:	4f e3       	ldi	r20, 0x3F	; 63
     e94:	52 e0       	ldi	r21, 0x02	; 2
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "cancelada");
     e9e:	48 e4       	ldi	r20, 0x48	; 72
     ea0:	52 e0       	ldi	r21, 0x02	; 2
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(2000);
     eaa:	80 ed       	ldi	r24, 0xD0	; 208
     eac:	97 e0       	ldi	r25, 0x07	; 7
     eae:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
		return;
     eb2:	ee c0       	rjmp	.+476    	; 0x1090 <consultar_saldo+0x22a>
	}

	char mensagem[2] = { 'C', 'V' };
     eb4:	83 e4       	ldi	r24, 0x43	; 67
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	86 e5       	ldi	r24, 0x56	; 86
     eba:	8a 83       	std	Y+2, r24	; 0x02
	if (isBlocked()) {
     ebc:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     ec0:	88 23       	and	r24, r24
     ec2:	99 f0       	breq	.+38     	; 0xeea <consultar_saldo+0x84>
		LCD_limpar();
     ec4:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	52 e0       	ldi	r21, 0x02	; 2
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     ed4:	4e e0       	ldi	r20, 0x0E	; 14
     ed6:	52 e0       	ldi	r21, 0x02	; 2
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(2000);
     ee0:	80 ed       	ldi	r24, 0xD0	; 208
     ee2:	97 e0       	ldi	r25, 0x07	; 7
     ee4:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
		return;
     ee8:	d3 c0       	rjmp	.+422    	; 0x1090 <consultar_saldo+0x22a>
	}
	SerialEnviaChars(2, mensagem);
     eea:	be 01       	movw	r22, r28
     eec:	6f 5f       	subi	r22, 0xFF	; 255
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 df 08 	call	0x11be	; 0x11be <SerialEnviaChars>

	char resposta_header[3];
	if (isBlocked()) {
     ef8:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     efc:	88 23       	and	r24, r24
     efe:	99 f0       	breq	.+38     	; 0xf26 <consultar_saldo+0xc0>
		LCD_limpar();
     f00:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	52 e0       	ldi	r21, 0x02	; 2
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     f10:	4e e0       	ldi	r20, 0x0E	; 14
     f12:	52 e0       	ldi	r21, 0x02	; 2
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(2000);
     f1c:	80 ed       	ldi	r24, 0xD0	; 208
     f1e:	97 e0       	ldi	r25, 0x07	; 7
     f20:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
		return;
     f24:	b5 c0       	rjmp	.+362    	; 0x1090 <consultar_saldo+0x22a>
	}
	SerialRecebeChars(3, resposta_header);
     f26:	be 01       	movw	r22, r28
     f28:	6d 5f       	subi	r22, 0xFD	; 253
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <SerialRecebeChars>
	resposta_header[3] = '\0';
     f34:	1e 82       	std	Y+6, r1	; 0x06

	if (resposta_header[0] == 'S' && resposta_header[1] == 'V') {
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	83 35       	cpi	r24, 0x53	; 83
     f3a:	09 f0       	breq	.+2      	; 0xf3e <consultar_saldo+0xd8>
     f3c:	97 c0       	rjmp	.+302    	; 0x106c <consultar_saldo+0x206>
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	86 35       	cpi	r24, 0x56	; 86
     f42:	09 f0       	breq	.+2      	; 0xf46 <consultar_saldo+0xe0>
     f44:	93 c0       	rjmp	.+294    	; 0x106c <consultar_saldo+0x206>
		unsigned char num_bytes_saldo = resposta_header[2];
     f46:	0d 81       	ldd	r16, Y+5	; 0x05

		char saldo_bruto[16];
		memset(saldo_bruto, 0, sizeof(saldo_bruto));
     f48:	fe 01       	movw	r30, r28
     f4a:	7a 96       	adiw	r30, 0x1a	; 26
     f4c:	80 e1       	ldi	r24, 0x10	; 16
     f4e:	df 01       	movw	r26, r30
     f50:	1d 92       	st	X+, r1
     f52:	8a 95       	dec	r24
     f54:	e9 f7       	brne	.-6      	; 0xf50 <consultar_saldo+0xea>

		if (num_bytes_saldo >= sizeof(saldo_bruto)) {
     f56:	00 31       	cpi	r16, 0x10	; 16
     f58:	08 f0       	brcs	.+2      	; 0xf5c <consultar_saldo+0xf6>
			num_bytes_saldo = sizeof(saldo_bruto) - 1;
     f5a:	0f e0       	ldi	r16, 0x0F	; 15
		}

		if (isBlocked()) {
     f5c:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
     f60:	88 23       	and	r24, r24
     f62:	99 f0       	breq	.+38     	; 0xf8a <consultar_saldo+0x124>
			LCD_limpar();
     f64:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "OP CANCELADA");
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	52 e0       	ldi	r21, 0x02	; 2
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "SISTEMA BLOQ.");
     f74:	4e e0       	ldi	r20, 0x0E	; 14
     f76:	52 e0       	ldi	r21, 0x02	; 2
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
			delay1ms(2000);
     f80:	80 ed       	ldi	r24, 0xD0	; 208
     f82:	97 e0       	ldi	r25, 0x07	; 7
     f84:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
     f88:	83 c0       	rjmp	.+262    	; 0x1090 <consultar_saldo+0x22a>
			return;
		}
		SerialRecebeChars(num_bytes_saldo, saldo_bruto);
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	7e 01       	movw	r14, r28
     f8e:	ba e1       	ldi	r27, 0x1A	; 26
     f90:	eb 0e       	add	r14, r27
     f92:	f1 1c       	adc	r15, r1
     f94:	b7 01       	movw	r22, r14
     f96:	c8 01       	movw	r24, r16
     f98:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <SerialRecebeChars>
		saldo_bruto[num_bytes_saldo] = '\0';
     f9c:	f7 01       	movw	r30, r14
     f9e:	e0 0f       	add	r30, r16
     fa0:	f1 1f       	adc	r31, r17
     fa2:	10 82       	st	Z, r1

		char saldo_formatado[20];
		int len_bruto = strlen(saldo_bruto);
     fa4:	f7 01       	movw	r30, r14
     fa6:	01 90       	ld	r0, Z+
     fa8:	00 20       	and	r0, r0
     faa:	e9 f7       	brne	.-6      	; 0xfa6 <consultar_saldo+0x140>
     fac:	31 97       	sbiw	r30, 0x01	; 1
     fae:	ee 19       	sub	r30, r14
     fb0:	ff 09       	sbc	r31, r15
		if (len_bruto >= 2) {
     fb2:	e2 30       	cpi	r30, 0x02	; 2
     fb4:	f1 05       	cpc	r31, r1
     fb6:	44 f1       	brlt	.+80     	; 0x1008 <consultar_saldo+0x1a2>
			strcpy(saldo_formatado, "R$");
     fb8:	7e 01       	movw	r14, r28
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	e8 0e       	add	r14, r24
     fbe:	f1 1c       	adc	r15, r1
     fc0:	82 e5       	ldi	r24, 0x52	; 82
     fc2:	94 e2       	ldi	r25, 0x24	; 36
     fc4:	9f 83       	std	Y+7, r25	; 0x07
     fc6:	8e 83       	std	Y+6, r24	; 0x06
     fc8:	d7 01       	movw	r26, r14
     fca:	12 96       	adiw	r26, 0x02	; 2
     fcc:	1c 92       	st	X, r1
			strncat(saldo_formatado, saldo_bruto, len_bruto - 2);
     fce:	8f 01       	movw	r16, r30
     fd0:	02 50       	subi	r16, 0x02	; 2
     fd2:	11 09       	sbc	r17, r1
     fd4:	a8 01       	movw	r20, r16
     fd6:	be 01       	movw	r22, r28
     fd8:	66 5e       	subi	r22, 0xE6	; 230
     fda:	7f 4f       	sbci	r23, 0xFF	; 255
     fdc:	c7 01       	movw	r24, r14
     fde:	0e 94 44 0c 	call	0x1888	; 0x1888 <strncat>
			strcat(saldo_formatado, ".");
     fe2:	f7 01       	movw	r30, r14
     fe4:	01 90       	ld	r0, Z+
     fe6:	00 20       	and	r0, r0
     fe8:	e9 f7       	brne	.-6      	; 0xfe4 <consultar_saldo+0x17e>
     fea:	31 97       	sbiw	r30, 0x01	; 1
     fec:	8e e2       	ldi	r24, 0x2E	; 46
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24
			strcat(saldo_formatado, &saldo_bruto[len_bruto - 2]);
     ff4:	6a e1       	ldi	r22, 0x1A	; 26
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	6c 0f       	add	r22, r28
     ffa:	7d 1f       	adc	r23, r29
     ffc:	60 0f       	add	r22, r16
     ffe:	71 1f       	adc	r23, r17
    1000:	c7 01       	movw	r24, r14
    1002:	0e 94 30 0c 	call	0x1860	; 0x1860 <strcat>
    1006:	1c c0       	rjmp	.+56     	; 0x1040 <consultar_saldo+0x1da>
			} else if (len_bruto == 1) {
    1008:	31 97       	sbiw	r30, 0x01	; 1
    100a:	89 f4       	brne	.+34     	; 0x102e <consultar_saldo+0x1c8>
			strcpy(saldo_formatado, "R$0.0");
    100c:	86 e0       	ldi	r24, 0x06	; 6
    100e:	e5 ec       	ldi	r30, 0xC5	; 197
    1010:	f2 e0       	ldi	r31, 0x02	; 2
    1012:	de 01       	movw	r26, r28
    1014:	16 96       	adiw	r26, 0x06	; 6
    1016:	01 90       	ld	r0, Z+
    1018:	0d 92       	st	X+, r0
    101a:	8a 95       	dec	r24
    101c:	e1 f7       	brne	.-8      	; 0x1016 <consultar_saldo+0x1b0>
			strcat(saldo_formatado, saldo_bruto);
    101e:	be 01       	movw	r22, r28
    1020:	66 5e       	subi	r22, 0xE6	; 230
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	ce 01       	movw	r24, r28
    1026:	06 96       	adiw	r24, 0x06	; 6
    1028:	0e 94 30 0c 	call	0x1860	; 0x1860 <strcat>
    102c:	09 c0       	rjmp	.+18     	; 0x1040 <consultar_saldo+0x1da>
			} else {
			strcpy(saldo_formatado, "R$0.00");
    102e:	87 e0       	ldi	r24, 0x07	; 7
    1030:	eb ec       	ldi	r30, 0xCB	; 203
    1032:	f2 e0       	ldi	r31, 0x02	; 2
    1034:	de 01       	movw	r26, r28
    1036:	16 96       	adiw	r26, 0x06	; 6
    1038:	01 90       	ld	r0, Z+
    103a:	0d 92       	st	X+, r0
    103c:	8a 95       	dec	r24
    103e:	e1 f7       	brne	.-8      	; 0x1038 <consultar_saldo+0x1d2>
		}

		LCD_limpar();
    1040:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Saldo atual:");
    1044:	42 ed       	ldi	r20, 0xD2	; 210
    1046:	52 e0       	ldi	r21, 0x02	; 2
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, saldo_formatado);
    1050:	ae 01       	movw	r20, r28
    1052:	4a 5f       	subi	r20, 0xFA	; 250
    1054:	5f 4f       	sbci	r21, 0xFF	; 255
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(3000);
    105e:	88 eb       	ldi	r24, 0xB8	; 184
    1060:	9b e0       	ldi	r25, 0x0B	; 11
    1062:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
		
		perguntar_comprovante();
    1066:	0e 94 70 05 	call	0xae0	; 0xae0 <perguntar_comprovante>
		return;
	}
	SerialRecebeChars(3, resposta_header);
	resposta_header[3] = '\0';

	if (resposta_header[0] == 'S' && resposta_header[1] == 'V') {
    106a:	12 c0       	rjmp	.+36     	; 0x1090 <consultar_saldo+0x22a>
		LCD_Escrever_Linha(1, 0, saldo_formatado);
		delay1ms(3000);
		
		perguntar_comprovante();
		} else {
		LCD_limpar();
    106c:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "Erro ao obter");
    1070:	4f ed       	ldi	r20, 0xDF	; 223
    1072:	52 e0       	ldi	r21, 0x02	; 2
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "saldo!");
    107c:	4d ee       	ldi	r20, 0xED	; 237
    107e:	52 e0       	ldi	r21, 0x02	; 2
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(3000);
    1088:	88 eb       	ldi	r24, 0xB8	; 184
    108a:	9b e0       	ldi	r25, 0x0B	; 11
    108c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
	}
}
    1090:	a9 96       	adiw	r28, 0x29	; 41
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	08 95       	ret

000010aa <finalizar_sessao>:

// Finaliza a sessão
void finalizar_sessao(void) {
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <finalizar_sessao+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <finalizar_sessao+0x8>
    10b2:	1f 92       	push	r1
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
	char mensagem[2] = {'C', 'F'};
    10b8:	83 e4       	ldi	r24, 0x43	; 67
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	86 e4       	ldi	r24, 0x46	; 70
    10be:	8a 83       	std	Y+2, r24	; 0x02
	if (isBlocked()) {
    10c0:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
    10c4:	88 23       	and	r24, r24
    10c6:	99 f0       	breq	.+38     	; 0x10ee <finalizar_sessao+0x44>
		LCD_limpar();
    10c8:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
    10cc:	44 ef       	ldi	r20, 0xF4	; 244
    10ce:	52 e0       	ldi	r21, 0x02	; 2
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
    10d8:	4f ef       	ldi	r20, 0xFF	; 255
    10da:	52 e0       	ldi	r21, 0x02	; 2
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(2000);
    10e4:	80 ed       	ldi	r24, 0xD0	; 208
    10e6:	97 e0       	ldi	r25, 0x07	; 7
    10e8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
		return;
    10ec:	4b c0       	rjmp	.+150    	; 0x1184 <finalizar_sessao+0xda>
	}
	SerialEnviaChars(2, mensagem);
    10ee:	be 01       	movw	r22, r28
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 df 08 	call	0x11be	; 0x11be <SerialEnviaChars>

	char resposta[3];
	if (isBlocked()) {
    10fc:	0e 94 ca 08 	call	0x1194	; 0x1194 <isBlocked>
    1100:	88 23       	and	r24, r24
    1102:	99 f0       	breq	.+38     	; 0x112a <finalizar_sessao+0x80>
		LCD_limpar();
    1104:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
		LCD_Escrever_Linha(0, 0, "SESSAO NAO");
    1108:	44 ef       	ldi	r20, 0xF4	; 244
    110a:	52 e0       	ldi	r21, 0x02	; 2
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "FINALIZADA!");
    1114:	4f ef       	ldi	r20, 0xFF	; 255
    1116:	52 e0       	ldi	r21, 0x02	; 2
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		delay1ms(2000);
    1120:	80 ed       	ldi	r24, 0xD0	; 208
    1122:	97 e0       	ldi	r25, 0x07	; 7
    1124:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
		return;
    1128:	2d c0       	rjmp	.+90     	; 0x1184 <finalizar_sessao+0xda>
	}
	SerialRecebeChars(2, resposta);
    112a:	be 01       	movw	r22, r28
    112c:	6d 5f       	subi	r22, 0xFD	; 253
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <SerialRecebeChars>
	resposta[2] = '\0';
    1138:	1d 82       	std	Y+5, r1	; 0x05

	LCD_limpar();
    113a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_limpar>
	//LCD_Escrever_Linha(0, 0, resposta);
	//delay1ms(2000);
	
	if (resposta[0] == 'S' && resposta[1] == 'F') {
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	83 35       	cpi	r24, 0x53	; 83
    1142:	81 f4       	brne	.+32     	; 0x1164 <finalizar_sessao+0xba>
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	86 34       	cpi	r24, 0x46	; 70
    1148:	69 f4       	brne	.+26     	; 0x1164 <finalizar_sessao+0xba>
		LCD_Escrever_Linha(0, 0, "Sessao");
    114a:	4b e0       	ldi	r20, 0x0B	; 11
    114c:	53 e0       	ldi	r21, 0x03	; 3
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "Finalizada!");
    1156:	42 e1       	ldi	r20, 0x12	; 18
    1158:	53 e0       	ldi	r21, 0x03	; 3
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
    1162:	0c c0       	rjmp	.+24     	; 0x117c <finalizar_sessao+0xd2>
		} else {
		LCD_Escrever_Linha(0, 0, "Erro ao finalizar");
    1164:	4e e1       	ldi	r20, 0x1E	; 30
    1166:	53 e0       	ldi	r21, 0x03	; 3
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
		LCD_Escrever_Linha(1, 0, "sessao!");
    1170:	40 e3       	ldi	r20, 0x30	; 48
    1172:	53 e0       	ldi	r21, 0x03	; 3
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_Escrever_Linha>
	}
	delay1ms(2000);
    117c:	80 ed       	ldi	r24, 0xD0	; 208
    117e:	97 e0       	ldi	r25, 0x07	; 7
    1180:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <isBlocked>:
	if (uart_head >= uart_tail) {
		return uart_head - uart_tail;
		} else {
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}
    1194:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <blocked>
    1198:	08 95       	ret

0000119a <setBlocked>:
    119a:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <blocked>
    119e:	08 95       	ret

000011a0 <initUART>:
    11a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    11a4:	83 e3       	ldi	r24, 0x33	; 51
    11a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    11aa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    11ae:	88 e9       	ldi	r24, 0x98	; 152
    11b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    11b4:	86 e0       	ldi	r24, 0x06	; 6
    11b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    11ba:	78 94       	sei
    11bc:	08 95       	ret

000011be <SerialEnviaChars>:
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	8c 01       	movw	r16, r24
    11cc:	7b 01       	movw	r14, r22
    11ce:	c0 e0       	ldi	r28, 0x00	; 0
    11d0:	d0 e0       	ldi	r29, 0x00	; 0
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <SerialEnviaChars+0x34>
    11d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    11d8:	85 ff       	sbrs	r24, 5
    11da:	fc cf       	rjmp	.-8      	; 0x11d4 <SerialEnviaChars+0x16>
    11dc:	f7 01       	movw	r30, r14
    11de:	ec 0f       	add	r30, r28
    11e0:	fd 1f       	adc	r31, r29
    11e2:	80 81       	ld	r24, Z
    11e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    11e8:	84 e1       	ldi	r24, 0x14	; 20
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
    11f0:	21 96       	adiw	r28, 0x01	; 1
    11f2:	c0 17       	cp	r28, r16
    11f4:	d1 07       	cpc	r29, r17
    11f6:	74 f3       	brlt	.-36     	; 0x11d4 <SerialEnviaChars+0x16>
    11f8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    11fc:	86 ff       	sbrs	r24, 6
    11fe:	fc cf       	rjmp	.-8      	; 0x11f8 <SerialEnviaChars+0x3a>
    1200:	e0 ec       	ldi	r30, 0xC0	; 192
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	80 64       	ori	r24, 0x40	; 64
    1208:	80 83       	st	Z, r24
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	08 95       	ret

00001218 <__vector_18>:
    1218:	1f 92       	push	r1
    121a:	0f 92       	push	r0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	0f 92       	push	r0
    1220:	11 24       	eor	r1, r1
    1222:	2f 93       	push	r18
    1224:	3f 93       	push	r19
    1226:	4f 93       	push	r20
    1228:	5f 93       	push	r21
    122a:	6f 93       	push	r22
    122c:	7f 93       	push	r23
    122e:	8f 93       	push	r24
    1230:	9f 93       	push	r25
    1232:	af 93       	push	r26
    1234:	bf 93       	push	r27
    1236:	ef 93       	push	r30
    1238:	ff 93       	push	r31
    123a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    123e:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <sh_bytes_count>
    1242:	9f ef       	ldi	r25, 0xFF	; 255
    1244:	9e 0f       	add	r25, r30
    1246:	95 30       	cpi	r25, 0x05	; 5
    1248:	08 f5       	brcc	.+66     	; 0x128c <__vector_18+0x74>
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	9e 0f       	add	r25, r30
    124e:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <sh_bytes_count>
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	e7 5b       	subi	r30, 0xB7	; 183
    1256:	fc 4f       	sbci	r31, 0xFC	; 252
    1258:	80 83       	st	Z, r24
    125a:	96 30       	cpi	r25, 0x06	; 6
    125c:	09 f0       	breq	.+2      	; 0x1260 <__vector_18+0x48>
    125e:	05 c1       	rjmp	.+522    	; 0x146a <__vector_18+0x252>
    1260:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <sh_command_bytes_received+0x4>
    1264:	98 50       	subi	r25, 0x08	; 8
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	9c 30       	cpi	r25, 0x0C	; 12
    126a:	08 f4       	brcc	.+2      	; 0x126e <__vector_18+0x56>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	0e 94 cd 08 	call	0x119a	; 0x119a <setBlocked>
    1272:	e4 e5       	ldi	r30, 0x54	; 84
    1274:	f3 e0       	ldi	r31, 0x03	; 3
    1276:	83 e4       	ldi	r24, 0x43	; 67
    1278:	80 83       	st	Z, r24
    127a:	88 e4       	ldi	r24, 0x48	; 72
    127c:	81 83       	std	Z+1, r24	; 0x01
    127e:	12 82       	std	Z+2, r1	; 0x02
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <serial_response_pending>
    1286:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <sh_bytes_count>
    128a:	ef c0       	rjmp	.+478    	; 0x146a <__vector_18+0x252>
    128c:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <waiting_for_second_byte>
    1290:	99 23       	and	r25, r25
    1292:	09 f4       	brne	.+2      	; 0x1296 <__vector_18+0x7e>
    1294:	c0 c0       	rjmp	.+384    	; 0x1416 <__vector_18+0x1fe>
    1296:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <first_byte_of_potential_command>
    129a:	93 35       	cpi	r25, 0x53	; 83
    129c:	09 f0       	breq	.+2      	; 0x12a0 <__vector_18+0x88>
    129e:	72 c0       	rjmp	.+228    	; 0x1384 <__vector_18+0x16c>
    12a0:	84 35       	cpi	r24, 0x54	; 84
    12a2:	71 f4       	brne	.+28     	; 0x12c0 <__vector_18+0xa8>
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	0e 94 cd 08 	call	0x119a	; 0x119a <setBlocked>
    12aa:	e4 e5       	ldi	r30, 0x54	; 84
    12ac:	f3 e0       	ldi	r31, 0x03	; 3
    12ae:	83 e4       	ldi	r24, 0x43	; 67
    12b0:	80 83       	st	Z, r24
    12b2:	84 e5       	ldi	r24, 0x54	; 84
    12b4:	81 83       	std	Z+1, r24	; 0x01
    12b6:	12 82       	std	Z+2, r1	; 0x02
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <serial_response_pending>
    12be:	a6 c0       	rjmp	.+332    	; 0x140c <__vector_18+0x1f4>
    12c0:	8c 34       	cpi	r24, 0x4C	; 76
    12c2:	71 f4       	brne	.+28     	; 0x12e0 <__vector_18+0xc8>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	0e 94 cd 08 	call	0x119a	; 0x119a <setBlocked>
    12ca:	e4 e5       	ldi	r30, 0x54	; 84
    12cc:	f3 e0       	ldi	r31, 0x03	; 3
    12ce:	83 e4       	ldi	r24, 0x43	; 67
    12d0:	80 83       	st	Z, r24
    12d2:	8c e4       	ldi	r24, 0x4C	; 76
    12d4:	81 83       	std	Z+1, r24	; 0x01
    12d6:	12 82       	std	Z+2, r1	; 0x02
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <serial_response_pending>
    12de:	96 c0       	rjmp	.+300    	; 0x140c <__vector_18+0x1f4>
    12e0:	88 34       	cpi	r24, 0x48	; 72
    12e2:	51 f4       	brne	.+20     	; 0x12f8 <__vector_18+0xe0>
    12e4:	e9 e4       	ldi	r30, 0x49	; 73
    12e6:	f3 e0       	ldi	r31, 0x03	; 3
    12e8:	83 e5       	ldi	r24, 0x53	; 83
    12ea:	80 83       	st	Z, r24
    12ec:	88 e4       	ldi	r24, 0x48	; 72
    12ee:	81 83       	std	Z+1, r24	; 0x01
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <sh_bytes_count>
    12f6:	8a c0       	rjmp	.+276    	; 0x140c <__vector_18+0x1f4>
    12f8:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <uart_head>
    12fc:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <uart_head+0x1>
    1300:	2f 5f       	subi	r18, 0xFF	; 255
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	2f 77       	andi	r18, 0x7F	; 127
    1306:	30 78       	andi	r19, 0x80	; 128
    1308:	33 23       	and	r19, r19
    130a:	34 f4       	brge	.+12     	; 0x1318 <__vector_18+0x100>
    130c:	21 50       	subi	r18, 0x01	; 1
    130e:	31 09       	sbc	r19, r1
    1310:	20 68       	ori	r18, 0x80	; 128
    1312:	3f 6f       	ori	r19, 0xFF	; 255
    1314:	2f 5f       	subi	r18, 0xFF	; 255
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	40 91 50 03 	lds	r20, 0x0350	; 0x800350 <uart_tail>
    131c:	50 91 51 03 	lds	r21, 0x0351	; 0x800351 <uart_tail+0x1>
    1320:	24 17       	cp	r18, r20
    1322:	35 07       	cpc	r19, r21
    1324:	59 f0       	breq	.+22     	; 0x133c <__vector_18+0x124>
    1326:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <uart_head>
    132a:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <uart_head+0x1>
    132e:	e9 5a       	subi	r30, 0xA9	; 169
    1330:	fc 4f       	sbci	r31, 0xFC	; 252
    1332:	90 83       	st	Z, r25
    1334:	30 93 53 03 	sts	0x0353, r19	; 0x800353 <uart_head+0x1>
    1338:	20 93 52 03 	sts	0x0352, r18	; 0x800352 <uart_head>
    133c:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <uart_head>
    1340:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <uart_head+0x1>
    1344:	2f 5f       	subi	r18, 0xFF	; 255
    1346:	3f 4f       	sbci	r19, 0xFF	; 255
    1348:	2f 77       	andi	r18, 0x7F	; 127
    134a:	30 78       	andi	r19, 0x80	; 128
    134c:	33 23       	and	r19, r19
    134e:	34 f4       	brge	.+12     	; 0x135c <__vector_18+0x144>
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	31 09       	sbc	r19, r1
    1354:	20 68       	ori	r18, 0x80	; 128
    1356:	3f 6f       	ori	r19, 0xFF	; 255
    1358:	2f 5f       	subi	r18, 0xFF	; 255
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	40 91 50 03 	lds	r20, 0x0350	; 0x800350 <uart_tail>
    1360:	50 91 51 03 	lds	r21, 0x0351	; 0x800351 <uart_tail+0x1>
    1364:	24 17       	cp	r18, r20
    1366:	35 07       	cpc	r19, r21
    1368:	09 f4       	brne	.+2      	; 0x136c <__vector_18+0x154>
    136a:	50 c0       	rjmp	.+160    	; 0x140c <__vector_18+0x1f4>
    136c:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <uart_head>
    1370:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <uart_head+0x1>
    1374:	e9 5a       	subi	r30, 0xA9	; 169
    1376:	fc 4f       	sbci	r31, 0xFC	; 252
    1378:	80 83       	st	Z, r24
    137a:	30 93 53 03 	sts	0x0353, r19	; 0x800353 <uart_head+0x1>
    137e:	20 93 52 03 	sts	0x0352, r18	; 0x800352 <uart_head>
    1382:	44 c0       	rjmp	.+136    	; 0x140c <__vector_18+0x1f4>
    1384:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <uart_head>
    1388:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <uart_head+0x1>
    138c:	2f 5f       	subi	r18, 0xFF	; 255
    138e:	3f 4f       	sbci	r19, 0xFF	; 255
    1390:	2f 77       	andi	r18, 0x7F	; 127
    1392:	30 78       	andi	r19, 0x80	; 128
    1394:	33 23       	and	r19, r19
    1396:	34 f4       	brge	.+12     	; 0x13a4 <__vector_18+0x18c>
    1398:	21 50       	subi	r18, 0x01	; 1
    139a:	31 09       	sbc	r19, r1
    139c:	20 68       	ori	r18, 0x80	; 128
    139e:	3f 6f       	ori	r19, 0xFF	; 255
    13a0:	2f 5f       	subi	r18, 0xFF	; 255
    13a2:	3f 4f       	sbci	r19, 0xFF	; 255
    13a4:	40 91 50 03 	lds	r20, 0x0350	; 0x800350 <uart_tail>
    13a8:	50 91 51 03 	lds	r21, 0x0351	; 0x800351 <uart_tail+0x1>
    13ac:	24 17       	cp	r18, r20
    13ae:	35 07       	cpc	r19, r21
    13b0:	59 f0       	breq	.+22     	; 0x13c8 <__vector_18+0x1b0>
    13b2:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <uart_head>
    13b6:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <uart_head+0x1>
    13ba:	e9 5a       	subi	r30, 0xA9	; 169
    13bc:	fc 4f       	sbci	r31, 0xFC	; 252
    13be:	90 83       	st	Z, r25
    13c0:	30 93 53 03 	sts	0x0353, r19	; 0x800353 <uart_head+0x1>
    13c4:	20 93 52 03 	sts	0x0352, r18	; 0x800352 <uart_head>
    13c8:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <uart_head>
    13cc:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <uart_head+0x1>
    13d0:	2f 5f       	subi	r18, 0xFF	; 255
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	2f 77       	andi	r18, 0x7F	; 127
    13d6:	30 78       	andi	r19, 0x80	; 128
    13d8:	33 23       	and	r19, r19
    13da:	34 f4       	brge	.+12     	; 0x13e8 <__vector_18+0x1d0>
    13dc:	21 50       	subi	r18, 0x01	; 1
    13de:	31 09       	sbc	r19, r1
    13e0:	20 68       	ori	r18, 0x80	; 128
    13e2:	3f 6f       	ori	r19, 0xFF	; 255
    13e4:	2f 5f       	subi	r18, 0xFF	; 255
    13e6:	3f 4f       	sbci	r19, 0xFF	; 255
    13e8:	40 91 50 03 	lds	r20, 0x0350	; 0x800350 <uart_tail>
    13ec:	50 91 51 03 	lds	r21, 0x0351	; 0x800351 <uart_tail+0x1>
    13f0:	24 17       	cp	r18, r20
    13f2:	35 07       	cpc	r19, r21
    13f4:	59 f0       	breq	.+22     	; 0x140c <__vector_18+0x1f4>
    13f6:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <uart_head>
    13fa:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <uart_head+0x1>
    13fe:	e9 5a       	subi	r30, 0xA9	; 169
    1400:	fc 4f       	sbci	r31, 0xFC	; 252
    1402:	80 83       	st	Z, r24
    1404:	30 93 53 03 	sts	0x0353, r19	; 0x800353 <uart_head+0x1>
    1408:	20 93 52 03 	sts	0x0352, r18	; 0x800352 <uart_head>
    140c:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <waiting_for_second_byte>
    1410:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <first_byte_of_potential_command>
    1414:	2a c0       	rjmp	.+84     	; 0x146a <__vector_18+0x252>
    1416:	83 35       	cpi	r24, 0x53	; 83
    1418:	31 f4       	brne	.+12     	; 0x1426 <__vector_18+0x20e>
    141a:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <first_byte_of_potential_command>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <waiting_for_second_byte>
    1424:	22 c0       	rjmp	.+68     	; 0x146a <__vector_18+0x252>
    1426:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <uart_head>
    142a:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <uart_head+0x1>
    142e:	2f 5f       	subi	r18, 0xFF	; 255
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	2f 77       	andi	r18, 0x7F	; 127
    1434:	30 78       	andi	r19, 0x80	; 128
    1436:	33 23       	and	r19, r19
    1438:	34 f4       	brge	.+12     	; 0x1446 <__vector_18+0x22e>
    143a:	21 50       	subi	r18, 0x01	; 1
    143c:	31 09       	sbc	r19, r1
    143e:	20 68       	ori	r18, 0x80	; 128
    1440:	3f 6f       	ori	r19, 0xFF	; 255
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	40 91 50 03 	lds	r20, 0x0350	; 0x800350 <uart_tail>
    144a:	50 91 51 03 	lds	r21, 0x0351	; 0x800351 <uart_tail+0x1>
    144e:	24 17       	cp	r18, r20
    1450:	35 07       	cpc	r19, r21
    1452:	59 f0       	breq	.+22     	; 0x146a <__vector_18+0x252>
    1454:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <uart_head>
    1458:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <uart_head+0x1>
    145c:	e9 5a       	subi	r30, 0xA9	; 169
    145e:	fc 4f       	sbci	r31, 0xFC	; 252
    1460:	80 83       	st	Z, r24
    1462:	30 93 53 03 	sts	0x0353, r19	; 0x800353 <uart_head+0x1>
    1466:	20 93 52 03 	sts	0x0352, r18	; 0x800352 <uart_head>
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti

0000148c <uart_buffer_empty>:
    148c:	40 91 52 03 	lds	r20, 0x0352	; 0x800352 <uart_head>
    1490:	50 91 53 03 	lds	r21, 0x0353	; 0x800353 <uart_head+0x1>
    1494:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <uart_tail>
    1498:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <uart_tail+0x1>
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	42 17       	cp	r20, r18
    14a0:	53 07       	cpc	r21, r19
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <uart_buffer_empty+0x1a>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	08 95       	ret

000014aa <uart_buffer_read_char>:

int uart_buffer_read_char(char *c) {
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) return 0;
    14b0:	0e 94 46 0a 	call	0x148c	; 0x148c <uart_buffer_empty>
    14b4:	89 2b       	or	r24, r25
    14b6:	e1 f4       	brne	.+56     	; 0x14f0 <uart_buffer_read_char+0x46>
	*c = uart_buffer[uart_tail];
    14b8:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <uart_tail>
    14bc:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <uart_tail+0x1>
    14c0:	e9 5a       	subi	r30, 0xA9	; 169
    14c2:	fc 4f       	sbci	r31, 0xFC	; 252
    14c4:	80 81       	ld	r24, Z
    14c6:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
    14c8:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <uart_tail>
    14cc:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <uart_tail+0x1>
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	8f 77       	andi	r24, 0x7F	; 127
    14d4:	90 78       	andi	r25, 0x80	; 128
    14d6:	99 23       	and	r25, r25
    14d8:	24 f4       	brge	.+8      	; 0x14e2 <uart_buffer_read_char+0x38>
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	80 68       	ori	r24, 0x80	; 128
    14de:	9f 6f       	ori	r25, 0xFF	; 255
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <uart_tail+0x1>
    14e6:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <uart_tail>
	return 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <uart_buffer_read_char+0x4a>
		return UART_BUFFER_SIZE - uart_tail + uart_head;
	}
}

int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) return 0;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <SerialRecebeChars>:

void SerialRecebeChars(int sizeS, char* string) {
    14fa:	af 92       	push	r10
    14fc:	bf 92       	push	r11
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	1f 92       	push	r1
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	6c 01       	movw	r12, r24
    1516:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
    1518:	e1 2c       	mov	r14, r1
    151a:	f1 2c       	mov	r15, r1
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}

void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100; // 1 segundo de timeout

	while (received < sizeS && timeout_count < timeout_limit) {
    1520:	20 c0       	rjmp	.+64     	; 0x1562 <SerialRecebeChars+0x68>
		char c;
		// Permite ao main loop enviar ACK mesmo com bloqueio
		if (serial_response_pending) {
    1522:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <serial_response_pending>
    1526:	88 23       	and	r24, r24
    1528:	29 f0       	breq	.+10     	; 0x1534 <SerialRecebeChars+0x3a>
			delay1ms(10); // Pequeno atraso para o main loop
    152a:	8a e0       	ldi	r24, 0x0A	; 10
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
    1532:	17 c0       	rjmp	.+46     	; 0x1562 <SerialRecebeChars+0x68>
			continue; // Tenta novamente
		}

		if (uart_buffer_read_char(&c)) {
    1534:	ce 01       	movw	r24, r28
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	0e 94 55 0a 	call	0x14aa	; 0x14aa <uart_buffer_read_char>
    153c:	89 2b       	or	r24, r25
    153e:	51 f0       	breq	.+20     	; 0x1554 <SerialRecebeChars+0x5a>
			string[received++] = c;
    1540:	f5 01       	movw	r30, r10
    1542:	e0 0f       	add	r30, r16
    1544:	f1 1f       	adc	r31, r17
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	0f 5f       	subi	r16, 0xFF	; 255
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0; // Reseta timeout
    154e:	e1 2c       	mov	r14, r1
    1550:	f1 2c       	mov	r15, r1
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <SerialRecebeChars+0x68>
			} else {
			delay1ms(10); // Espera por dados
    1554:	8a e0       	ldi	r24, 0x0A	; 10
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay1ms>
			timeout_count++;
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	e8 1a       	sub	r14, r24
    1560:	f8 0a       	sbc	r15, r24
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100; // 1 segundo de timeout

	while (received < sizeS && timeout_count < timeout_limit) {
    1562:	0c 15       	cp	r16, r12
    1564:	1d 05       	cpc	r17, r13
    1566:	24 f4       	brge	.+8      	; 0x1570 <SerialRecebeChars+0x76>
    1568:	84 e6       	ldi	r24, 0x64	; 100
    156a:	e8 16       	cp	r14, r24
    156c:	f1 04       	cpc	r15, r1
    156e:	cc f2       	brlt	.-78     	; 0x1522 <SerialRecebeChars+0x28>
			} else {
			delay1ms(10); // Espera por dados
			timeout_count++;
		}
	}
	string[received] = '\0'; // Termina a string
    1570:	f5 01       	movw	r30, r10
    1572:	e0 0f       	add	r30, r16
    1574:	f1 1f       	adc	r31, r17
    1576:	10 82       	st	Z, r1
}
    1578:	0f 90       	pop	r0
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	bf 90       	pop	r11
    158c:	af 90       	pop	r10
    158e:	08 95       	ret

00001590 <prepara_teclado>:
    1590:	84 b1       	in	r24, 0x04	; 4
    1592:	83 60       	ori	r24, 0x03	; 3
    1594:	84 b9       	out	0x04, r24	; 4
    1596:	8a b1       	in	r24, 0x0a	; 10
    1598:	80 6c       	ori	r24, 0xC0	; 192
    159a:	8a b9       	out	0x0a, r24	; 10
    159c:	8a b1       	in	r24, 0x0a	; 10
    159e:	83 7c       	andi	r24, 0xC3	; 195
    15a0:	8a b9       	out	0x0a, r24	; 10
    15a2:	8b b1       	in	r24, 0x0b	; 11
    15a4:	8c 63       	ori	r24, 0x3C	; 60
    15a6:	8b b9       	out	0x0b, r24	; 11
    15a8:	08 95       	ret

000015aa <atraso_debounce>:
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <atraso_debounce+0x6>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	1a 82       	std	Y+2, r1	; 0x02
    15b6:	19 82       	std	Y+1, r1	; 0x01
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <atraso_debounce+0x1a>
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	9a 83       	std	Y+2, r25	; 0x02
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	88 3e       	cpi	r24, 0xE8	; 232
    15ca:	93 40       	sbci	r25, 0x03	; 3
    15cc:	b0 f3       	brcs	.-20     	; 0x15ba <atraso_debounce+0x10>
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <debounce>:
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	18 2f       	mov	r17, r24
    15e0:	c0 e0       	ldi	r28, 0x00	; 0
    15e2:	d0 e0       	ldi	r29, 0x00	; 0
    15e4:	12 c0       	rjmp	.+36     	; 0x160a <debounce+0x32>
    15e6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <atraso_debounce>
    15ea:	29 b1       	in	r18, 0x09	; 9
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	01 2e       	mov	r0, r17
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <debounce+0x20>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <debounce+0x1c>
    15fc:	82 23       	and	r24, r18
    15fe:	d8 13       	cpse	r29, r24
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <debounce+0x2e>
    1602:	cf 5f       	subi	r28, 0xFF	; 255
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <debounce+0x30>
    1606:	c0 e0       	ldi	r28, 0x00	; 0
    1608:	d8 2f       	mov	r29, r24
    160a:	c7 30       	cpi	r28, 0x07	; 7
    160c:	61 f7       	brne	.-40     	; 0x15e6 <debounce+0xe>
    160e:	8d 2f       	mov	r24, r29
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	08 95       	ret

00001618 <varredura>:
    1618:	cf 93       	push	r28
    161a:	85 b1       	in	r24, 0x05	; 5
    161c:	83 60       	ori	r24, 0x03	; 3
    161e:	85 b9       	out	0x05, r24	; 5
    1620:	8b b1       	in	r24, 0x0b	; 11
    1622:	80 6c       	ori	r24, 0xC0	; 192
    1624:	8b b9       	out	0x0b, r24	; 11
    1626:	85 b1       	in	r24, 0x05	; 5
    1628:	8d 7f       	andi	r24, 0xFD	; 253
    162a:	85 b9       	out	0x05, r24	; 5
    162c:	85 e0       	ldi	r24, 0x05	; 5
    162e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    1632:	81 11       	cpse	r24, r1
    1634:	04 c0       	rjmp	.+8      	; 0x163e <varredura+0x26>
    1636:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    163a:	c1 e3       	ldi	r28, 0x31	; 49
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <varredura+0x28>
    163e:	c0 e0       	ldi	r28, 0x00	; 0
    1640:	84 e0       	ldi	r24, 0x04	; 4
    1642:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    1646:	81 11       	cpse	r24, r1
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <varredura+0x38>
    164a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    164e:	c2 e3       	ldi	r28, 0x32	; 50
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    1656:	81 11       	cpse	r24, r1
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <varredura+0x48>
    165a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    165e:	c3 e3       	ldi	r28, 0x33	; 51
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    1666:	81 11       	cpse	r24, r1
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <varredura+0x58>
    166a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    166e:	c1 e4       	ldi	r28, 0x41	; 65
    1670:	85 b1       	in	r24, 0x05	; 5
    1672:	82 60       	ori	r24, 0x02	; 2
    1674:	85 b9       	out	0x05, r24	; 5
    1676:	85 b1       	in	r24, 0x05	; 5
    1678:	8e 7f       	andi	r24, 0xFE	; 254
    167a:	85 b9       	out	0x05, r24	; 5
    167c:	85 e0       	ldi	r24, 0x05	; 5
    167e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    1682:	81 11       	cpse	r24, r1
    1684:	03 c0       	rjmp	.+6      	; 0x168c <varredura+0x74>
    1686:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    168a:	c4 e3       	ldi	r28, 0x34	; 52
    168c:	84 e0       	ldi	r24, 0x04	; 4
    168e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    1692:	81 11       	cpse	r24, r1
    1694:	03 c0       	rjmp	.+6      	; 0x169c <varredura+0x84>
    1696:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    169a:	c5 e3       	ldi	r28, 0x35	; 53
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    16a2:	81 11       	cpse	r24, r1
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <varredura+0x94>
    16a6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    16aa:	c6 e3       	ldi	r28, 0x36	; 54
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    16b2:	81 11       	cpse	r24, r1
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <varredura+0xa4>
    16b6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    16ba:	c2 e4       	ldi	r28, 0x42	; 66
    16bc:	85 b1       	in	r24, 0x05	; 5
    16be:	81 60       	ori	r24, 0x01	; 1
    16c0:	85 b9       	out	0x05, r24	; 5
    16c2:	8b b1       	in	r24, 0x0b	; 11
    16c4:	8f 77       	andi	r24, 0x7F	; 127
    16c6:	8b b9       	out	0x0b, r24	; 11
    16c8:	85 e0       	ldi	r24, 0x05	; 5
    16ca:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    16ce:	81 11       	cpse	r24, r1
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <varredura+0xc0>
    16d2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    16d6:	c7 e3       	ldi	r28, 0x37	; 55
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    16de:	81 11       	cpse	r24, r1
    16e0:	03 c0       	rjmp	.+6      	; 0x16e8 <varredura+0xd0>
    16e2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    16e6:	c8 e3       	ldi	r28, 0x38	; 56
    16e8:	83 e0       	ldi	r24, 0x03	; 3
    16ea:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    16ee:	81 11       	cpse	r24, r1
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <varredura+0xe0>
    16f2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    16f6:	c9 e3       	ldi	r28, 0x39	; 57
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    16fe:	81 11       	cpse	r24, r1
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <varredura+0xf0>
    1702:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1706:	c3 e4       	ldi	r28, 0x43	; 67
    1708:	8b b1       	in	r24, 0x0b	; 11
    170a:	80 68       	ori	r24, 0x80	; 128
    170c:	8b b9       	out	0x0b, r24	; 11
    170e:	8b b1       	in	r24, 0x0b	; 11
    1710:	8f 7b       	andi	r24, 0xBF	; 191
    1712:	8b b9       	out	0x0b, r24	; 11
    1714:	85 e0       	ldi	r24, 0x05	; 5
    1716:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    171a:	81 11       	cpse	r24, r1
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <varredura+0x10c>
    171e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1722:	ca e2       	ldi	r28, 0x2A	; 42
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    172a:	81 11       	cpse	r24, r1
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <varredura+0x11c>
    172e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1732:	c0 e3       	ldi	r28, 0x30	; 48
    1734:	83 e0       	ldi	r24, 0x03	; 3
    1736:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    173a:	81 11       	cpse	r24, r1
    173c:	03 c0       	rjmp	.+6      	; 0x1744 <varredura+0x12c>
    173e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1742:	c3 e2       	ldi	r28, 0x23	; 35
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <debounce>
    174a:	81 11       	cpse	r24, r1
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <varredura+0x13c>
    174e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <resetar_timeout>
    1752:	c4 e4       	ldi	r28, 0x44	; 68
    1754:	8b b1       	in	r24, 0x0b	; 11
    1756:	80 64       	ori	r24, 0x40	; 64
    1758:	8b b9       	out	0x0b, r24	; 11
    175a:	8c 2f       	mov	r24, r28
    175c:	cf 91       	pop	r28
    175e:	08 95       	ret

00001760 <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
    1760:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
    1762:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
    1764:	85 e0       	ldi	r24, 0x05	; 5
    1766:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    1768:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
    176c:	81 ef       	ldi	r24, 0xF1	; 241
    176e:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	08 c0       	rjmp	.+16     	; 0x1786 <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    1776:	a9 9b       	sbis	0x15, 1	; 21
    1778:	fe cf       	rjmp	.-4      	; 0x1776 <delay1ms+0x16>
		TCNT0 = 241;
    177a:	91 ef       	ldi	r25, 0xF1	; 241
    177c:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
    177e:	92 e0       	ldi	r25, 0x02	; 2
    1780:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
    1782:	2f 5f       	subi	r18, 0xFF	; 255
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	24 17       	cp	r18, r20
    1788:	35 07       	cpc	r19, r21
    178a:	ac f3       	brlt	.-22     	; 0x1776 <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    178c:	15 bc       	out	0x25, r1	; 37
    178e:	08 95       	ret

00001790 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
    1790:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
    1792:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
    1798:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
    179c:	85 ef       	ldi	r24, 0xF5	; 245
    179e:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	09 c0       	rjmp	.+18     	; 0x17b8 <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
    17a6:	a9 9b       	sbis	0x15, 1	; 21
    17a8:	fe cf       	rjmp	.-4      	; 0x17a6 <delay1us+0x16>
		TCNT0 = 245;
    17aa:	95 ef       	ldi	r25, 0xF5	; 245
    17ac:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
    17ae:	95 b3       	in	r25, 0x15	; 21
    17b0:	92 60       	ori	r25, 0x02	; 2
    17b2:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
    17b4:	2f 5f       	subi	r18, 0xFF	; 255
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	24 17       	cp	r18, r20
    17ba:	35 07       	cpc	r19, r21
    17bc:	a4 f3       	brlt	.-24     	; 0x17a6 <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
    17be:	15 bc       	out	0x25, r1	; 37
    17c0:	08 95       	ret

000017c2 <__udivmodsi4>:
    17c2:	a1 e2       	ldi	r26, 0x21	; 33
    17c4:	1a 2e       	mov	r1, r26
    17c6:	aa 1b       	sub	r26, r26
    17c8:	bb 1b       	sub	r27, r27
    17ca:	fd 01       	movw	r30, r26
    17cc:	0d c0       	rjmp	.+26     	; 0x17e8 <__udivmodsi4_ep>

000017ce <__udivmodsi4_loop>:
    17ce:	aa 1f       	adc	r26, r26
    17d0:	bb 1f       	adc	r27, r27
    17d2:	ee 1f       	adc	r30, r30
    17d4:	ff 1f       	adc	r31, r31
    17d6:	a2 17       	cp	r26, r18
    17d8:	b3 07       	cpc	r27, r19
    17da:	e4 07       	cpc	r30, r20
    17dc:	f5 07       	cpc	r31, r21
    17de:	20 f0       	brcs	.+8      	; 0x17e8 <__udivmodsi4_ep>
    17e0:	a2 1b       	sub	r26, r18
    17e2:	b3 0b       	sbc	r27, r19
    17e4:	e4 0b       	sbc	r30, r20
    17e6:	f5 0b       	sbc	r31, r21

000017e8 <__udivmodsi4_ep>:
    17e8:	66 1f       	adc	r22, r22
    17ea:	77 1f       	adc	r23, r23
    17ec:	88 1f       	adc	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	1a 94       	dec	r1
    17f2:	69 f7       	brne	.-38     	; 0x17ce <__udivmodsi4_loop>
    17f4:	60 95       	com	r22
    17f6:	70 95       	com	r23
    17f8:	80 95       	com	r24
    17fa:	90 95       	com	r25
    17fc:	9b 01       	movw	r18, r22
    17fe:	ac 01       	movw	r20, r24
    1800:	bd 01       	movw	r22, r26
    1802:	cf 01       	movw	r24, r30
    1804:	08 95       	ret

00001806 <__tablejump2__>:
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	05 90       	lpm	r0, Z+
    180c:	f4 91       	lpm	r31, Z
    180e:	e0 2d       	mov	r30, r0
    1810:	09 94       	ijmp

00001812 <atol>:
    1812:	1f 93       	push	r17
    1814:	fc 01       	movw	r30, r24
    1816:	99 27       	eor	r25, r25
    1818:	88 27       	eor	r24, r24
    181a:	bc 01       	movw	r22, r24
    181c:	e8 94       	clt
    181e:	11 91       	ld	r17, Z+
    1820:	10 32       	cpi	r17, 0x20	; 32
    1822:	e9 f3       	breq	.-6      	; 0x181e <atol+0xc>
    1824:	19 30       	cpi	r17, 0x09	; 9
    1826:	10 f0       	brcs	.+4      	; 0x182c <atol+0x1a>
    1828:	1e 30       	cpi	r17, 0x0E	; 14
    182a:	c8 f3       	brcs	.-14     	; 0x181e <atol+0xc>
    182c:	1b 32       	cpi	r17, 0x2B	; 43
    182e:	51 f0       	breq	.+20     	; 0x1844 <atol+0x32>
    1830:	1d 32       	cpi	r17, 0x2D	; 45
    1832:	49 f4       	brne	.+18     	; 0x1846 <atol+0x34>
    1834:	68 94       	set
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <atol+0x32>
    1838:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__mulsi_const_10>
    183c:	61 0f       	add	r22, r17
    183e:	71 1d       	adc	r23, r1
    1840:	81 1d       	adc	r24, r1
    1842:	91 1d       	adc	r25, r1
    1844:	11 91       	ld	r17, Z+
    1846:	10 53       	subi	r17, 0x30	; 48
    1848:	1a 30       	cpi	r17, 0x0A	; 10
    184a:	b0 f3       	brcs	.-20     	; 0x1838 <atol+0x26>
    184c:	3e f4       	brtc	.+14     	; 0x185c <atol+0x4a>
    184e:	90 95       	com	r25
    1850:	80 95       	com	r24
    1852:	70 95       	com	r23
    1854:	61 95       	neg	r22
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	8f 4f       	sbci	r24, 0xFF	; 255
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	1f 91       	pop	r17
    185e:	08 95       	ret

00001860 <strcat>:
    1860:	fb 01       	movw	r30, r22
    1862:	dc 01       	movw	r26, r24
    1864:	0d 90       	ld	r0, X+
    1866:	00 20       	and	r0, r0
    1868:	e9 f7       	brne	.-6      	; 0x1864 <strcat+0x4>
    186a:	11 97       	sbiw	r26, 0x01	; 1
    186c:	01 90       	ld	r0, Z+
    186e:	0d 92       	st	X+, r0
    1870:	00 20       	and	r0, r0
    1872:	e1 f7       	brne	.-8      	; 0x186c <strcat+0xc>
    1874:	08 95       	ret

00001876 <strcmp>:
    1876:	fb 01       	movw	r30, r22
    1878:	dc 01       	movw	r26, r24
    187a:	8d 91       	ld	r24, X+
    187c:	01 90       	ld	r0, Z+
    187e:	80 19       	sub	r24, r0
    1880:	01 10       	cpse	r0, r1
    1882:	d9 f3       	breq	.-10     	; 0x187a <strcmp+0x4>
    1884:	99 0b       	sbc	r25, r25
    1886:	08 95       	ret

00001888 <strncat>:
    1888:	fb 01       	movw	r30, r22
    188a:	dc 01       	movw	r26, r24
    188c:	0d 90       	ld	r0, X+
    188e:	00 20       	and	r0, r0
    1890:	e9 f7       	brne	.-6      	; 0x188c <strncat+0x4>
    1892:	11 97       	sbiw	r26, 0x01	; 1
    1894:	41 50       	subi	r20, 0x01	; 1
    1896:	50 40       	sbci	r21, 0x00	; 0
    1898:	28 f0       	brcs	.+10     	; 0x18a4 <strncat+0x1c>
    189a:	01 90       	ld	r0, Z+
    189c:	00 20       	and	r0, r0
    189e:	0d 92       	st	X+, r0
    18a0:	c9 f7       	brne	.-14     	; 0x1894 <strncat+0xc>
    18a2:	08 95       	ret
    18a4:	1c 92       	st	X, r1
    18a6:	08 95       	ret

000018a8 <strncpy>:
    18a8:	fb 01       	movw	r30, r22
    18aa:	dc 01       	movw	r26, r24
    18ac:	41 50       	subi	r20, 0x01	; 1
    18ae:	50 40       	sbci	r21, 0x00	; 0
    18b0:	48 f0       	brcs	.+18     	; 0x18c4 <strncpy+0x1c>
    18b2:	01 90       	ld	r0, Z+
    18b4:	0d 92       	st	X+, r0
    18b6:	00 20       	and	r0, r0
    18b8:	c9 f7       	brne	.-14     	; 0x18ac <strncpy+0x4>
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <strncpy+0x16>
    18bc:	1d 92       	st	X+, r1
    18be:	41 50       	subi	r20, 0x01	; 1
    18c0:	50 40       	sbci	r21, 0x00	; 0
    18c2:	e0 f7       	brcc	.-8      	; 0x18bc <strncpy+0x14>
    18c4:	08 95       	ret

000018c6 <strstr>:
    18c6:	fb 01       	movw	r30, r22
    18c8:	51 91       	ld	r21, Z+
    18ca:	55 23       	and	r21, r21
    18cc:	a9 f0       	breq	.+42     	; 0x18f8 <strstr+0x32>
    18ce:	bf 01       	movw	r22, r30
    18d0:	dc 01       	movw	r26, r24
    18d2:	4d 91       	ld	r20, X+
    18d4:	45 17       	cp	r20, r21
    18d6:	41 11       	cpse	r20, r1
    18d8:	e1 f7       	brne	.-8      	; 0x18d2 <strstr+0xc>
    18da:	59 f4       	brne	.+22     	; 0x18f2 <strstr+0x2c>
    18dc:	cd 01       	movw	r24, r26
    18de:	01 90       	ld	r0, Z+
    18e0:	00 20       	and	r0, r0
    18e2:	49 f0       	breq	.+18     	; 0x18f6 <strstr+0x30>
    18e4:	4d 91       	ld	r20, X+
    18e6:	40 15       	cp	r20, r0
    18e8:	41 11       	cpse	r20, r1
    18ea:	c9 f3       	breq	.-14     	; 0x18de <strstr+0x18>
    18ec:	fb 01       	movw	r30, r22
    18ee:	41 11       	cpse	r20, r1
    18f0:	ef cf       	rjmp	.-34     	; 0x18d0 <strstr+0xa>
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	08 95       	ret

000018fa <__mulsi_const_10>:
    18fa:	59 2f       	mov	r21, r25
    18fc:	48 2f       	mov	r20, r24
    18fe:	37 2f       	mov	r19, r23
    1900:	26 2f       	mov	r18, r22
    1902:	66 0f       	add	r22, r22
    1904:	77 1f       	adc	r23, r23
    1906:	88 1f       	adc	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	66 0f       	add	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	88 1f       	adc	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	62 0f       	add	r22, r18
    1914:	73 1f       	adc	r23, r19
    1916:	84 1f       	adc	r24, r20
    1918:	95 1f       	adc	r25, r21
    191a:	66 0f       	add	r22, r22
    191c:	77 1f       	adc	r23, r23
    191e:	88 1f       	adc	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	08 95       	ret

00001924 <_exit>:
    1924:	f8 94       	cli

00001926 <__stop_program>:
    1926:	ff cf       	rjmp	.-2      	; 0x1926 <__stop_program>
