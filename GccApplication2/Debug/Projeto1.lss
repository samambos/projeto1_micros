
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000190  00800100  00000eca  00000f5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800290  00800290  000010ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023bd  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec3  00000000  00000000  000036d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ae  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00005848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b7  00000000  00000000  00005d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012b4  00000000  00000000  000064bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000776f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 39       	cpi	r26, 0x90	; 144
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a0 e9       	ldi	r26, 0x90	; 144
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ba 02 	call	0x574	; 0x574 <main>
  9e:	0c 94 63 07 	jmp	0xec6	; 0xec6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mensagem_Inicial>:
#include "timers.h"
#include "LCD.h"
#include "teclado.h"
void mensagem_Inicial(){

		LCD_texto_correndo(0, " Banco UFRGS ", 300, 0);
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	4c e2       	ldi	r20, 0x2C	; 44
  aa:	68 e0       	ldi	r22, 0x08	; 8
  ac:	71 e0       	ldi	r23, 0x01	; 1
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_texto_correndo>
		LCD_Escrever_Linha(1, 0, "Digite cartao: ");
  b4:	46 e1       	ldi	r20, 0x16	; 22
  b6:	51 e0       	ldi	r21, 0x01	; 1
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
  c0:	08 95       	ret

000000c2 <LCD_cmd>:
#define RS PC5			//RS
#define EN PC4 			//E

// Função para comandos do LCD 
void LCD_cmd(unsigned char cmd)
{
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	portaLCD = (portaLCD & 0xF0) | (cmd >> 4); // Envia os 4 bits mais significativos 
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	9c 2f       	mov	r25, r28
  cc:	92 95       	swap	r25
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	89 2b       	or	r24, r25
  d2:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<RS); // Define RS como comando 
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	88 b9       	out	0x08, r24	; 8
	portaLCD |= (1<<EN); // Ativa EN
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	88 b9       	out	0x08, r24	; 8
	delay1us(100); // Atraso para o envio
  e6:	84 e6       	ldi	r24, 0x64	; 100
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 1a 07 	call	0xe34	; 0xe34 <delay1us>

	portaLCD = (portaLCD & 0xF0) | (cmd & 0x0F); // Envia os 4 bits menos significativos 
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	cf 70       	andi	r28, 0x0F	; 15
  f4:	c8 2b       	or	r28, r24
  f6:	c8 b9       	out	0x08, r28	; 8
	portaLCD |= (1<<EN); // Ativa EN 
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	88 b9       	out	0x08, r24	; 8
	portaLCD &= ~ (1<<EN); // Desativa EN
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	88 b9       	out	0x08, r24	; 8
	delay1ms(2); // Atraso para envio
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_iniciar>:

// Função chamada na main para inicialização do LCD
void LCD_iniciar(void)
{
	DDRC = 0xFF; // Configura como saída todos os pinos da PC
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 b9       	out	0x07, r24	; 7
	delay1ms(10);
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>
	LCD_cmd(0x02); // Retorna cursor
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x28); // Modo 4 bits, 2 linhas
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x0C); // Display ligado, cursor off
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x06); // Incremento automático
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x01); // Limpa display
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 13a:	08 95       	ret

0000013c <LCD_limpar>:
}

// Função para limpar display
void LCD_limpar(void)
{
	LCD_cmd(0x01); // Limpa display
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	LCD_cmd(0x80); // Posiciona no início
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 148:	08 95       	ret

0000014a <LCD_escrever>:
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	while(*texto) {
 150:	23 c0       	rjmp	.+70     	; 0x198 <LCD_escrever+0x4e>
		portaLCD = (portaLCD & 0xF0) | (*texto >> 4); // 4 bits mais significativos 
 152:	98 b1       	in	r25, 0x08	; 8
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	89 2b       	or	r24, r25
 15c:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<RS); // Modo dado
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	80 62       	ori	r24, 0x20	; 32
 162:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 164:	88 b1       	in	r24, 0x08	; 8
 166:	80 61       	ori	r24, 0x10	; 16
 168:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 16a:	88 b1       	in	r24, 0x08	; 8
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	88 b9       	out	0x08, r24	; 8
		delay1us(200);
 170:	88 ec       	ldi	r24, 0xC8	; 200
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 1a 07 	call	0xe34	; 0xe34 <delay1us>

		portaLCD = (portaLCD & 0xF0) | (*texto & 0x0F); // 4 bits menos significativos 
 178:	98 b1       	in	r25, 0x08	; 8
 17a:	89 91       	ld	r24, Y+
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	89 2b       	or	r24, r25
 182:	88 b9       	out	0x08, r24	; 8
		portaLCD |= (1<<EN); // Ativa EN 
 184:	88 b1       	in	r24, 0x08	; 8
 186:	80 61       	ori	r24, 0x10	; 16
 188:	88 b9       	out	0x08, r24	; 8
		portaLCD &= ~(1<<EN); // Desativa EN 
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	88 b9       	out	0x08, r24	; 8
		delay1ms(2);
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>
}

// Função para escrever, sem posicionamento das linhas 
void LCD_escrever(const char *texto)
{
	while(*texto) {
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	da cf       	rjmp	.-76     	; 0x152 <LCD_escrever+0x8>
		portaLCD |= (1<<EN); // Ativa EN 
		portaLCD &= ~(1<<EN); // Desativa EN 
		delay1ms(2);
		texto++;
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <LCD_Escrever_Linha>:

// Função para escrever, com posicionamento das linhas 
void LCD_Escrever_Linha (char linha, char pos,const char *texto)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ea 01       	movw	r28, r20
	// Verifica se a linha é 0 e a posição é válida 
	if (linha == 0 && pos < 16){
 1aa:	81 11       	cpse	r24, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <LCD_Escrever_Linha+0x1a>
 1ae:	60 31       	cpi	r22, 0x10	; 16
 1b0:	30 f4       	brcc	.+12     	; 0x1be <LCD_Escrever_Linha+0x1a>
		LCD_cmd((pos & 0x0F) | 0x80);  // Envia o comando para posicionar o cursor na primeira linha
 1b2:	86 2f       	mov	r24, r22
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
	}

	// Verifica se a linha é 1 e a posição é válida 
	else if (linha == 1 && pos < 16){
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
 1c2:	60 31       	cpi	r22, 0x10	; 16
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <LCD_Escrever_Linha+0x2c>
		LCD_cmd((pos & 0x0F) | 0xC0);  // Envia o comando para posicionar o cursor na segunda linha
 1c6:	86 2f       	mov	r24, r22
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	80 6c       	ori	r24, 0xC0	; 192
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
	}

	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_escrever>
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_cmd>
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <LCD_texto_correndo>:

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
 1e2:	6f 92       	push	r6
 1e4:	7f 92       	push	r7
 1e6:	8f 92       	push	r8
 1e8:	9f 92       	push	r9
 1ea:	af 92       	push	r10
 1ec:	bf 92       	push	r11
 1ee:	cf 92       	push	r12
 1f0:	df 92       	push	r13
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	61 97       	sbiw	r28, 0x11	; 17
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	78 2e       	mov	r7, r24
 210:	4a 01       	movw	r8, r20
 212:	62 2e       	mov	r6, r18
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 214:	cd b6       	in	r12, 0x3d	; 61
 216:	de b6       	in	r13, 0x3e	; 62
	LCD_escrever(texto);	// Chama a função para imprimir a string a partir da posição especificada
	LCD_cmd(0x80);		// Retorna cursor para posição inicial
}

// Função para fazer texto correr no display LCD
void LCD_texto_correndo(uint8_t linha, const char *texto, uint16_t velocidade_ms, uint8_t loop) {
 218:	ad b6       	in	r10, 0x3d	; 61
 21a:	be b6       	in	r11, 0x3e	; 62
    uint8_t tamanho = strlen(texto);
 21c:	fb 01       	movw	r30, r22
 21e:	01 90       	ld	r0, Z+
 220:	00 20       	and	r0, r0
 222:	e9 f7       	brne	.-6      	; 0x21e <LCD_texto_correndo+0x3c>
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	e6 1b       	sub	r30, r22
 228:	f7 0b       	sbc	r31, r23
 22a:	0e 2f       	mov	r16, r30
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
 22c:	e1 31       	cpi	r30, 0x11	; 17
 22e:	28 f4       	brcc	.+10     	; 0x23a <LCD_texto_correndo+0x58>
        LCD_Escrever_Linha(linha, 0, texto);
 230:	ab 01       	movw	r20, r22
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
        return;
 238:	42 c0       	rjmp	.+132    	; 0x2be <LCD_texto_correndo+0xdc>
    }
    
    // Adiciona espaços no final para melhor visualização
    char texto_extendido[tamanho + 17];
 23a:	ff 27       	eor	r31, r31
 23c:	71 96       	adiw	r30, 0x11	; 17
 23e:	8d b7       	in	r24, 0x3d	; 61
 240:	9e b7       	in	r25, 0x3e	; 62
 242:	8e 1b       	sub	r24, r30
 244:	9f 0b       	sbc	r25, r31
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	9e bf       	out	0x3e, r25	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	8d bf       	out	0x3d, r24	; 61
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	7c 01       	movw	r14, r24
    strcpy(texto_extendido, texto);
 254:	0e 94 33 07 	call	0xe66	; 0xe66 <strcpy>
    strcat(texto_extendido, "                "); // 16 espaços
 258:	d7 01       	movw	r26, r14
 25a:	0d 90       	ld	r0, X+
 25c:	00 20       	and	r0, r0
 25e:	e9 f7       	brne	.-6      	; 0x25a <LCD_texto_correndo+0x78>
 260:	11 97       	sbiw	r26, 0x01	; 1
 262:	81 e1       	ldi	r24, 0x11	; 17
 264:	e6 e2       	ldi	r30, 0x26	; 38
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	01 90       	ld	r0, Z+
 26a:	0d 92       	st	X+, r0
 26c:	8a 95       	dec	r24
 26e:	e1 f7       	brne	.-8      	; 0x268 <LCD_texto_correndo+0x86>
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	1b c0       	rjmp	.+54     	; 0x2aa <LCD_texto_correndo+0xc8>
            // Copia 16 caracteres começando na posição i
            strncpy(buffer, &texto_extendido[i], 16);
 274:	40 e1       	ldi	r20, 0x10	; 16
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	b7 01       	movw	r22, r14
 27a:	61 0f       	add	r22, r17
 27c:	71 1d       	adc	r23, r1
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	0e 94 3a 07 	call	0xe74	; 0xe74 <strncpy>
            buffer[16] = '\0';
 286:	19 8a       	std	Y+17, r1	; 0x11
            
            LCD_Escrever_Linha(linha, 0, buffer);
 288:	ae 01       	movw	r20, r28
 28a:	4f 5f       	subi	r20, 0xFF	; 255
 28c:	5f 4f       	sbci	r21, 0xFF	; 255
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	87 2d       	mov	r24, r7
 292:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
            delay1ms(velocidade_ms);
 296:	c4 01       	movw	r24, r8
 298:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
 29c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <varredura>
 2a0:	89 2b       	or	r24, r25
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <LCD_texto_correndo+0xc6>
 2a4:	66 20       	and	r6, r6
 2a6:	59 f0       	breq	.+22     	; 0x2be <LCD_texto_correndo+0xdc>
    char texto_extendido[tamanho + 17];
    strcpy(texto_extendido, texto);
    strcat(texto_extendido, "                "); // 16 espaços
    
    do {
        for(uint8_t i = 0; i <= tamanho; i++) {
 2a8:	1f 5f       	subi	r17, 0xFF	; 255
 2aa:	01 17       	cp	r16, r17
 2ac:	18 f7       	brcc	.-58     	; 0x274 <LCD_texto_correndo+0x92>
            delay1ms(velocidade_ms);
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 2ae:	61 10       	cpse	r6, r1
 2b0:	df cf       	rjmp	.-66     	; 0x270 <LCD_texto_correndo+0x8e>
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	be be       	out	0x3e, r11	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	ad be       	out	0x3d, r10	; 61
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <LCD_texto_correndo+0xe6>
    char buffer[17]; // Buffer para o display
    
    // Se o texto for menor que 16 caracteres, não precisa fazer scroll
    if(tamanho <= 16) {
        LCD_Escrever_Linha(linha, 0, texto);
        return;
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	be be       	out	0x3e, r11	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	ad be       	out	0x3d, r10	; 61
            
            // Verifica se alguma tecla foi pressionada para sair
            if(varredura() != 0 && !loop) return;
        }
    } while(loop);
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de be       	out	0x3e, r13	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd be       	out	0x3d, r12	; 61
 2d2:	61 96       	adiw	r28, 0x11	; 17
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	df 90       	pop	r13
 2ec:	cf 90       	pop	r12
 2ee:	bf 90       	pop	r11
 2f0:	af 90       	pop	r10
 2f2:	9f 90       	pop	r9
 2f4:	8f 90       	pop	r8
 2f6:	7f 90       	pop	r7
 2f8:	6f 90       	pop	r6
 2fa:	08 95       	ret

000002fc <aguardar_desbloqueio>:
} Estado;

Estado estado_atual = STANDBY;

void aguardar_desbloqueio() {
	LCD_limpar();
 2fc:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
 300:	47 e3       	ldi	r20, 0x37	; 55
 302:	51 e0       	ldi	r21, 0x01	; 1
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
 30c:	44 e4       	ldi	r20, 0x44	; 68
 30e:	51 e0       	ldi	r21, 0x01	; 1
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	while (isBlocked()) {
 318:	04 c0       	rjmp	.+8      	; 0x322 <aguardar_desbloqueio+0x26>
		delay1ms(10);
 31a:	8a e0       	ldi	r24, 0x0A	; 10
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>

void aguardar_desbloqueio() {
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "    FORA  DE");
	LCD_Escrever_Linha(1, 0, "    OPERACAO");
	while (isBlocked()) {
 322:	0e 94 b5 05 	call	0xb6a	; 0xb6a <isBlocked>
 326:	89 2b       	or	r24, r25
 328:	c1 f7       	brne	.-16     	; 0x31a <aguardar_desbloqueio+0x1e>
		delay1ms(10);
	}
	LCD_limpar();
 32a:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	mensagem_Inicial();
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <mensagem_Inicial>
 332:	08 95       	ret

00000334 <ler_codigo_aluno>:
}

int ler_codigo_aluno(char* codigo) {
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	00 d0       	rcall	.+0      	; 0x342 <ler_codigo_aluno+0xe>
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	7c 01       	movw	r14, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
 348:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
 34c:	41 e5       	ldi	r20, 0x51	; 81
 34e:	51 e0       	ldi	r21, 0x01	; 1
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
 358:	40 e6       	ldi	r20, 0x60	; 96
 35a:	51 e0       	ldi	r21, 0x01	; 1
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_limpar();
	mensagem_Inicial();
}

int ler_codigo_aluno(char* codigo) {
	int pos = 0;
 364:	00 e0       	ldi	r16, 0x00	; 0
 366:	10 e0       	ldi	r17, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 368:	22 c0       	rjmp	.+68     	; 0x3ae <ler_codigo_aluno+0x7a>
		if (isBlocked()) {
 36a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <isBlocked>
 36e:	89 2b       	or	r24, r25
 370:	29 f0       	breq	.+10     	; 0x37c <ler_codigo_aluno+0x48>
			aguardar_desbloqueio();
 372:	0e 94 7e 01 	call	0x2fc	; 0x2fc <aguardar_desbloqueio>
			return 0;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	20 c0       	rjmp	.+64     	; 0x3bc <ler_codigo_aluno+0x88>
		}
		tecla = varredura();
 37c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <varredura>
		if (tecla >= '0' && tecla <= '9') {
 380:	90 ed       	ldi	r25, 0xD0	; 208
 382:	98 0f       	add	r25, r24
 384:	9a 30       	cpi	r25, 0x0A	; 10
 386:	98 f4       	brcc	.+38     	; 0x3ae <ler_codigo_aluno+0x7a>
			codigo[pos] = tecla;
 388:	f7 01       	movw	r30, r14
 38a:	e0 0f       	add	r30, r16
 38c:	f1 1f       	adc	r31, r17
 38e:	80 83       	st	Z, r24
			char temp[2] = { tecla, '\0' };
 390:	89 83       	std	Y+1, r24	; 0x01
 392:	1a 82       	std	Y+2, r1	; 0x02
			LCD_Escrever_Linha(1, pos, temp);
 394:	ae 01       	movw	r20, r28
 396:	4f 5f       	subi	r20, 0xFF	; 255
 398:	5f 4f       	sbci	r21, 0xFF	; 255
 39a:	60 2f       	mov	r22, r16
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 3a2:	0f 5f       	subi	r16, 0xFF	; 255
 3a4:	1f 4f       	sbci	r17, 0xFF	; 255
			delay1ms(200);
 3a6:	88 ec       	ldi	r24, 0xC8	; 200
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite codigo:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 3ae:	06 30       	cpi	r16, 0x06	; 6
 3b0:	11 05       	cpc	r17, r1
 3b2:	dc f2       	brlt	.-74     	; 0x36a <ler_codigo_aluno+0x36>
			LCD_Escrever_Linha(1, pos, temp);
			pos++;
			delay1ms(200);
		}
	}
	codigo[6] = '\0';
 3b4:	f7 01       	movw	r30, r14
 3b6:	16 82       	std	Z+6, r1	; 0x06
	return 1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
}
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	08 95       	ret

000003ce <ler_senha>:

int ler_senha(char* senha) {
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	8c 01       	movw	r16, r24
	int pos = 0;
	char tecla;

	LCD_limpar();
 3d8:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Digite senha:");
 3dc:	47 e6       	ldi	r20, 0x67	; 103
 3de:	51 e0       	ldi	r21, 0x01	; 1
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "______");
 3e8:	40 e6       	ldi	r20, 0x60	; 96
 3ea:	51 e0       	ldi	r21, 0x01	; 1
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	codigo[6] = '\0';
	return 1;
}

int ler_senha(char* senha) {
	int pos = 0;
 3f4:	c0 e0       	ldi	r28, 0x00	; 0
 3f6:	d0 e0       	ldi	r29, 0x00	; 0

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 3f8:	1e c0       	rjmp	.+60     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		if (isBlocked()) {
 3fa:	0e 94 b5 05 	call	0xb6a	; 0xb6a <isBlocked>
 3fe:	89 2b       	or	r24, r25
 400:	29 f0       	breq	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			aguardar_desbloqueio();
 402:	0e 94 7e 01 	call	0x2fc	; 0x2fc <aguardar_desbloqueio>
			return 0;
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	1c c0       	rjmp	.+56     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		}
		tecla = varredura();
 40c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <varredura>
		if (tecla >= '0' && tecla <= '9') {
 410:	90 ed       	ldi	r25, 0xD0	; 208
 412:	98 0f       	add	r25, r24
 414:	9a 30       	cpi	r25, 0x0A	; 10
 416:	78 f4       	brcc	.+30     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			senha[pos] = tecla;
 418:	f8 01       	movw	r30, r16
 41a:	ec 0f       	add	r30, r28
 41c:	fd 1f       	adc	r31, r29
 41e:	80 83       	st	Z, r24
			LCD_Escrever_Linha(1, pos, "*");
 420:	45 e7       	ldi	r20, 0x75	; 117
 422:	51 e0       	ldi	r21, 0x01	; 1
 424:	6c 2f       	mov	r22, r28
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 42c:	21 96       	adiw	r28, 0x01	; 1
			delay1ms(200);
 42e:	88 ec       	ldi	r24, 0xC8	; 200
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>

	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Digite senha:");
	LCD_Escrever_Linha(1, 0, "______");

	while (pos < 6) {
 436:	c6 30       	cpi	r28, 0x06	; 6
 438:	d1 05       	cpc	r29, r1
 43a:	fc f2       	brlt	.-66     	; 0x3fa <ler_senha+0x2c>
			LCD_Escrever_Linha(1, pos, "*");
			pos++;
			delay1ms(200);
		}
	}
	senha[6] = '\0';
 43c:	f8 01       	movw	r30, r16
 43e:	16 82       	std	Z+6, r1	; 0x06
	return 1;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	08 95       	ret

0000044e <validar_codigo_aluno>:

int validar_codigo_aluno(const char* codigo, const char* senha) {
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
 456:	a1 97       	sbiw	r28, 0x21	; 33
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
 462:	dc 01       	movw	r26, r24
 464:	0d 90       	ld	r0, X+
 466:	00 20       	and	r0, r0
 468:	e9 f7       	brne	.-6      	; 0x464 <validar_codigo_aluno+0x16>
 46a:	11 97       	sbiw	r26, 0x01	; 1
 46c:	a8 1b       	sub	r26, r24
 46e:	b9 0b       	sbc	r27, r25
 470:	16 97       	sbiw	r26, 0x06	; 6
 472:	09 f0       	breq	.+2      	; 0x476 <validar_codigo_aluno+0x28>
 474:	53 c0       	rjmp	.+166    	; 0x51c <validar_codigo_aluno+0xce>
 476:	db 01       	movw	r26, r22
 478:	0d 90       	ld	r0, X+
 47a:	00 20       	and	r0, r0
 47c:	e9 f7       	brne	.-6      	; 0x478 <validar_codigo_aluno+0x2a>
 47e:	11 97       	sbiw	r26, 0x01	; 1
 480:	a6 1b       	sub	r26, r22
 482:	b7 0b       	sbc	r27, r23
 484:	16 97       	sbiw	r26, 0x06	; 6
 486:	09 f0       	breq	.+2      	; 0x48a <validar_codigo_aluno+0x3c>
 488:	4c c0       	rjmp	.+152    	; 0x522 <validar_codigo_aluno+0xd4>
 48a:	fc 01       	movw	r30, r24

	char mensagem[14];
	mensagem[0] = 'C';
 48c:	83 e4       	ldi	r24, 0x43	; 67
 48e:	89 83       	std	Y+1, r24	; 0x01
	mensagem[1] = 'E';
 490:	85 e4       	ldi	r24, 0x45	; 69
 492:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(&mensagem[2], codigo, 6);
 494:	86 e0       	ldi	r24, 0x06	; 6
 496:	de 01       	movw	r26, r28
 498:	13 96       	adiw	r26, 0x03	; 3
 49a:	01 90       	ld	r0, Z+
 49c:	0d 92       	st	X+, r0
 49e:	8a 95       	dec	r24
 4a0:	e1 f7       	brne	.-8      	; 0x49a <validar_codigo_aluno+0x4c>
	memcpy(&mensagem[8], senha, 6);
 4a2:	86 e0       	ldi	r24, 0x06	; 6
 4a4:	fb 01       	movw	r30, r22
 4a6:	de 01       	movw	r26, r28
 4a8:	19 96       	adiw	r26, 0x09	; 9
 4aa:	01 90       	ld	r0, Z+
 4ac:	0d 92       	st	X+, r0
 4ae:	8a 95       	dec	r24
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <validar_codigo_aluno+0x5c>
	SerialEnviaChars(14, mensagem);
 4b2:	be 01       	movw	r22, r28
 4b4:	6f 5f       	subi	r22, 0xFF	; 255
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255
 4b8:	8e e0       	ldi	r24, 0x0E	; 14
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 f5 04 	call	0x9ea	; 0x9ea <SerialEnviaChars>

	char resposta[19];
	SerialRecebeChars(18, resposta);
 4c0:	be 01       	movw	r22, r28
 4c2:	61 5f       	subi	r22, 0xF1	; 241
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	82 e1       	ldi	r24, 0x12	; 18
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 f6 05 	call	0xbec	; 0xbec <SerialRecebeChars>
	resposta[18] = '\0';
 4ce:	19 a2       	std	Y+33, r1	; 0x21

	LCD_limpar();
 4d0:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Resp Servidor:");
 4d4:	47 e7       	ldi	r20, 0x77	; 119
 4d6:	51 e0       	ldi	r21, 0x01	; 1
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, resposta);
 4e0:	ae 01       	movw	r20, r28
 4e2:	41 5f       	subi	r20, 0xF1	; 241
 4e4:	5f 4f       	sbci	r21, 0xFF	; 255
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	delay1ms(2000);
 4ee:	80 ed       	ldi	r24, 0xD0	; 208
 4f0:	97 e0       	ldi	r25, 0x07	; 7
 4f2:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>
	LCD_limpar();
 4f6:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
 4fa:	8f 85       	ldd	r24, Y+15	; 0x0f
 4fc:	83 35       	cpi	r24, 0x53	; 83
 4fe:	a1 f4       	brne	.+40     	; 0x528 <validar_codigo_aluno+0xda>
 500:	88 89       	ldd	r24, Y+16	; 0x10
 502:	85 34       	cpi	r24, 0x45	; 69
 504:	a1 f4       	brne	.+40     	; 0x52e <validar_codigo_aluno+0xe0>
		if (strstr(resposta, "Nao autorizado") != NULL) {
 506:	66 e8       	ldi	r22, 0x86	; 134
 508:	71 e0       	ldi	r23, 0x01	; 1
 50a:	ce 01       	movw	r24, r28
 50c:	0f 96       	adiw	r24, 0x0f	; 15
 50e:	0e 94 49 07 	call	0xe92	; 0xe92 <strstr>
 512:	89 2b       	or	r24, r25
 514:	79 f0       	breq	.+30     	; 0x534 <validar_codigo_aluno+0xe6>
			return 0;
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e c0       	rjmp	.+28     	; 0x538 <validar_codigo_aluno+0xea>
	senha[6] = '\0';
	return 1;
}

int validar_codigo_aluno(const char* codigo, const char* senha) {
	if (strlen(codigo) != 6 || strlen(senha) != 6) return 0;
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0b c0       	rjmp	.+22     	; 0x538 <validar_codigo_aluno+0xea>
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	08 c0       	rjmp	.+16     	; 0x538 <validar_codigo_aluno+0xea>
			return 0;
			} else {
			return 1;
		}
	}
	return 0;
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	05 c0       	rjmp	.+10     	; 0x538 <validar_codigo_aluno+0xea>
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <validar_codigo_aluno+0xea>

	if (resposta[0] == 'S' && resposta[1] == 'E') {
		if (strstr(resposta, "Nao autorizado") != NULL) {
			return 0;
			} else {
			return 1;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
 538:	a1 96       	adiw	r28, 0x21	; 33
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <atualiza_estado>:

void atualiza_estado(Estado proximo) {
 54a:	cf 93       	push	r28
 54c:	c8 2f       	mov	r28, r24
	if (isBlocked()) {
 54e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <isBlocked>
 552:	89 2b       	or	r24, r25
 554:	21 f0       	breq	.+8      	; 0x55e <atualiza_estado+0x14>
		estado_atual = ERROR_STATE;
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end>
		return;
 55c:	09 c0       	rjmp	.+18     	; 0x570 <atualiza_estado+0x26>
	}
	if (estado_atual == ERROR_STATE) {
 55e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
 562:	84 30       	cpi	r24, 0x04	; 4
 564:	19 f4       	brne	.+6      	; 0x56c <atualiza_estado+0x22>
		estado_atual = STANDBY;
 566:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <__data_end>
		return;
 56a:	02 c0       	rjmp	.+4      	; 0x570 <atualiza_estado+0x26>
	}
	estado_atual = proximo;
 56c:	c0 93 90 02 	sts	0x0290, r28	; 0x800290 <__data_end>
}
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <main>:

int main(void) {
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	66 97       	sbiw	r28, 0x16	; 22
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
	prepara_teclado();
 588:	0e 94 3a 06 	call	0xc74	; 0xc74 <prepara_teclado>
	LCD_iniciar();
 58c:	0e 94 88 00 	call	0x110	; 0x110 <LCD_iniciar>
	initUART();
 590:	0e 94 e6 04 	call	0x9cc	; 0x9cc <initUART>

	char codigo[7];
	char senha[7];
	const char* opcoes[] = { "1-Saque", "2-Deposito", "3-Pagamento", "4-Saldo" };
 594:	88 e0       	ldi	r24, 0x08	; 8
 596:	e0 e0       	ldi	r30, 0x00	; 0
 598:	f1 e0       	ldi	r31, 0x01	; 1
 59a:	de 01       	movw	r26, r28
 59c:	1f 96       	adiw	r26, 0x0f	; 15
 59e:	01 90       	ld	r0, Z+
 5a0:	0d 92       	st	X+, r0
 5a2:	8a 95       	dec	r24
 5a4:	e1 f7       	brne	.-8      	; 0x59e <main+0x2a>
	int indice = 0;
	char tecla = 0;

	while (1) {
		if (isBlocked()) estado_atual = ERROR_STATE;
 5a6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <isBlocked>
 5aa:	89 2b       	or	r24, r25
 5ac:	19 f0       	breq	.+6      	; 0x5b4 <main+0x40>
 5ae:	84 e0       	ldi	r24, 0x04	; 4
 5b0:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end>

		switch (estado_atual) {
 5b4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	31 f1       	breq	.+76     	; 0x608 <main+0x94>
 5bc:	60 f0       	brcs	.+24     	; 0x5d6 <main+0x62>
 5be:	82 30       	cpi	r24, 0x02	; 2
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <main+0x50>
 5c2:	f4 c0       	rjmp	.+488    	; 0x7ac <main+0x238>
 5c4:	84 30       	cpi	r24, 0x04	; 4
 5c6:	09 f0       	breq	.+2      	; 0x5ca <main+0x56>
 5c8:	f9 c0       	rjmp	.+498    	; 0x7bc <main+0x248>
			case ERROR_STATE:
			aguardar_desbloqueio();
 5ca:	0e 94 7e 01 	call	0x2fc	; 0x2fc <aguardar_desbloqueio>
			atualiza_estado(STANDBY);
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	0e 94 a5 02 	call	0x54a	; 0x54a <atualiza_estado>
			break;
 5d4:	e8 cf       	rjmp	.-48     	; 0x5a6 <main+0x32>

			case STANDBY:
			LCD_limpar();
 5d6:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			mensagem_Inicial();
 5da:	0e 94 53 00 	call	0xa6	; 0xa6 <mensagem_Inicial>
			while (varredura() == 0) {
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <main+0x7c>
				if (isBlocked()) {
 5e0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <isBlocked>
 5e4:	89 2b       	or	r24, r25
 5e6:	21 f0       	breq	.+8      	; 0x5f0 <main+0x7c>
					estado_atual = ERROR_STATE;
 5e8:	84 e0       	ldi	r24, 0x04	; 4
 5ea:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end>
					break;
 5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <main+0x84>
			break;

			case STANDBY:
			LCD_limpar();
			mensagem_Inicial();
			while (varredura() == 0) {
 5f0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <varredura>
 5f4:	88 23       	and	r24, r24
 5f6:	a1 f3       	breq	.-24     	; 0x5e0 <main+0x6c>
				if (isBlocked()) {
					estado_atual = ERROR_STATE;
					break;
				}
			}
			if (estado_atual != ERROR_STATE) atualiza_estado(AUTENTICACAO);
 5f8:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
 5fc:	84 30       	cpi	r24, 0x04	; 4
 5fe:	99 f2       	breq	.-90     	; 0x5a6 <main+0x32>
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 a5 02 	call	0x54a	; 0x54a <atualiza_estado>
 606:	cf cf       	rjmp	.-98     	; 0x5a6 <main+0x32>
			break;

			case AUTENTICACAO:
			if (!ler_codigo_aluno(codigo)) {
 608:	ce 01       	movw	r24, r28
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	0e 94 9a 01 	call	0x334	; 0x334 <ler_codigo_aluno>
 610:	89 2b       	or	r24, r25
 612:	19 f4       	brne	.+6      	; 0x61a <main+0xa6>
				estado_atual = STANDBY;
 614:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <__data_end>
				break;
 618:	c6 cf       	rjmp	.-116    	; 0x5a6 <main+0x32>
			}
			if (!ler_senha(senha)) {
 61a:	ce 01       	movw	r24, r28
 61c:	08 96       	adiw	r24, 0x08	; 8
 61e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ler_senha>
 622:	89 2b       	or	r24, r25
 624:	19 f4       	brne	.+6      	; 0x62c <main+0xb8>
				estado_atual = STANDBY;
 626:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <__data_end>
				break;
 62a:	bd cf       	rjmp	.-134    	; 0x5a6 <main+0x32>
			}
			if (validar_codigo_aluno(codigo, senha)) {
 62c:	be 01       	movw	r22, r28
 62e:	68 5f       	subi	r22, 0xF8	; 248
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	ce 01       	movw	r24, r28
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	0e 94 27 02 	call	0x44e	; 0x44e <validar_codigo_aluno>
 63a:	89 2b       	or	r24, r25
 63c:	b1 f0       	breq	.+44     	; 0x66a <main+0xf6>
				LCD_limpar();
 63e:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Codigo valido!");
 642:	45 e9       	ldi	r20, 0x95	; 149
 644:	51 e0       	ldi	r21, 0x01	; 1
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Processando...");
 64e:	44 ea       	ldi	r20, 0xA4	; 164
 650:	51 e0       	ldi	r21, 0x01	; 1
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				delay1ms(2000);
 65a:	80 ed       	ldi	r24, 0xD0	; 208
 65c:	97 e0       	ldi	r25, 0x07	; 7
 65e:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>
				atualiza_estado(MENU);
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	0e 94 a5 02 	call	0x54a	; 0x54a <atualiza_estado>
 668:	9e cf       	rjmp	.-196    	; 0x5a6 <main+0x32>
				} else {
				LCD_limpar();
 66a:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, "Conta invalida!");
 66e:	43 eb       	ldi	r20, 0xB3	; 179
 670:	51 e0       	ldi	r21, 0x01	; 1
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente novamente");
 67a:	43 ec       	ldi	r20, 0xC3	; 195
 67c:	51 e0       	ldi	r21, 0x01	; 1
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				delay1ms(2000);
 686:	80 ed       	ldi	r24, 0xD0	; 208
 688:	97 e0       	ldi	r25, 0x07	; 7
 68a:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>
				atualiza_estado(STANDBY);
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	0e 94 a5 02 	call	0x54a	; 0x54a <atualiza_estado>
 694:	88 cf       	rjmp	.-240    	; 0x5a6 <main+0x32>
			break;

			case MENU:
			indice = 0;
			while (estado_atual == MENU) {
				if (isBlocked()) {
 696:	0e 94 b5 05 	call	0xb6a	; 0xb6a <isBlocked>
 69a:	89 2b       	or	r24, r25
 69c:	21 f0       	breq	.+8      	; 0x6a6 <main+0x132>
					estado_atual = ERROR_STATE;
 69e:	84 e0       	ldi	r24, 0x04	; 4
 6a0:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end>
					break;
 6a4:	80 cf       	rjmp	.-256    	; 0x5a6 <main+0x32>
				}

				LCD_limpar();
 6a6:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
				LCD_Escrever_Linha(0, 0, opcoes[indice]);
 6aa:	f7 01       	movw	r30, r14
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	8c 0f       	add	r24, r28
 6b6:	9d 1f       	adc	r25, r29
 6b8:	e8 0f       	add	r30, r24
 6ba:	f9 1f       	adc	r31, r25
 6bc:	c6 84       	ldd	r12, Z+14	; 0x0e
 6be:	d7 84       	ldd	r13, Z+15	; 0x0f
 6c0:	a6 01       	movw	r20, r12
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				if (indice + 1 < 4)
 6ca:	57 01       	movw	r10, r14
 6cc:	9f ef       	ldi	r25, 0xFF	; 255
 6ce:	a9 1a       	sub	r10, r25
 6d0:	b9 0a       	sbc	r11, r25
 6d2:	e4 e0       	ldi	r30, 0x04	; 4
 6d4:	ae 16       	cp	r10, r30
 6d6:	b1 04       	cpc	r11, r1
 6d8:	c4 f4       	brge	.+48     	; 0x70a <main+0x196>
				LCD_Escrever_Linha(1, 0, opcoes[indice + 1]);
 6da:	f5 01       	movw	r30, r10
 6dc:	ee 0f       	add	r30, r30
 6de:	ff 1f       	adc	r31, r31
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	8c 0f       	add	r24, r28
 6e6:	9d 1f       	adc	r25, r29
 6e8:	e8 0f       	add	r30, r24
 6ea:	f9 1f       	adc	r31, r25
 6ec:	46 85       	ldd	r20, Z+14	; 0x0e
 6ee:	57 85       	ldd	r21, Z+15	; 0x0f
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 6f8:	08 c0       	rjmp	.+16     	; 0x70a <main+0x196>

				while ((tecla = varredura()) == 0) {
					if (isBlocked()) {
 6fa:	0e 94 b5 05 	call	0xb6a	; 0xb6a <isBlocked>
 6fe:	89 2b       	or	r24, r25
 700:	21 f0       	breq	.+8      	; 0x70a <main+0x196>
						estado_atual = ERROR_STATE;
 702:	84 e0       	ldi	r24, 0x04	; 4
 704:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end>
						break;
 708:	05 c0       	rjmp	.+10     	; 0x714 <main+0x1a0>
				LCD_limpar();
				LCD_Escrever_Linha(0, 0, opcoes[indice]);
				if (indice + 1 < 4)
				LCD_Escrever_Linha(1, 0, opcoes[indice + 1]);

				while ((tecla = varredura()) == 0) {
 70a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <varredura>
 70e:	18 2f       	mov	r17, r24
 710:	88 23       	and	r24, r24
 712:	99 f3       	breq	.-26     	; 0x6fa <main+0x186>
					if (isBlocked()) {
						estado_atual = ERROR_STATE;
						break;
					}
				}
				if (estado_atual == ERROR_STATE) break;
 714:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
 718:	84 30       	cpi	r24, 0x04	; 4
 71a:	09 f4       	brne	.+2      	; 0x71e <main+0x1aa>
 71c:	44 cf       	rjmp	.-376    	; 0x5a6 <main+0x32>
				delay1ms(300);
 71e:	8c e2       	ldi	r24, 0x2C	; 44
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>

				if (tecla == 'B' && indice < 2) indice++;
 726:	12 34       	cpi	r17, 0x42	; 66
 728:	21 f4       	brne	.+8      	; 0x732 <main+0x1be>
 72a:	92 e0       	ldi	r25, 0x02	; 2
 72c:	e9 16       	cp	r14, r25
 72e:	f1 04       	cpc	r15, r1
 730:	dc f1       	brlt	.+118    	; 0x7a8 <main+0x234>
				else if (tecla == 'A' && indice > 0) indice--;
 732:	11 34       	cpi	r17, 0x41	; 65
 734:	39 f4       	brne	.+14     	; 0x744 <main+0x1d0>
 736:	1e 14       	cp	r1, r14
 738:	1f 04       	cpc	r1, r15
 73a:	24 f4       	brge	.+8      	; 0x744 <main+0x1d0>
 73c:	e1 e0       	ldi	r30, 0x01	; 1
 73e:	ee 1a       	sub	r14, r30
 740:	f1 08       	sbc	r15, r1
 742:	36 c0       	rjmp	.+108    	; 0x7b0 <main+0x23c>
				else if (tecla == '*') {
 744:	1a 32       	cpi	r17, 0x2A	; 42
 746:	81 f4       	brne	.+32     	; 0x768 <main+0x1f4>
					LCD_limpar();
 748:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
					LCD_Escrever_Linha(0, 0, "Voltando...");
 74c:	43 ed       	ldi	r20, 0xD3	; 211
 74e:	51 e0       	ldi	r21, 0x01	; 1
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
					delay1ms(1000);
 758:	88 ee       	ldi	r24, 0xE8	; 232
 75a:	93 e0       	ldi	r25, 0x03	; 3
 75c:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>
					atualiza_estado(STANDBY);
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	0e 94 a5 02 	call	0x54a	; 0x54a <atualiza_estado>
					break;
 766:	1f cf       	rjmp	.-450    	; 0x5a6 <main+0x32>
					} else if (tecla == opcoes[indice][0]) {
 768:	f6 01       	movw	r30, r12
 76a:	80 81       	ld	r24, Z
 76c:	18 13       	cpse	r17, r24
 76e:	20 c0       	rjmp	.+64     	; 0x7b0 <main+0x23c>
					switch (tecla) {
 770:	11 33       	cpi	r17, 0x31	; 49
 772:	21 f0       	breq	.+8      	; 0x77c <main+0x208>
 774:	e8 f0       	brcs	.+58     	; 0x7b0 <main+0x23c>
 776:	15 33       	cpi	r17, 0x35	; 53
 778:	20 f0       	brcs	.+8      	; 0x782 <main+0x20e>
 77a:	1a c0       	rjmp	.+52     	; 0x7b0 <main+0x23c>
						case '1': realizar_saque(); break;
 77c:	0e 94 42 04 	call	0x884	; 0x884 <realizar_saque>
 780:	17 c0       	rjmp	.+46     	; 0x7b0 <main+0x23c>
						case '2':
						case '3':
						case '4':
						LCD_limpar();
 782:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
						LCD_Escrever_Linha(0, 0, "Funcao");
 786:	4f ed       	ldi	r20, 0xDF	; 223
 788:	51 e0       	ldi	r21, 0x01	; 1
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						LCD_Escrever_Linha(1, 0, "Nao disponivel");
 792:	46 ee       	ldi	r20, 0xE6	; 230
 794:	51 e0       	ldi	r21, 0x01	; 1
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
						delay1ms(2000);
 79e:	80 ed       	ldi	r24, 0xD0	; 208
 7a0:	97 e0       	ldi	r25, 0x07	; 7
 7a2:	0e 94 02 07 	call	0xe04	; 0xe04 <delay1ms>
						break;
 7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <main+0x23c>
					}
				}
				if (estado_atual == ERROR_STATE) break;
				delay1ms(300);

				if (tecla == 'B' && indice < 2) indice++;
 7a8:	75 01       	movw	r14, r10
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <main+0x23c>
	char tecla = 0;

	while (1) {
		if (isBlocked()) estado_atual = ERROR_STATE;

		switch (estado_atual) {
 7ac:	e1 2c       	mov	r14, r1
 7ae:	f1 2c       	mov	r15, r1
			}
			break;

			case MENU:
			indice = 0;
			while (estado_atual == MENU) {
 7b0:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
 7b4:	82 30       	cpi	r24, 0x02	; 2
 7b6:	09 f4       	brne	.+2      	; 0x7ba <main+0x246>
 7b8:	6e cf       	rjmp	.-292    	; 0x696 <main+0x122>
 7ba:	f5 ce       	rjmp	.-534    	; 0x5a6 <main+0x32>
				}
			}
			break;

			default:
			estado_atual = STANDBY;
 7bc:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <__data_end>
			break;
 7c0:	f2 ce       	rjmp	.-540    	; 0x5a6 <main+0x32>

000007c2 <enviar_mensagem_saque>:
		}
	}
}

// Função para enviar mensagem de saque para o servidor
void enviar_mensagem_saque(const char* valor) {
 7c2:	cf 92       	push	r12
 7c4:	df 92       	push	r13
 7c6:	ef 92       	push	r14
 7c8:	ff 92       	push	r15
 7ca:	0f 93       	push	r16
 7cc:	1f 93       	push	r17
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
 7d6:	bc 01       	movw	r22, r24
	// Copia o valor para a mensagem
	strncpy(&mensagem[3], valor, tamanho_valor);
	
	// Envia a mensagem via serial
	SerialEnviaChars(tamanho_mensagem, mensagem);
}
 7d8:	ed b6       	in	r14, 0x3d	; 61
 7da:	fe b6       	in	r15, 0x3e	; 62
	}
}

// Função para enviar mensagem de saque para o servidor
void enviar_mensagem_saque(const char* valor) {
	int tamanho_valor = strlen(valor);
 7dc:	fc 01       	movw	r30, r24
 7de:	01 90       	ld	r0, Z+
 7e0:	00 20       	and	r0, r0
 7e2:	e9 f7       	brne	.-6      	; 0x7de <enviar_mensagem_saque+0x1c>
 7e4:	31 97       	sbiw	r30, 0x01	; 1
 7e6:	af 01       	movw	r20, r30
 7e8:	48 1b       	sub	r20, r24
 7ea:	59 0b       	sbc	r21, r25
	int tamanho_mensagem = tamanho_valor + 3; // 'C' + 'S' + n + valor
 7ec:	6a 01       	movw	r12, r20
 7ee:	83 e0       	ldi	r24, 0x03	; 3
 7f0:	c8 0e       	add	r12, r24
 7f2:	d1 1c       	adc	r13, r1
	
	char mensagem[tamanho_mensagem];
 7f4:	ed b7       	in	r30, 0x3d	; 61
 7f6:	fe b7       	in	r31, 0x3e	; 62
 7f8:	ec 19       	sub	r30, r12
 7fa:	fd 09       	sbc	r31, r13
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	fe bf       	out	0x3e, r31	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	ed bf       	out	0x3d, r30	; 61
 806:	0d b7       	in	r16, 0x3d	; 61
 808:	1e b7       	in	r17, 0x3e	; 62
 80a:	0f 5f       	subi	r16, 0xFF	; 255
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// Monta a mensagem conforme o protocolo
	mensagem[0] = 'C'; // Comando
 80e:	83 e4       	ldi	r24, 0x43	; 67
 810:	81 83       	std	Z+1, r24	; 0x01
	mensagem[1] = 'S'; // Subcomando (Saque)
 812:	83 e5       	ldi	r24, 0x53	; 83
 814:	f8 01       	movw	r30, r16
 816:	81 83       	std	Z+1, r24	; 0x01
	mensagem[2] = (char)tamanho_valor; // Tamanho do valor
 818:	42 83       	std	Z+2, r20	; 0x02
	
	// Copia o valor para a mensagem
	strncpy(&mensagem[3], valor, tamanho_valor);
 81a:	8d b7       	in	r24, 0x3d	; 61
 81c:	9e b7       	in	r25, 0x3e	; 62
 81e:	04 96       	adiw	r24, 0x04	; 4
 820:	0e 94 3a 07 	call	0xe74	; 0xe74 <strncpy>
	
	// Envia a mensagem via serial
	SerialEnviaChars(tamanho_mensagem, mensagem);
 824:	b8 01       	movw	r22, r16
 826:	c6 01       	movw	r24, r12
 828:	0e 94 f5 04 	call	0x9ea	; 0x9ea <SerialEnviaChars>
}
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	f8 94       	cli
 830:	fe be       	out	0x3e, r15	; 62
 832:	0f be       	out	0x3f, r0	; 63
 834:	ed be       	out	0x3d, r14	; 61
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	0f 91       	pop	r16
 83e:	ff 90       	pop	r15
 840:	ef 90       	pop	r14
 842:	df 90       	pop	r13
 844:	cf 90       	pop	r12
 846:	08 95       	ret

00000848 <receber_resposta_servidor>:

// Função para receber resposta do servidor
char receber_resposta_servidor(void) {
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	00 d0       	rcall	.+0      	; 0x84e <receber_resposta_servidor+0x6>
 84e:	1f 92       	push	r1
 850:	cd b7       	in	r28, 0x3d	; 61
 852:	de b7       	in	r29, 0x3e	; 62
	char resposta[3];
	
	// Aguarda a resposta do servidor (3 bytes)
	SerialRecebeChars(3, resposta);
 854:	be 01       	movw	r22, r28
 856:	6f 5f       	subi	r22, 0xFF	; 255
 858:	7f 4f       	sbci	r23, 0xFF	; 255
 85a:	83 e0       	ldi	r24, 0x03	; 3
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 f6 05 	call	0xbec	; 0xbec <SerialRecebeChars>
	
	// Verifica se é uma resposta de saque
	if(resposta[0] == 'S' && resposta[1] == 'S') {
 862:	89 81       	ldd	r24, Y+1	; 0x01
 864:	83 35       	cpi	r24, 0x53	; 83
 866:	29 f4       	brne	.+10     	; 0x872 <receber_resposta_servidor+0x2a>
 868:	8a 81       	ldd	r24, Y+2	; 0x02
 86a:	83 35       	cpi	r24, 0x53	; 83
 86c:	21 f4       	brne	.+8      	; 0x876 <receber_resposta_servidor+0x2e>
		return resposta[2]; // Retorna 'O' ou 'I'
 86e:	8b 81       	ldd	r24, Y+3	; 0x03
 870:	03 c0       	rjmp	.+6      	; 0x878 <receber_resposta_servidor+0x30>
	}
	
	return 'E'; // Erro
 872:	85 e4       	ldi	r24, 0x45	; 69
 874:	01 c0       	rjmp	.+2      	; 0x878 <receber_resposta_servidor+0x30>
 876:	85 e4       	ldi	r24, 0x45	; 69
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	0f 90       	pop	r0
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	08 95       	ret

00000884 <realizar_saque>:
#include "LCD.h"
#include "teclado.h"
#include <util/delay.h>

// Função para realizar um saque
void realizar_saque(void) {
 884:	0f 93       	push	r16
 886:	1f 93       	push	r17
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
 890:	2a 97       	sbiw	r28, 0x0a	; 10
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	f8 94       	cli
 896:	de bf       	out	0x3e, r29	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	cd bf       	out	0x3d, r28	; 61
	char valor_saque[MAX_VALOR_SAQUE] = {0};
 89c:	fe 01       	movw	r30, r28
 89e:	31 96       	adiw	r30, 0x01	; 1
 8a0:	89 e0       	ldi	r24, 0x09	; 9
 8a2:	df 01       	movw	r26, r30
 8a4:	1d 92       	st	X+, r1
 8a6:	8a 95       	dec	r24
 8a8:	e9 f7       	brne	.-6      	; 0x8a4 <realizar_saque+0x20>
	int pos = 0;
	char tecla;
	
	// Solicita o valor do saque ao usuário
	LCD_limpar();
 8aa:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
 8ae:	4c e1       	ldi	r20, 0x1C	; 28
 8b0:	52 e0       	ldi	r21, 0x02	; 2
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
	LCD_Escrever_Linha(1, 0, "R$");
 8ba:	4c e2       	ldi	r20, 0x2C	; 44
 8bc:	52 e0       	ldi	r21, 0x02	; 2
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
#include <util/delay.h>

// Função para realizar um saque
void realizar_saque(void) {
	char valor_saque[MAX_VALOR_SAQUE] = {0};
	int pos = 0;
 8c6:	00 e0       	ldi	r16, 0x00	; 0
 8c8:	10 e0       	ldi	r17, 0x00	; 0
	LCD_limpar();
	LCD_Escrever_Linha(0, 0, "Valor do saque:");
	LCD_Escrever_Linha(1, 0, "R$");
	
	while(1) {
		tecla = varredura();
 8ca:	0e 94 7e 06 	call	0xcfc	; 0xcfc <varredura>
 8ce:	8a 87       	std	Y+10, r24	; 0x0a
		
		// Se for dígito e ainda houver espaço
		if(tecla >= '0' && tecla <= '9' && pos < (MAX_VALOR_SAQUE-1)) {
 8d0:	90 ed       	ldi	r25, 0xD0	; 208
 8d2:	98 0f       	add	r25, r24
 8d4:	9a 30       	cpi	r25, 0x0A	; 10
 8d6:	d8 f4       	brcc	.+54     	; 0x90e <__stack+0xf>
 8d8:	08 30       	cpi	r16, 0x08	; 8
 8da:	11 05       	cpc	r17, r1
 8dc:	c4 f4       	brge	.+48     	; 0x90e <__stack+0xf>
			valor_saque[pos] = tecla;
 8de:	e1 e0       	ldi	r30, 0x01	; 1
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	ec 0f       	add	r30, r28
 8e4:	fd 1f       	adc	r31, r29
 8e6:	e0 0f       	add	r30, r16
 8e8:	f1 1f       	adc	r31, r17
 8ea:	80 83       	st	Z, r24
			LCD_Escrever_Linha(1, 2+pos, &tecla);
 8ec:	62 e0       	ldi	r22, 0x02	; 2
 8ee:	60 0f       	add	r22, r16
 8f0:	ae 01       	movw	r20, r28
 8f2:	46 5f       	subi	r20, 0xF6	; 246
 8f4:	5f 4f       	sbci	r21, 0xFF	; 255
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			pos++;
 8fc:	0f 5f       	subi	r16, 0xFF	; 255
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 900:	8f e4       	ldi	r24, 0x4F	; 79
 902:	93 ec       	ldi	r25, 0xC3	; 195
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0x5>
 908:	00 c0       	rjmp	.+0      	; 0x90a <__stack+0xb>
 90a:	00 00       	nop
 90c:	de cf       	rjmp	.-68     	; 0x8ca <realizar_saque+0x46>
			_delay_ms(200); // Debounce
		}
		// Tecla enter (confirmar)
		else if(tecla == '#' && pos > 0) {
 90e:	83 32       	cpi	r24, 0x23	; 35
 910:	c1 f5       	brne	.+112    	; 0x982 <__stack+0x83>
 912:	10 16       	cp	r1, r16
 914:	11 06       	cpc	r1, r17
 916:	ac f5       	brge	.+106    	; 0x982 <__stack+0x83>
			valor_saque[pos] = '\0'; // Finaliza a string
 918:	e1 e0       	ldi	r30, 0x01	; 1
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	ec 0f       	add	r30, r28
 91e:	fd 1f       	adc	r31, r29
 920:	e0 0f       	add	r30, r16
 922:	f1 1f       	adc	r31, r17
 924:	10 82       	st	Z, r1
			
			// Envia a mensagem de saque para o servidor
			enviar_mensagem_saque(valor_saque);
 926:	ce 01       	movw	r24, r28
 928:	01 96       	adiw	r24, 0x01	; 1
 92a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <enviar_mensagem_saque>
			
			// Aguarda resposta do servidor
			char resposta = receber_resposta_servidor();
 92e:	0e 94 24 04 	call	0x848	; 0x848 <receber_resposta_servidor>
 932:	18 2f       	mov	r17, r24
			
			LCD_limpar();
 934:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			if(resposta == 'O') { // OK
 938:	1f 34       	cpi	r17, 0x4F	; 79
 93a:	69 f4       	brne	.+26     	; 0x956 <__stack+0x57>
				LCD_Escrever_Linha(0, 0, "Saque realizado!");
 93c:	4f e2       	ldi	r20, 0x2F	; 47
 93e:	52 e0       	ldi	r21, 0x02	; 2
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Retire o dinheiro");
 948:	40 e4       	ldi	r20, 0x40	; 64
 94a:	52 e0       	ldi	r21, 0x02	; 2
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 954:	0c c0       	rjmp	.+24     	; 0x96e <__stack+0x6f>
				} else { // Saldo Insuficiente
				LCD_Escrever_Linha(0, 0, "Saldo insuficiente");
 956:	42 e5       	ldi	r20, 0x52	; 82
 958:	52 e0       	ldi	r21, 0x02	; 2
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
				LCD_Escrever_Linha(1, 0, "Tente outro valor");
 962:	45 e6       	ldi	r20, 0x65	; 101
 964:	52 e0       	ldi	r21, 0x02	; 2
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 96e:	9f eb       	ldi	r25, 0xBF	; 191
 970:	a7 e2       	ldi	r26, 0x27	; 39
 972:	b9 e0       	ldi	r27, 0x09	; 9
 974:	91 50       	subi	r25, 0x01	; 1
 976:	a0 40       	sbci	r26, 0x00	; 0
 978:	b0 40       	sbci	r27, 0x00	; 0
 97a:	e1 f7       	brne	.-8      	; 0x974 <__stack+0x75>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <__stack+0x7f>
 97e:	00 00       	nop
 980:	1a c0       	rjmp	.+52     	; 0x9b6 <__stack+0xb7>
			}
			_delay_ms(3000);
			break;
		}
		// Tecla cancelar
		else if(tecla == '*') {
 982:	8a 32       	cpi	r24, 0x2A	; 42
 984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x89>
 986:	a1 cf       	rjmp	.-190    	; 0x8ca <realizar_saque+0x46>
			LCD_limpar();
 988:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_limpar>
			LCD_Escrever_Linha(0, 0, "Operacao");
 98c:	47 e7       	ldi	r20, 0x77	; 119
 98e:	52 e0       	ldi	r21, 0x02	; 2
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
			LCD_Escrever_Linha(1, 0, "cancelada");
 998:	40 e8       	ldi	r20, 0x80	; 128
 99a:	52 e0       	ldi	r21, 0x02	; 2
 99c:	60 e0       	ldi	r22, 0x00	; 0
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_Escrever_Linha>
 9a4:	2f e7       	ldi	r18, 0x7F	; 127
 9a6:	8a e1       	ldi	r24, 0x1A	; 26
 9a8:	96 e0       	ldi	r25, 0x06	; 6
 9aa:	21 50       	subi	r18, 0x01	; 1
 9ac:	80 40       	sbci	r24, 0x00	; 0
 9ae:	90 40       	sbci	r25, 0x00	; 0
 9b0:	e1 f7       	brne	.-8      	; 0x9aa <__stack+0xab>
 9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <__stack+0xb5>
 9b4:	00 00       	nop
			_delay_ms(2000);
			break;
		}
	}
}
 9b6:	2a 96       	adiw	r28, 0x0a	; 10
 9b8:	0f b6       	in	r0, 0x3f	; 63
 9ba:	f8 94       	cli
 9bc:	de bf       	out	0x3e, r29	; 62
 9be:	0f be       	out	0x3f, r0	; 63
 9c0:	cd bf       	out	0x3d, r28	; 61
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	1f 91       	pop	r17
 9c8:	0f 91       	pop	r16
 9ca:	08 95       	ret

000009cc <initUART>:


// Inicializa a UART com 19200 bps, 8N1
void initUART(void) {
	// Baud rate = 19200, UBRR = 51 para F_CPU = 16MHz
	UBRR0H = (51 >> 8);
 9cc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 51;
 9d0:	83 e3       	ldi	r24, 0x33	; 51
 9d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0A = 0; // Padrão
 9d6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

	// Ativa transmissor e receptor e interrupção RX completa
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 9da:	88 e9       	ldi	r24, 0x98	; 152
 9dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8 bits, sem paridade, 1 stop bit (8N1)
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 9e0:	86 e0       	ldi	r24, 0x06	; 6
 9e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

	sei(); // habilita interrupções globais
 9e6:	78 94       	sei
 9e8:	08 95       	ret

000009ea <SerialEnviaChars>:
}

// Envia uma string de tamanho definido
void SerialEnviaChars(int sizeS, char* string) {
 9ea:	ac 01       	movw	r20, r24
	for (int i = 0; i < sizeS; i++) {
 9ec:	20 e0       	ldi	r18, 0x00	; 0
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	0c c0       	rjmp	.+24     	; 0xa0a <SerialEnviaChars+0x20>
		while (!(UCSR0A & (1 << UDRE0))); // Espera registrador livre
 9f2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 9f6:	95 ff       	sbrs	r25, 5
 9f8:	fc cf       	rjmp	.-8      	; 0x9f2 <SerialEnviaChars+0x8>
		UDR0 = string[i];
 9fa:	fb 01       	movw	r30, r22
 9fc:	e2 0f       	add	r30, r18
 9fe:	f3 1f       	adc	r31, r19
 a00:	90 81       	ld	r25, Z
 a02:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	sei(); // habilita interrupções globais
}

// Envia uma string de tamanho definido
void SerialEnviaChars(int sizeS, char* string) {
	for (int i = 0; i < sizeS; i++) {
 a06:	2f 5f       	subi	r18, 0xFF	; 255
 a08:	3f 4f       	sbci	r19, 0xFF	; 255
 a0a:	24 17       	cp	r18, r20
 a0c:	35 07       	cpc	r19, r21
 a0e:	8c f3       	brlt	.-30     	; 0x9f2 <SerialEnviaChars+0x8>
		while (!(UCSR0A & (1 << UDRE0))); // Espera registrador livre
		UDR0 = string[i];
	}

	// Espera a transmissão do último byte
	while (!(UCSR0A & (1 << TXC0)));
 a10:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 a14:	86 ff       	sbrs	r24, 6
 a16:	fc cf       	rjmp	.-8      	; 0xa10 <SerialEnviaChars+0x26>
	UCSR0A |= (1 << TXC0); // Limpa flag TXC
 a18:	e0 ec       	ldi	r30, 0xC0	; 192
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	80 64       	ori	r24, 0x40	; 64
 a20:	80 83       	st	Z, r24
 a22:	08 95       	ret

00000a24 <SerialEnviaString>:
}

// Envia string null-terminated (mais comum)
void SerialEnviaString(char* str) {
	SerialEnviaChars(strlen(str), str);
 a24:	fc 01       	movw	r30, r24
 a26:	01 90       	ld	r0, Z+
 a28:	00 20       	and	r0, r0
 a2a:	e9 f7       	brne	.-6      	; 0xa26 <SerialEnviaString+0x2>
 a2c:	31 97       	sbiw	r30, 0x01	; 1
 a2e:	bc 01       	movw	r22, r24
 a30:	9f 01       	movw	r18, r30
 a32:	28 1b       	sub	r18, r24
 a34:	39 0b       	sbc	r19, r25
 a36:	c9 01       	movw	r24, r18
 a38:	0e 94 f5 04 	call	0x9ea	; 0x9ea <SerialEnviaChars>
 a3c:	08 95       	ret

00000a3e <__vector_18>:
}

// Buffer circular auxiliar para receber dados na ISR
ISR(USART_RX_vect) {
 a3e:	1f 92       	push	r1
 a40:	0f 92       	push	r0
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	0f 92       	push	r0
 a46:	11 24       	eor	r1, r1
 a48:	2f 93       	push	r18
 a4a:	3f 93       	push	r19
 a4c:	4f 93       	push	r20
 a4e:	5f 93       	push	r21
 a50:	6f 93       	push	r22
 a52:	7f 93       	push	r23
 a54:	8f 93       	push	r24
 a56:	9f 93       	push	r25
 a58:	af 93       	push	r26
 a5a:	bf 93       	push	r27
 a5c:	ef 93       	push	r30
 a5e:	ff 93       	push	r31
	char received = UDR0;
 a60:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	// Comando de 2 bytes: ST ou SL
	comando_buffer[comando_index++] = received;
 a64:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <comando_index>
 a68:	91 e0       	ldi	r25, 0x01	; 1
 a6a:	9e 0f       	add	r25, r30
 a6c:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <comando_index>
 a70:	f0 e0       	ldi	r31, 0x00	; 0
 a72:	e9 5e       	subi	r30, 0xE9	; 233
 a74:	fc 4f       	sbci	r31, 0xFC	; 252
 a76:	80 83       	st	Z, r24

	if (comando_index >= 2) {
 a78:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <comando_index>
 a7c:	82 30       	cpi	r24, 0x02	; 2
 a7e:	08 f4       	brcc	.+2      	; 0xa82 <__vector_18+0x44>
 a80:	63 c0       	rjmp	.+198    	; 0xb48 <__vector_18+0x10a>
		if (comando_buffer[0] == 'S' && comando_buffer[1] == 'T') {
 a82:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <comando_buffer>
 a86:	83 35       	cpi	r24, 0x53	; 83
 a88:	61 f4       	brne	.+24     	; 0xaa2 <__vector_18+0x64>
 a8a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <comando_buffer+0x1>
 a8e:	84 35       	cpi	r24, 0x54	; 84
 a90:	41 f4       	brne	.+16     	; 0xaa2 <__vector_18+0x64>
			blocked = 1;
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <blocked>
			SerialEnviaString("CT");
 a98:	8a e8       	ldi	r24, 0x8A	; 138
 a9a:	92 e0       	ldi	r25, 0x02	; 2
 a9c:	0e 94 12 05 	call	0xa24	; 0xa24 <SerialEnviaString>
 aa0:	51 c0       	rjmp	.+162    	; 0xb44 <__vector_18+0x106>
			} else if (comando_buffer[0] == 'S' && comando_buffer[1] == 'L') {
 aa2:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <comando_buffer>
 aa6:	83 35       	cpi	r24, 0x53	; 83
 aa8:	59 f4       	brne	.+22     	; 0xac0 <__vector_18+0x82>
 aaa:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <comando_buffer+0x1>
 aae:	8c 34       	cpi	r24, 0x4C	; 76
 ab0:	39 f4       	brne	.+14     	; 0xac0 <__vector_18+0x82>
			blocked = 0;
 ab2:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <blocked>
			SerialEnviaString("CL");
 ab6:	8d e8       	ldi	r24, 0x8D	; 141
 ab8:	92 e0       	ldi	r25, 0x02	; 2
 aba:	0e 94 12 05 	call	0xa24	; 0xa24 <SerialEnviaString>
 abe:	42 c0       	rjmp	.+132    	; 0xb44 <__vector_18+0x106>
			} else {
			// Não é comando especial, joga os bytes no buffer normal
			int next_head = (uart_head + 1) % UART_BUFFER_SIZE;
 ac0:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <uart_head>
 ac4:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <uart_head+0x1>
 ac8:	01 96       	adiw	r24, 0x01	; 1
 aca:	8f 77       	andi	r24, 0x7F	; 127
 acc:	90 78       	andi	r25, 0x80	; 128
 ace:	99 23       	and	r25, r25
 ad0:	24 f4       	brge	.+8      	; 0xada <__vector_18+0x9c>
 ad2:	01 97       	sbiw	r24, 0x01	; 1
 ad4:	80 68       	ori	r24, 0x80	; 128
 ad6:	9f 6f       	ori	r25, 0xFF	; 255
 ad8:	01 96       	adiw	r24, 0x01	; 1
			if (next_head != uart_tail) {
 ada:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <uart_tail>
 ade:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <uart_tail+0x1>
 ae2:	82 17       	cp	r24, r18
 ae4:	93 07       	cpc	r25, r19
 ae6:	69 f0       	breq	.+26     	; 0xb02 <__vector_18+0xc4>
				uart_buffer[uart_head] = comando_buffer[0];
 ae8:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <uart_head>
 aec:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <uart_head+0x1>
 af0:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <comando_buffer>
 af4:	e9 56       	subi	r30, 0x69	; 105
 af6:	fd 4f       	sbci	r31, 0xFD	; 253
 af8:	20 83       	st	Z, r18
				uart_head = next_head;
 afa:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <uart_head+0x1>
 afe:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <uart_head>
			}
			next_head = (uart_head + 1) % UART_BUFFER_SIZE;
 b02:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <uart_head>
 b06:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <uart_head+0x1>
 b0a:	01 96       	adiw	r24, 0x01	; 1
 b0c:	8f 77       	andi	r24, 0x7F	; 127
 b0e:	90 78       	andi	r25, 0x80	; 128
 b10:	99 23       	and	r25, r25
 b12:	24 f4       	brge	.+8      	; 0xb1c <__vector_18+0xde>
 b14:	01 97       	sbiw	r24, 0x01	; 1
 b16:	80 68       	ori	r24, 0x80	; 128
 b18:	9f 6f       	ori	r25, 0xFF	; 255
 b1a:	01 96       	adiw	r24, 0x01	; 1
			if (next_head != uart_tail) {
 b1c:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <uart_tail>
 b20:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <uart_tail+0x1>
 b24:	82 17       	cp	r24, r18
 b26:	93 07       	cpc	r25, r19
 b28:	69 f0       	breq	.+26     	; 0xb44 <__vector_18+0x106>
				uart_buffer[uart_head] = comando_buffer[1];
 b2a:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <uart_head>
 b2e:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <uart_head+0x1>
 b32:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <comando_buffer+0x1>
 b36:	e9 56       	subi	r30, 0x69	; 105
 b38:	fd 4f       	sbci	r31, 0xFD	; 253
 b3a:	20 83       	st	Z, r18
				uart_head = next_head;
 b3c:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <uart_head+0x1>
 b40:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <uart_head>
			}
		}
		comando_index = 0; // reseta para próxima leitura
 b44:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <comando_index>
	}
}
 b48:	ff 91       	pop	r31
 b4a:	ef 91       	pop	r30
 b4c:	bf 91       	pop	r27
 b4e:	af 91       	pop	r26
 b50:	9f 91       	pop	r25
 b52:	8f 91       	pop	r24
 b54:	7f 91       	pop	r23
 b56:	6f 91       	pop	r22
 b58:	5f 91       	pop	r21
 b5a:	4f 91       	pop	r20
 b5c:	3f 91       	pop	r19
 b5e:	2f 91       	pop	r18
 b60:	0f 90       	pop	r0
 b62:	0f be       	out	0x3f, r0	; 63
 b64:	0f 90       	pop	r0
 b66:	1f 90       	pop	r1
 b68:	18 95       	reti

00000b6a <isBlocked>:

int isBlocked(){
	if (blocked){
 b6a:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <blocked>
 b6e:	88 23       	and	r24, r24
 b70:	19 f0       	breq	.+6      	; 0xb78 <isBlocked+0xe>
		return 1;
 b72:	81 e0       	ldi	r24, 0x01	; 1
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	08 95       	ret
	}else{
		return 0;
 b78:	80 e0       	ldi	r24, 0x00	; 0
 b7a:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 b7c:	08 95       	ret

00000b7e <uart_buffer_empty>:

// Função auxiliar para verificar se buffer está vazio
int uart_buffer_empty() {
	return (uart_head == uart_tail);
 b7e:	40 91 95 02 	lds	r20, 0x0295	; 0x800295 <uart_head>
 b82:	50 91 96 02 	lds	r21, 0x0296	; 0x800296 <uart_head+0x1>
 b86:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <uart_tail>
 b8a:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <uart_tail+0x1>
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	42 17       	cp	r20, r18
 b92:	53 07       	cpc	r21, r19
 b94:	09 f0       	breq	.+2      	; 0xb98 <uart_buffer_empty+0x1a>
 b96:	80 e0       	ldi	r24, 0x00	; 0
}
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	08 95       	ret

00000b9c <uart_buffer_read_char>:

// Função auxiliar para ler um byte do buffer
int uart_buffer_read_char(char *c) {
 b9c:	cf 93       	push	r28
 b9e:	df 93       	push	r29
 ba0:	ec 01       	movw	r28, r24
	if (uart_buffer_empty()) {
 ba2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <uart_buffer_empty>
 ba6:	89 2b       	or	r24, r25
 ba8:	e1 f4       	brne	.+56     	; 0xbe2 <uart_buffer_read_char+0x46>
		return 0; // nada para ler
	}
	*c = uart_buffer[uart_tail];
 baa:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <uart_tail>
 bae:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <uart_tail+0x1>
 bb2:	e9 56       	subi	r30, 0x69	; 105
 bb4:	fd 4f       	sbci	r31, 0xFD	; 253
 bb6:	80 81       	ld	r24, Z
 bb8:	88 83       	st	Y, r24
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
 bba:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <uart_tail>
 bbe:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <uart_tail+0x1>
 bc2:	01 96       	adiw	r24, 0x01	; 1
 bc4:	8f 77       	andi	r24, 0x7F	; 127
 bc6:	90 78       	andi	r25, 0x80	; 128
 bc8:	99 23       	and	r25, r25
 bca:	24 f4       	brge	.+8      	; 0xbd4 <uart_buffer_read_char+0x38>
 bcc:	01 97       	sbiw	r24, 0x01	; 1
 bce:	80 68       	ori	r24, 0x80	; 128
 bd0:	9f 6f       	ori	r25, 0xFF	; 255
 bd2:	01 96       	adiw	r24, 0x01	; 1
 bd4:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <uart_tail+0x1>
 bd8:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <uart_tail>
	return 1;
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <uart_buffer_read_char+0x4a>
}

// Função auxiliar para ler um byte do buffer
int uart_buffer_read_char(char *c) {
	if (uart_buffer_empty()) {
		return 0; // nada para ler
 be2:	80 e0       	ldi	r24, 0x00	; 0
 be4:	90 e0       	ldi	r25, 0x00	; 0
	}
	*c = uart_buffer[uart_tail];
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;
	return 1;
}
 be6:	df 91       	pop	r29
 be8:	cf 91       	pop	r28
 bea:	08 95       	ret

00000bec <SerialRecebeChars>:

// Recebe exatamente `sizeS` caracteres e termina com \0, com timeout (~1s)
// Timeout é em número de loops com delay curto (aprox. 10ms por loop)
void SerialRecebeChars(int sizeS, char* string) {
 bec:	af 92       	push	r10
 bee:	bf 92       	push	r11
 bf0:	cf 92       	push	r12
 bf2:	df 92       	push	r13
 bf4:	ef 92       	push	r14
 bf6:	ff 92       	push	r15
 bf8:	0f 93       	push	r16
 bfa:	1f 93       	push	r17
 bfc:	cf 93       	push	r28
 bfe:	df 93       	push	r29
 c00:	1f 92       	push	r1
 c02:	cd b7       	in	r28, 0x3d	; 61
 c04:	de b7       	in	r29, 0x3e	; 62
 c06:	6c 01       	movw	r12, r24
 c08:	5b 01       	movw	r10, r22
	int received = 0;
	int timeout_count = 0;
 c0a:	e1 2c       	mov	r14, r1
 c0c:	f1 2c       	mov	r15, r1
}

// Recebe exatamente `sizeS` caracteres e termina com \0, com timeout (~1s)
// Timeout é em número de loops com delay curto (aprox. 10ms por loop)
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
 c0e:	00 e0       	ldi	r16, 0x00	; 0
 c10:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_count = 0;
	const int timeout_limit = 100; // ~1 segundo timeout (100 * 10ms)

	while (received < sizeS && timeout_count < timeout_limit) {
 c12:	19 c0       	rjmp	.+50     	; 0xc46 <SerialRecebeChars+0x5a>
		char c;
		if (uart_buffer_read_char(&c)) {
 c14:	ce 01       	movw	r24, r28
 c16:	01 96       	adiw	r24, 0x01	; 1
 c18:	0e 94 ce 05 	call	0xb9c	; 0xb9c <uart_buffer_read_char>
 c1c:	89 2b       	or	r24, r25
 c1e:	51 f0       	breq	.+20     	; 0xc34 <SerialRecebeChars+0x48>
			string[received++] = c;
 c20:	f5 01       	movw	r30, r10
 c22:	e0 0f       	add	r30, r16
 c24:	f1 1f       	adc	r31, r17
 c26:	89 81       	ldd	r24, Y+1	; 0x01
 c28:	80 83       	st	Z, r24
 c2a:	0f 5f       	subi	r16, 0xFF	; 255
 c2c:	1f 4f       	sbci	r17, 0xFF	; 255
			timeout_count = 0; // reinicia timeout ao receber caractere
 c2e:	e1 2c       	mov	r14, r1
 c30:	f1 2c       	mov	r15, r1
 c32:	09 c0       	rjmp	.+18     	; 0xc46 <SerialRecebeChars+0x5a>
 c34:	8f e3       	ldi	r24, 0x3F	; 63
 c36:	9c e9       	ldi	r25, 0x9C	; 156
 c38:	01 97       	sbiw	r24, 0x01	; 1
 c3a:	f1 f7       	brne	.-4      	; 0xc38 <SerialRecebeChars+0x4c>
 c3c:	00 c0       	rjmp	.+0      	; 0xc3e <SerialRecebeChars+0x52>
 c3e:	00 00       	nop
			} else {
			_delay_ms(10);
			timeout_count++;
 c40:	9f ef       	ldi	r25, 0xFF	; 255
 c42:	e9 1a       	sub	r14, r25
 c44:	f9 0a       	sbc	r15, r25
void SerialRecebeChars(int sizeS, char* string) {
	int received = 0;
	int timeout_count = 0;
	const int timeout_limit = 100; // ~1 segundo timeout (100 * 10ms)

	while (received < sizeS && timeout_count < timeout_limit) {
 c46:	0c 15       	cp	r16, r12
 c48:	1d 05       	cpc	r17, r13
 c4a:	24 f4       	brge	.+8      	; 0xc54 <SerialRecebeChars+0x68>
 c4c:	84 e6       	ldi	r24, 0x64	; 100
 c4e:	e8 16       	cp	r14, r24
 c50:	f1 04       	cpc	r15, r1
 c52:	04 f3       	brlt	.-64     	; 0xc14 <SerialRecebeChars+0x28>
			} else {
			_delay_ms(10);
			timeout_count++;
		}
	}
	string[received] = '\0';
 c54:	f5 01       	movw	r30, r10
 c56:	e0 0f       	add	r30, r16
 c58:	f1 1f       	adc	r31, r17
 c5a:	10 82       	st	Z, r1
}
 c5c:	0f 90       	pop	r0
 c5e:	df 91       	pop	r29
 c60:	cf 91       	pop	r28
 c62:	1f 91       	pop	r17
 c64:	0f 91       	pop	r16
 c66:	ff 90       	pop	r15
 c68:	ef 90       	pop	r14
 c6a:	df 90       	pop	r13
 c6c:	cf 90       	pop	r12
 c6e:	bf 90       	pop	r11
 c70:	af 90       	pop	r10
 c72:	08 95       	ret

00000c74 <prepara_teclado>:
#define COL4 PD2    // Coluna 4 no PD2

// Função inicial a ser chamada na main para inicialização 
void prepara_teclado(){
    // Configura linhas como saída
    DDRB |= (1 << LIN1) | (1 << LIN2);      // PB1 e PB0 como saídas
 c74:	84 b1       	in	r24, 0x04	; 4
 c76:	83 60       	ori	r24, 0x03	; 3
 c78:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << LIN3) | (1 << LIN4);      // PD7 e PD6 como saídas
 c7a:	8a b1       	in	r24, 0x0a	; 10
 c7c:	80 6c       	ori	r24, 0xC0	; 192
 c7e:	8a b9       	out	0x0a, r24	; 10
    
    // Configura colunas como entrada com pull-up
    DDRD &= ~((1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4)); // PD5, PD4, PD3 e PD2 como entradas
 c80:	8a b1       	in	r24, 0x0a	; 10
 c82:	83 7c       	andi	r24, 0xC3	; 195
 c84:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << COL1) | (1 << COL2) | (1 << COL3) | (1 << COL4);   // Habilitar resistores de Pull-up
 c86:	8b b1       	in	r24, 0x0b	; 11
 c88:	8c 63       	ori	r24, 0x3C	; 60
 c8a:	8b b9       	out	0x0b, r24	; 11
 c8c:	08 95       	ret

00000c8e <atraso_debounce>:
}

// Função para tempo de bounce da tecla 
void atraso_debounce(){
 c8e:	cf 93       	push	r28
 c90:	df 93       	push	r29
 c92:	00 d0       	rcall	.+0      	; 0xc94 <atraso_debounce+0x6>
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
    volatile unsigned short s;
    for(s=0;s<1000;s++); 
 c98:	1a 82       	std	Y+2, r1	; 0x02
 c9a:	19 82       	std	Y+1, r1	; 0x01
 c9c:	05 c0       	rjmp	.+10     	; 0xca8 <atraso_debounce+0x1a>
 c9e:	89 81       	ldd	r24, Y+1	; 0x01
 ca0:	9a 81       	ldd	r25, Y+2	; 0x02
 ca2:	01 96       	adiw	r24, 0x01	; 1
 ca4:	9a 83       	std	Y+2, r25	; 0x02
 ca6:	89 83       	std	Y+1, r24	; 0x01
 ca8:	89 81       	ldd	r24, Y+1	; 0x01
 caa:	9a 81       	ldd	r25, Y+2	; 0x02
 cac:	88 3e       	cpi	r24, 0xE8	; 232
 cae:	93 40       	sbci	r25, 0x03	; 3
 cb0:	b0 f3       	brcs	.-20     	; 0xc9e <atraso_debounce+0x10>
}
 cb2:	0f 90       	pop	r0
 cb4:	0f 90       	pop	r0
 cb6:	df 91       	pop	r29
 cb8:	cf 91       	pop	r28
 cba:	08 95       	ret

00000cbc <debounce>:

// Função para debounce das teclas 
char debounce (char pino) {
 cbc:	1f 93       	push	r17
 cbe:	cf 93       	push	r28
 cc0:	df 93       	push	r29
 cc2:	18 2f       	mov	r17, r24
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
 cc4:	c0 e0       	ldi	r28, 0x00	; 0
 cc6:	d0 e0       	ldi	r29, 0x00	; 0
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 cc8:	12 c0       	rjmp	.+36     	; 0xcee <debounce+0x32>
        atraso_debounce();
 cca:	0e 94 47 06 	call	0xc8e	; 0xc8e <atraso_debounce>
        teclaAtual = PIND & (1 << pino); // Lê o pino específico em PORTD
 cce:	29 b1       	in	r18, 0x09	; 9
 cd0:	81 e0       	ldi	r24, 0x01	; 1
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	01 2e       	mov	r0, r17
 cd6:	02 c0       	rjmp	.+4      	; 0xcdc <debounce+0x20>
 cd8:	88 0f       	add	r24, r24
 cda:	99 1f       	adc	r25, r25
 cdc:	0a 94       	dec	r0
 cde:	e2 f7       	brpl	.-8      	; 0xcd8 <debounce+0x1c>
 ce0:	82 23       	and	r24, r18
        if(ultimaTecla == teclaAtual){
 ce2:	d8 13       	cpse	r29, r24
 ce4:	02 c0       	rjmp	.+4      	; 0xcea <debounce+0x2e>
            counter++;
 ce6:	cf 5f       	subi	r28, 0xFF	; 255
 ce8:	01 c0       	rjmp	.+2      	; 0xcec <debounce+0x30>
        } else {
            counter = 0;
 cea:	c0 e0       	ldi	r28, 0x00	; 0
 cec:	d8 2f       	mov	r29, r24

// Função para debounce das teclas 
char debounce (char pino) {
    char teclaAtual = 0, ultimaTecla = 0, counter = 0;
    char const BOUNCE = 7;
    while(counter != BOUNCE){
 cee:	c7 30       	cpi	r28, 0x07	; 7
 cf0:	61 f7       	brne	.-40     	; 0xcca <debounce+0xe>
            counter = 0;
        }
        ultimaTecla = teclaAtual;
    }
    return teclaAtual;
}
 cf2:	8d 2f       	mov	r24, r29
 cf4:	df 91       	pop	r29
 cf6:	cf 91       	pop	r28
 cf8:	1f 91       	pop	r17
 cfa:	08 95       	ret

00000cfc <varredura>:

// Função para varredura do teclado matricial 
char varredura() {
 cfc:	cf 93       	push	r28
    char tecla = 0;
    
    // Desativa todas as linhas
    PORTB |= (1 << LIN1) | (1 << LIN2);
 cfe:	85 b1       	in	r24, 0x05	; 5
 d00:	83 60       	ori	r24, 0x03	; 3
 d02:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << LIN3) | (1 << LIN4);
 d04:	8b b1       	in	r24, 0x0b	; 11
 d06:	80 6c       	ori	r24, 0xC0	; 192
 d08:	8b b9       	out	0x0b, r24	; 11

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
 d0a:	85 b1       	in	r24, 0x05	; 5
 d0c:	8d 7f       	andi	r24, 0xFD	; 253
 d0e:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 d10:	85 e0       	ldi	r24, 0x05	; 5
 d12:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 d16:	88 23       	and	r24, r24
 d18:	11 f0       	breq	.+4      	; 0xd1e <varredura+0x22>
    return teclaAtual;
}

// Função para varredura do teclado matricial 
char varredura() {
    char tecla = 0;
 d1a:	c0 e0       	ldi	r28, 0x00	; 0
 d1c:	01 c0       	rjmp	.+2      	; 0xd20 <varredura+0x24>
    PORTB |= (1 << LIN1) | (1 << LIN2);
    PORTD |= (1 << LIN3) | (1 << LIN4);

    // Linha 1 (PB1)
    PORTB &= ~(1 << LIN1); // Ativa LIN1 (nível baixo)
    if (!debounce(COL1 - 0)) tecla = '1'; // COL1 = PD5 (5-0=5)
 d1e:	c1 e3       	ldi	r28, 0x31	; 49
    if (!debounce(COL2 - 0)) tecla = '2'; // COL2 = PD4 (4-0=4)
 d20:	84 e0       	ldi	r24, 0x04	; 4
 d22:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 d26:	81 11       	cpse	r24, r1
 d28:	01 c0       	rjmp	.+2      	; 0xd2c <varredura+0x30>
 d2a:	c2 e3       	ldi	r28, 0x32	; 50
    if (!debounce(COL3 - 0)) tecla = '3'; // COL3 = PD3 (3-0=3)
 d2c:	83 e0       	ldi	r24, 0x03	; 3
 d2e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 d32:	81 11       	cpse	r24, r1
 d34:	01 c0       	rjmp	.+2      	; 0xd38 <varredura+0x3c>
 d36:	c3 e3       	ldi	r28, 0x33	; 51
	if (!debounce(COL4 - 0)) tecla = 'A'; 
 d38:	82 e0       	ldi	r24, 0x02	; 2
 d3a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 d3e:	81 11       	cpse	r24, r1
 d40:	01 c0       	rjmp	.+2      	; 0xd44 <varredura+0x48>
 d42:	c1 e4       	ldi	r28, 0x41	; 65
    PORTB |= (1 << LIN1); // Desativa LIN1
 d44:	85 b1       	in	r24, 0x05	; 5
 d46:	82 60       	ori	r24, 0x02	; 2
 d48:	85 b9       	out	0x05, r24	; 5

    // Linha 2 (PB0)
    PORTB &= ~(1 << LIN2); // Ativa LIN2 (nível baixo)
 d4a:	85 b1       	in	r24, 0x05	; 5
 d4c:	8e 7f       	andi	r24, 0xFE	; 254
 d4e:	85 b9       	out	0x05, r24	; 5
    if (!debounce(COL1 - 0)) tecla = '4'; // COL1 = PD5
 d50:	85 e0       	ldi	r24, 0x05	; 5
 d52:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 d56:	81 11       	cpse	r24, r1
 d58:	01 c0       	rjmp	.+2      	; 0xd5c <varredura+0x60>
 d5a:	c4 e3       	ldi	r28, 0x34	; 52
    if (!debounce(COL2 - 0)) tecla = '5'; // COL2 = PD4
 d5c:	84 e0       	ldi	r24, 0x04	; 4
 d5e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 d62:	81 11       	cpse	r24, r1
 d64:	01 c0       	rjmp	.+2      	; 0xd68 <varredura+0x6c>
 d66:	c5 e3       	ldi	r28, 0x35	; 53
    if (!debounce(COL3 - 0)) tecla = '6'; // COL3 = PD3
 d68:	83 e0       	ldi	r24, 0x03	; 3
 d6a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 d6e:	81 11       	cpse	r24, r1
 d70:	01 c0       	rjmp	.+2      	; 0xd74 <varredura+0x78>
 d72:	c6 e3       	ldi	r28, 0x36	; 54
	if (!debounce(COL4 - 0)) tecla = 'B'; 
 d74:	82 e0       	ldi	r24, 0x02	; 2
 d76:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 d7a:	81 11       	cpse	r24, r1
 d7c:	01 c0       	rjmp	.+2      	; 0xd80 <varredura+0x84>
 d7e:	c2 e4       	ldi	r28, 0x42	; 66
    PORTB |= (1 << LIN2); // Desativa LIN2
 d80:	85 b1       	in	r24, 0x05	; 5
 d82:	81 60       	ori	r24, 0x01	; 1
 d84:	85 b9       	out	0x05, r24	; 5

    // Linha 3 (PD7)
    PORTD &= ~(1 << LIN3); // Ativa LIN3 (nível baixo)
 d86:	8b b1       	in	r24, 0x0b	; 11
 d88:	8f 77       	andi	r24, 0x7F	; 127
 d8a:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '7'; // COL1 = PD5
 d8c:	85 e0       	ldi	r24, 0x05	; 5
 d8e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 d92:	81 11       	cpse	r24, r1
 d94:	01 c0       	rjmp	.+2      	; 0xd98 <varredura+0x9c>
 d96:	c7 e3       	ldi	r28, 0x37	; 55
    if (!debounce(COL2 - 0)) tecla = '8'; // COL2 = PD4
 d98:	84 e0       	ldi	r24, 0x04	; 4
 d9a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 d9e:	81 11       	cpse	r24, r1
 da0:	01 c0       	rjmp	.+2      	; 0xda4 <varredura+0xa8>
 da2:	c8 e3       	ldi	r28, 0x38	; 56
    if (!debounce(COL3 - 0)) tecla = '9'; // COL3 = PD3
 da4:	83 e0       	ldi	r24, 0x03	; 3
 da6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 daa:	81 11       	cpse	r24, r1
 dac:	01 c0       	rjmp	.+2      	; 0xdb0 <varredura+0xb4>
 dae:	c9 e3       	ldi	r28, 0x39	; 57
	if (!debounce(COL4 - 0)) tecla = 'C'; 
 db0:	82 e0       	ldi	r24, 0x02	; 2
 db2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 db6:	81 11       	cpse	r24, r1
 db8:	01 c0       	rjmp	.+2      	; 0xdbc <varredura+0xc0>
 dba:	c3 e4       	ldi	r28, 0x43	; 67
    PORTD |= (1 << LIN3); // Desativa LIN3
 dbc:	8b b1       	in	r24, 0x0b	; 11
 dbe:	80 68       	ori	r24, 0x80	; 128
 dc0:	8b b9       	out	0x0b, r24	; 11

    // Linha 4 (PD6)
    PORTD &= ~(1 << LIN4); // Ativa LIN4 (nível baixo)
 dc2:	8b b1       	in	r24, 0x0b	; 11
 dc4:	8f 7b       	andi	r24, 0xBF	; 191
 dc6:	8b b9       	out	0x0b, r24	; 11
    if (!debounce(COL1 - 0)) tecla = '*'; // COL1 = PD5
 dc8:	85 e0       	ldi	r24, 0x05	; 5
 dca:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 dce:	81 11       	cpse	r24, r1
 dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <varredura+0xd8>
 dd2:	ca e2       	ldi	r28, 0x2A	; 42
    if (!debounce(COL2 - 0)) tecla = '0'; // COL2 = PD4
 dd4:	84 e0       	ldi	r24, 0x04	; 4
 dd6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 dda:	81 11       	cpse	r24, r1
 ddc:	01 c0       	rjmp	.+2      	; 0xde0 <varredura+0xe4>
 dde:	c0 e3       	ldi	r28, 0x30	; 48
    if (!debounce(COL3 - 0)) tecla = '#'; // COL3 = PD3
 de0:	83 e0       	ldi	r24, 0x03	; 3
 de2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 de6:	81 11       	cpse	r24, r1
 de8:	01 c0       	rjmp	.+2      	; 0xdec <varredura+0xf0>
 dea:	c3 e2       	ldi	r28, 0x23	; 35
	if (!debounce(COL4 - 0)) tecla = 'D'; 
 dec:	82 e0       	ldi	r24, 0x02	; 2
 dee:	0e 94 5e 06 	call	0xcbc	; 0xcbc <debounce>
 df2:	81 11       	cpse	r24, r1
 df4:	01 c0       	rjmp	.+2      	; 0xdf8 <varredura+0xfc>
 df6:	c4 e4       	ldi	r28, 0x44	; 68
    PORTD |= (1 << LIN4); // Desativa LIN4
 df8:	8b b1       	in	r24, 0x0b	; 11
 dfa:	80 64       	ori	r24, 0x40	; 64
 dfc:	8b b9       	out	0x0b, r24	; 11

    return tecla; // Retorna a tecla identificada ou 0 se nenhuma foi pressionada
 dfe:	8c 2f       	mov	r24, r28
 e00:	cf 91       	pop	r28
 e02:	08 95       	ret

00000e04 <delay1ms>:
	TCCR2B = 0b00001101;
	TIMSK2 |= (1 << 1); // habilita interrupções tmr2
	TCNT2 = 0;
	OCR2A = 255;
}
void delay1ms(int m){ // delay de t milisegundos
 e04:	ac 01       	movw	r20, r24
	int c1;
	TCCR0A = 0b00000000;
 e06:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;
 e08:	85 e0       	ldi	r24, 0x05	; 5
 e0a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 e0c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 241;
 e10:	81 ef       	ldi	r24, 0xF1	; 241
 e12:	86 bd       	out	0x26, r24	; 38
	for(c1 = 0 ; c1 < m ; c1++ ){
 e14:	20 e0       	ldi	r18, 0x00	; 0
 e16:	30 e0       	ldi	r19, 0x00	; 0
 e18:	08 c0       	rjmp	.+16     	; 0xe2a <delay1ms+0x26>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 e1a:	a9 9b       	sbis	0x15, 1	; 21
 e1c:	fe cf       	rjmp	.-4      	; 0xe1a <delay1ms+0x16>
		TCNT0 = 241;
 e1e:	91 ef       	ldi	r25, 0xF1	; 241
 e20:	96 bd       	out	0x26, r25	; 38
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
 e22:	92 e0       	ldi	r25, 0x02	; 2
 e24:	95 bb       	out	0x15, r25	; 21
	int c1;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000101;
	TIMSK0 = 0;
	TCNT0 = 241;
	for(c1 = 0 ; c1 < m ; c1++ ){
 e26:	2f 5f       	subi	r18, 0xFF	; 255
 e28:	3f 4f       	sbci	r19, 0xFF	; 255
 e2a:	24 17       	cp	r18, r20
 e2c:	35 07       	cpc	r19, r21
 e2e:	ac f3       	brlt	.-22     	; 0xe1a <delay1ms+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 241;
		TIFR0 = (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 e30:	15 bc       	out	0x25, r1	; 37
 e32:	08 95       	ret

00000e34 <delay1us>:
}
void delay1us(int u){ // delay de t microsegundos
 e34:	ac 01       	movw	r20, r24
	int c;
	TCCR0A = 0b00000000;
 e36:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000001;
 e38:	81 e0       	ldi	r24, 0x01	; 1
 e3a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0;
 e3c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 245;
 e40:	85 ef       	ldi	r24, 0xF5	; 245
 e42:	86 bd       	out	0x26, r24	; 38
	for(c = 0 ; c < u ; c++ ){
 e44:	20 e0       	ldi	r18, 0x00	; 0
 e46:	30 e0       	ldi	r19, 0x00	; 0
 e48:	09 c0       	rjmp	.+18     	; 0xe5c <delay1us+0x28>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
 e4a:	a9 9b       	sbis	0x15, 1	; 21
 e4c:	fe cf       	rjmp	.-4      	; 0xe4a <delay1us+0x16>
		TCNT0 = 245;
 e4e:	95 ef       	ldi	r25, 0xF5	; 245
 e50:	96 bd       	out	0x26, r25	; 38
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
 e52:	95 b3       	in	r25, 0x15	; 21
 e54:	92 60       	ori	r25, 0x02	; 2
 e56:	95 bb       	out	0x15, r25	; 21
	int c;
	TCCR0A = 0b00000000;
	TCCR0B = 0b00000001;
	TIMSK0 = 0;
	TCNT0 = 245;
	for(c = 0 ; c < u ; c++ ){
 e58:	2f 5f       	subi	r18, 0xFF	; 255
 e5a:	3f 4f       	sbci	r19, 0xFF	; 255
 e5c:	24 17       	cp	r18, r20
 e5e:	35 07       	cpc	r19, r21
 e60:	a4 f3       	brlt	.-24     	; 0xe4a <delay1us+0x16>
		while ((TIFR0 & (1<<1)) == 0);  /* monitor OCF0 flag */
		TCNT0 = 245;
		TIFR0 |= (1<<1); /* Clear OCF0 by writing 1 */
	}
	TCCR0B = 0;
 e62:	15 bc       	out	0x25, r1	; 37
 e64:	08 95       	ret

00000e66 <strcpy>:
 e66:	fb 01       	movw	r30, r22
 e68:	dc 01       	movw	r26, r24
 e6a:	01 90       	ld	r0, Z+
 e6c:	0d 92       	st	X+, r0
 e6e:	00 20       	and	r0, r0
 e70:	e1 f7       	brne	.-8      	; 0xe6a <strcpy+0x4>
 e72:	08 95       	ret

00000e74 <strncpy>:
 e74:	fb 01       	movw	r30, r22
 e76:	dc 01       	movw	r26, r24
 e78:	41 50       	subi	r20, 0x01	; 1
 e7a:	50 40       	sbci	r21, 0x00	; 0
 e7c:	48 f0       	brcs	.+18     	; 0xe90 <strncpy+0x1c>
 e7e:	01 90       	ld	r0, Z+
 e80:	0d 92       	st	X+, r0
 e82:	00 20       	and	r0, r0
 e84:	c9 f7       	brne	.-14     	; 0xe78 <strncpy+0x4>
 e86:	01 c0       	rjmp	.+2      	; 0xe8a <strncpy+0x16>
 e88:	1d 92       	st	X+, r1
 e8a:	41 50       	subi	r20, 0x01	; 1
 e8c:	50 40       	sbci	r21, 0x00	; 0
 e8e:	e0 f7       	brcc	.-8      	; 0xe88 <strncpy+0x14>
 e90:	08 95       	ret

00000e92 <strstr>:
 e92:	fb 01       	movw	r30, r22
 e94:	51 91       	ld	r21, Z+
 e96:	55 23       	and	r21, r21
 e98:	a9 f0       	breq	.+42     	; 0xec4 <strstr+0x32>
 e9a:	bf 01       	movw	r22, r30
 e9c:	dc 01       	movw	r26, r24
 e9e:	4d 91       	ld	r20, X+
 ea0:	45 17       	cp	r20, r21
 ea2:	41 11       	cpse	r20, r1
 ea4:	e1 f7       	brne	.-8      	; 0xe9e <strstr+0xc>
 ea6:	59 f4       	brne	.+22     	; 0xebe <strstr+0x2c>
 ea8:	cd 01       	movw	r24, r26
 eaa:	01 90       	ld	r0, Z+
 eac:	00 20       	and	r0, r0
 eae:	49 f0       	breq	.+18     	; 0xec2 <strstr+0x30>
 eb0:	4d 91       	ld	r20, X+
 eb2:	40 15       	cp	r20, r0
 eb4:	41 11       	cpse	r20, r1
 eb6:	c9 f3       	breq	.-14     	; 0xeaa <strstr+0x18>
 eb8:	fb 01       	movw	r30, r22
 eba:	41 11       	cpse	r20, r1
 ebc:	ef cf       	rjmp	.-34     	; 0xe9c <strstr+0xa>
 ebe:	81 e0       	ldi	r24, 0x01	; 1
 ec0:	90 e0       	ldi	r25, 0x00	; 0
 ec2:	01 97       	sbiw	r24, 0x01	; 1
 ec4:	08 95       	ret

00000ec6 <_exit>:
 ec6:	f8 94       	cli

00000ec8 <__stop_program>:
 ec8:	ff cf       	rjmp	.-2      	; 0xec8 <__stop_program>
